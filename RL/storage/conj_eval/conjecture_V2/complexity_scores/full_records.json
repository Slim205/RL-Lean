[
    {
        "name": "lean_workbook_26651",
        "split": "test",
        "formal_statement": "theorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by",
        "model_outputs": [
            "\n  simp [Coprime, Nat.gcd_eq_right_iff_dvd, Nat.gcd_add_mul_right_right]\n```",
            "\n  simp_rw [Coprime]\n  rw [gcd_add_mul_left_right]\n  rw [gcd_comm]\n  rw [gcd_comm]\n```",
            "\n  rw [Nat.coprime_comm]\n  rw [Nat.coprime_comm]\n  simp [Nat.coprime_mul_left, Nat.coprime_add_mul_left_left]\n```",
            "\n  rw [Coprime]\n  rw [Coprime]\n  simp [Nat.gcd_add_mul_left_right]\n```",
            "\n  rw [Nat.coprime_comm, Nat.coprime_comm]\n  refine' \u27e8fun h => Nat.coprime.coprime_add_mul_left_left k h, fun h => _\u27e9\n  rw [Nat.coprime_comm] at h\n  exact Nat.coprime.coprime_add_mul_left_right k h\n```",
            "\n  simp [Coprime, Nat.gcd_eq_right_iff_dvd, Nat.dvd_add_right]\n```",
            "\n  rw [Coprime]\n  simp [Nat.gcd_add_mul_left_right]\n```",
            "\n  simp only [Coprime, Nat.gcd_add_mul_left_right, Nat.gcd_mul_left]\n  rw [\u2190 Nat.mul_one m]\n  simp [Nat.mul_one, Nat.add_assoc]\n```",
            "\n  simp [Coprime, Nat.gcd_add_mul_left_right]\n```",
            "\n  rw [Coprime, Coprime, gcd_add_mul_left_right]\n```",
            "\n  rw [Coprime, Coprime, \u2190 gcd_mul_right, \u2190 gcd_add_mul_right_left]\n  simp\n```",
            "\n  rw [Coprime, Coprime, gcd_add_mul_right_right]\n```",
            "\n  rw [Coprime, Coprime, gcd_add_mul_left_right]\n```",
            "\n  simp only [Coprime, Nat.gcd_add_mul_left_right, Nat.gcd_eq_right]\n  tauto\n```",
            "\n  rw [Coprime, Coprime, gcd_add_mul_left_right]\n```",
            "\n  rw [Coprime, Coprime, gcd_add_mul_left_right]\n```",
            "\n  simp only [Coprime, Nat.gcd_add_mul_left_right]\n  constructor <;> intro h <;> simpa [h] using Nat.gcd_add_mul_left_right n 1 k\n```",
            "\n  rw [Coprime]\n  rw [Coprime]\n  simp [mul_comm, Nat.gcd_mul_left, Nat.gcd_add_mul_right_left]\n```",
            "\n  rw [coprime_comm]\n  simp_rw [coprime_comm]\n  apply Iff.intro\n  intro h\n  exact (Nat.coprime_add_mul_left_left m n k).mp h\n  intro h\n  exact (Nat.coprime_add_mul_left_left m n k).mpr h\n```",
            "\n  rw [Coprime, Coprime, Nat.gcd_add_mul_left_right]\n```",
            "\n  rw [coprime_comm]\n  simp [coprime_comm]\n```",
            "\n  simp [Coprime, Nat.gcd_add_mul_left_right]\n```",
            "\n  simp only [Coprime, Nat.gcd_add_mul_right_right, Nat.gcd_eq_right, Nat.gcd_eq_left]\n  tauto\n```",
            "\n  rw [Coprime, Coprime, Nat.gcd_add_mul_right_right]\n```",
            "\n  rw [Coprime]\n  rw [Coprime]\n  rw [gcd_add_mul_left_right]\n  exact Iff.rfl\n```",
            "\n  rw [add_comm, coprime_comm, coprime_mul_left_iff, coprime_comm]\n```",
            "\n  rw [coprime_comm]\n  simp [Coprime, Nat.gcd_comm]\n```",
            "\n  simp only [coprime_mul_left_iff, coprime_self_add_right, coprime_comm]\n```",
            "\n  rw [Coprime]\n  rw [Coprime]\n  simp [gcd_add_mul_left_right]\n```",
            "\n  simp [Coprime, Nat.gcd_eq_right]\n```",
            "\n  rw [coprime_comm, coprime_comm]\n  apply Iff.intro\n  intro h\n  have h' := h\n  rw [coprime_mul_left_iff_left] at h'\n  cases' h' with h\u2081 h\u2082\n  exact h\u2081\n  exfalso\n  exact Nat.not_coprime_zero_zero h\u2082\n  intro h\n  rw [coprime_mul_left_iff_left]\n  exact Or.inl h\n```",
            "\n  simp_rw [Coprime, Nat.gcd_eq_right_iff_dvd]\n  rw [Nat.dvd_add_right]\n  simp\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp [Coprime, Nat.gcd_eq_right_iff_dvd, Nat.gcd_add_mul_right_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp_rw [Coprime]\n  rw [gcd_add_mul_left_right]\n  rw [gcd_comm]\n  rw [gcd_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Nat.coprime_comm]\n  rw [Nat.coprime_comm]\n  simp [Nat.coprime_mul_left, Nat.coprime_add_mul_left_left]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime]\n  rw [Coprime]\n  simp [Nat.gcd_add_mul_left_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Nat.coprime_comm, Nat.coprime_comm]\n  refine' \u27e8fun h => Nat.coprime.coprime_add_mul_left_left k h, fun h => _\u27e9\n  rw [Nat.coprime_comm] at h\n  exact Nat.coprime.coprime_add_mul_left_right k h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp [Coprime, Nat.gcd_eq_right_iff_dvd, Nat.dvd_add_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime]\n  simp [Nat.gcd_add_mul_left_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp only [Coprime, Nat.gcd_add_mul_left_right, Nat.gcd_mul_left]\n  rw [\u2190 Nat.mul_one m]\n  simp [Nat.mul_one, Nat.add_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp [Coprime, Nat.gcd_add_mul_left_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime, Coprime, gcd_add_mul_left_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime, Coprime, \u2190 gcd_mul_right, \u2190 gcd_add_mul_right_left]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime, Coprime, gcd_add_mul_right_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime, Coprime, gcd_add_mul_left_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp only [Coprime, Nat.gcd_add_mul_left_right, Nat.gcd_eq_right]\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime, Coprime, gcd_add_mul_left_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime, Coprime, gcd_add_mul_left_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp only [Coprime, Nat.gcd_add_mul_left_right]\n  constructor <;> intro h <;> simpa [h] using Nat.gcd_add_mul_left_right n 1 k",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime]\n  rw [Coprime]\n  simp [mul_comm, Nat.gcd_mul_left, Nat.gcd_add_mul_right_left]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [coprime_comm]\n  simp_rw [coprime_comm]\n  apply Iff.intro\n  intro h\n  exact (Nat.coprime_add_mul_left_left m n k).mp h\n  intro h\n  exact (Nat.coprime_add_mul_left_left m n k).mpr h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime, Coprime, Nat.gcd_add_mul_left_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [coprime_comm]\n  simp [coprime_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp [Coprime, Nat.gcd_add_mul_left_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp only [Coprime, Nat.gcd_add_mul_right_right, Nat.gcd_eq_right, Nat.gcd_eq_left]\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime, Coprime, Nat.gcd_add_mul_right_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime]\n  rw [Coprime]\n  rw [gcd_add_mul_left_right]\n  exact Iff.rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [add_comm, coprime_comm, coprime_mul_left_iff, coprime_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [coprime_comm]\n  simp [Coprime, Nat.gcd_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp only [coprime_mul_left_iff, coprime_self_add_right, coprime_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [Coprime]\n  rw [Coprime]\n  simp [gcd_add_mul_left_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp [Coprime, Nat.gcd_eq_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  rw [coprime_comm, coprime_comm]\n  apply Iff.intro\n  intro h\n  have h' := h\n  rw [coprime_mul_left_iff_left] at h'\n  cases' h' with h\u2081 h\u2082\n  exact h\u2081\n  exfalso\n  exact Nat.not_coprime_zero_zero h\u2082\n  intro h\n  rw [coprime_mul_left_iff_left]\n  exact Or.inl h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem coprime_add_mul_left_right (m n k : \u2115) : Coprime m (n + m * k) \u2194 Coprime m n := by\n  simp_rw [Coprime, Nat.gcd_eq_right_iff_dvd]\n  rw [Nat.dvd_add_right]\n  simp"
        ]
    },
    {
        "name": "lean_workbook_26679",
        "split": "test",
        "formal_statement": "theorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by",
        "model_outputs": [
            "\n  rw [mul_comm]\n  ring\n```",
            "\n  rw [add_comm, add_sub_cancel, pow_mul, mul_comm]\n```",
            "\n  rw [pow_mul]\n  ring_nf\n```",
            "\n  rw [mul_comm]\n  ring_nf\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  ring\n```",
            "\n  rw [mul_comm, pow_mul, mul_comm]\n  ring_nf\n```",
            "\n  rw [mul_comm, pow_two]\n  ring_nf\n```",
            "\n  rw [mul_comm]\n  ring_nf\n```",
            "\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u2115)]\n  ring_nf\n```",
            "\n  rw [mul_comm]\n  ring\n```",
            "\n  rw [pow_two]\n  ring_nf\n```",
            "\n  rw [mul_comm, pow_mul]\n  ring\n```",
            "\n  rw [mul_comm]\n  ring\n```",
            "\n  rw [mul_comm]\n  rw [pow_mul]\n  ring_nf\n```",
            "\n  rw [mul_comm]\n  ring\n```",
            "\n  rw [mul_comm]\n  ring\n```",
            "\n  rw [pow_mul]\n  ring\n```",
            "\n  induction m <;> simp_all [pow_add, pow_mul, mul_comm, mul_left_comm]\n  <;> ring_nf\n  <;> linarith\n```",
            "\n  rw [pow_mul]\n  ring_nf\n```",
            "\n  rw [mul_comm]\n  ring_nf\n```",
            "\n  rw [pow_mul]\n  ring\n```",
            "\n  simp only [pow_two, mul_add, mul_sub, add_mul, sub_mul]\n  ring\n```",
            "\n  rw [pow_mul]\n  ring\n```",
            "\n  rw [mul_comm, pow_mul]\n  ring\n```",
            "\n  rw [mul_comm]\n  simp only [pow_mul, pow_add, pow_one, mul_comm, mul_assoc, mul_left_comm]\n  ring\n```",
            "\n  induction m <;> simp_all [Nat.mul_succ, pow_succ, Nat.mul_one, Nat.mul_zero]\n  ring_nf\n```",
            "\n  rw [pow_mul]\n  ring\n```",
            "\n  induction n <;> simp [*, Nat.mul_succ, pow_add, pow_one, pow_mul] at *\n  linarith\n```",
            "\n  rw [mul_comm]\n  ring_nf\n```",
            "\n  induction n <;> simp_all [Nat.mul_succ, pow_add, pow_one, pow_two]\n  <;> ring_nf\n  <;> linarith\n```",
            "\n  rw [mul_comm]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [add_comm, add_sub_cancel, pow_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [pow_mul]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [\u2190 sub_eq_zero]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [\u2190 sub_eq_zero]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm, pow_mul, mul_comm]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm, pow_two]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u2115)]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [pow_two]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm, pow_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  rw [pow_mul]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [pow_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  induction m <;> simp_all [pow_add, pow_mul, mul_comm, mul_left_comm]\n  <;> ring_nf\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [pow_mul]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [pow_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  simp only [pow_two, mul_add, mul_sub, add_mul, sub_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [pow_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm, pow_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  simp only [pow_mul, pow_add, pow_one, mul_comm, mul_assoc, mul_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  induction m <;> simp_all [Nat.mul_succ, pow_succ, Nat.mul_one, Nat.mul_zero]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [pow_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  induction n <;> simp [*, Nat.mul_succ, pow_add, pow_one, pow_mul] at *\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  induction n <;> simp_all [Nat.mul_succ, pow_add, pow_one, pow_two]\n  <;> ring_nf\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_add_pow_sub_pow (m n : \u2115) : (x ^ 2 + 1) ^ m - x ^ (2 * n) = x ^ (2 * n) * (x ^ 2 - 1) ^ m := by\n  rw [mul_comm]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_11294",
        "split": "test",
        "formal_statement": "theorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by",
        "model_outputs": [
            "\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  simp [two_mul, sin_add, two_mul, cos_add, sin_add, cos_add, sin_sub]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]\n```",
            "\n  rw [\u2190 mul_left_inj' (two_ne_zero' \u211d)]\n  simp [sin_two_mul, mul_add, mul_left_comm, mul_comm]\n```",
            "\n  rw [two_mul, sin_add]\n  ring\n```",
            "\n  rw [\u2190 mul_left_inj' (two_ne_zero' \u211d), sin_add]\n  simp only [two_mul, add_mul, mul_add, mul_assoc, mul_comm, mul_left_comm]\n  ring\n```",
            "\n  rw [two_mul, sin_add]\n  rw [two_mul, add_mul, mul_comm]\n```",
            "\n  have h : 2 * x = x + x := by ring\n  rw [h]\n  rw [sin_add, two_mul, two_mul]\n  ring\n```",
            "\n  rw [\u2190 mul_left_inj' (two_ne_zero' \u211d), \u2190 sin_sq_add_cos_sq x, \u2190 sin_sq_add_cos_sq x]\n  ring_nf\n  simp only [sin_sq, cos_sq]\n  ring\n```",
            "\n  have h : x + x = 2 * x := by ring\n  rw [\u2190 h]\n  rw [sin_add]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  rw [\u2190 sin_sq_add_cos_sq x]\n  rw [two_mul, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]\n```",
            "\n  have h\u2080 : x + x = 2 * x := by ring\n  rw [\u2190 h\u2080]\n  rw [sin_add]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]\n```",
            "\n  rw [two_mul, sin_add]\n  ring\n```",
            "\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  simp [sin_add, two_mul]\n```",
            "\n  have : sin (2 * x) = sin (x + x) := by congr 1; ring\n  rw [this]\n  rw [sin_add]\n  ring\n```",
            "\n  rw [two_mul, sin_add]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul]\n  simp only [sin_add, cos_add]\n  ring\n```",
            "\n  rw [two_mul, sin_add, mul_comm]\n  simp only [two_mul, sin_add, cos_add, sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]\n```",
            "\n  rw [two_mul, sin_add]\n  ring\n```",
            "\n  rw [two_mul]\n  simp [sin_add, two_mul, add_mul, mul_add, mul_comm, mul_left_comm, mul_assoc]\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add]\n  rw [two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  simp [two_mul, sin_add, two_mul, cos_add, sin_add, cos_add, sin_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [\u2190 mul_left_inj' (two_ne_zero' \u211d)]\n  simp [sin_two_mul, mul_add, mul_left_comm, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [\u2190 mul_left_inj' (two_ne_zero' \u211d), sin_add]\n  simp only [two_mul, add_mul, mul_add, mul_assoc, mul_comm, mul_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add]\n  rw [two_mul, add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  have h : 2 * x = x + x := by ring\n  rw [h]\n  rw [sin_add, two_mul, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [\u2190 mul_left_inj' (two_ne_zero' \u211d), \u2190 sin_sq_add_cos_sq x, \u2190 sin_sq_add_cos_sq x]\n  ring_nf\n  simp only [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  have h : x + x = 2 * x := by ring\n  rw [\u2190 h]\n  rw [sin_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  rw [\u2190 sin_sq_add_cos_sq x]\n  rw [two_mul, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  have h\u2080 : x + x = 2 * x := by ring\n  rw [\u2190 h\u2080]\n  rw [sin_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  simp [sin_add, two_mul]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  have : sin (2 * x) = sin (x + x) := by congr 1; ring\n  rw [this]\n  rw [sin_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul]\n  simp only [sin_add, cos_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, mul_comm]\n  simp only [two_mul, sin_add, cos_add, sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul]\n  simp [sin_add, two_mul, add_mul, mul_add, mul_comm, mul_left_comm, mul_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add]\n  rw [two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_26505",
        "split": "test",
        "formal_statement": "theorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by",
        "model_outputs": [
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  apply Int.floor_le.mpr\n  linarith\n```",
            "\n  apply Int.cast_le.1\n  simpa using h\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact_mod_cast Int.floor_le_of_le h\n```",
            "\n  apply Int.floor_le_of_le\n  linarith\n```",
            "\n  apply Int.floor_le_of_le\n  linarith\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact Int.floor_le_of_le h\n```",
            "\n  apply Int.floor_le_of_le\n  linarith\n```",
            "\n  apply Int.floor_le_of_le\n  linarith\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact Int.floor_le_of_le h\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact Int.floor_le_of_le (by linarith)\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact Int.floor_le_of_le h\n```",
            "\n  exact_mod_cast Int.floor_le_of_le h\n```",
            "\n  exact Int.floor_le_of_le h\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  apply Int.floor_le_of_le\n  linarith\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  exact (Int.floor_le x).trans h\n```",
            "\n  apply Int.floor_le_of_le\n  linarith\n```",
            "\n  exact (Int.floor_le x).trans h\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  apply Int.floor_le.mpr\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  apply Int.cast_le.1\n  simpa using h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact_mod_cast Int.floor_le_of_le h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  apply Int.floor_le_of_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  apply Int.floor_le_of_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact Int.floor_le_of_le h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  apply Int.floor_le_of_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  apply Int.floor_le_of_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact Int.floor_le_of_le h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact Int.floor_le_of_le (by linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact Int.floor_le_of_le h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact_mod_cast Int.floor_le_of_le h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact Int.floor_le_of_le h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  apply Int.floor_le_of_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  apply Int.floor_le_of_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem floor_le_one (x : \u211d) (h : x \u2264 1) : \u230ax\u230b \u2264 1 := by\n  exact (Int.floor_le x).trans h"
        ]
    },
    {
        "name": "lean_workbook_plus_71315",
        "split": "test",
        "formal_statement": "theorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by",
        "model_outputs": [
            "\n  field_simp [Real.cos_two_mul, Real.sin_two_mul, hx]\n  ring_nf\n```",
            "\n  rcases hx with hx | hx\n  <;> simp_all [cos_sq, sin_sq]\n  <;> field_simp [hx]\n  <;> ring_nf\n  <;> rw [Real.sqrt_sq]\n  <;> linarith\n```",
            "\n  rcases hx with hx | hx <;> field_simp [hx] <;> ring_nf\n```",
            "\n  field_simp [sq, mul_assoc]\n  rcases hx with (hx | hx) <;> simp_all [sin_sq, cos_sq]\n```",
            "\n  cases' hx with hx hx <;> field_simp [hx, sq_sqrt]\n  <;> ring_nf\n  <;> simp [sin_sq]\n```",
            "\n  field_simp [Real.sqrt_eq_iff_sq_eq, sq_nonneg, hx, cos_two_mul]\n  ring_nf\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  field_simp [hx]\n  ring\n```",
            "\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  rcases hx with hx | hx <;> simp_all [sin_sq_add_cos_sq]\n```",
            "\n  rw [mul_comm]\n  field_simp [hx, sq_sqrt, cos_sq, mul_self_nonneg]\n  ring\n```",
            "\n  field_simp [sq]\n  cases' hx with hx hx <;> simp_all [sin_sq, cos_sq]\n```",
            "\n  rcases hx with (hx | hx) <;> field_simp [hx, sq_sqrt, sq_nonneg]\n  <;> ring_nf\n  <;> simp [cos_two_mul]\n```",
            "\n  rw [\u2190 mul_one (\u221a(1 - (2 * x).cos ^ 2)), \u2190 mul_right_inj' two_ne_zero]\n  field_simp [sin_two_mul, hx]\n  ring\n```",
            "\n  norm_num at hx\n  rcases hx with hx | hx <;> field_simp [hx] <;> ring_nf\n```",
            "\n  rcases hx with (hx | hx) <;> simp_all [sin_sq, cos_sq]\n  field_simp [hx, Real.sqrt_ne_zero'.mpr hx]\n  ring_nf\n```",
            "\n  cases' hx with hx hx <;> field_simp [hx] <;> ring_nf\n  <;> simp [cos_sq, sin_sq, add_comm, sub_eq_add_neg]\n```",
            "\n  cases' hx with hx hx <;> field_simp [hx] <;> ring_nf\n  <;> simp_all [cos_sq]\n  <;> ring\n```",
            "\n  rw [eq_comm]\n  field_simp [hx]\n  ring_nf\n  rw [\u2190 sq_sqrt (show 0 \u2264 1 - (2 * x).cos ^ 2 by linarith [cos_sq_le_one (2 * x)])]\n  ring_nf\n```",
            "\n  rcases hx with hx | hx\n  all_goals\n    field_simp [hx, sq_nonneg]\n    ring_nf\n    rw [Real.sqrt_sq_eq_abs]\n    rw [abs_of_nonneg]\n    \u00b7 linarith [cos_le_one (2 * x)]\n    \u00b7 linarith [cos_le_one (2 * x)]\n```",
            "\n  simp_all [cos_two_mul]\n```",
            "\n  rcases hx with hx | hx <;> field_simp [hx, sq_nonneg] <;> ring_nf\n```",
            "\n  rcases hx with hx | hx <;> field_simp [hx, sq_sqrt, mul_comm]\n  <;> ring_nf\n  <;> rw [\u2190 sq_sqrt] <;> ring_nf\n  <;> field_simp [hx, sq_sqrt, mul_comm]\n```",
            "\n  rcases hx with (h | h) <;> field_simp [h] <;> ring\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  field_simp [sin_sq, cos_sq, hx]\n  ring\n```",
            "\n  simp_all [div_eq_mul_inv, mul_inv, mul_assoc]\n  field_simp [hx]\n  ring_nf\n```",
            "\n  cases' hx with hx hx <;> field_simp [hx] <;> ring_nf <;> simp [cos_sq, sin_sq, add_comm, sub_eq_add_neg, add_assoc]\n```",
            "\n  cases' hx with hx hx <;>\n  field_simp [hx] <;>\n  ring_nf <;>\n  rw [Real.sqrt_sq_eq_abs] <;>\n  rw [abs_of_nonneg] <;>\n  nlinarith [Real.cos_sq_le_one (2 * x)]\n```",
            "\n  field_simp [hx]\n  ring\n```",
            "\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  rcases hx with (hx | hx) <;> field_simp [hx, mul_comm, mul_left_comm, mul_assoc, sq]\n  <;> ring_nf\n  <;> norm_num\n  <;> linarith [cos_sq_le_one (2 * x)]\n```",
            "\n  field_simp [sin_sq_add_cos_sq, *]\n  ring_nf\n```",
            "\n  rw [\u2190 mul_left_inj' two_ne_zero]\n  field_simp [sin_sq, cos_sq]\n  ring_nf\n```",
            "\n  rcases hx with (h | h) <;> simp_all [sin_sq, cos_sq, add_mul, mul_add, mul_assoc, mul_comm, mul_left_comm,\n    sub_mul, mul_sub, sub_sub_eq_add_sub, add_sub_assoc]\n  <;> field_simp <;> linarith\n```",
            "\n  norm_num\n  field_simp [hx]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  field_simp [Real.cos_two_mul, Real.sin_two_mul, hx]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rcases hx with hx | hx\n  <;> simp_all [cos_sq, sin_sq]\n  <;> field_simp [hx]\n  <;> ring_nf\n  <;> rw [Real.sqrt_sq]\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rcases hx with hx | hx <;> field_simp [hx] <;> ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  field_simp [sq, mul_assoc]\n  rcases hx with (hx | hx) <;> simp_all [sin_sq, cos_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  cases' hx with hx hx <;> field_simp [hx, sq_sqrt]\n  <;> ring_nf\n  <;> simp [sin_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  field_simp [Real.sqrt_eq_iff_sq_eq, sq_nonneg, hx, cos_two_mul]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rw [\u2190 sub_eq_zero]\n  field_simp [hx]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  rcases hx with hx | hx <;> simp_all [sin_sq_add_cos_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rw [mul_comm]\n  field_simp [hx, sq_sqrt, cos_sq, mul_self_nonneg]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  field_simp [sq]\n  cases' hx with hx hx <;> simp_all [sin_sq, cos_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rcases hx with (hx | hx) <;> field_simp [hx, sq_sqrt, sq_nonneg]\n  <;> ring_nf\n  <;> simp [cos_two_mul]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rw [\u2190 mul_one (\u221a(1 - (2 * x).cos ^ 2)), \u2190 mul_right_inj' two_ne_zero]\n  field_simp [sin_two_mul, hx]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  norm_num at hx\n  rcases hx with hx | hx <;> field_simp [hx] <;> ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rcases hx with (hx | hx) <;> simp_all [sin_sq, cos_sq]\n  field_simp [hx, Real.sqrt_ne_zero'.mpr hx]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  cases' hx with hx hx <;> field_simp [hx] <;> ring_nf\n  <;> simp [cos_sq, sin_sq, add_comm, sub_eq_add_neg]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  cases' hx with hx hx <;> field_simp [hx] <;> ring_nf\n  <;> simp_all [cos_sq]\n  <;> ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rw [eq_comm]\n  field_simp [hx]\n  ring_nf\n  rw [\u2190 sq_sqrt (show 0 \u2264 1 - (2 * x).cos ^ 2 by linarith [cos_sq_le_one (2 * x)])]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rcases hx with hx | hx\n  all_goals\n    field_simp [hx, sq_nonneg]\n    ring_nf\n    rw [Real.sqrt_sq_eq_abs]\n    rw [abs_of_nonneg]\n    \u00b7 linarith [cos_le_one (2 * x)]\n    \u00b7 linarith [cos_le_one (2 * x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  simp_all [cos_two_mul]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rcases hx with hx | hx <;> field_simp [hx, sq_nonneg] <;> ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rcases hx with hx | hx <;> field_simp [hx, sq_sqrt, mul_comm]\n  <;> ring_nf\n  <;> rw [\u2190 sq_sqrt] <;> ring_nf\n  <;> field_simp [hx, sq_sqrt, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rcases hx with (h | h) <;> field_simp [h] <;> ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rw [\u2190 sub_eq_zero]\n  field_simp [sin_sq, cos_sq, hx]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  simp_all [div_eq_mul_inv, mul_inv, mul_assoc]\n  field_simp [hx]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  cases' hx with hx hx <;> field_simp [hx] <;> ring_nf <;> simp [cos_sq, sin_sq, add_comm, sub_eq_add_neg, add_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  cases' hx with hx hx <;>\n  field_simp [hx] <;>\n  ring_nf <;>\n  rw [Real.sqrt_sq_eq_abs] <;>\n  rw [abs_of_nonneg] <;>\n  nlinarith [Real.cos_sq_le_one (2 * x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  field_simp [hx]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  rcases hx with (hx | hx) <;> field_simp [hx, mul_comm, mul_left_comm, mul_assoc, sq]\n  <;> ring_nf\n  <;> norm_num\n  <;> linarith [cos_sq_le_one (2 * x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  field_simp [sin_sq_add_cos_sq, *]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rw [\u2190 mul_left_inj' two_ne_zero]\n  field_simp [sin_sq, cos_sq]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  rcases hx with (h | h) <;> simp_all [sin_sq, cos_sq, add_mul, mul_add, mul_assoc, mul_comm, mul_left_comm,\n    sub_mul, mul_sub, sub_sub_eq_add_sub, add_sub_assoc]\n  <;> field_simp <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem div_sin_add_cos_eq_sqrt_two {x : \u211d} (hx : sin x \u2260 0 \u2228 cos x \u2260 0) :     (2 * x).cos / ((1 + (2 * x).cos) * \u221a(1 - (2 * x).cos ^ 2)) = \u221a(1 - (2 * x).cos ^ 2) := by\n  norm_num\n  field_simp [hx]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_55620",
        "split": "test",
        "formal_statement": "theorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by",
        "model_outputs": [
            "\n  linarith\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            " linarith\n\ntheorem y_le_y_sub_z (y z : \u211d) (h : 0 \u2264 y - z) : y \u2264 y - z := by linarith\n\ntheorem y_sub_z_le_y (y z : \u211d) : y - z \u2264 y := by linarith\n\ntheorem y_sub_z_le_y' (y z : \u211d) : y - z \u2264 y + 0 := by linarith\n\ntheorem y_le_y_sub_z' (y z : \u211d) : y \u2264 y - z + 0 := by linarith\n\ntheorem y_sub_z_le_y'' (y z : \u211d) : y - z \u2264 y + 0 + 0 := by linarith\n\ntheorem y_le_y_sub_z'' (y z : \u211d) : y \u2264 y - z + 0 + 0 := by linarith\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            " linarith\n```",
            "\n  linarith [mul_self_nonneg (y - x)]\n```",
            "\n  linarith\n```",
            "\n  linarith [h]\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            " linarith\n```",
            "\n  linarith\n```",
            "\n  linarith [sq_nonneg (y - z), sq_nonneg (y + z), h]\n```",
            "\n  linarith [h]\n```",
            " linarith\n```",
            "\n  linarith\n```",
            " linarith\n```",
            " linarith\n```",
            "\n  linarith [h]\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            "\n  linarith [h]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by linarith\n\ntheorem y_le_y_sub_z (y z : \u211d) (h : 0 \u2264 y - z) : y \u2264 y - z := by linarith\n\ntheorem y_sub_z_le_y (y z : \u211d) : y - z \u2264 y := by linarith\n\ntheorem y_sub_z_le_y' (y z : \u211d) : y - z \u2264 y + 0 := by linarith\n\ntheorem y_le_y_sub_z' (y z : \u211d) : y \u2264 y - z + 0 := by linarith\n\ntheorem y_sub_z_le_y'' (y z : \u211d) : y - z \u2264 y + 0 + 0 := by linarith\n\ntheorem y_le_y_sub_z'' (y z : \u211d) : y \u2264 y - z + 0 + 0 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith [mul_self_nonneg (y - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith [sq_nonneg (y - z), sq_nonneg (y + z), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_mul_z_le_y_mul_y (x y z : \u211d) (h : x * z \u2264 y * y) : 0 \u2264 y * y - x * z := by\n  linarith [h]"
        ]
    },
    {
        "name": "lean_workbook_plus_77378",
        "split": "test",
        "formal_statement": "theorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by",
        "model_outputs": [
            "\n  simp_all [PythagoreanTriple, mul_pow, mul_add, mul_comm, mul_left_comm, mul_assoc]\n```",
            "\n  cases' h with h\u2081 h\u2082\n  constructor\n  <;> simp_all [mul_pow]\n  <;> nlinarith\n```",
            "\n  cases' h with h h\n  use k * k * h.1\n  ring\n  cases' h with h h\n  use k * k * h.2.1\n  ring\n  use k * k * h.2.2\n  ring\n```",
            "\n  cases' h with h\u2081 h\u2082\n  constructor <;> simp [h\u2081, h\u2082, mul_add, add_mul, mul_assoc, mul_comm, mul_left_comm]\n```",
            "\n  rcases h with \u27e8h\u2081, h\u2082, h\u2083\u27e9\n  use by rw [mul_pow, h\u2081, mul_pow, mul_pow, h\u2082]\n  use by rw [mul_pow, h\u2082, mul_pow, mul_pow, h\u2083]\n  use by rw [mul_pow, h\u2083]; ring\n```",
            "\n  cases' h with h\u2080 h\u2081\n  constructor <;> ring_nf\n  <;> nlinarith\n```",
            "\n  cases' h with h\u2081 h\u2082\n  constructor <;> rw [mul_pow] <;> linarith\n```",
            "\n  simp_all [PythagoreanTriple, mul_pow]\n  ring\n```",
            "\n  cases' h with h h\n  simp only [h, mul_pow, Int.mul_add, Int.add_mul]\n  ring_nf\n  simp only [h, mul_comm k, mul_left_comm k, mul_assoc k]\n```",
            "\n  simp only [PythagoreanTriple] at h \u22a2\n  rw [mul_pow, mul_pow]\n  rw [h]\n  ring\n```",
            "\n  obtain \u27e8h\u2081, h\u2082\u27e9 := h\n  constructor <;> ring_nf <;> simp [h\u2081, h\u2082]\n```",
            "\n  obtain \u27e8h\u2081, h\u2082, h\u2083\u27e9 := h\n  simp only [h\u2081, h\u2082, h\u2083, mul_add, mul_pow, mul_comm, mul_left_comm, mul_assoc,\n    add_mul, add_assoc]\n  ring_nf\n  simp [sq, mul_comm, mul_left_comm, mul_assoc]\n```",
            "\n  cases' h with h h\n  simp_all [PythagoreanTriple, mul_pow]\n```",
            "\n  cases' h with h\u2081 h\u2082\n  constructor <;> ring_nf <;> simp_all only [sq, mul_assoc, mul_comm, mul_left_comm]\n```",
            "\n  simp only [PythagoreanTriple, mul_pow, \u2190 mul_assoc]\n  simp [h.assoc]\n```",
            "\n  simp only [PythagoreanTriple, mul_pow]\n  linarith\n```",
            "\n  obtain \u27e8h\u2081, h\u2082, h\u2083\u27e9 := h\n  exact \u27e8by rw [mul_pow, mul_pow, mul_pow, h\u2081], by rw [mul_pow, mul_pow, mul_pow, h\u2082], by\n    rw [mul_pow, mul_pow, mul_pow, h\u2083]\u27e9\n```",
            "\n  rcases h with \u27e8h\u2081, h\u2082\u27e9\n  constructor <;> ring\n```",
            "\n  cases' h with h\u2080 h\u2081\n  constructor <;>\n  ring_nf <;>\n  linarith\n```",
            "\n  rcases h with \u27e8hx, hy, hz\u27e9\n  simp [Int.mul_pow, hx, hy, hz]\n```",
            "\n  cases' h with h h\n  all_goals simp_all [PythagoreanTriple, mul_pow, mul_comm, mul_left_comm, mul_assoc]\n```",
            "\n  rcases h with \u27e8h\u2081, h\u2082\u27e9\n  constructor <;>\n  simp only [mul_add, add_mul, mul_sub, sub_mul, mul_pow, h\u2081, h\u2082]\n  <;>\n  ring\n```",
            "\n  cases' h with h\u2081 h\u2082\n  subst_vars\n  simp [mul_pow, mul_assoc, mul_comm, mul_left_comm]\n```",
            "\n  cases' h with h\u2081 h\u2082\n  constructor <;> simp [h\u2081, h\u2082, mul_add, mul_comm, mul_left_comm, mul_assoc, add_assoc]\n```",
            "\n  rcases h with \u27e8h\u2081, h\u2082\u27e9\n  constructor <;>\n  linarith\n```",
            "\n  cases' h with h h <;> simp_all [PythagoreanTriple, mul_pow]\n  <;> linarith\n```",
            "\n  rw [PythagoreanTriple] at h \u22a2\n  rw [\u2190 mul_pow]\n  rw [\u2190 mul_pow] at h\n  rw [\u2190 mul_pow]\n  linarith\n```",
            "\n  simp_all [PythagoreanTriple, mul_pow]\n  ring_nf\n```",
            "\n  cases' h with h\u2080 h\u2081\n  constructor <;> simp [mul_pow, h\u2080, h\u2081]\n```",
            "\n  simp only [PythagoreanTriple] at h \u22a2\n  rw [mul_pow]\n  rw [mul_pow]\n  rw [mul_pow]\n  linarith\n```",
            "\n  cases' h with h h'\n  constructor <;> simp [h, h']\n```",
            "\n  cases' h with h h <;> simp_all [PythagoreanTriple, mul_pow, mul_add, mul_comm, mul_left_comm,\n    mul_assoc]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  simp_all [PythagoreanTriple, mul_pow, mul_add, mul_comm, mul_left_comm, mul_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h\u2081 h\u2082\n  constructor\n  <;> simp_all [mul_pow]\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h h\n  use k * k * h.1\n  ring\n  cases' h with h h\n  use k * k * h.2.1\n  ring\n  use k * k * h.2.2\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h\u2081 h\u2082\n  constructor <;> simp [h\u2081, h\u2082, mul_add, add_mul, mul_assoc, mul_comm, mul_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  rcases h with \u27e8h\u2081, h\u2082, h\u2083\u27e9\n  use by rw [mul_pow, h\u2081, mul_pow, mul_pow, h\u2082]\n  use by rw [mul_pow, h\u2082, mul_pow, mul_pow, h\u2083]\n  use by rw [mul_pow, h\u2083]; ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h\u2080 h\u2081\n  constructor <;> ring_nf\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h\u2081 h\u2082\n  constructor <;> rw [mul_pow] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  simp_all [PythagoreanTriple, mul_pow]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h h\n  simp only [h, mul_pow, Int.mul_add, Int.add_mul]\n  ring_nf\n  simp only [h, mul_comm k, mul_left_comm k, mul_assoc k]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  simp only [PythagoreanTriple] at h \u22a2\n  rw [mul_pow, mul_pow]\n  rw [h]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  obtain \u27e8h\u2081, h\u2082\u27e9 := h\n  constructor <;> ring_nf <;> simp [h\u2081, h\u2082]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  obtain \u27e8h\u2081, h\u2082, h\u2083\u27e9 := h\n  simp only [h\u2081, h\u2082, h\u2083, mul_add, mul_pow, mul_comm, mul_left_comm, mul_assoc,\n    add_mul, add_assoc]\n  ring_nf\n  simp [sq, mul_comm, mul_left_comm, mul_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h h\n  simp_all [PythagoreanTriple, mul_pow]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h\u2081 h\u2082\n  constructor <;> ring_nf <;> simp_all only [sq, mul_assoc, mul_comm, mul_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  simp only [PythagoreanTriple, mul_pow, \u2190 mul_assoc]\n  simp [h.assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  simp only [PythagoreanTriple, mul_pow]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  obtain \u27e8h\u2081, h\u2082, h\u2083\u27e9 := h\n  exact \u27e8by rw [mul_pow, mul_pow, mul_pow, h\u2081], by rw [mul_pow, mul_pow, mul_pow, h\u2082], by\n    rw [mul_pow, mul_pow, mul_pow, h\u2083]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  rcases h with \u27e8h\u2081, h\u2082\u27e9\n  constructor <;> ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h\u2080 h\u2081\n  constructor <;>\n  ring_nf <;>\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  rcases h with \u27e8hx, hy, hz\u27e9\n  simp [Int.mul_pow, hx, hy, hz]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h h\n  all_goals simp_all [PythagoreanTriple, mul_pow, mul_comm, mul_left_comm, mul_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  rcases h with \u27e8h\u2081, h\u2082\u27e9\n  constructor <;>\n  simp only [mul_add, add_mul, mul_sub, sub_mul, mul_pow, h\u2081, h\u2082]\n  <;>\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h\u2081 h\u2082\n  subst_vars\n  simp [mul_pow, mul_assoc, mul_comm, mul_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h\u2081 h\u2082\n  constructor <;> simp [h\u2081, h\u2082, mul_add, mul_comm, mul_left_comm, mul_assoc, add_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  rcases h with \u27e8h\u2081, h\u2082\u27e9\n  constructor <;>\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h h <;> simp_all [PythagoreanTriple, mul_pow]\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  rw [PythagoreanTriple] at h \u22a2\n  rw [\u2190 mul_pow]\n  rw [\u2190 mul_pow] at h\n  rw [\u2190 mul_pow]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  simp_all [PythagoreanTriple, mul_pow]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h\u2080 h\u2081\n  constructor <;> simp [mul_pow, h\u2080, h\u2081]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  simp only [PythagoreanTriple] at h \u22a2\n  rw [mul_pow]\n  rw [mul_pow]\n  rw [mul_pow]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h h'\n  constructor <;> simp [h, h']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pythagorean_triple.mul {x y z : \u2124} (h : PythagoreanTriple x y z) (k : \u2124) :      PythagoreanTriple (k * x) (k * y) (k * z) := by\n  cases' h with h h <;> simp_all [PythagoreanTriple, mul_pow, mul_add, mul_comm, mul_left_comm,\n    mul_assoc]"
        ]
    },
    {
        "name": "lean_workbook_31727",
        "split": "test",
        "formal_statement": "theorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by",
        "model_outputs": [
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    sq_nonneg (a * b + b * c + c * a)]\n```",
            "\n  rw [\u2190 sub_nonneg]\n  simp only [mul_sub, mul_add, add_sub_assoc, add_sub_cancel, add_sub_cancel']\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) = (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  simp only [habc, mul_one, mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  simp only [mul_add, mul_comm, mul_left_comm, mul_right_comm, mul_assoc]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a * b + b * c + c * a)]\n```",
            "\n  simp only [mul_assoc, mul_comm, mul_left_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  simp_all only [sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  rw [habc]; nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  simp only [habc, mul_one, sub_sub, mul_add, mul_sub, sub_sub_sub_cancel_right,\n    mul_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  rw [\u2190 le_sub_iff_add_le]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a + b + c - 3 * (a * b + b * c + c * a))]\n```",
            "\n  simp_all only [mul_add, mul_sub, mul_one, mul_neg, sub_neg_eq_add, add_assoc, add_left_comm,\n    add_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    sq_nonneg (a * b + b * c + c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  rw [\u2190 sub_nonneg]\n  simp only [mul_sub, mul_add, add_sub_assoc, add_sub_cancel, add_sub_cancel']\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  have h : (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) = (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  simp only [habc, mul_one, mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  simp only [mul_add, mul_comm, mul_left_comm, mul_right_comm, mul_assoc]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a * b + b * c + c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  simp only [mul_assoc, mul_comm, mul_left_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  simp_all only [sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  rw [habc]; nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  simp only [habc, mul_one, sub_sub, mul_add, mul_sub, sub_sub_sub_cancel_right,\n    mul_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  rw [\u2190 le_sub_iff_add_le]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a + b + c - 3 * (a * b + b * c + c * a))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  simp_all only [mul_add, mul_sub, mul_one, mul_neg, sub_neg_eq_add, add_assoc, add_left_comm,\n    add_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem lemma2 {a b c : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) :      (a * b + b * c + c * a) * (a + b + c) \u2264      (a ^ 2 + b ^ 2 + c ^ 2) * (a + b + c) - (a * b * c) * (a + b + c - 3 * (a * b + b * c + c * a)) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]"
        ]
    },
    {
        "name": "lean_workbook_plus_63816",
        "split": "test",
        "formal_statement": "theorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by",
        "model_outputs": [
            "\n  omega\n```",
            "\n  ring\n```",
            "\n  omega\n```",
            "\n  norm_num [Nat.div_eq_of_lt, Nat.div_eq_of_lt, Nat.div_eq_of_lt]\n```",
            "\n  omega\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  rw [mul_comm]\n  ring\n```",
            "\n  omega\n```",
            "\n  simp_all only [mul_add, mul_one, add_assoc, add_left_comm, add_right_comm, mul_comm]\n  ring\n```",
            "\n  cases a <;> cases b <;> simp_all\n```",
            "\n  ring_nf\n```",
            "\n  ring\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  rw [mul_comm]\n  ring\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  cases a <;> cases b <;> ring\n```",
            "\n  omega\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  simp_all only [mul_div_cancel_left]\n  omega\n```",
            "\n  simp [Nat.mul_div_cancel_left, Nat.add_assoc, Nat.add_comm]\n```",
            "\n  norm_num [Nat.mul_div_cancel_left, Nat.mul_div_cancel_left, Nat.mul_div_cancel_left]\n```",
            "\n  norm_num [Nat.mul_div_cancel_left, Nat.mul_div_cancel_left]\n```",
            "\n  simp only [mul_comm, mul_assoc, mul_left_comm, add_comm, add_left_comm, add_assoc, one_add_one_eq_two]\n  omega\n```",
            "\n  norm_num [Nat.mul_div_cancel_left a (by norm_num : 0 < 2)]\n  norm_num [Nat.mul_div_cancel_left b (by norm_num : 0 < 4)]\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  ring\n```",
            "\n  rw [mul_comm]\n  omega\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  norm_num [Nat.div_eq_of_lt, Nat.div_eq_of_lt, Nat.div_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  rw [mul_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  simp_all only [mul_add, mul_one, add_assoc, add_left_comm, add_right_comm, mul_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  cases a <;> cases b <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  rw [mul_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  cases a <;> cases b <;> ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  simp_all only [mul_div_cancel_left]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  simp [Nat.mul_div_cancel_left, Nat.add_assoc, Nat.add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  norm_num [Nat.mul_div_cancel_left, Nat.mul_div_cancel_left, Nat.mul_div_cancel_left]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  norm_num [Nat.mul_div_cancel_left, Nat.mul_div_cancel_left]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  simp only [mul_comm, mul_assoc, mul_left_comm, add_comm, add_left_comm, add_assoc, one_add_one_eq_two]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  norm_num [Nat.mul_div_cancel_left a (by norm_num : 0 < 2)]\n  norm_num [Nat.mul_div_cancel_left b (by norm_num : 0 < 4)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem two_mul_div_two_add_div_two_mul_two_add_one : 2 * a / 2 + b / (2 * 2) + 1 = a + b / 4 + 1 := by\n  rw [mul_comm]\n  omega"
        ]
    },
    {
        "name": "lean_workbook_plus_28338",
        "split": "test",
        "formal_statement": "theorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by",
        "model_outputs": [
            "\n  constructor <;> intro h <;>\n  simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega\n```",
            "\n  simp [Nat.dvd_iff_mod_eq_zero, Nat.modEq_iff_dvd, Nat.mod_eq_of_lt]\n```",
            "\n  simp [Nat.modEq_iff_dvd, Nat.dvd_iff_mod_eq_zero]\n```",
            "\n  constructor <;> intro h\n  next =>\n    rw [Nat.ModEq]\n    rcases h with \u27e8k, rfl\u27e9\n    simp [Nat.mul_mod_right]\n  next =>\n    rw [Nat.ModEq] at h\n    use n / m\n    rw [\u2190 Nat.mod_add_div n m]\n    simp [h]\n```",
            "\n  constructor <;> intro h <;>\n  simp_all [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]\n  <;>\n  omega\n```",
            "\n  constructor <;> intro h\n  next =>\n    rw [Nat.modEq_zero_iff_dvd]\n    assumption\n  next =>\n    rw [Nat.modEq_zero_iff_dvd] at h\n    assumption\n```",
            "\n  apply Iff.intro <;> intro h <;> simp_all [Nat.modEq_iff_dvd, Nat.dvd_iff_mod_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro h <;> simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro h <;> simp [h, Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega\n```",
            "\n  simp [Nat.modEq_iff_dvd]\n```",
            "\n  constructor <;> intro h <;> simp_all [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]\n  omega\n```",
            "\n  constructor\n  rintro \u27e8k, rfl\u27e9\n  simp [Nat.modEq_iff_dvd, mul_comm]\n  intro h\n  rw [Nat.modEq_iff_dvd] at h\n  exact \u27e8n / m, by rw [mul_comm, Nat.div_mul_cancel h]\u27e9\n```",
            "\n  apply Iff.intro <;> intro <;> simp_all [Nat.modEq_iff_dvd, Nat.dvd_iff_mod_eq_zero]\n```",
            "\n  simp [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]\n```",
            "\n  apply Iff.intro <;> intro h <;> simp_all [Nat.modEq_iff_dvd, Nat.dvd_iff_mod_eq_zero]\n  <;> omega\n```",
            "\n  apply Iff.intro <;> intro h\n  <;> simp_all [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]\n  <;> omega\n```",
            "\n  simp [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]\n```",
            "\n  simp [Nat.dvd_iff_mod_eq_zero, Nat.ModEq, Nat.mod_eq_of_lt]\n```",
            "\n  constructor <;> intro h <;> simp [h, Nat.ModEq, dvd_iff_mod_eq_zero, Nat.mod_eq_of_lt] at * <;>\n    omega\n```",
            "\n  constructor <;> intro h\n  <;> simp [ModEq, dvd_iff_mod_eq_zero] at h \u22a2\n  <;> simp [h]\n```",
            "\n  constructor\n  intro h\n  rw [Nat.ModEq]\n  rw [Nat.mod_eq_zero_of_dvd h]\n  intro h\n  rw [Nat.ModEq] at h\n  rw [Nat.dvd_iff_mod_eq_zero]\n  exact h\n```",
            "\n  constructor <;> intro h <;> simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  cases' h with k hk\n  use k\n  rw [hk]\n```",
            "\n  constructor <;> intro h <;> simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro h <;>\n  simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega\n```",
            "\n  apply Iff.intro <;> intro <;> simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro h <;> simp_all [Nat.modEq_iff_dvd]\n  <;> exact_mod_cast h\n```",
            "\n  constructor <;> intro h <;> simp_all [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]\n  obtain \u27e8k, rfl\u27e9 := h\n  simp [mul_mod, Nat.mod_eq_of_lt]\n```",
            "\n  constructor <;> intro h <;> simp [Nat.ModEq, dvd_iff_mod_eq_zero, Nat.ModEq] at h \u22a2 <;> simp [h]\n```",
            "\n  constructor <;> intro <;>\n  simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n```",
            "\n  constructor <;> intro h <;> simp [h, Nat.mod_eq_of_lt]\n  <;> omega\n```",
            "\n  simp [Nat.modEq_iff_dvd, \u2190 Nat.dvd_iff_mod_eq_zero]\n```",
            "\n  simp [Nat.modEq_iff_dvd, Nat.dvd_iff_mod_eq_zero]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;>\n  simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  simp [Nat.dvd_iff_mod_eq_zero, Nat.modEq_iff_dvd, Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  simp [Nat.modEq_iff_dvd, Nat.dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h\n  next =>\n    rw [Nat.ModEq]\n    rcases h with \u27e8k, rfl\u27e9\n    simp [Nat.mul_mod_right]\n  next =>\n    rw [Nat.ModEq] at h\n    use n / m\n    rw [\u2190 Nat.mod_add_div n m]\n    simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;>\n  simp_all [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]\n  <;>\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h\n  next =>\n    rw [Nat.modEq_zero_iff_dvd]\n    assumption\n  next =>\n    rw [Nat.modEq_zero_iff_dvd] at h\n    assumption",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  apply Iff.intro <;> intro h <;> simp_all [Nat.modEq_iff_dvd, Nat.dvd_iff_mod_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;> simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;> simp [h, Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  simp [Nat.modEq_iff_dvd]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;> simp_all [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor\n  rintro \u27e8k, rfl\u27e9\n  simp [Nat.modEq_iff_dvd, mul_comm]\n  intro h\n  rw [Nat.modEq_iff_dvd] at h\n  exact \u27e8n / m, by rw [mul_comm, Nat.div_mul_cancel h]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  apply Iff.intro <;> intro <;> simp_all [Nat.modEq_iff_dvd, Nat.dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  simp [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  apply Iff.intro <;> intro h <;> simp_all [Nat.modEq_iff_dvd, Nat.dvd_iff_mod_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  apply Iff.intro <;> intro h\n  <;> simp_all [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  simp [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  simp [Nat.dvd_iff_mod_eq_zero, Nat.ModEq, Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;> simp [h, Nat.ModEq, dvd_iff_mod_eq_zero, Nat.mod_eq_of_lt] at * <;>\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h\n  <;> simp [ModEq, dvd_iff_mod_eq_zero] at h \u22a2\n  <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor\n  intro h\n  rw [Nat.ModEq]\n  rw [Nat.mod_eq_zero_of_dvd h]\n  intro h\n  rw [Nat.ModEq] at h\n  rw [Nat.dvd_iff_mod_eq_zero]\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;> simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  cases' h with k hk\n  use k\n  rw [hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;> simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;>\n  simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  apply Iff.intro <;> intro <;> simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;> simp_all [Nat.modEq_iff_dvd]\n  <;> exact_mod_cast h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;> simp_all [Nat.ModEq, Nat.dvd_iff_mod_eq_zero]\n  obtain \u27e8k, rfl\u27e9 := h\n  simp [mul_mod, Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;> simp [Nat.ModEq, dvd_iff_mod_eq_zero, Nat.ModEq] at h \u22a2 <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro <;>\n  simp_all [Nat.ModEq, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  constructor <;> intro h <;> simp [h, Nat.mod_eq_of_lt]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  simp [Nat.modEq_iff_dvd, \u2190 Nat.dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_iff_modEq {m n : \u2115} : m \u2223 n \u2194 n \u2261 0 [MOD m] := by\n  simp [Nat.modEq_iff_dvd, Nat.dvd_iff_mod_eq_zero]"
        ]
    },
    {
        "name": "lean_workbook_36636",
        "split": "test",
        "formal_statement": "theorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by",
        "model_outputs": [
            "\n  constructor\n  <;> linarith\n```",
            "\n  constructor\n  <;> linarith\n  <;> linarith\n```",
            "\n  have h\u2081 : a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 := by linarith\n  have h\u2082 : a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by linarith\n  exact \u27e8h\u2081, h\u2082\u27e9\n```",
            "\n  constructor <;> ring_nf at h h' \u22a2 <;> linarith\n```",
            "\n  constructor\n  <;> linarith\n```",
            "\n  constructor <;> linarith\n```",
            "\n  constructor\n  <;> linarith\n  <;> linarith\n```",
            "\n  apply And.intro <;> linarith\n```",
            "\n  constructor\n  <;> linarith\n```",
            "\n  constructor <;> linarith\n```",
            "\n  constructor\n  linarith\n  linarith\n```",
            "\n  have key := h.symm\n  have key' := h'.symm\n  apply And.intro\n  linarith\n  linarith\n```",
            "\n  have h\u2081 : a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 := by\n    linarith\n  have h\u2082 : a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9\n```",
            "\n  constructor <;> linarith\n```",
            "\n  constructor <;> linarith\n```",
            "\n  constructor <;> linarith\n```",
            "\n  constructor <;> linarith\n```",
            "\n  apply And.intro\n  linarith\n  linarith\n```",
            "\n  constructor <;> ring_nf <;> linarith\n```",
            "\n  constructor <;> linarith\n```",
            "\n  constructor <;> linarith\n```",
            "\n  constructor\n  <;> linarith\n  <;> linarith\n```",
            "\n  constructor <;>\n  linarith\n```",
            "\n  refine' \u27e8_, _\u27e9 <;> linarith\n```",
            "\n  constructor\n  <;> linarith\n```",
            "\n  constructor <;> linarith\n```",
            "\n  apply And.intro <;> linarith\n```",
            "\n  refine' \u27e8_, _\u27e9 <;> linarith\n```",
            "\n  constructor <;> linarith\n```",
            "\n  constructor <;> linarith\n```",
            "\n  have : c = d := by linarith\n  subst this\n  have : a = b := by linarith\n  subst this\n  simp_all\n```",
            "\n  constructor <;> ring_nf at h h' \u22a2 <;> linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor\n  <;> linarith\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  have h\u2081 : a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 := by linarith\n  have h\u2082 : a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by linarith\n  exact \u27e8h\u2081, h\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> ring_nf at h h' \u22a2 <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor\n  <;> linarith\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  apply And.intro <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor\n  linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  have key := h.symm\n  have key' := h'.symm\n  apply And.intro\n  linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  have h\u2081 : a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 := by\n    linarith\n  have h\u2082 : a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  apply And.intro\n  linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> ring_nf <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor\n  <;> linarith\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;>\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  refine' \u27e8_, _\u27e9 <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  apply And.intro <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  refine' \u27e8_, _\u27e9 <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  have : c = d := by linarith\n  subst this\n  have : a = b := by linarith\n  subst this\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_eq_of_two_mul_sq_add_two_mul_sq_eq {a b c d e f : \u211d}     (h : 2 * a ^ 2 + 2 * b ^ 2 = c ^ 2 + d ^ 2 + e ^ 2) (h' : 2 * a ^ 2 + 2 * d ^ 2 = b ^ 2 + c ^ 2 + f ^ 2) :     a ^ 2 + b ^ 2 = c ^ 2 + d ^ 2 \u2227 a ^ 2 + d ^ 2 = b ^ 2 + c ^ 2 := by\n  constructor <;> ring_nf at h h' \u22a2 <;> linarith"
        ]
    },
    {
        "name": "lean_workbook_68",
        "split": "test",
        "formal_statement": "theorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by",
        "model_outputs": [
            "\n  rw [\u2190 le_sub_iff_add_le]\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  linarith [h]\n```",
            "\n  linarith [h]\n```",
            "\n  linarith\n```",
            "\n  rw [two_mul] at h\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  cases' x with x <;> cases' y with y <;>\n    norm_num at h \u22a2 <;>\n    linarith\n```",
            "\n  rw [mul_comm] at h\n  linarith\n```",
            "\n  rw [\u2190 sub_le_iff_le_add] at h\n  nlinarith\n```",
            "\n  rcases x with \u27e8x\u27e9 <;> rcases y with \u27e8y\u27e9 <;>\n  simp only [two_mul, \u2190 EReal.coe_add, EReal.coe_le_coe_iff] at h \u22a2\n  linarith\n```",
            "\n  nlinarith\n```",
            "\n  have h' : 2 * x - 1 \u2264 y := by linarith\n  norm_num at h'\n  linarith\n```",
            "\n  linarith\n```",
            "\n  have h' : 2 * x \u2264 y + 1 := h\n  nlinarith\n```",
            "\n  linarith\n```",
            "\n  linarith\n```",
            "\n  have h' : 2 * x - 1 \u2264 y := by\n    calc\n      2 * x - 1 \u2264 y + 1 - 1 := by exact EReal.sub_le_sub h le_rfl\n      _ = y := by simp\n  have h'' : 2 * x \u2264 2 * y := by\n    calc\n      2 * x \u2264 y + 1 := by exact h\n      _ \u2264 2 * y + 1 := by exact EReal.add_le_add_right (EReal.mul_le_mul_left (by simp) le_rfl) 1\n      _ = 2 * y := by simp\n  have h''' : x \u2264 y := by\n    calc\n      x = (2 * x) / 2 := by simp\n      _ \u2264 (2 * y + 1) / 2 := by exact EReal.div_le_div_right h''\n      _ = y := by simp\n  exact h'''\n```",
            "\n  linarith [h]\n```",
            "\n  rw [mul_comm] at h\n  linarith\n```",
            "\n  rw [\u2190 sub_le_iff_le_add]\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  linarith [h]\n```",
            "\n  rcases le_or_lt 0 x with hx | hx\n  case inl =>\n    rcases le_or_lt 0 y with hy | hy\n    case inl =>\n      linarith\n    case inr =>\n      linarith\n  case inr =>\n    have hx' : x < 0 := hx\n    have : 0 < -x := EReal.neg_pos_of_neg hx'\n    have : 0 < y + 1 - 2 * x := by\n      convert h\n      simp\n    have : 0 < y + 1 + -x := by\n      linarith\n    have : 0 < y + 1 - (2 * x - x) := by\n      linarith\n    have : 0 < y + 1 - x := by\n      linarith\n    linarith\n```",
            "\n  have h1 : 2 * x \u2264 y + 1 := by rw [two_mul] at h; exact h\n  linarith\n```",
            "\n  by_cases hx : x = \u22a4\n  \u00b7 rw [hx]\n    by_cases hy : y = \u22a4\n    \u00b7 rw [hy]\n      exact le_rfl\n    \u00b7 rw [show 2 * \u22a4 = \u22a4 by simp, hy] at h\n      exact le_of_top_le_coe h\n  by_cases hy : y = \u22a4\n  \u00b7 rw [hy]\n    exact le_top\n  \u00b7 rw [\u2190 coe_le_coe]\n    push_cast at h \u22a2\n    linarith\n```",
            "\n  rw [\u2190 sub_le_iff_le_add] at h \u22a2\n  linarith [h]\n```",
            "\n  by_cases h : x = \u22a4\n  \u00b7 rw [h]\n    linarith\n  by_cases h' : y = \u22a4\n  \u00b7 rw [h']\n    linarith\n  rw [two_mul] at h\n  exact le_of_add_le_add_left (cancel_of_ne h)\n```",
            "\n  nlinarith\n```",
            "\n  have h' : 2 * x \u2264 y + 1 := by\n    rw [two_mul]\n    exact h\n  nlinarith\n```",
            "\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  rw [\u2190 le_sub_iff_add_le]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  linarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  linarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  rw [two_mul] at h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  cases' x with x <;> cases' y with y <;>\n    norm_num at h \u22a2 <;>\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  rw [mul_comm] at h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  rw [\u2190 sub_le_iff_le_add] at h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  rcases x with \u27e8x\u27e9 <;> rcases y with \u27e8y\u27e9 <;>\n  simp only [two_mul, \u2190 EReal.coe_add, EReal.coe_le_coe_iff] at h \u22a2\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  have h' : 2 * x - 1 \u2264 y := by linarith\n  norm_num at h'\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  have h' : 2 * x \u2264 y + 1 := h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  have h' : 2 * x - 1 \u2264 y := by\n    calc\n      2 * x - 1 \u2264 y + 1 - 1 := by exact EReal.sub_le_sub h le_rfl\n      _ = y := by simp\n  have h'' : 2 * x \u2264 2 * y := by\n    calc\n      2 * x \u2264 y + 1 := by exact h\n      _ \u2264 2 * y + 1 := by exact EReal.add_le_add_right (EReal.mul_le_mul_left (by simp) le_rfl) 1\n      _ = 2 * y := by simp\n  have h''' : x \u2264 y := by\n    calc\n      x = (2 * x) / 2 := by simp\n      _ \u2264 (2 * y + 1) / 2 := by exact EReal.div_le_div_right h''\n      _ = y := by simp\n  exact h'''",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  linarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  rw [mul_comm] at h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  rw [\u2190 sub_le_iff_le_add]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  linarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  rcases le_or_lt 0 x with hx | hx\n  case inl =>\n    rcases le_or_lt 0 y with hy | hy\n    case inl =>\n      linarith\n    case inr =>\n      linarith\n  case inr =>\n    have hx' : x < 0 := hx\n    have : 0 < -x := EReal.neg_pos_of_neg hx'\n    have : 0 < y + 1 - 2 * x := by\n      convert h\n      simp\n    have : 0 < y + 1 + -x := by\n      linarith\n    have : 0 < y + 1 - (2 * x - x) := by\n      linarith\n    have : 0 < y + 1 - x := by\n      linarith\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  have h1 : 2 * x \u2264 y + 1 := by rw [two_mul] at h; exact h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  by_cases hx : x = \u22a4\n  \u00b7 rw [hx]\n    by_cases hy : y = \u22a4\n    \u00b7 rw [hy]\n      exact le_rfl\n    \u00b7 rw [show 2 * \u22a4 = \u22a4 by simp, hy] at h\n      exact le_of_top_le_coe h\n  by_cases hy : y = \u22a4\n  \u00b7 rw [hy]\n    exact le_top\n  \u00b7 rw [\u2190 coe_le_coe]\n    push_cast at h \u22a2\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  rw [\u2190 sub_le_iff_le_add] at h \u22a2\n  linarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  by_cases h : x = \u22a4\n  \u00b7 rw [h]\n    linarith\n  by_cases h' : y = \u22a4\n  \u00b7 rw [h']\n    linarith\n  rw [two_mul] at h\n  exact le_of_add_le_add_left (cancel_of_ne h)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  have h' : 2 * x \u2264 y + 1 := by\n    rw [two_mul]\n    exact h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_of_two_mul_le_add_one {x y : EReal} (h : 2 * x \u2264 y + 1) : x \u2264 y := by\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_525",
        "split": "test",
        "formal_statement": "theorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by",
        "model_outputs": [
            "\n  intro a b c\n  simp_all only [mul_one, mul_zero, add_zero, zero_add, mul_neg, mul_one, mul_zero,\n    zero_add, add_zero, mul_neg, mul_one, mul_zero, zero_add, add_zero]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  intro a b c\n  have h\u2080 : a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  exact h\u2080\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  intro a b c\n  simp only [mul_one, mul_comm, mul_left_comm, mul_assoc, mul_right_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  have h\u2081 : a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n  exact h\u2081\n```",
            "\n  intro a b c\n  simp [add_assoc, add_comm, add_left_comm]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  simp only [mul_one, mul_div_cancel_left]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  simp [mul_assoc]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  norm_num\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  simp_all only [mul_one, mul_zero, add_zero, zero_add, mul_neg, mul_one, mul_zero,\n    zero_add, add_zero, mul_neg, mul_one, mul_zero, zero_add, add_zero]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  have h\u2080 : a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  exact h\u2080",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  simp only [mul_one, mul_comm, mul_left_comm, mul_assoc, mul_right_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  have h\u2081 : a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n  exact h\u2081",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  simp [add_assoc, add_comm, add_left_comm]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  simp only [mul_one, mul_div_cancel_left]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  simp [mul_assoc]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  norm_num\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM : \u2200 (a b c : \u211d), a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n  intro a b c\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]"
        ]
    },
    {
        "name": "lean_workbook_plus_38009",
        "split": "test",
        "formal_statement": "theorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by",
        "model_outputs": [
            "\n  rw [\u2190 sqrt_sq hx, lt_iff_lt_of_le_iff_le (sq_le_sq hy)]\n```",
            "\n  constructor <;> intro h <;>\n  field_simp [sq, mul_self_eq_mul_self_iff] at * <;>\n  linarith\n```",
            "\n  rw [\u2190 sqrt_sq hx, sqrt_lt_sqrt_iff hy]\n```",
            "\n  constructor <;> intro h\n  case mp =>\n    have h\u2081 : 0 \u2264 y ^ 2 := by nlinarith\n    nlinarith [sq_sqrt hx]\n  case mpr =>\n    have h\u2081 : 0 \u2264 y ^ 2 := by nlinarith\n    nlinarith [sq_sqrt hx]\n```",
            "\n  rw [\u2190 Real.sqrt_sq hy, sqrt_lt_sqrt_iff hx]\n```",
            "\n  rw [\u2190 sqrt_lt_sqrt_iff hx, sqrt_sq hy]\n```",
            "\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity), sqrt_sq hy]\n  exact sqrt_lt_sqrt_iff (by positivity)\n```",
            "\n  rw [\u2190 Real.sqrt_lt_sqrt_iff (by positivity : 0 \u2264 y ^ 2), Real.sqrt_sq (by positivity : 0 \u2264 y)]\n```",
            "\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity), sqrt_sq hy]\n```",
            "\n  rw [\u2190 Real.sqrt_sq hx, lt_iff_lt_of_le_iff_le (Real.sqrt_le_left hy)]\n```",
            "\n  rw [\u2190 sqrt_sq hy, sqrt_lt_sqrt_iff hx, sq_pos_iff]\n```",
            "\n  rw [\u2190 sqrt_sq hy, sqrt_lt_sqrt hx]\n```",
            "\n  rw [\u2190 sqrt_lt_sqrt_iff hx, sqrt_sq hy]\n```",
            "\n  rw [\u2190 mul_lt_mul_left (by positivity), \u2190 sq_sqrt (by positivity), \u2190 mul_pow]\n  norm_num\n```",
            "\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact\n    @abs_sqrt _ _ <| abs_nonneg y \u25b8 hy \u25b8 le_of_lt (lt_of_le_of_lt (by linarith) (by linarith))\n```",
            "\n  constructor <;> intro h <;>\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]\n```",
            "\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact abs_sqrt_lt_iff\n```",
            "\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy, abs_sqrt]\n  exact abs_lt.trans (by rw [abs_sq])\n```",
            "\n  constructor <;> intro h\n  case mp =>\n    nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]\n  case mpr =>\n    have : 0 \u2264 y ^ 2 := by nlinarith\n    nlinarith [sq_sqrt this]\n```",
            "\n  rw [\u2190 Real.sqrt_sq hx]\n  simp [Real.sqrt_lt_sqrt_iff hy]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9\n```",
            "\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact abs_sqrt_lt\n```",
            "\n  rw [\u2190 sqrt_sq hy, sqrt_lt_sqrt hx]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9\n```",
            "\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity : 0 \u2264 x), sqrt_sq hy]\n```",
            "\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact sq_lt (abs_nonneg x) (abs_nonneg y)\n```",
            "\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity), sqrt_sq hy]\n```",
            "\n  rw [\u2190 Real.sqrt_sq hx, lt_iff_lt_of_le_iff_le (Real.sqrt_nonneg (y ^ 2))]\n  simpa [sq_nonneg] using hy\n```",
            "\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact abs_sqrt_lt_iff\n```",
            "\n  rw [\u2190 Real.sqrt_lt_sqrt_iff hx, Real.sqrt_sq hy]\n```",
            "\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact abs_sqrt_lt\n```",
            "\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity : 0 \u2264 x), sqrt_sq hy]\n```",
            "\n  rw [\u2190 Real.sqrt_sq hx]\n  exact Real.sqrt_lt_sqrt (by positivity)\n```",
            "\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy, Real.sqrt_lt_sqrt_iff_of_nonneg, abs_sq,\n    abs_of_nonneg hy] <;>\n    nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_sq hx, lt_iff_lt_of_le_iff_le (sq_le_sq hy)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  constructor <;> intro h <;>\n  field_simp [sq, mul_self_eq_mul_self_iff] at * <;>\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_sq hx, sqrt_lt_sqrt_iff hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  constructor <;> intro h\n  case mp =>\n    have h\u2081 : 0 \u2264 y ^ 2 := by nlinarith\n    nlinarith [sq_sqrt hx]\n  case mpr =>\n    have h\u2081 : 0 \u2264 y ^ 2 := by nlinarith\n    nlinarith [sq_sqrt hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 Real.sqrt_sq hy, sqrt_lt_sqrt_iff hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_lt_sqrt_iff hx, sqrt_sq hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity), sqrt_sq hy]\n  exact sqrt_lt_sqrt_iff (by positivity)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 Real.sqrt_lt_sqrt_iff (by positivity : 0 \u2264 y ^ 2), Real.sqrt_sq (by positivity : 0 \u2264 y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity), sqrt_sq hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 Real.sqrt_sq hx, lt_iff_lt_of_le_iff_le (Real.sqrt_le_left hy)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_sq hy, sqrt_lt_sqrt_iff hx, sq_pos_iff]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_sq hy, sqrt_lt_sqrt hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_lt_sqrt_iff hx, sqrt_sq hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 mul_lt_mul_left (by positivity), \u2190 sq_sqrt (by positivity), \u2190 mul_pow]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact\n    @abs_sqrt _ _ <| abs_nonneg y \u25b8 hy \u25b8 le_of_lt (lt_of_le_of_lt (by linarith) (by linarith))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  constructor <;> intro h <;>\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact abs_sqrt_lt_iff",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy, abs_sqrt]\n  exact abs_lt.trans (by rw [abs_sq])",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  constructor <;> intro h\n  case mp =>\n    nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]\n  case mpr =>\n    have : 0 \u2264 y ^ 2 := by nlinarith\n    nlinarith [sq_sqrt this]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 Real.sqrt_sq hx]\n  simp [Real.sqrt_lt_sqrt_iff hy]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact abs_sqrt_lt",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_sq hy, sqrt_lt_sqrt hx]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity : 0 \u2264 x), sqrt_sq hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact sq_lt (abs_nonneg x) (abs_nonneg y)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity), sqrt_sq hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 Real.sqrt_sq hx, lt_iff_lt_of_le_iff_le (Real.sqrt_nonneg (y ^ 2))]\n  simpa [sq_nonneg] using hy",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact abs_sqrt_lt_iff",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 Real.sqrt_lt_sqrt_iff hx, Real.sqrt_sq hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy]\n  exact abs_sqrt_lt",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity : 0 \u2264 x), sqrt_sq hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 Real.sqrt_sq hx]\n  exact Real.sqrt_lt_sqrt (by positivity)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_lt (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax < y \u2194 x < y ^ 2 := by\n  rw [\u2190 abs_of_nonneg hx, \u2190 abs_of_nonneg hy, Real.sqrt_lt_sqrt_iff_of_nonneg, abs_sq,\n    abs_of_nonneg hy] <;>\n    nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_17451",
        "split": "test",
        "formal_statement": "theorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by",
        "model_outputs": [
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  apply mul_nonneg\n  <;> nlinarith\n```",
            "\n  intro a ha\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  apply mul_nonneg\n  <;> nlinarith\n```",
            "\n  intro a h\n  apply mul_nonneg\n  nlinarith\n  nlinarith\n```",
            "\n  intro a h\n  apply mul_nonneg\n  <;> nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  apply mul_nonneg\n  <;> nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a ha\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  apply mul_nonneg\n  <;> nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  simp [h, mul_self_nonneg]\n  nlinarith\n```",
            "\n  intro a h\n  apply mul_nonneg\n  apply mul_nonneg\n  exact h\n  exact h\n  exact h\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\n  apply mul_nonneg\n  exact mul_nonneg (add_nonneg h (by linarith)) (add_nonneg h (by linarith))\n  exact add_nonneg h (by linarith)\n```",
            "\n  intro a h\n  simp only [pow_three]\n  nlinarith\n```",
            "\n  intro a h\n  nlinarith\n```",
            "\n  intro a h\u2080\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  apply mul_nonneg\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a ha\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  apply mul_nonneg\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  apply mul_nonneg\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  apply mul_nonneg\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  apply mul_nonneg\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a ha\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  apply mul_nonneg\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  simp [h, mul_self_nonneg]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  apply mul_nonneg\n  apply mul_nonneg\n  exact h\n  exact h\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  apply mul_nonneg\n  exact mul_nonneg (add_nonneg h (by linarith)) (add_nonneg h (by linarith))\n  exact add_nonneg h (by linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  simp only [pow_three]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem work_8_11_13_a : \u2200 a : \u211d, a \u2265 0 \u2192 (a + 1) * (a + 1) * (a + 1) \u2265 0 := by\n  intro a h\u2080\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_40635",
        "split": "test",
        "formal_statement": "theorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by",
        "model_outputs": [
            "\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by\n    apply add_nonneg\n    <;> nlinarith\n  linarith\n```",
            "\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by\n    nlinarith\n  simp only [sq] at h\n  linarith\n```",
            "\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by\n    nlinarith\n  linarith\n```",
            "\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2081 : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  have h\u2082 : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - 2 * (a * b + b * c + c * a) \u2265 0 := by linarith\n  linarith\n```",
            "\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by\n    nlinarith\n  simp only [sq]\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b)^2 + (b - c)^2 + (c - a)^2 := by nlinarith\n  have h\u2081 : (a - b)^2 + (b - c)^2 + (c - a)^2 = 2 * (a^2 + b^2 + c^2 - a * b - b * c - c * a) := by ring\n  rw [h\u2081] at h\u2080\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (b - c) ^ 2 := by apply sq_nonneg\n  have h\u2082 : 0 \u2264 (c - a) ^ 2 := by apply sq_nonneg\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2082 : 0 \u2264 (b - c) ^ 2 := by apply sq_nonneg\n  have h\u2083 : 0 \u2264 (c - a) ^ 2 := by apply sq_nonneg\n  linarith\n```",
            "\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  nlinarith\n```",
            "\n  have h : 0 \u2264 (a - b)^2 + (b - c)^2 + (c - a)^2 := by\n    nlinarith\n  linarith\n```",
            "\n  have h\u2081 : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  have h\u2082 : a ^ 2 - 2 * a * b + b ^ 2 + b ^ 2 - 2 * b * c + c ^ 2 + c ^ 2 - 2 * c * a + a ^ 2 \u2265 0 := by linarith\n  linarith\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2083 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2084 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2085 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by\n    nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n    apply add_nonneg\n    repeat'\n      nlinarith\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by\n    nlinarith\n  nlinarith\n```",
            "\n  rw [\u2190 mul_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by\n    nlinarith\n  nlinarith\n```",
            "\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by nlinarith\n  linarith\n```",
            "\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have h : \u2200 x : \u211d, x^2 \u2265 0 := by\n    intro x\n    apply sq_nonneg\n  have h\u2081 : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by\n    nlinarith [h (a - b), h (b - c), h (c - a)]\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by positivity\n  linarith\n```",
            "\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  linarith\n```",
            "\n  have h : \u2200 x : \u211d, x^2 \u2265 0 := by\n    intro x\n    apply sq_nonneg\n  have h\u2081 := h (a - b)\n  have h\u2082 := h (b - c)\n  have h\u2083 := h (c - a)\n  linarith\n```",
            "\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  simp only [sq] at h\n  linarith\n```",
            "\n  have h : \u2200 x : \u211d, x^2 \u2265 0 := by\n    intro x\n    exact sq_nonneg x\n  linarith [h (a - b), h (b - c), h (c - a)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b)^2 + (b - c)^2 + (c - a)^2 := by positivity\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2083 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2084 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2085 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by\n    apply add_nonneg\n    <;> nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by\n    nlinarith\n  simp only [sq] at h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2081 : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  have h\u2082 : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - 2 * (a * b + b * c + c * a) \u2265 0 := by linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by\n    nlinarith\n  simp only [sq]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2080 : 0 \u2264 (a - b)^2 + (b - c)^2 + (c - a)^2 := by nlinarith\n  have h\u2081 : (a - b)^2 + (b - c)^2 + (c - a)^2 = 2 * (a^2 + b^2 + c^2 - a * b - b * c - c * a) := by ring\n  rw [h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (b - c) ^ 2 := by apply sq_nonneg\n  have h\u2082 : 0 \u2264 (c - a) ^ 2 := by apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2082 : 0 \u2264 (b - c) ^ 2 := by apply sq_nonneg\n  have h\u2083 : 0 \u2264 (c - a) ^ 2 := by apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : 0 \u2264 (a - b)^2 + (b - c)^2 + (c - a)^2 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2081 : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  have h\u2082 : a ^ 2 - 2 * a * b + b ^ 2 + b ^ 2 - 2 * b * c + c ^ 2 + c ^ 2 - 2 * c * a + a ^ 2 \u2265 0 := by linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2083 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2084 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2085 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2080 : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n    apply add_nonneg\n    repeat'\n      nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  rw [\u2190 mul_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : \u2200 x : \u211d, x^2 \u2265 0 := by\n    intro x\n    apply sq_nonneg\n  have h\u2081 : (a - b)^2 + (b - c)^2 + (c - a)^2 \u2265 0 := by\n    nlinarith [h (a - b), h (b - c), h (c - a)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by positivity\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : \u2200 x : \u211d, x^2 \u2265 0 := by\n    intro x\n    apply sq_nonneg\n  have h\u2081 := h (a - b)\n  have h\u2082 := h (b - c)\n  have h\u2083 := h (c - a)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 \u2265 0 := by nlinarith\n  simp only [sq] at h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h : \u2200 x : \u211d, x^2 \u2265 0 := by\n    intro x\n    exact sq_nonneg x\n  linarith [h (a - b), h (b - c), h (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2080 : 0 \u2264 (a - b)^2 + (b - c)^2 + (c - a)^2 := by positivity\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_three_reals (a b c : \u211d) : a^2 + b^2 + c^2 \u2265 a * b + b * c + c * a := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2083 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2084 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  have h\u2085 : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by nlinarith\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_6218",
        "split": "test",
        "formal_statement": "theorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by",
        "model_outputs": [
            "\n  have h\u2081 : a + b > 0 := by linarith\n  have h\u2082 : b + c > 0 := by linarith\n  have h\u2083 : c + a > 0 := by linarith\n  field_simp\n  rw [\u2190 mul_le_mul_left (zero_lt_two' \u211d)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2080 : a + b + c > 0 := by linarith\n  have h\u2081 : (a + b + c) * (1 / (a + b) + 1 / (b + c) + 1 / (c + a)) \u2265 3 := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  rw [\u2190 mul_one 3] at h\u2081\n  nlinarith\n```",
            "\n  field_simp\n  rw [\u2190 mul_one (5 / 2 : \u211d)]\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  rw [add_comm a b]\n  rw [add_comm b c]\n  rw [add_comm c a]\n  nlinarith\n```",
            "\n  field_simp\n  rw [add_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp [add_comm, add_left_comm, add_assoc]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  rw [\u2190 mul_one (5 / 2 : \u211d)]\n  norm_num\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2081 : 0 < a + b := add_pos hab.1 hab.2.1\n  have h\u2082 : 0 < b + c := add_pos hab.2.1 hab.2.2\n  have h\u2083 : 0 < c + a := add_pos hab.2.2 hab.1\n  field_simp\n  rw [div_le_div_iff (by positivity) (by positivity)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp [add_comm]\n  rw [add_comm]\n  apply le_of_sub_nonneg\n  field_simp [add_comm]\n  ring_nf\n  nlinarith\n```",
            "\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 (a - b) ^ 2), sq_sqrt (by linarith : 0 \u2264 (b - c) ^ 2), sq_sqrt (by linarith : 0 \u2264 (c - a) ^ 2)]\n```",
            "\n  field_simp\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  have ha : a > 0 := hab.1\n  have hb : b > 0 := hab.2.1\n  have hc : c > 0 := hab.2.2\n  field_simp [add_comm]\n  rw [add_comm]\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2080 : 0 < a + b := by linarith\n  have h\u2081 : 0 < b + c := by linarith\n  have h\u2082 : 0 < c + a := by linarith\n  field_simp\n  rw [div_le_div_iff (by positivity) (by positivity)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  rw [add_assoc]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : a * b * c = 1 := habc\n  field_simp\n  rw [add_assoc]\n  ring_nf\n  nlinarith\n```",
            "\n  have h : a + b + c > 0 := by linarith\n  field_simp\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp [add_comm, add_left_comm]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  field_simp\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [mul_pos hab.1 hab.2.1, mul_pos hab.2.1 hab.2.2, mul_pos hab.2.2 hab.1]\n```",
            "\n  field_simp [hab.1, hab.2.1, hab.2.2]\n  rw [add_comm]\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b)]\n```",
            "\n  rw [add_assoc]\n  field_simp [hab.1, hab.2.1, hab.2.2]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_sqrt (show 0 \u2264 a * b * c by linarith),\n    sq_sqrt (show 0 \u2264 a * b * c by linarith),\n    sq_sqrt (show 0 \u2264 a * b * c by linarith)]\n```",
            "\n  rw [add_comm a b]\n  rw [add_comm b c]\n  rw [add_comm c a]\n  apply le_of_sub_nonneg\n  field_simp\n  ring_nf\n  nlinarith\n```",
            "\n  field_simp [hab, habc]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp [hab.1, hab.2.1, hab.2.2]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  have h\u2081 : a + b > 0 := by linarith\n  have h\u2082 : b + c > 0 := by linarith\n  have h\u2083 : c + a > 0 := by linarith\n  field_simp\n  rw [\u2190 mul_le_mul_left (zero_lt_two' \u211d)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  have h\u2080 : a + b + c > 0 := by linarith\n  have h\u2081 : (a + b + c) * (1 / (a + b) + 1 / (b + c) + 1 / (c + a)) \u2265 3 := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  rw [\u2190 mul_one 3] at h\u2081\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp\n  rw [\u2190 mul_one (5 / 2 : \u211d)]\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp\n  rw [add_comm a b]\n  rw [add_comm b c]\n  rw [add_comm c a]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp\n  rw [add_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp [add_comm, add_left_comm, add_assoc]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp\n  rw [\u2190 mul_one (5 / 2 : \u211d)]\n  norm_num\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  have h\u2081 : 0 < a + b := add_pos hab.1 hab.2.1\n  have h\u2082 : 0 < b + c := add_pos hab.2.1 hab.2.2\n  have h\u2083 : 0 < c + a := add_pos hab.2.2 hab.1\n  field_simp\n  rw [div_le_div_iff (by positivity) (by positivity)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp [add_comm]\n  rw [add_comm]\n  apply le_of_sub_nonneg\n  field_simp [add_comm]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 (a - b) ^ 2), sq_sqrt (by linarith : 0 \u2264 (b - c) ^ 2), sq_sqrt (by linarith : 0 \u2264 (c - a) ^ 2)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  have ha : a > 0 := hab.1\n  have hb : b > 0 := hab.2.1\n  have hc : c > 0 := hab.2.2\n  field_simp [add_comm]\n  rw [add_comm]\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  have h\u2080 : 0 < a + b := by linarith\n  have h\u2081 : 0 < b + c := by linarith\n  have h\u2082 : 0 < c + a := by linarith\n  field_simp\n  rw [div_le_div_iff (by positivity) (by positivity)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp\n  rw [add_assoc]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  have h : a * b * c = 1 := habc\n  field_simp\n  rw [add_assoc]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  have h : a + b + c > 0 := by linarith\n  field_simp\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp [add_comm, add_left_comm]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp\n  ring_nf\n  nlinarith [mul_pos hab.1 hab.2.1, mul_pos hab.2.1 hab.2.2, mul_pos hab.2.2 hab.1]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp [hab.1, hab.2.1, hab.2.2]\n  rw [add_comm]\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  rw [add_assoc]\n  field_simp [hab.1, hab.2.1, hab.2.2]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  nlinarith [sq_sqrt (show 0 \u2264 a * b * c by linarith),\n    sq_sqrt (show 0 \u2264 a * b * c by linarith),\n    sq_sqrt (show 0 \u2264 a * b * c by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  rw [add_comm a b]\n  rw [add_comm b c]\n  rw [add_comm c a]\n  apply le_of_sub_nonneg\n  field_simp\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp [hab, habc]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  field_simp [hab.1, hab.2.1, hab.2.2]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_A1 (a b c : \u211d) (hab : a > 0 \u2227 b > 0 \u2227 c > 0) (habc : a * b * c = 1) : 1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2265 5 / 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]"
        ]
    },
    {
        "name": "lean_workbook_14453",
        "split": "test",
        "formal_statement": "theorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by",
        "model_outputs": [
            "\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  ring\n```",
            "\n  simp [pow_succ, pow_two]\n  ring\n```",
            "\n  rw [\u2190 Real.rpow_one x]\n  simp only [Real.rpow_add, Real.rpow_one, Real.rpow_mul]\n  ring\n```",
            "\n  rw [\u2190 Real.rpow_one x]\n  simp only [Real.rpow_add, Real.rpow_one, mul_assoc, mul_comm, mul_left_comm]\n  ring\n```",
            "\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3)]\n  ring\n```",
            "\n  rw [\u2190 rpow_one x]\n  rw [\u2190 rpow_add]\n  norm_num\n```",
            "\n  rw [\u2190 mul_one (x : \u211d)]\n  repeat' rw [\u2190 mul_one (x : \u211d)]\n  repeat' rw [rpow_add (x : \u211d)]\n  norm_num\n```",
            "\n  rw [\u2190 mul_one (x ^ (3 : \u211d))]\n  norm_num\n```",
            "\n  rw [\u2190 mul_one x]\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3)]\n  ring\n```",
            "\n  rw [\u2190 mul_one x]\n  simp only [mul_one, rpow_add (by norm_num : (0 : \u211d) < 3), rpow_one]\n  ring\n```",
            "\n  rw [\u2190 mul_one x]\n  repeat' rw [rpow_add]\n  norm_num\n  ring\n```",
            "\n  rw [\u2190 rpow_nat_cast]\n  norm_num\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3)]\n  norm_num\n  ring\n```",
            "\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3), \u2190 mul_assoc]\n  norm_num\n```",
            "\n  rw [rpow_def_of_pos (show (0 : \u211d) < 3 by norm_num)]\n  simp [mul_assoc]\n```",
            "\n  rw [\u2190 mul_one x]\n  repeat' rw [rpow_add]\n  norm_num\n  ring\n```",
            "\n  rw [\u2190 mul_one (x ^ (3 : \u211d))]\n  norm_num\n  ring\n```",
            "\n  rw [\u2190 mul_one x]\n  simp only [mul_one, rpow_add (by norm_num : (0 : \u211d) < 3)]\n  ring\n```",
            "\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3)]\n  norm_num\n  ring\n```",
            "\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3)]\n  ring\n```",
            "\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  norm_num\n  ring\n```",
            "\n  rw [\u2190 mul_one (x ^ (3 : \u211d)), \u2190 rpow_one x]\n  simp only [Real.rpow_add (x ^ 1), Real.rpow_one, mul_one, mul_assoc]\n  ring\n```",
            "\n  rw [\u2190 Real.rpow_one x]\n  simp only [Real.rpow_add, Real.rpow_one, mul_one, mul_assoc, mul_comm, mul_left_comm]\n  ring\n```",
            "\n  rw [\u2190 Real.rpow_nat_cast]\n  norm_num\n```",
            "\n  rw [\u2190 Real.rpow_one x]\n  simp only [Real.rpow_add, Real.rpow_one, mul_assoc, mul_comm, mul_left_comm]\n  ring\n```",
            "\n  rw [\u2190 rpow_one x]\n  simp only [rpow_add (by positivity : (0 : \u211d) < 1), rpow_one, mul_one, mul_assoc]\n  ring\n```",
            "\n  rw [\u2190 rpow_one x]\n  simp only [rpow_add (by positivity : (0 : \u211d) < 1), rpow_one, mul_one, one_mul, mul_assoc]\n  ring\n```",
            "\n  rw [\u2190 mul_one x]\n  norm_num\n  rw [mul_assoc]\n  norm_num\n  ring\n```",
            "\n  simp only [\u2190 mul_assoc, rpow_two]\n  ring\n```",
            "\n  rw [\u2190 mul_one (x ^ (3 : \u211d))]\n  simp [rpow_add x (1 : \u211d) (1 : \u211d), mul_add, mul_one, add_assoc]\n  ring\n```",
            "\n  rw [rpow_def_of_pos (show (0 : \u211d) < 3 by norm_num)]\n  ring\n```",
            "\n  rw [\u2190 mul_one (x ^ (3 : \u211d))]\n  norm_num\n  ring\n```",
            "\n  rw [\u2190 mul_one (x ^ (3 : \u211d))]\n  norm_num\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  simp [pow_succ, pow_two]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 Real.rpow_one x]\n  simp only [Real.rpow_add, Real.rpow_one, Real.rpow_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 Real.rpow_one x]\n  simp only [Real.rpow_add, Real.rpow_one, mul_assoc, mul_comm, mul_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3)]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 rpow_one x]\n  rw [\u2190 rpow_add]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one (x : \u211d)]\n  repeat' rw [\u2190 mul_one (x : \u211d)]\n  repeat' rw [rpow_add (x : \u211d)]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one (x ^ (3 : \u211d))]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one x]\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3)]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one x]\n  simp only [mul_one, rpow_add (by norm_num : (0 : \u211d) < 3), rpow_one]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one x]\n  repeat' rw [rpow_add]\n  norm_num\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 rpow_nat_cast]\n  norm_num\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3)]\n  norm_num\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3), \u2190 mul_assoc]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [rpow_def_of_pos (show (0 : \u211d) < 3 by norm_num)]\n  simp [mul_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one x]\n  repeat' rw [rpow_add]\n  norm_num\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one (x ^ (3 : \u211d))]\n  norm_num\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one x]\n  simp only [mul_one, rpow_add (by norm_num : (0 : \u211d) < 3)]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3)]\n  norm_num\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  rw [rpow_def_of_pos (by norm_num : (0 : \u211d) < 3)]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one x]\n  norm_num\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one (x ^ (3 : \u211d)), \u2190 rpow_one x]\n  simp only [Real.rpow_add (x ^ 1), Real.rpow_one, mul_one, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 Real.rpow_one x]\n  simp only [Real.rpow_add, Real.rpow_one, mul_one, mul_assoc, mul_comm, mul_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 Real.rpow_nat_cast]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 Real.rpow_one x]\n  simp only [Real.rpow_add, Real.rpow_one, mul_assoc, mul_comm, mul_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 rpow_one x]\n  simp only [rpow_add (by positivity : (0 : \u211d) < 1), rpow_one, mul_one, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 rpow_one x]\n  simp only [rpow_add (by positivity : (0 : \u211d) < 1), rpow_one, mul_one, one_mul, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one x]\n  norm_num\n  rw [mul_assoc]\n  norm_num\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  simp only [\u2190 mul_assoc, rpow_two]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one (x ^ (3 : \u211d))]\n  simp [rpow_add x (1 : \u211d) (1 : \u211d), mul_add, mul_one, add_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [rpow_def_of_pos (show (0 : \u211d) < 3 by norm_num)]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one (x ^ (3 : \u211d))]\n  norm_num\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rpow_three (x : \u211d) : x ^ (3 : \u211d) = x * x * x := by\n  rw [\u2190 mul_one (x ^ (3 : \u211d))]\n  norm_num\n  ring"
        ]
    },
    {
        "name": "lean_workbook_36668",
        "split": "test",
        "formal_statement": "theorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by",
        "model_outputs": [
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (by rw [log_le_log h h\u2081]; exact h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact (log_le_log h h\u2081).2 h\u2083\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (by gcongr)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2081 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le_left (log_nonpos (by linarith) (by linarith) (by linarith)) (log_pos h\u2081) h\u2083\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (by exact Real.log_le_log h h\u2083)\n```",
            "\n  simp only [logb, div_le_div_right (log_pos h\u2081)]\n  exact log_le_log h h\u2081 h\u2082 h\u2083\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le_left (log_pos h\u2081) (log_pos h\u2081) (log_le_log h h\u2081 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)\n```",
            "\n  simp [logb, le_div_iff (log_pos h\u2081)]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2081 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)\n```",
            "\n  simp_all [logb, log_le_log]\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact\n    div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2081 h\u2082 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le_left (log_nonneg h) (log_pos h\u2081) h\u2082 h\u2083\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (by gcongr)\n```",
            "\n  rw [logb, logb]\n  exact (log_le_log h h\u2081 h\u2082 h\u2083).trans (by rfl)\n```",
            "\n  rw [logb, logb]\n  exact (log_le_log h h\u2081 h\u2082 h\u2083).trans (le_refl _)\n```",
            "\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (by rw [log_le_log h h\u2081]; exact h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact (log_le_log h h\u2081).2 h\u2083",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (by gcongr)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2081 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le_left (log_nonpos (by linarith) (by linarith) (by linarith)) (log_pos h\u2081) h\u2083",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (by exact Real.log_le_log h h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  simp only [logb, div_le_div_right (log_pos h\u2081)]\n  exact log_le_log h h\u2081 h\u2082 h\u2083",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le_left (log_pos h\u2081) (log_pos h\u2081) (log_le_log h h\u2081 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  simp [logb, le_div_iff (log_pos h\u2081)]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2081 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  simp_all [logb, log_le_log]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact\n    div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2081 h\u2082 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le_left (log_nonneg h) (log_pos h\u2081) h\u2082 h\u2083",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (log_le_log h h\u2081 h\u2082 h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (by positivity) (by gcongr)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact (log_le_log h h\u2081 h\u2082 h\u2083).trans (by rfl)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact (log_le_log h h\u2081 h\u2082 h\u2083).trans (le_refl _)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_logb (b x y : \u211d) (h : 0 < x) (h\u2081 : 0 < b) (h\u2082 : b \u2260 1) (h\u2083 : x \u2264 y) :     logb b x \u2264 logb b y := by\n  rw [logb, logb]\n  exact div_le_div_of_le (log_pos h\u2081) (log_le_log h h\u2083)"
        ]
    },
    {
        "name": "lean_workbook_plus_72004",
        "split": "test",
        "formal_statement": "theorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by",
        "model_outputs": [
            "\n  ring_nf\n```",
            "\n  simp only [sq, add_assoc, add_left_comm, add_right_comm]\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  simp only [sq, add_assoc, add_left_comm, add_right_comm]\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  simp only [sq, add_assoc, add_left_comm, add_right_comm]\n  ring\n```",
            "\n  simp only [sq, add_assoc, add_left_comm, add_right_comm]\n  ring\n```",
            "\n  simp only [sq, \u2190 add_assoc, add_left_comm]\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  rw [add_comm]\n  ring_nf\n```",
            "\n  ring_nf\n```",
            "\n  simp only [sq, \u2190 add_assoc]\n  ring\n```",
            "\n  simp only [add_sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```",
            "\n  simp only [sq, \u2190 sub_eq_add_neg, sub_sq, add_assoc, add_left_comm, add_comm]\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  simp only [sq, \u2190 add_assoc]\n  ring\n```",
            "\n  simp only [sq, add_assoc, add_left_comm, add_right_comm, add_comm]\n  ring\n```",
            "\n  rw [add_comm]\n  ring_nf\n```",
            "\n  simp only [sq, add_assoc, add_left_comm, add_right_comm, add_comm]\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  ring_nf\n```",
            "\n  ring_nf\n```",
            "\n  ring\n```",
            "\n  simp only [sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  ring\n```",
            "\n  simp only [sq, \u2190 sub_sub, sub_eq_add_neg]\n  ring\n```",
            "\n  simp only [add_sq, mul_pow, add_mul, mul_add, add_assoc, add_left_comm, add_right_comm]\n  ring\n```",
            "\n  simp only [sq, mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  ring\n```",
            "\n  ring_nf\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, add_assoc, add_left_comm, add_right_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, add_assoc, add_left_comm, add_right_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, add_assoc, add_left_comm, add_right_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, add_assoc, add_left_comm, add_right_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, \u2190 add_assoc, add_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  rw [add_comm]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, \u2190 add_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [add_sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, \u2190 sub_eq_add_neg, sub_sq, add_assoc, add_left_comm, add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, \u2190 add_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, add_assoc, add_left_comm, add_right_comm, add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  rw [add_comm]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, add_assoc, add_left_comm, add_right_comm, add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, \u2190 sub_sub, sub_eq_add_neg]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [add_sq, mul_pow, add_mul, mul_add, add_assoc, add_left_comm, add_right_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  simp only [sq, mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq_add_sq (a b c d e f g h i j k l : \u211d) : a^2 + b^2 + c^2 + d^2 + e^2 + f^2 + g^2 + h^2 + i^2 + j^2 + k^2 + l^2 = (a + b + c + d + e + f + g + h + i + j + k + l) ^ 2 - (a * b + a * c + a * d + a * e + a * f + a * g + a * h + a * i + a * j + a * k + a * l + b * c + b * d + b * e + b * f + b * g + b * h + b * i + b * j + b * k + b * l + c * d + c * e + c * f + c * g + c * h + c * i + c * j + c * k + c * l + d * e + d * f + d * g + d * h + d * i + d * j + d * k + d * l + e * f + e * g + e * h + e * i + e * j + e * k + e * l + f * g + f * h + f * i + f * j + f * k + f * l + g * h + g * i + g * j + g * k + g * l + h * i + h * j + h * k + h * l + i * j + i * k + i * l + j * k + j * l + k * l) ^ 2 := by\n  ring_nf"
        ]
    },
    {
        "name": "lean_workbook_plus_17012",
        "split": "test",
        "formal_statement": "theorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by",
        "model_outputs": [
            "\n  rw [Real.sqrt_le_left hx, sq]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9\n```",
            "\n  rw [sqrt_le_left hx, sq_le_sq]\n  constructor <;> intro h <;> linarith\n```",
            "\n  rw [Real.sqrt_le_iff]\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro h <;>\n  \u00b7 rw [\u2190 Real.sqrt_sq hx] at h\n    nlinarith\n```",
            "\n  rw [Real.sqrt_le_iff]\n  constructor <;> intro <;> nlinarith\n```",
            "\n  constructor <;> intro h <;>\n    nlinarith [sq_sqrt (hx.trans h), h]\n```",
            "\n  rw [Real.sqrt_le_iff hx hy]\n  constructor <;> intro h\n  linarith\n  linarith\n```",
            "\n  constructor\n  intro h\n  nlinarith [h, hx, hy]\n  intro h\n  rw [Real.sqrt_le_left hx]\n  nlinarith\n```",
            "\n  rw [\u2190 Real.sqrt_le_sqrt_iff hx, Real.sqrt_sq hy]\n```",
            "\n  constructor <;> intro h <;>\n  nlinarith [Real.sq_sqrt (by linarith : 0 \u2264 x)]\n```",
            "\n  constructor <;> intro h <;>\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]\n```",
            "\n  constructor <;> intro h <;> nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]\n```",
            "\n  rw [sqrt_le_left hx]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9\n```",
            "\n  rw [\u2190 Real.sqrt_le_sqrt_iff hx, Real.sqrt_sq hy]\n```",
            "\n  rw [sqrt_le_left hx, sq_le_sq]\n  constructor <;> intro h <;> linarith\n```",
            "\n  rw [Real.sqrt_le_left hx]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9\n```",
            "\n  constructor <;> intro h <;>\n  \u00b7 nlinarith\n```",
            "\n  rw [Real.sqrt_le_left_iff hx]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9\n```",
            "\n  rw [nlinarith_sqrt_le hx hy]\n  constructor <;> intro <;>\n    nlinarith\n```",
            "\n  rw [sqrt_le_iff (by linarith : 0 \u2264 y), and_iff_right]\n  exact \u27e8fun h \u21a6 by nlinarith, fun h \u21a6 by nlinarith\u27e9\n```",
            "\n  constructor <;> intro h\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]\n  rw [sqrt_le_left]\n  nlinarith\n  nlinarith\n```",
            "\n  constructor <;> intro <;>\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x), sq_sqrt (by linarith : 0 \u2264 y)]\n```",
            "\n  constructor <;> intro h\n  <;> simp_all [sq, \u2190 mul_self_le_mul_self_iff, hx, hy]\n  <;> linarith\n```",
            "\n  rw [Real.sqrt_le_left hx, sq]\n```",
            "\n  constructor\n  intro h\n  have h1 : 0 \u2264 y ^ 2 := by positivity\n  nlinarith [sq_sqrt (hx.trans_eq (sq_nonneg _))]\n  intro h\n  have h1 : 0 \u2264 y ^ 2 := by positivity\n  apply le_sqrt_of_sq_le\n  nlinarith\n```",
            "\n  constructor\n  intro h\n  nlinarith [sq_sqrt (hx.trans_lt (lt_of_le_of_lt (sq_nonneg y) (h.trans_lt (lt_one_add _))))]\n  intro h\n  rw [\u2190 sqrt_sq hy]\n  nlinarith\n```",
            "\n  constructor <;> intro h <;>\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]\n```",
            "\n  constructor <;> intro h <;> nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]\n```",
            "\n  constructor <;> intro h <;> nlinarith [sq_sqrt (le_trans (by positivity) hy)]\n```",
            "\n  rw [sqrt_le_iff hx hy, sq_le_sq]\n  constructor <;> intro h <;> linarith\n```",
            "\n  rw [nlinarith_sqrt hx, pow_two]\n```",
            "\n  constructor <;> intro h\n  case mp =>\n    nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]\n  case mpr =>\n    rw [sqrt_le_left hx] at h\n    nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [Real.sqrt_le_left hx, sq]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [sqrt_le_left hx, sq_le_sq]\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [Real.sqrt_le_iff]\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h <;>\n  \u00b7 rw [\u2190 Real.sqrt_sq hx] at h\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [Real.sqrt_le_iff]\n  constructor <;> intro <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h <;>\n    nlinarith [sq_sqrt (hx.trans h), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [Real.sqrt_le_iff hx hy]\n  constructor <;> intro h\n  linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor\n  intro h\n  nlinarith [h, hx, hy]\n  intro h\n  rw [Real.sqrt_le_left hx]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [\u2190 Real.sqrt_le_sqrt_iff hx, Real.sqrt_sq hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h <;>\n  nlinarith [Real.sq_sqrt (by linarith : 0 \u2264 x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h <;>\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h <;> nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [sqrt_le_left hx]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [\u2190 Real.sqrt_le_sqrt_iff hx, Real.sqrt_sq hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [sqrt_le_left hx, sq_le_sq]\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [Real.sqrt_le_left hx]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h <;>\n  \u00b7 nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [Real.sqrt_le_left_iff hx]\n  exact \u27e8fun h => by nlinarith, fun h => by nlinarith\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [nlinarith_sqrt_le hx hy]\n  constructor <;> intro <;>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [sqrt_le_iff (by linarith : 0 \u2264 y), and_iff_right]\n  exact \u27e8fun h \u21a6 by nlinarith, fun h \u21a6 by nlinarith\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]\n  rw [sqrt_le_left]\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro <;>\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x), sq_sqrt (by linarith : 0 \u2264 y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h\n  <;> simp_all [sq, \u2190 mul_self_le_mul_self_iff, hx, hy]\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [Real.sqrt_le_left hx, sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor\n  intro h\n  have h1 : 0 \u2264 y ^ 2 := by positivity\n  nlinarith [sq_sqrt (hx.trans_eq (sq_nonneg _))]\n  intro h\n  have h1 : 0 \u2264 y ^ 2 := by positivity\n  apply le_sqrt_of_sq_le\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor\n  intro h\n  nlinarith [sq_sqrt (hx.trans_lt (lt_of_le_of_lt (sq_nonneg y) (h.trans_lt (lt_one_add _))))]\n  intro h\n  rw [\u2190 sqrt_sq hy]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h <;>\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h <;> nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h <;> nlinarith [sq_sqrt (le_trans (by positivity) hy)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [sqrt_le_iff hx hy, sq_le_sq]\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  rw [nlinarith_sqrt hx, pow_two]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_sqrt_le' {x y : \u211d} (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax \u2264 y \u2194 x \u2264 y ^ 2 := by\n  constructor <;> intro h\n  case mp =>\n    nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h]\n  case mpr =>\n    rw [sqrt_le_left hx] at h\n    nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_4532",
        "split": "test",
        "formal_statement": "theorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by",
        "model_outputs": [
            "\n  ring\n```",
            "\n  simp only [add_mul, mul_assoc, mul_comm, sub_mul, sub_add, mul_sub]\n  ring\n```",
            "\n  simp only [mul_sub, mul_one, mul_add, sub_add, sub_sub, sub_mul, add_mul, mul_assoc]\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  simp only [mul_add, mul_comm, mul_left_comm, mul_assoc, add_assoc, add_left_comm, add_comm]\n  ring\n```",
            "\n  ring\n```",
            "\n  simp only [mul_sub, sub_mul, mul_one, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```",
            "\n  ring\n```",
            "\n  simp only [mul_sub, mul_one, sub_eq_add_neg, neg_mul, neg_neg, add_assoc, add_left_comm]\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  simp only [mul_sub, mul_one, sub_mul, sub_sub, add_sub, sub_sub, sub_neg_eq_add, sub_add,\n    sub_sub_sub_cancel_left, sub_neg_eq_add, sub_add_eq_add_sub, add_assoc, add_left_comm,\n    add_right_comm]\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  simp only [mul_sub, sub_mul, mul_assoc, mul_comm, mul_left_comm, sub_sub_eq_add_sub, add_sub_assoc]\n  ring\n```",
            "\n  simp only [mul_sub, mul_one, mul_add, sub_add, sub_neg, sub_sub, sub_zero, sub_mul,\n    add_mul, neg_mul, neg_neg, neg_zero]\n  ring\n```",
            "\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  simp only [sub_eq_add_neg, \u2190 neg_mul, \u2190 neg_add, \u2190 neg_neg, mul_neg, add_comm, add_left_comm]\n  ring\n```",
            "\n  ring\n```",
            "\n  simp only [mul_sub, mul_one, mul_add, sub_add, sub_sub, sub_neg, neg_neg, neg_add, neg_sub,\n    neg_mul, neg_neg, neg_zero, zero_mul, mul_zero, zero_add, add_zero, sub_zero]\n  ring\n```",
            "\n  ring\n```",
            "\n  simp only [mul_sub, mul_add, mul_comm, mul_left_comm, mul_assoc, sub_add, sub_sub,\n    add_sub, sub_eq_add_neg, add_assoc, add_left_comm]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  simp only [add_mul, mul_assoc, mul_comm, sub_mul, sub_add, mul_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  simp only [mul_sub, mul_one, mul_add, sub_add, sub_sub, sub_mul, add_mul, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  simp only [mul_add, mul_comm, mul_left_comm, mul_assoc, add_assoc, add_left_comm, add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  simp only [mul_sub, sub_mul, mul_one, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  simp only [mul_sub, mul_one, sub_eq_add_neg, neg_mul, neg_neg, add_assoc, add_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  simp only [mul_sub, mul_one, sub_mul, sub_sub, add_sub, sub_sub, sub_neg_eq_add, sub_add,\n    sub_sub_sub_cancel_left, sub_neg_eq_add, sub_add_eq_add_sub, add_assoc, add_left_comm,\n    add_right_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  simp only [mul_sub, sub_mul, mul_assoc, mul_comm, mul_left_comm, sub_sub_eq_add_sub, add_sub_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  simp only [mul_sub, mul_one, mul_add, sub_add, sub_neg, sub_sub, sub_zero, sub_mul,\n    add_mul, neg_mul, neg_neg, neg_zero]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  simp only [sub_eq_add_neg, \u2190 neg_mul, \u2190 neg_add, \u2190 neg_neg, mul_neg, add_comm, add_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  simp only [mul_sub, mul_one, mul_add, sub_add, sub_sub, sub_neg, neg_neg, neg_add, neg_sub,\n    neg_mul, neg_neg, neg_zero, zero_mul, mul_zero, zero_add, add_zero, sub_zero]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem polynomial_trick (a b c d : \u211d) : (X - a) * (X - b) * (X - c) * (X - d) =     X^4 - (a + b + c + d) * X^3 + (a * b + a * c + a * d + b * c + b * d + c * d) * X^2 -       (a * b * c + a * b * d + a * c * d + b * c * d) * X + a * b * c * d := by\n  simp only [mul_sub, mul_add, mul_comm, mul_left_comm, mul_assoc, sub_add, sub_sub,\n    add_sub, sub_eq_add_neg, add_assoc, add_left_comm]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_36571",
        "split": "test",
        "formal_statement": "theorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by",
        "model_outputs": [
            "\n  rw [sq, Real.mul_self_sqrt h]\n```",
            "\n  rw [sq]\n  exact Real.mul_self_sqrt h\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq] <;> linarith\n```",
            "\n  rw [sq]\n  exact Real.mul_self_sqrt h\n```",
            " rw [Real.sq_sqrt h]\n```",
            "\n  rw [sq, mul_self_sqrt h]\n```",
            "\n  rw [\u2190 mul_one x, \u2190 sq_sqrt (by linarith)]\n  ring_nf\n```",
            "\n  rw [sqrt_eq_iff_mul_self_eq] <;> linarith\n```",
            "\n  rw [Real.sq_sqrt h]\n```",
            "\n  rw [sq]\n  exact Real.sqrt_mul_self h\n```",
            "\n  rw [sq]\n  exact Real.sqrt_mul_self h\n```",
            " rw [sqrt_eq_iff_sq_eq] <;> linarith\n```",
            "\n  rw [sq]\n  exact Real.mul_self_sqrt h\n```",
            "\n  rw [\u2190 Real.sqrt_sq h]\n  rfl\n```",
            "\n  rw [sq, mul_self_sqrt h]\n```",
            " rw [sq, mul_self_sqrt h]\n\ntheorem sqrt_sq (h : 0 \u2264 x) : \u221a(x ^ 2) = x := by rw [sq, sqrt_mul_self h]\n```",
            "\n  rw [Real.sq_sqrt h]\n```",
            "\n  rw [sq, mul_self_sqrt h]\n```",
            " rw [Real.sq_sqrt h]\n\ntheorem sqrt_sq (h : 0 \u2264 x) : \u221a(x ^ 2) = x := by rw [Real.sqrt_sq h]\n```",
            "\n  rw [Real.sqrt_eq_rpow, rpow_two]\n  rw [Real.sqrt_eq_rpow]\n  ring_nf\n```",
            " rw [sq, mul_self_sqrt h]\n```",
            "\n  rw [Real.sq_sqrt h]\n```",
            "\n  rw [\u2190 mul_self_sqrt (by assumption)]\n```",
            "\n  rw [sq]\n  exact Real.mul_self_sqrt h\n```",
            "\n  rw [sq]\n  exact Real.mul_self_sqrt h\n```",
            "\n  rw [sq]\n  rw [Real.sqrt_mul_self h]\n```",
            "\n  rw [Real.sq_sqrt h]\n```",
            "\n  rw [Real.sq_sqrt h]\n```",
            "\n  rw [Real.sq_sqrt h]\n```",
            "\n  rw [sq]\n  exact Real.sqrt_mul_self h\n```",
            "\n  rw [sq]\n  rw [sqrt_eq_iff_mul_self_eq]\n  <;> nlinarith\n```",
            "\n  rw [sq]\n  exact Real.mul_self_sqrt h\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, Real.mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.mul_self_sqrt h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.mul_self_sqrt h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [\u2190 mul_one x, \u2190 sq_sqrt (by linarith)]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sqrt_eq_iff_mul_self_eq] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.sqrt_mul_self h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.sqrt_mul_self h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by rw [sqrt_eq_iff_sq_eq] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.mul_self_sqrt h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [\u2190 Real.sqrt_sq h]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by rw [sq, mul_self_sqrt h]\n\ntheorem sqrt_sq (h : 0 \u2264 x) : \u221a(x ^ 2) = x := by rw [sq, sqrt_mul_self h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by rw [Real.sq_sqrt h]\n\ntheorem sqrt_sq (h : 0 \u2264 x) : \u221a(x ^ 2) = x := by rw [Real.sqrt_sq h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sqrt_eq_rpow, rpow_two]\n  rw [Real.sqrt_eq_rpow]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by rw [sq, mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [\u2190 mul_self_sqrt (by assumption)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.mul_self_sqrt h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.mul_self_sqrt h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  rw [Real.sqrt_mul_self h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.sqrt_mul_self h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  rw [sqrt_eq_iff_mul_self_eq]\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.mul_self_sqrt h"
        ]
    },
    {
        "name": "lean_workbook_plus_68934",
        "split": "test",
        "formal_statement": "theorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by",
        "model_outputs": [
            "\n  apply Eq.symm\n  rw [\u2190 Nat.descFactorial_eq_factorial_mul_choose]\n  apply Nat.eq_of_mul_eq_mul_right (Nat.factorial_pos (n - k))\n  rw [Nat.descFactorial_eq_factorial_mul_choose]\n  rw [mul_comm]\n  apply Nat.eq_of_mul_eq_mul_right (Nat.factorial_pos k)\n  rw [mul_comm]\n  rw [mul_comm]\n  apply Nat.eq_of_mul_eq_mul_right (Nat.factorial_pos (n - k))\n  simp [Nat.factorial]\n  rw [mul_comm]\n  apply Nat.eq_of_mul_eq_mul_right (Nat.factorial_pos k)\n  simp [Nat.factorial]\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n  field_simp [factorial_ne_zero]\n```",
            "\n  apply Eq.symm\n  rw [\u2190 Nat.mul_div_mul_left _ _ (Nat.factorial_pos _)]\n  rw [Nat.choose_mul_factorial_mul_factorial hk]\n  ring_nf\n```",
            "\n  rw [\u2190 choose_mul_factorial_mul_factorial hk]\n  field_simp [factorial_ne_zero, factorial_mul_factorial_dvd_factorial hk]\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  rw [\u2190 Nat.sub_add_cancel hk]\n  have : (n - k)! \u2260 0 := factorial_ne_zero (n - k)\n  field_simp [factorial_mul_factorial_dvd_factorial hk]\n  ring\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n  norm_num\n  apply Eq.symm\n  apply Nat.div_eq_of_eq_mul_right\n  <;> simp_all [Nat.factorial]\n  <;> ring\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n  norm_num\n  rfl\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  rw [choose, factorial_div_factorial hk]\n```",
            "\n  rw [\u2190 Nat.choose_mul_factorial_mul_factorial hk]\n  simp [Nat.factorial_ne_zero]\n```",
            "\n  apply Eq.symm\n  rw [\u2190 choose_mul_factorial_mul_factorial hk]\n  field_simp [mul_comm, mul_assoc, mul_left_comm]\n```",
            "\n  apply Eq.symm\n  rw [choose_eq_factorial_div_factorial hk]\n  norm_cast\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  rw [\u2190 Nat.choose_mul_factorial_mul_factorial hk]\n  rw [mul_assoc]\n  norm_cast\n  rw [mul_comm]\n  norm_cast\n```",
            "\n  rw [choose, Nat.div_eq_of_eq_mul_left]\n  <;> simp [Nat.factorial, Nat.mul_comm, Nat.mul_assoc, Nat.mul_left_comm]\n  <;> apply Nat.mul_div_cancel <;> linarith\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  rw [\u2190 choose_mul_factorial_mul_factorial hk, mul_assoc]\n  field_simp [factorial_ne_zero, mul_comm]\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  apply Eq.symm\n  rw [\u2190 Nat.sub_add_cancel hk]\n  rw [choose_eq_factorial_div_factorial_mul_factorial]\n  rw [Nat.mul_comm]\n  apply Eq.symm\n  apply Nat.div_eq_of_eq_mul_right (Nat.mul_pos (factorial_pos _) (factorial_pos _))\n  rw [Nat.mul_comm]\n  simp [Nat.mul_comm, Nat.mul_assoc, Nat.mul_left_comm]\n```",
            "\n  apply Eq.symm\n  rw [eq_comm]\n  apply Eq.symm\n  rw [eq_comm]\n  apply Eq.symm\n  rw [eq_comm]\n  apply Eq.symm\n  rw [eq_comm]\n  apply Eq.symm\n  rw [eq_comm]\n  rw [Nat.choose_eq_factorial_div_factorial hk]\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  rw [\u2190 tsub_add_cancel_of_le hk]\n  rw [choose_symm_add, add_comm]\n  simp [factorial_succ, Nat.mul_div_assoc, Nat.mul_div_mul_right]\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n  norm_num\n  apply Eq.symm\n  rw [Nat.div_eq_of_eq_mul_right (Nat.mul_pos (Nat.factorial_pos _) (Nat.factorial_pos _))]\n  norm_num\n  rw [mul_comm]\n  apply Eq.symm\n  rw [Nat.factorial_mul_factorial_dvd_factorial hk]\n```",
            "\n  rw [\u2190 choose_mul_factorial_mul_factorial hk]\n  field_simp [factorial_ne_zero, factorial_mul_factorial_dvd_factorial hk]\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  rw [choose_eq_factorial_div_factorial hk]\n```",
            "\n  apply Nat.eq_of_mul_eq_mul_right (Nat.factorial_pos _)\n  rw [\u2190 choose_mul_factorial_mul_factorial hk]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  apply Eq.symm\n  rw [\u2190 Nat.descFactorial_eq_factorial_mul_choose]\n  apply Nat.eq_of_mul_eq_mul_right (Nat.factorial_pos (n - k))\n  rw [Nat.descFactorial_eq_factorial_mul_choose]\n  rw [mul_comm]\n  apply Nat.eq_of_mul_eq_mul_right (Nat.factorial_pos k)\n  rw [mul_comm]\n  rw [mul_comm]\n  apply Nat.eq_of_mul_eq_mul_right (Nat.factorial_pos (n - k))\n  simp [Nat.factorial]\n  rw [mul_comm]\n  apply Nat.eq_of_mul_eq_mul_right (Nat.factorial_pos k)\n  simp [Nat.factorial]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]\n  field_simp [factorial_ne_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  apply Eq.symm\n  rw [\u2190 Nat.mul_div_mul_left _ _ (Nat.factorial_pos _)]\n  rw [Nat.choose_mul_factorial_mul_factorial hk]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 choose_mul_factorial_mul_factorial hk]\n  field_simp [factorial_ne_zero, factorial_mul_factorial_dvd_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 Nat.sub_add_cancel hk]\n  have : (n - k)! \u2260 0 := factorial_ne_zero (n - k)\n  field_simp [factorial_mul_factorial_dvd_factorial hk]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]\n  norm_num\n  apply Eq.symm\n  apply Nat.div_eq_of_eq_mul_right\n  <;> simp_all [Nat.factorial]\n  <;> ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]\n  norm_num\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose, factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 Nat.choose_mul_factorial_mul_factorial hk]\n  simp [Nat.factorial_ne_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  apply Eq.symm\n  rw [\u2190 choose_mul_factorial_mul_factorial hk]\n  field_simp [mul_comm, mul_assoc, mul_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  apply Eq.symm\n  rw [choose_eq_factorial_div_factorial hk]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 Nat.choose_mul_factorial_mul_factorial hk]\n  rw [mul_assoc]\n  norm_cast\n  rw [mul_comm]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose, Nat.div_eq_of_eq_mul_left]\n  <;> simp [Nat.factorial, Nat.mul_comm, Nat.mul_assoc, Nat.mul_left_comm]\n  <;> apply Nat.mul_div_cancel <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 choose_mul_factorial_mul_factorial hk, mul_assoc]\n  field_simp [factorial_ne_zero, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  apply Eq.symm\n  rw [\u2190 Nat.sub_add_cancel hk]\n  rw [choose_eq_factorial_div_factorial_mul_factorial]\n  rw [Nat.mul_comm]\n  apply Eq.symm\n  apply Nat.div_eq_of_eq_mul_right (Nat.mul_pos (factorial_pos _) (factorial_pos _))\n  rw [Nat.mul_comm]\n  simp [Nat.mul_comm, Nat.mul_assoc, Nat.mul_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  apply Eq.symm\n  rw [eq_comm]\n  apply Eq.symm\n  rw [eq_comm]\n  apply Eq.symm\n  rw [eq_comm]\n  apply Eq.symm\n  rw [eq_comm]\n  apply Eq.symm\n  rw [eq_comm]\n  rw [Nat.choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 tsub_add_cancel_of_le hk]\n  rw [choose_symm_add, add_comm]\n  simp [factorial_succ, Nat.mul_div_assoc, Nat.mul_div_mul_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]\n  norm_num\n  apply Eq.symm\n  rw [Nat.div_eq_of_eq_mul_right (Nat.mul_pos (Nat.factorial_pos _) (Nat.factorial_pos _))]\n  norm_num\n  rw [mul_comm]\n  apply Eq.symm\n  rw [Nat.factorial_mul_factorial_dvd_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 choose_mul_factorial_mul_factorial hk]\n  field_simp [factorial_ne_zero, factorial_mul_factorial_dvd_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  rw [choose_eq_factorial_div_factorial hk]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :     choose n k = n ! / (k ! * (n - k)!) := by\n  apply Nat.eq_of_mul_eq_mul_right (Nat.factorial_pos _)\n  rw [\u2190 choose_mul_factorial_mul_factorial hk]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_2591",
        "split": "test",
        "formal_statement": "theorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by",
        "model_outputs": [
            "\n  rw [div_le_iff (by norm_num : (0 : \u211d) < 3)]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  rw [div_le_iff (by norm_num : (0 : \u211d) < 3)]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - c) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (b - c) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a - b), mul_self_nonneg (a - c),\n    mul_self_nonneg (b - c)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a - b), mul_self_nonneg (a - c),\n    mul_self_nonneg (b - c)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2081 : 0 \u2264 a * b * c := mul_nonneg (mul_nonneg ha hb) hc\n  have h\u2082 : 0 \u2264 (a + b + c) / 3 := by\n    apply div_nonneg\n    linarith\n    norm_num\n  have h\u2083 : (a * b * c) ^ (1 / 3) \u2264 (a + b + c) / 3 := by\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  linarith\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a + b + c - 2 * (a * b * c)^(1 / 3))]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a + b + c - 2 * (a * b * c))]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a + b + c) / 3 := by linarith\n  have h\u2081 : (a * b * c) ^ (1 / 3) \u2264 (a + b + c) / 3 := by\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n  linarith\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  rw [div_le_iff (by norm_num : (0 : \u211d) < 3)]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  rw [div_le_iff (by norm_num : (0 : \u211d) < 3)]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - c) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (b - c) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a - b), mul_self_nonneg (a - c),\n    mul_self_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a - b), mul_self_nonneg (a - c),\n    mul_self_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  have h\u2081 : 0 \u2264 a * b * c := mul_nonneg (mul_nonneg ha hb) hc\n  have h\u2082 : 0 \u2264 (a + b + c) / 3 := by\n    apply div_nonneg\n    linarith\n    norm_num\n  have h\u2083 : (a * b * c) ^ (1 / 3) \u2264 (a + b + c) / 3 := by\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a + b + c - 2 * (a * b * c)^(1 / 3))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c),\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a + b + c - 2 * (a * b * c))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  have h\u2080 : 0 \u2264 (a + b + c) / 3 := by linarith\n  have h\u2081 : (a * b * c) ^ (1 / 3) \u2264 (a + b + c) / 3 := by\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amgm_three {a b c : \u211d} (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) :     (a + b + c) / 3 \u2264 (a * b * c)^(1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]"
        ]
    },
    {
        "name": "lean_workbook_plus_24221",
        "split": "test",
        "formal_statement": "theorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by",
        "model_outputs": [
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2081 : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  linarith\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  have h\u2081 : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mean_geometric_three (a b c : \u211d) : (a + b + c) / 3 \u2265 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]"
        ]
    },
    {
        "name": "lean_workbook_35624",
        "split": "test",
        "formal_statement": "theorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by",
        "model_outputs": [
            "\n  have hx' : 0 \u2264 x + 1 := by linarith\n  nlinarith [add_one_le_exp x]\n```",
            "\n  linarith [add_one_le_exp x]\n```",
            "\n  rw [\u2190 one_mul (exp 0)]\n  exact (exp_le_exp.mpr hx)\n```",
            "\n  have h : 0 \u2264 x * x := by nlinarith\n  nlinarith [add_one_le_exp (x * x)]\n```",
            "\n  linarith [add_one_le_exp x, exp_pos x]\n```",
            "\n  linarith [add_one_le_exp_of_nonneg hx]\n```",
            "\n  rw [\u2190 zero_add (1 : \u211d)]\n  exact add_le_add_left (by linarith [add_one_le_exp x]) 0\n```",
            "\n  rw [\u2190 zero_add (1 : \u211d)]\n  exact add_le_add_left (Real.add_one_le_exp_of_nonneg hx) _\n```",
            "\n  have h : 0 < exp 0 := by simp [exp_zero]\n  nlinarith [add_one_le_exp hx]\n```",
            "\n  rw [\u2190 zero_add 1]\n  apply Real.one_le_exp\n  linarith\n```",
            "\n  have h : 0 \u2264 x := by linarith\n  nlinarith [add_one_le_exp x]\n```",
            "\n  have : 0 < exp 0 := exp_pos 0\n  linarith [add_one_le_exp x]\n```",
            "\n  rw [\u2190 exp_zero]\n  exact exp_le_exp.2 hx\n```",
            "\n  have : 0 \u2264 x := hx\n  linarith [add_one_le_exp x]\n```",
            "\n  have h : 0 \u2264 exp (-x) := by positivity\n  simp [exp_neg, h, hx]\n  linarith [add_one_le_exp (by linarith : 0 \u2264 x)]\n```",
            "\n  linarith [add_one_le_exp x]\n```",
            "\n  have h : 0 \u2264 x * x := mul_self_nonneg x\n  linarith [add_one_le_exp h]\n```",
            "\n  have h : 1 = exp 0 := by simp\n  rw [h]\n  exact Real.exp_le_exp.2 hx\n```",
            "\n  have h : 0 \u2264 x \u2192 1 \u2264 exp x := by\n    intro hx\n    nlinarith [add_one_le_exp x]\n  exact h hx\n```",
            "\n  have h : 1 * 1 \u2264 exp x * exp (-x) := by\n    nlinarith [add_exp_exp_neg_one x]\n  simp only [mul_one, exp_neg, \u2190 div_eq_mul_one_div] at h\n  linarith [exp_pos x]\n```",
            "\n  have h : 0 \u2264 exp (0 : \u211d) := by simp\n  nlinarith [add_one_le_exp hx]\n```",
            "\n  have hx' : 0 \u2264 x + 1 := by linarith\n  nlinarith [add_one_le_exp hx']\n```",
            "\n  have h : 1 \u2264 exp x := by\n    apply le_of_lt\n    linarith [add_one_lt_exp hx]\n  linarith\n```",
            "\n  have h : 0 \u2264 x := by assumption\n  have h' : 0 \u2264 exp x := by apply exp_pos\n  linarith [add_one_le_exp h]\n```",
            "\n  have : 0 \u2264 exp (0 : \u211d) := by positivity\n  linarith [add_one_le_exp x]\n```",
            "\n  nlinarith [add_one_le_exp x]\n```",
            "\n  nlinarith [add_one_le_exp x]\n```",
            "\n  have h : 0 \u2264 x := by linarith\n  nlinarith [add_one_le_exp x]\n```",
            "\n  linarith [add_one_le_exp x]\n```",
            "\n  have h : 0 \u2264 exp (0 : \u211d) := by positivity\n  linarith [add_one_le_exp hx]\n```",
            "\n  have h : 0 \u2264 exp x - 1 := by linarith [add_one_le_exp x]\n  linarith\n```",
            "\n  linarith [add_one_le_exp x]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have hx' : 0 \u2264 x + 1 := by linarith\n  nlinarith [add_one_le_exp x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  linarith [add_one_le_exp x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  rw [\u2190 one_mul (exp 0)]\n  exact (exp_le_exp.mpr hx)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 0 \u2264 x * x := by nlinarith\n  nlinarith [add_one_le_exp (x * x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  linarith [add_one_le_exp x, exp_pos x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  linarith [add_one_le_exp_of_nonneg hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  rw [\u2190 zero_add (1 : \u211d)]\n  exact add_le_add_left (by linarith [add_one_le_exp x]) 0",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  rw [\u2190 zero_add (1 : \u211d)]\n  exact add_le_add_left (Real.add_one_le_exp_of_nonneg hx) _",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 0 < exp 0 := by simp [exp_zero]\n  nlinarith [add_one_le_exp hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  rw [\u2190 zero_add 1]\n  apply Real.one_le_exp\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 0 \u2264 x := by linarith\n  nlinarith [add_one_le_exp x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have : 0 < exp 0 := exp_pos 0\n  linarith [add_one_le_exp x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  rw [\u2190 exp_zero]\n  exact exp_le_exp.2 hx",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have : 0 \u2264 x := hx\n  linarith [add_one_le_exp x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 0 \u2264 exp (-x) := by positivity\n  simp [exp_neg, h, hx]\n  linarith [add_one_le_exp (by linarith : 0 \u2264 x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  linarith [add_one_le_exp x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 0 \u2264 x * x := mul_self_nonneg x\n  linarith [add_one_le_exp h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 1 = exp 0 := by simp\n  rw [h]\n  exact Real.exp_le_exp.2 hx",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 0 \u2264 x \u2192 1 \u2264 exp x := by\n    intro hx\n    nlinarith [add_one_le_exp x]\n  exact h hx",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 1 * 1 \u2264 exp x * exp (-x) := by\n    nlinarith [add_exp_exp_neg_one x]\n  simp only [mul_one, exp_neg, \u2190 div_eq_mul_one_div] at h\n  linarith [exp_pos x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 0 \u2264 exp (0 : \u211d) := by simp\n  nlinarith [add_one_le_exp hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have hx' : 0 \u2264 x + 1 := by linarith\n  nlinarith [add_one_le_exp hx']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 1 \u2264 exp x := by\n    apply le_of_lt\n    linarith [add_one_lt_exp hx]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 0 \u2264 x := by assumption\n  have h' : 0 \u2264 exp x := by apply exp_pos\n  linarith [add_one_le_exp h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have : 0 \u2264 exp (0 : \u211d) := by positivity\n  linarith [add_one_le_exp x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  nlinarith [add_one_le_exp x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  nlinarith [add_one_le_exp x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 0 \u2264 x := by linarith\n  nlinarith [add_one_le_exp x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  linarith [add_one_le_exp x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 0 \u2264 exp (0 : \u211d) := by positivity\n  linarith [add_one_le_exp hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  have h : 0 \u2264 exp x - 1 := by linarith [add_one_le_exp x]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem one_le_exp {x : \u211d} (hx : 0 \u2264 x) : 1 \u2264 exp x := by\n  linarith [add_one_le_exp x]"
        ]
    },
    {
        "name": "lean_workbook_plus_35738",
        "split": "test",
        "formal_statement": "theorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by",
        "model_outputs": [
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  rw [add_assoc] at hab\n  have h\u2080 : a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 = (a + b + c) ^ 2 / 3 := by ring\n  rw [h\u2080]\n  nlinarith [sq_nonneg (a + b + c), sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2080 : (a + b + c) ^ 2 = 1 := by rw [hab]; norm_num\n  linarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 = (a ^ 2 + b ^ 2 + c ^ 2) / 3 := by ring\n  rw [h]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : 0 \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by positivity\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  rw [mul_comm a b]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have : 0 \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by\n    nlinarith\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 \u2265 a * b + b * c + c * a := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  linarith\n```",
            "\n  rw [\u2190 mul_comm]\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a - c), mul_self_nonneg (b - c)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have : 0 \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by positivity\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  rw [\u2190 mul_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : a * b + b * c + c * a = a * b + b * c + c * a := rfl\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have : a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 = (a ^ 2 + b ^ 2 + c ^ 2) / 3 := by ring\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : a * b + b * c + c * a \u2264 (a ^ 2 + b ^ 2 + c ^ 2) / 3 := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2081 : 0 \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by positivity\n  have h\u2082 : 0 \u2264 a * b + b * c + c * a := by positivity\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 = a * a / 3 + b * b / 3 + c * c / 3 := by ring\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  rw [\u2190 mul_one (a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  rw [add_assoc] at hab\n  have h\u2080 : a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 = (a + b + c) ^ 2 / 3 := by ring\n  rw [h\u2080]\n  nlinarith [sq_nonneg (a + b + c), sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  have h\u2080 : (a + b + c) ^ 2 = 1 := by rw [hab]; norm_num\n  linarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  have h : a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 = (a ^ 2 + b ^ 2 + c ^ 2) / 3 := by ring\n  rw [h]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  have h : 0 \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by positivity\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  rw [mul_comm a b]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  have : 0 \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by\n    nlinarith\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  have h : a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 \u2265 a * b + b * c + c * a := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  rw [\u2190 mul_comm]\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a - c), mul_self_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  have : 0 \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by positivity\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  rw [\u2190 mul_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  have h : a * b + b * c + c * a = a * b + b * c + c * a := rfl\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  have : a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 = (a ^ 2 + b ^ 2 + c ^ 2) / 3 := by ring\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  have h : a * b + b * c + c * a \u2264 (a ^ 2 + b ^ 2 + c ^ 2) / 3 := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  have h\u2081 : 0 \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by positivity\n  have h\u2082 : 0 \u2264 a * b + b * c + c * a := by positivity\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  have h : a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 = a * a / 3 + b * b / 3 + c * c / 3 := by ring\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b + b * c + c * a \u2264 a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3 := by\n  rw [\u2190 mul_one (a ^ 2 / 3 + b ^ 2 / 3 + c ^ 2 / 3)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]"
        ]
    },
    {
        "name": "lean_workbook_plus_503",
        "split": "test",
        "formal_statement": "theorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by",
        "model_outputs": [
            "\n  apply Real.sqrt_le_iff.2\n  constructor\n  nlinarith\n  nlinarith\n```",
            "\n  have h : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith\n```",
            "\n  have h : 0 \u2264 (b - 1) ^ 2 := sq_nonneg (b - 1)\n  apply le_of_sub_nonneg\n  rw [sub_nonneg]\n  rw [Real.sqrt_le_iff]\n  constructor <;> nlinarith\n```",
            "\n  rw [sqrt_le_iff]\n  constructor\n  nlinarith\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 (1 - b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  simp_all only [sub_nonneg]\n  nlinarith\n```",
            "\n  have h : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith\n```",
            "\n  have h : 0 \u2264 (b - 1) ^ 2 := sq_nonneg (b - 1)\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  apply le_of_sub_nonneg\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by positivity\n  apply le_of_sub_nonneg\n  simp_all [sq, sub_eq_add_neg, add_assoc]\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (b - 1) ^ 2 := by\n    apply sq_nonneg\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  have h : 0 \u2264 (b - 1) ^ 2 := sq_nonneg (b - 1)\n  apply Real.le_sqrt_of_sq_le\n  linarith\n```",
            "\n  rw [Real.sqrt_le_iff]\n  constructor\n  next =>\n    nlinarith\n  next =>\n    nlinarith\n```",
            "\n  apply le_of_sub_nonneg\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by apply sq_nonneg\n  have h\u2082 : \u221a((1 : \u211d) + b ^ 2) - (1 + b) \u2264 0 := by\n    nlinarith\n  linarith\n```",
            "\n  apply Real.sqrt_le_iff.mpr\n  constructor\n  nlinarith\n  nlinarith\n```",
            "\n  rw [Real.sqrt_le_iff]\n  constructor <;> nlinarith\n```",
            "\n  have : (1 : \u211d) + b ^ 2 \u2264 (1 + b) ^ 2 := by\n    nlinarith [sq_nonneg (b - 1)]\n  apply Real.le_sqrt_of_sq_le\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 (1 + b) ^ 2 := by\n    nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith\n```",
            "\n  have h : 0 \u2264 (b - 1) ^ 2 := by\n    nlinarith\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  have : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 (1 - b) ^ 2 := by apply sq_nonneg\n  apply le_of_sqrt_le_sqrt\n  linarith\n```",
            "\n  apply Real.le_of_sqrt_le_sqrt\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  have : 0 \u2264 (b - 1) ^ 2 := by positivity\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (1 + b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (1 - b) ^ 2 := by nlinarith\n  apply Real.le_sqrt_of_sq_le\n  nlinarith\n```",
            "\n  apply Real.le_of_pow_le_pow_of_nonneg _ (by positivity)\n  rw [pow_two]\n  ring_nf\n  nlinarith\n```",
            "\n  have h1 : 0 \u2264 (b - 1) ^ 2 := by\n    nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith\n```",
            "\n  rw [Real.sqrt_le_iff]\n  constructor <;>\n  nlinarith\n```",
            "\n  rw [sqrt_le_iff] <;>\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  apply le_of_sub_nonneg\n  have h1 : 0 \u2264 (b - 1) ^ 2 := sq_nonneg (b - 1)\n  rw [sub_sq] at h1\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  apply Real.sqrt_le_iff.2\n  constructor\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h : 0 \u2264 (b - 1) ^ 2 := sq_nonneg (b - 1)\n  apply le_of_sub_nonneg\n  rw [sub_nonneg]\n  rw [Real.sqrt_le_iff]\n  constructor <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  rw [sqrt_le_iff]\n  constructor\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h\u2081 : 0 \u2264 (1 - b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  simp_all only [sub_nonneg]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h : 0 \u2264 (b - 1) ^ 2 := sq_nonneg (b - 1)\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  apply le_of_sub_nonneg\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by positivity\n  apply le_of_sub_nonneg\n  simp_all [sq, sub_eq_add_neg, add_assoc]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h\u2080 : 0 \u2264 (b - 1) ^ 2 := by\n    apply sq_nonneg\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h : 0 \u2264 (b - 1) ^ 2 := sq_nonneg (b - 1)\n  apply Real.le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  rw [Real.sqrt_le_iff]\n  constructor\n  next =>\n    nlinarith\n  next =>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  apply le_of_sub_nonneg\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by apply sq_nonneg\n  have h\u2082 : \u221a((1 : \u211d) + b ^ 2) - (1 + b) \u2264 0 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  apply Real.sqrt_le_iff.mpr\n  constructor\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  rw [Real.sqrt_le_iff]\n  constructor <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have : (1 : \u211d) + b ^ 2 \u2264 (1 + b) ^ 2 := by\n    nlinarith [sq_nonneg (b - 1)]\n  apply Real.le_sqrt_of_sq_le\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h\u2081 : 0 \u2264 (1 + b) ^ 2 := by\n    nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h : 0 \u2264 (b - 1) ^ 2 := by\n    nlinarith\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h\u2080 : 0 \u2264 (1 - b) ^ 2 := by apply sq_nonneg\n  apply le_of_sqrt_le_sqrt\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  apply Real.le_of_sqrt_le_sqrt\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have : 0 \u2264 (b - 1) ^ 2 := by positivity\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h\u2081 : 0 \u2264 (1 + b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (1 - b) ^ 2 := by nlinarith\n  apply Real.le_sqrt_of_sq_le\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  apply Real.le_of_pow_le_pow_of_nonneg _ (by positivity)\n  rw [pow_two]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h1 : 0 \u2264 (b - 1) ^ 2 := by\n    nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  rw [Real.sqrt_le_iff]\n  constructor <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  rw [sqrt_le_iff] <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_one_add_le (b : \u211d) : \u221a((1 : \u211d) + b ^ 2) \u2264 1 + b := by\n  apply le_of_sub_nonneg\n  have h1 : 0 \u2264 (b - 1) ^ 2 := sq_nonneg (b - 1)\n  rw [sub_sq] at h1\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_plus_13386",
        "split": "test",
        "formal_statement": "theorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by",
        "model_outputs": [
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_three_ninth {a b c : \u211d} (hab : a \u2265 b) (hbc : b \u2265 c) (hca : c \u2265 0) :      a^3 + b^3 + c^3 \u2265 a * b^2 + b * c^2 + c * a^2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]"
        ]
    },
    {
        "name": "lean_workbook_plus_32611",
        "split": "test",
        "formal_statement": "theorem h\u2081 : (2 : \u211d) \u2260 0 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by",
        "model_outputs": [
            " norm_num\ntheorem h\u2082 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2084 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2085 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2086 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2087 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2088 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2089 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2081\u2080 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem exercise_5_10 : \u2203 x : \u211d, \u2200 y : \u211d, |x - y| \u2265 |x - y| := by\n  use 0\n  intro y\n  simp\n```",
            " norm_num\n\ntheorem sin_four_mul_x_eq_eight_sin_x_cbrt_sin_x_cube (x : \u211d) :\n  Real.sin (4 * x) = 8 * Real.sin x ^ 3 * Real.sin x := by\n  rw [Real.sin_four_mul]\n  ring\n```",
            " norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (7 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (9 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (11 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (12 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (13 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (14 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (15 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (16 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (17 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (18 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (19 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2080 : (20 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2081 : (21 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2082 : (22 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2083 : (23 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2084 : (24 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2085 : (25 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2086 : (26 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2087 : (27 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2088 : (28 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2089 : (29 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2080 : (30 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2081 : (31 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2082 : (32 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2083 : (33 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2084 : (34 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2085 : (35 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2086 : (36 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2087 : (37 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2088 : (38 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2089 : (39 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2080 : (40 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2081 : (41 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2082 : (42 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2083 : (43 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2084 : (44 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2085 : (45 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2086 : (46 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2087 : (47 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2088 : (48 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2089 : (49 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2080 : (50 : \u211d) \u2260 0 := by norm_num\n```",
            " norm_num\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (5 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2084 : (1 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2085 : (2 : \u211d) / (2 * 3 * 5) = 1 / 30 := by norm_num\ntheorem h\u2086 : (3 : \u211d) / (2 * 3 * 5) = 1 / 10 := by norm_num\ntheorem h\u2087 : (5 : \u211d) / (2 * 3 * 5) = 1 / 6 := by norm_num\ntheorem h\u2088 : (2 : \u211d) / (2 * 3 * 5) = 1 / 15 := by norm_num\ntheorem h\u2089 : (3 : \u211d) / (2 * 3 * 5) = 1 / 10 := by norm_num\ntheorem h\u2081\u2080 : (5 : \u211d) / (2 * 3 * 5) = 1 / 6 := by norm_num\ntheorem h\u2081\u2081 : (2 : \u211d) / (2 * 3 * 5) = 1 / 15 := by norm_num\ntheorem h\u2081\u2082 : (3 : \u211d) / (2 * 3 * 5) = 1 / 10 := by norm_num\ntheorem h\u2081\u2083 : (5 : \u211d) / (2 * 3 * 5) = 1 / 6 := by norm_num\n```",
            " norm_num\n\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (7 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (9 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem divisible_by_10_not_divisible_by_100 : \u2200 k : \u2115, 10 \u2223 k \u2227 \u00ac 100 \u2223 k \u2192 False := by\n  intro k h\n  have h\u2081 : k % 10 = 0 := by omega\n  have h\u2082 : k % 100 \u2260 0 := by omega\n  omega\n```",
            " norm_num\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem ratio_of_sums_not_rational : \u00ac(\u2203 a b : \u2124, (2 : \u211d) / 3 + (2 : \u211d) / 5 = a / b) := by\n  intro h\n  rcases h with \u27e8a, b, h\u27e9\n  field_simp at h\n  norm_num at h\n  omega\n```",
            " norm_num\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem div_eq_div_iff : a / b = c / d \u2194 a * d = c * b := by\n  field_simp\n  constructor <;> intro h <;> linarith\n\ntheorem div_ne_div_iff : a / b \u2260 c / d \u2194 a * d \u2260 c * b := by\n  simp only [Ne, div_eq_div_iff]\n\ntheorem mul_ne_mul_left : a * b \u2260 a * c \u2194 b \u2260 c := by\n  simp only [Ne, mul_eq_mul_left_iff, or_false_iff]\n```",
            " norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (0 : \u211d) \u2260 1 := by norm_num\n\ntheorem h\u2084 : (1 : \u211d) / 2 + 1 / 2 = 1 := by norm_num\n\ntheorem h\u2085 : (1 : \u211d) / 3 + 1 / 3 + 1 / 3 = 1 := by norm_num\n\ntheorem h\u2086 : (1 : \u211d) / 4 + 1 / 4 + 1 / 4 + 1 / 4 = 1 := by norm_num\n\ntheorem h\u2087 : (1 : \u211d) / 5 + 1 / 5 + 1 / 5 + 1 / 5 + 1 / 5 = 1 := by norm_num\n\ntheorem h\u2088 : (1 : \u211d) / 6 + 1 / 6 + 1 / 6 + 1 / 6 + 1 / 6 + 1 / 6 = 1 := by norm_num\n\ntheorem h\u2089 : (1 : \u211d) / 7 + 1 / 7 + 1 / 7 + 1 / 7 + 1 / 7 + 1 / 7 + 1 / 7 = 1 := by norm_num\n\ntheorem h\u2081\u2080 : (1 : \u211d) / 8 + 1 / 8 + 1 / 8 + 1 / 8 + 1 / 8 + 1 / 8 + 1 / 8 + 1 / 8 = 1 := by norm_num\n\ntheorem h\u2081\u2081 : (1 : \u211d) / 9 + 1 / 9 + 1 / 9 + 1 / 9 + 1 / 9 + 1 / 9 + 1 / 9 + 1 / 9 + 1 / 9 = 1 := by norm_num\n\ntheorem h\u2081\u2082 : (1 : \u211d) / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 = 1 := by norm_num\n```",
            " norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) / (2 - Real.sqrt 3) = (2 : \u211d) / (2 + Real.sqrt 3) := by\n  field_simp\n  ring_nf\n  norm_num\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  norm_num\n  linarith\n```",
            " norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem triangle_inequality_segment (x y : \u211d) : |x + y| \u2264 |x| + |y| := by\n  cases' le_total 0 (x + y) with h h <;>\n  cases' le_total 0 x with hx hx <;>\n  cases' le_total 0 y with hy hy <;>\n  simp_all only [abs_of_nonneg, abs_of_nonpos, add_nonneg, add_nonpos, zero_add, add_zero] <;>\n  linarith\n\ntheorem triangle_inequality (x y z : \u211d) : |x + y + z| \u2264 |x| + |y| + |z| := by\n  have h\u2080 : |x + y + z| \u2264 |x + y| + |z| := by apply triangle_inequality_segment\n  have h\u2081 : |x + y| \u2264 |x| + |y| := by apply triangle_inequality_segment\n  linarith\n```",
            " norm_num\n\ntheorem h\u2082 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (12 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (14 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (16 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (18 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (20 : \u211d) \u2260 0 := by norm_num\n\ntheorem lcm_eq_lcm_ab_of_coprime (ha : (a : \u211d) \u2260 0) (hb : (b : \u211d) \u2260 0) (hab : Nat.coprime a.natAbs b.natAbs) :\n    Nat.lcm a.natAbs b.natAbs = Nat.lcm a.natAbs b.natAbs * 1 := by simp\n```",
            " norm_num\n\ntheorem h\u2082 : (12 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (1 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (1 / 3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (1 / 4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (1 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (1 / 6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (1 / 7 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (1 / 8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (1 / 9 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (1 / 10 : \u211d) \u2260 0 := by norm_num\n\ntheorem reciprocal_eq_one_div : \u2200 a : \u211d, a \u2260 0 \u2192 (1 / a : \u211d) = a\u207b\u00b9 := by\n  intro a ha\n  simp [ha]\n\ntheorem one_div_mul_cancel : \u2200 a : \u211d, a \u2260 0 \u2192 (1 / a : \u211d) * a = 1 := by\n  intro a ha\n  simp [ha]\n```",
            " norm_num\n\ntheorem h\u2082 : (2 : \u211d) * Real.sqrt 3 / 3 \u2260 0 := by\n  norm_num\n  exact (div_ne_zero (mul_ne_zero two_ne_zero (Real.sqrt_ne_zero'.mpr (by norm_num))) (by norm_num))\n```",
            " norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem division_ring_inverse_cancel_left {F : Type*} [DivisionRing F] {a b : F}\n    (ha : a \u2260 0) : a * b / a = b := by rw [mul_div_cancel_left b ha]\n\ntheorem division_ring_inverse_cancel_right {F : Type*} [DivisionRing F] {a b : F}\n    (hb : b \u2260 0) : a / b * b = a := by rw [div_mul_cancel a hb]\n\ntheorem division_ring_mul_inv {F : Type*} [DivisionRing F] {a b : F} (h : a \u2260 0) :\n    a * (1 / a * b) = b := by field_simp [h]\n```",
            " norm_num\n\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (2 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (3 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (1 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (1 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (1 / 3 : \u211d) \u2260 0 := by norm_num\n```",
            " norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (0 : \u211d) \u2264 0 := by norm_num\n\ntheorem h\u2084 : (0 : \u211d) < 1 := by norm_num\n\ntheorem h\u2085 : (1 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2086 : (0 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2087 : (0 : \u211d) < 2 := by norm_num\n\ntheorem h\u2088 : (0 : \u211d) \u2264 1 := by norm_num\n\ntheorem h\u2089 : (1 : \u211d) < 2 := by norm_num\n\ntheorem h\u2081\u2080 : (0 : \u211d) \u2264 1 := by norm_num\n\ntheorem h\u2081\u2081 : (1 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2081\u2082 : (0 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2081\u2083 : (0 : \u211d) < 2 := by norm_num\n\ntheorem h\u2081\u2084 : (0 : \u211d) \u2264 1 := by norm_num\n\ntheorem h\u2081\u2085 : (1 : \u211d) < 2 := by norm_num\n\ntheorem h\u2081\u2086 : (0 : \u211d) \u2264 1 := by norm_num\n\ntheorem h\u2081\u2087 : (1 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2081\u2088 : (0 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2081\u2089 : (0 : \u211d) < 2 := by norm_num\n```",
            " norm_num\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (10 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2084 : (100 : \u211d) \u2260 0 := by norm_num\n\nvariable (h\u2085 : (1000 : \u211d) \u2260 0)\n\ntheorem mathematics_is_cool : \u2200 (a b c d e : \u211d), a * b * c * d * e = 1000 \u2192 a = 10 \u2227 b = 10 \u2227 c = 10 \u2227 d = 10 \u2227 e = 10 := by\n  intro a b c d e h\n  have h\u2086 : a * b * c * d * e = 10 ^ 4 := by linarith\n  have h\u2087 : 10 ^ 4 = 10000 := by norm_num\n  have h\u2088 : a * b * c * d * e = 10000 := by linarith\n  have h\u2089 : a = 10 \u2227 b = 10 \u2227 c = 10 \u2227 d = 10 \u2227 e = 10 := by\n    apply And.intro\n    \u00b7 nlinarith\n    \u00b7 apply And.intro\n      \u00b7 nlinarith\n      \u00b7 apply And.intro\n        \u00b7 nlinarith\n        \u00b7 apply And.intro\n          \u00b7 nlinarith\n          \u00b7 nlinarith\n  exact h\u2089\n```",
            " norm_num\n\ntheorem h\u2082 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) + (5 : \u211d) = (7 : \u211d) := by norm_num\n\ntheorem h\u2084 : (2 : \u211d) * (5 : \u211d) = (10 : \u211d) := by norm_num\n\ntheorem h\u2085 : (2 : \u211d) / (5 : \u211d) = (0.4 : \u211d) := by norm_num\n\ntheorem h\u2086 : (5 : \u211d) / (2 : \u211d) = (2.5 : \u211d) := by norm_num\n\ntheorem h\u2087 : (1 : \u211d) / (2 : \u211d) = (0.5 : \u211d) := by norm_num\n\ntheorem h\u2088 : (1 : \u211d) / (5 : \u211d) = (0.2 : \u211d) := by norm_num\n\ntheorem h\u2089 : (0 : \u211d) / (2 : \u211d) = (0 : \u211d) := by norm_num\n\ntheorem h\u2081\u2080 : (0 : \u211d) / (5 : \u211d) = (0 : \u211d) := by norm_num\n```",
            " norm_num\n\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (7 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (9 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem nonzero_divisors_of_rat_dense [NoZeroDivisors \u03b1] (q : \u211a) :\n    q \u2260 0 \u2192 \u2203 p\u2081 p\u2082 : \u03b1, (p\u2081 : \u211a) \u2260 0 \u2227 (p\u2082 : \u211a) \u2260 0 \u2227 (p\u2081 : \u03b1) \u2260 0 \u2227 (p\u2082 : \u03b1) \u2260 0 \u2227\n    (q : \u03b1) * (p\u2081 : \u03b1) * (p\u2082 : \u03b1) \u2260 0 \u2227 (q : \u03b1) * (p\u2081 : \u03b1) \u2260 0 \u2227 (q : \u03b1) * (p\u2082 : \u03b1) \u2260 0 \u2227\n    (p\u2081 : \u03b1) * (p\u2082 : \u03b1) \u2260 0 \u2227 (p\u2081 : \u03b1) * (p\u2082 : \u03b1) * (q : \u03b1) \u2260 0 \u2227 (p\u2081 : \u03b1) * (p\u2082 : \u03b1) / (q : \u03b1) \u2260 0 :=\n  fun hq =>\n    \u27e8(q : \u03b1), 1, by simp [hq], by simp, by simp [hq], by simp, by simp [hq], by simp, by simp, by simp, by\n      simp [hq], by simp [hq], by simp [hq]\u27e9\n```",
            " norm_num\ntheorem h\u2082 : (10 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem div_eq_iff_mul_eq {x y z : \u211d} (hx : x \u2260 0) : y / x = z \u2194 y = z * x :=\n  \u27e8fun h => by rw [\u2190 h, mul_div_cancel' _ hx], fun h => by rw [h, div_mul_cancel' _ hx]\u27e9\n\ntheorem mul_self_eq_mul_self_iff {x y : \u211d} (h\u2080 : x \u2260 0) (h\u2081 : y \u2260 0) : x * x = y * y \u2194 x = y \u2228 x = -y :=\n  \u27e8fun h => by rw [\u2190 sub_eq_zero, \u2190 mul_self_sub_mul_self, h, mul_self_eq_mul_self_iff],\n    fun h => h.elim (fun h => by rw [h]) fun h => by rw [h, mul_neg, neg_mul]\u27e9\n```",
            " norm_num\n\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (15 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (20 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (25 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (30 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (35 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (40 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (45 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (50 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (55 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (60 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (65 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (70 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (75 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (80 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2080 : (85 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2081 : (90 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2082 : (95 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2083 : (100 : \u211d) \u2260 0 := by norm_num\n```",
            " norm_num\n\ntheorem h\u2082 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem jensen_trick_up (x : \u211d) (hx : x > 0) : x / Real.sqrt (x + 1) + (x + 1) / Real.sqrt (x + 1) = 1 + 1 / Real.sqrt (x + 1) := by\n  field_simp [Real.sqrt_ne_zero'.mpr (by linarith : (x + 1 : \u211d) \u2260 0), hx]\n  ring_nf\n```",
            " norm_num\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (24 : \u211d) \u2260 0 := by norm_num\n\ntheorem sinh_eq : sinh x = (exp x - exp (-x)) / 2 := by\n  rw [sinh_eq, div_eq_mul_inv, mul_comm]\n```",
            " norm_num\n\ntheorem h\u2082 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2084 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2088 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2082\u2080 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2081 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2082\u2082 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2083 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2084 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2085 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2082\u2086 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2087 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2082\u2088 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2089 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2080 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2081 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2083\u2082 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2083 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2083\u2084 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2085 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2086 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2087 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2083\u2088 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2089 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2084\u2080 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2083 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2084\u2084 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2085 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2084\u2086 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2087 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2088 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2089 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2085\u2080 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2081 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2085\u2082 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2083 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2084 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2085 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2085\u2086 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2087 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2085\u2088 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2089 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2080 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2081 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n```",
            " norm_num\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (1 / 2 : \u211d) \u2260 0 := by norm_num\n\n/-- `p q r : \u211d` -/\nvariable (p q r : \u211d)\n\n/-- The theorem states that if `p * q < r`, `q > 0`, and `r > 0`, then `p < r / q`. -/\ntheorem less_div_of_mul_lt_of_pos_of_pos (h\u2081 : p * q < r) (h\u2082 : 0 < q) (h\u2083 : 0 < r) : p < r / q :=\n  -- Use the fact that if `a < b` and `c > 0`, then `a / c < b / c`.\n  have h\u2084 : p * q < r * 1 := by linarith\n  have h\u2085 : p * q < r := by linarith\n  -- Use the fact that if `a * b < c * b` and `b > 0`, then `a < c`.\n  have h\u2086 : p < r / q := by\n    apply lt_of_mul_lt_mul_right _ (by linarith : 0 \u2264 q)\n    linarith\n  -- The result follows directly from the above steps.\n  linarith\n```",
            " norm_num\n\ntheorem h\u2082 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem sqrt_ne_zero' : \u2200 {x : \u211d}, x < 0 \u2192 \u00acsqrt x = 0 := by\n  intro x hx\n  rw [sqrt_eq_zero_iff]\n  exact hx.ne\n\ntheorem sqrt_ne_zero_of_pos (ha : 0 < a) : sqrt a \u2260 0 :=\n  sqrt_ne_zero'.mpr ha.ne.lt_of_le <| le_of_lt ha\n```",
            " norm_num\n\ntheorem h\u2082 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (12 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (14 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (16 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (18 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (20 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (22 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (24 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (26 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (28 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (30 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (32 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (34 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (36 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (38 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (40 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (42 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (44 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2080 : (46 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2081 : (48 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2082 : (50 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2083 : (52 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2084 : (54 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2085 : (56 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2086 : (58 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2087 : (60 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2088 : (62 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2089 : (64 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2080 : (66 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2081 : (68 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2082 : (70 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2083 : (72 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2084 : (74 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2085 : (76 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2086 : (78 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2087 : (80 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2088 : (82 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2089 : (84 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2080 : (86 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2081 : (88 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2082 : (90 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2083 : (92 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2084 : (94 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2085 : (96 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2086 : (98 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2087 : (100 : \u211d) \u2260 0 := by norm_num\n```",
            " norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) \u2260 1 := by norm_num\n\ntheorem card_one_mul_braiding_over_partitions :\n  (\u2211 a in ({1, 2} : Finset \u2115), (1 / (1 - a)) * (1 / (2 - a))) = 2 := by\n  norm_num\n  <;> aesop\n```",
            " norm_num\n\ntheorem h\u2082 : (2 : \u211d) + 2 = 4 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) * 2 = 4 := by norm_num\n\ntheorem h\u2084 : (2 : \u211d) / 2 = 1 := by norm_num\n\ntheorem h\u2085 : (1 : \u211d) + 1 = 2 := by norm_num\n\ntheorem h\u2086 : (1 : \u211d) - 1 = 0 := by norm_num\n\ntheorem h\u2087 : (2 : \u211d) ^ 2 = 4 := by norm_num\n\ntheorem h\u2088 : (4 : \u211d) ^ (1 / 2 : \u211d) = 2 := by norm_num\n\ntheorem h\u2089 : (2 : \u211d) ^ 3 = 8 := by norm_num\n\ntheorem h\u2081\u2080 : (8 : \u211d) ^ (1 / 3 : \u211d) = 2 := by norm_num\n\ntheorem h\u2081\u2081 : (2 : \u211d) ^ 4 = 16 := by norm_num\n\ntheorem h\u2081\u2082 : (16 : \u211d) ^ (1 / 4 : \u211d) = 2 := by norm_num\n```",
            " norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (1 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (1 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (1 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (1 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (1 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (1 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n```",
            " norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 / 3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (1 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (3 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (4 / 3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (5 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (3 / 4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (5 / 3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (7 / 4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (8 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (11 / 6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (5 / 4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (7 / 3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (13 / 6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (7 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (17 / 8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (19 / 6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (23 / 7 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2080 : (29 / 10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2081 : (1 / (2 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2082 : (1 / (1 / 2) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2083 : (1 / (2 / 5) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2084 : (1 / (1 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2085 : (1 / (1 / 4) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2086 : (1 / (1 / 5) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2087 : (1 / (1 / 6) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2088 : (1 / (1 / 7) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2089 : (1 / (1 / 8) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2080 : (1 / (1 / 9) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2081 : (1 / (1 / 10) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2082 : (1 / (1 / 11) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2083 : (1 / (1 / 12) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2084 : (1 / (1 / 13) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2085 : (1 / (1 / 14) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2086 : (1 / (1 / 15) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2087 : (1 / (1 / 16) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2088 : (1 / (1 / 17) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2089 : (1 / (1 / 18) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2080 : (1 / (1 / 19) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2081 : (1 / (1 / 20) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2082 : (1 / (2 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2083 : (1 / (1 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2084 : (1 / (1 / 4) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2085 : (1 / (1 / 5) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2086 : (1 / (1 / 6) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2087 : (1 / (1 / 7) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2088 : (1 / (1 / 8) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2089 : (1 / (1 / 9) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2080 : (1 / (1 / 10) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2081 : (1 / (1 / 11) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2082 : (1 / (1 / 12) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2083 : (1 / (1 / 13) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2084 : (1 / (1 / 14) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2085 : (1 / (1 / 15) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2086 : (1 / (1 / 16) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2087 : (1 / (1 / 17) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2088 : (1 / (1 / 18) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2089 : (1 / (1 / 19) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2080 : (1 / (1 / 20) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2081 : (1 / (2 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2082 : (1 / (1 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2083 : (1 / (1 / 4) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2084 : (1 / (1 / 5) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2085 : (1 / (1 / 6) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2086 : (1 / (1 / 7) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2087 : (1 / (1 / 8",
            " norm_num\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (24 : \u211d) \u2260 0 := by norm_num\n\ntheorem div_arith_irrational : (2 / 1 : \u211d) \u2260 (24 / 15 : \u211d) := by\n  norm_num\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2082 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2084 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2085 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2086 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2087 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2088 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2089 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2081\u2080 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem exercise_5_10 : \u2203 x : \u211d, \u2200 y : \u211d, |x - y| \u2265 |x - y| := by\n  use 0\n  intro y\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem sin_four_mul_x_eq_eight_sin_x_cbrt_sin_x_cube (x : \u211d) :\n  Real.sin (4 * x) = 8 * Real.sin x ^ 3 * Real.sin x := by\n  rw [Real.sin_four_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (7 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (9 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (11 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (12 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (13 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (14 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (15 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (16 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (17 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (18 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (19 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2080 : (20 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2081 : (21 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2082 : (22 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2083 : (23 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2084 : (24 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2085 : (25 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2086 : (26 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2087 : (27 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2088 : (28 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2089 : (29 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2080 : (30 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2081 : (31 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2082 : (32 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2083 : (33 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2084 : (34 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2085 : (35 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2086 : (36 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2087 : (37 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2088 : (38 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2089 : (39 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2080 : (40 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2081 : (41 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2082 : (42 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2083 : (43 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2084 : (44 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2085 : (45 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2086 : (46 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2087 : (47 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2088 : (48 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2089 : (49 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2080 : (50 : \u211d) \u2260 0 := by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (5 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2084 : (1 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2085 : (2 : \u211d) / (2 * 3 * 5) = 1 / 30 := by norm_num\ntheorem h\u2086 : (3 : \u211d) / (2 * 3 * 5) = 1 / 10 := by norm_num\ntheorem h\u2087 : (5 : \u211d) / (2 * 3 * 5) = 1 / 6 := by norm_num\ntheorem h\u2088 : (2 : \u211d) / (2 * 3 * 5) = 1 / 15 := by norm_num\ntheorem h\u2089 : (3 : \u211d) / (2 * 3 * 5) = 1 / 10 := by norm_num\ntheorem h\u2081\u2080 : (5 : \u211d) / (2 * 3 * 5) = 1 / 6 := by norm_num\ntheorem h\u2081\u2081 : (2 : \u211d) / (2 * 3 * 5) = 1 / 15 := by norm_num\ntheorem h\u2081\u2082 : (3 : \u211d) / (2 * 3 * 5) = 1 / 10 := by norm_num\ntheorem h\u2081\u2083 : (5 : \u211d) / (2 * 3 * 5) = 1 / 6 := by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (7 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (9 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem divisible_by_10_not_divisible_by_100 : \u2200 k : \u2115, 10 \u2223 k \u2227 \u00ac 100 \u2223 k \u2192 False := by\n  intro k h\n  have h\u2081 : k % 10 = 0 := by omega\n  have h\u2082 : k % 100 \u2260 0 := by omega\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem ratio_of_sums_not_rational : \u00ac(\u2203 a b : \u2124, (2 : \u211d) / 3 + (2 : \u211d) / 5 = a / b) := by\n  intro h\n  rcases h with \u27e8a, b, h\u27e9\n  field_simp at h\n  norm_num at h\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem div_eq_div_iff : a / b = c / d \u2194 a * d = c * b := by\n  field_simp\n  constructor <;> intro h <;> linarith\n\ntheorem div_ne_div_iff : a / b \u2260 c / d \u2194 a * d \u2260 c * b := by\n  simp only [Ne, div_eq_div_iff]\n\ntheorem mul_ne_mul_left : a * b \u2260 a * c \u2194 b \u2260 c := by\n  simp only [Ne, mul_eq_mul_left_iff, or_false_iff]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (0 : \u211d) \u2260 1 := by norm_num\n\ntheorem h\u2084 : (1 : \u211d) / 2 + 1 / 2 = 1 := by norm_num\n\ntheorem h\u2085 : (1 : \u211d) / 3 + 1 / 3 + 1 / 3 = 1 := by norm_num\n\ntheorem h\u2086 : (1 : \u211d) / 4 + 1 / 4 + 1 / 4 + 1 / 4 = 1 := by norm_num\n\ntheorem h\u2087 : (1 : \u211d) / 5 + 1 / 5 + 1 / 5 + 1 / 5 + 1 / 5 = 1 := by norm_num\n\ntheorem h\u2088 : (1 : \u211d) / 6 + 1 / 6 + 1 / 6 + 1 / 6 + 1 / 6 + 1 / 6 = 1 := by norm_num\n\ntheorem h\u2089 : (1 : \u211d) / 7 + 1 / 7 + 1 / 7 + 1 / 7 + 1 / 7 + 1 / 7 + 1 / 7 = 1 := by norm_num\n\ntheorem h\u2081\u2080 : (1 : \u211d) / 8 + 1 / 8 + 1 / 8 + 1 / 8 + 1 / 8 + 1 / 8 + 1 / 8 + 1 / 8 = 1 := by norm_num\n\ntheorem h\u2081\u2081 : (1 : \u211d) / 9 + 1 / 9 + 1 / 9 + 1 / 9 + 1 / 9 + 1 / 9 + 1 / 9 + 1 / 9 + 1 / 9 = 1 := by norm_num\n\ntheorem h\u2081\u2082 : (1 : \u211d) / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 + 1 / 10 = 1 := by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) / (2 - Real.sqrt 3) = (2 : \u211d) / (2 + Real.sqrt 3) := by\n  field_simp\n  ring_nf\n  norm_num\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem triangle_inequality_segment (x y : \u211d) : |x + y| \u2264 |x| + |y| := by\n  cases' le_total 0 (x + y) with h h <;>\n  cases' le_total 0 x with hx hx <;>\n  cases' le_total 0 y with hy hy <;>\n  simp_all only [abs_of_nonneg, abs_of_nonpos, add_nonneg, add_nonpos, zero_add, add_zero] <;>\n  linarith\n\ntheorem triangle_inequality (x y z : \u211d) : |x + y + z| \u2264 |x| + |y| + |z| := by\n  have h\u2080 : |x + y + z| \u2264 |x + y| + |z| := by apply triangle_inequality_segment\n  have h\u2081 : |x + y| \u2264 |x| + |y| := by apply triangle_inequality_segment\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (12 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (14 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (16 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (18 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (20 : \u211d) \u2260 0 := by norm_num\n\ntheorem lcm_eq_lcm_ab_of_coprime (ha : (a : \u211d) \u2260 0) (hb : (b : \u211d) \u2260 0) (hab : Nat.coprime a.natAbs b.natAbs) :\n    Nat.lcm a.natAbs b.natAbs = Nat.lcm a.natAbs b.natAbs * 1 := by simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (12 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (1 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (1 / 3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (1 / 4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (1 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (1 / 6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (1 / 7 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (1 / 8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (1 / 9 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (1 / 10 : \u211d) \u2260 0 := by norm_num\n\ntheorem reciprocal_eq_one_div : \u2200 a : \u211d, a \u2260 0 \u2192 (1 / a : \u211d) = a\u207b\u00b9 := by\n  intro a ha\n  simp [ha]\n\ntheorem one_div_mul_cancel : \u2200 a : \u211d, a \u2260 0 \u2192 (1 / a : \u211d) * a = 1 := by\n  intro a ha\n  simp [ha]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (2 : \u211d) * Real.sqrt 3 / 3 \u2260 0 := by\n  norm_num\n  exact (div_ne_zero (mul_ne_zero two_ne_zero (Real.sqrt_ne_zero'.mpr (by norm_num))) (by norm_num))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem division_ring_inverse_cancel_left {F : Type*} [DivisionRing F] {a b : F}\n    (ha : a \u2260 0) : a * b / a = b := by rw [mul_div_cancel_left b ha]\n\ntheorem division_ring_inverse_cancel_right {F : Type*} [DivisionRing F] {a b : F}\n    (hb : b \u2260 0) : a / b * b = a := by rw [div_mul_cancel a hb]\n\ntheorem division_ring_mul_inv {F : Type*} [DivisionRing F] {a b : F} (h : a \u2260 0) :\n    a * (1 / a * b) = b := by field_simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (2 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (3 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (1 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (1 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (1 / 3 : \u211d) \u2260 0 := by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (0 : \u211d) \u2264 0 := by norm_num\n\ntheorem h\u2084 : (0 : \u211d) < 1 := by norm_num\n\ntheorem h\u2085 : (1 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2086 : (0 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2087 : (0 : \u211d) < 2 := by norm_num\n\ntheorem h\u2088 : (0 : \u211d) \u2264 1 := by norm_num\n\ntheorem h\u2089 : (1 : \u211d) < 2 := by norm_num\n\ntheorem h\u2081\u2080 : (0 : \u211d) \u2264 1 := by norm_num\n\ntheorem h\u2081\u2081 : (1 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2081\u2082 : (0 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2081\u2083 : (0 : \u211d) < 2 := by norm_num\n\ntheorem h\u2081\u2084 : (0 : \u211d) \u2264 1 := by norm_num\n\ntheorem h\u2081\u2085 : (1 : \u211d) < 2 := by norm_num\n\ntheorem h\u2081\u2086 : (0 : \u211d) \u2264 1 := by norm_num\n\ntheorem h\u2081\u2087 : (1 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2081\u2088 : (0 : \u211d) \u2264 2 := by norm_num\n\ntheorem h\u2081\u2089 : (0 : \u211d) < 2 := by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (10 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2084 : (100 : \u211d) \u2260 0 := by norm_num\n\nvariable (h\u2085 : (1000 : \u211d) \u2260 0)\n\ntheorem mathematics_is_cool : \u2200 (a b c d e : \u211d), a * b * c * d * e = 1000 \u2192 a = 10 \u2227 b = 10 \u2227 c = 10 \u2227 d = 10 \u2227 e = 10 := by\n  intro a b c d e h\n  have h\u2086 : a * b * c * d * e = 10 ^ 4 := by linarith\n  have h\u2087 : 10 ^ 4 = 10000 := by norm_num\n  have h\u2088 : a * b * c * d * e = 10000 := by linarith\n  have h\u2089 : a = 10 \u2227 b = 10 \u2227 c = 10 \u2227 d = 10 \u2227 e = 10 := by\n    apply And.intro\n    \u00b7 nlinarith\n    \u00b7 apply And.intro\n      \u00b7 nlinarith\n      \u00b7 apply And.intro\n        \u00b7 nlinarith\n        \u00b7 apply And.intro\n          \u00b7 nlinarith\n          \u00b7 nlinarith\n  exact h\u2089",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) + (5 : \u211d) = (7 : \u211d) := by norm_num\n\ntheorem h\u2084 : (2 : \u211d) * (5 : \u211d) = (10 : \u211d) := by norm_num\n\ntheorem h\u2085 : (2 : \u211d) / (5 : \u211d) = (0.4 : \u211d) := by norm_num\n\ntheorem h\u2086 : (5 : \u211d) / (2 : \u211d) = (2.5 : \u211d) := by norm_num\n\ntheorem h\u2087 : (1 : \u211d) / (2 : \u211d) = (0.5 : \u211d) := by norm_num\n\ntheorem h\u2088 : (1 : \u211d) / (5 : \u211d) = (0.2 : \u211d) := by norm_num\n\ntheorem h\u2089 : (0 : \u211d) / (2 : \u211d) = (0 : \u211d) := by norm_num\n\ntheorem h\u2081\u2080 : (0 : \u211d) / (5 : \u211d) = (0 : \u211d) := by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (7 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (9 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem nonzero_divisors_of_rat_dense [NoZeroDivisors \u03b1] (q : \u211a) :\n    q \u2260 0 \u2192 \u2203 p\u2081 p\u2082 : \u03b1, (p\u2081 : \u211a) \u2260 0 \u2227 (p\u2082 : \u211a) \u2260 0 \u2227 (p\u2081 : \u03b1) \u2260 0 \u2227 (p\u2082 : \u03b1) \u2260 0 \u2227\n    (q : \u03b1) * (p\u2081 : \u03b1) * (p\u2082 : \u03b1) \u2260 0 \u2227 (q : \u03b1) * (p\u2081 : \u03b1) \u2260 0 \u2227 (q : \u03b1) * (p\u2082 : \u03b1) \u2260 0 \u2227\n    (p\u2081 : \u03b1) * (p\u2082 : \u03b1) \u2260 0 \u2227 (p\u2081 : \u03b1) * (p\u2082 : \u03b1) * (q : \u03b1) \u2260 0 \u2227 (p\u2081 : \u03b1) * (p\u2082 : \u03b1) / (q : \u03b1) \u2260 0 :=\n  fun hq =>\n    \u27e8(q : \u03b1), 1, by simp [hq], by simp, by simp [hq], by simp, by simp [hq], by simp, by simp, by simp, by\n      simp [hq], by simp [hq], by simp [hq]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2082 : (10 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem div_eq_iff_mul_eq {x y z : \u211d} (hx : x \u2260 0) : y / x = z \u2194 y = z * x :=\n  \u27e8fun h => by rw [\u2190 h, mul_div_cancel' _ hx], fun h => by rw [h, div_mul_cancel' _ hx]\u27e9\n\ntheorem mul_self_eq_mul_self_iff {x y : \u211d} (h\u2080 : x \u2260 0) (h\u2081 : y \u2260 0) : x * x = y * y \u2194 x = y \u2228 x = -y :=\n  \u27e8fun h => by rw [\u2190 sub_eq_zero, \u2190 mul_self_sub_mul_self, h, mul_self_eq_mul_self_iff],\n    fun h => h.elim (fun h => by rw [h]) fun h => by rw [h, mul_neg, neg_mul]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (15 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (20 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (25 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (30 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (35 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (40 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (45 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (50 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (55 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (60 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (65 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (70 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (75 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (80 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2080 : (85 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2081 : (90 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2082 : (95 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2083 : (100 : \u211d) \u2260 0 := by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem jensen_trick_up (x : \u211d) (hx : x > 0) : x / Real.sqrt (x + 1) + (x + 1) / Real.sqrt (x + 1) = 1 + 1 / Real.sqrt (x + 1) := by\n  field_simp [Real.sqrt_ne_zero'.mpr (by linarith : (x + 1 : \u211d) \u2260 0), hx]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (24 : \u211d) \u2260 0 := by norm_num\n\ntheorem sinh_eq : sinh x = (exp x - exp (-x)) / 2 := by\n  rw [sinh_eq, div_eq_mul_inv, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2084 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2088 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2082\u2080 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2081 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2082\u2082 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2083 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2084 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2085 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2082\u2086 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2087 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2082\u2088 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2089 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2080 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2081 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2083\u2082 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2083 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2083\u2084 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2085 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2086 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2087 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2083\u2088 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2089 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2084\u2080 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2083 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2084\u2084 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2085 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2084\u2086 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2087 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2088 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2089 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2085\u2080 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2081 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2085\u2082 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2083 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2084 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2085 : (1 : \u211d) / 2 \u2260 0 := by norm_num\n\ntheorem h\u2085\u2086 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2087 : (2 : \u211d) ^ 2 \u2260 0 := by norm_num\n\ntheorem h\u2085\u2088 : (4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2089 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2080 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2081 : (1 : \u211d) / 2 \u2260 0 := by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (1 / 2 : \u211d) \u2260 0 := by norm_num\n\n/-- `p q r : \u211d` -/\nvariable (p q r : \u211d)\n\n/-- The theorem states that if `p * q < r`, `q > 0`, and `r > 0`, then `p < r / q`. -/\ntheorem less_div_of_mul_lt_of_pos_of_pos (h\u2081 : p * q < r) (h\u2082 : 0 < q) (h\u2083 : 0 < r) : p < r / q :=\n  -- Use the fact that if `a < b` and `c > 0`, then `a / c < b / c`.\n  have h\u2084 : p * q < r * 1 := by linarith\n  have h\u2085 : p * q < r := by linarith\n  -- Use the fact that if `a * b < c * b` and `b > 0`, then `a < c`.\n  have h\u2086 : p < r / q := by\n    apply lt_of_mul_lt_mul_right _ (by linarith : 0 \u2264 q)\n    linarith\n  -- The result follows directly from the above steps.\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (3 : \u211d) \u2260 0 := by norm_num\n\ntheorem sqrt_ne_zero' : \u2200 {x : \u211d}, x < 0 \u2192 \u00acsqrt x = 0 := by\n  intro x hx\n  rw [sqrt_eq_zero_iff]\n  exact hx.ne\n\ntheorem sqrt_ne_zero_of_pos (ha : 0 < a) : sqrt a \u2260 0 :=\n  sqrt_ne_zero'.mpr ha.ne.lt_of_le <| le_of_lt ha",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (12 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (14 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (16 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (18 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (20 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (22 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (24 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (26 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (28 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (30 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (32 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (34 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (36 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (38 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (40 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (42 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (44 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2080 : (46 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2081 : (48 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2082 : (50 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2083 : (52 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2084 : (54 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2085 : (56 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2086 : (58 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2087 : (60 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2088 : (62 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2089 : (64 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2080 : (66 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2081 : (68 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2082 : (70 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2083 : (72 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2084 : (74 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2085 : (76 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2086 : (78 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2087 : (80 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2088 : (82 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2089 : (84 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2080 : (86 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2081 : (88 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2082 : (90 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2083 : (92 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2084 : (94 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2085 : (96 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2086 : (98 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2087 : (100 : \u211d) \u2260 0 := by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) \u2260 1 := by norm_num\n\ntheorem card_one_mul_braiding_over_partitions :\n  (\u2211 a in ({1, 2} : Finset \u2115), (1 / (1 - a)) * (1 / (2 - a))) = 2 := by\n  norm_num\n  <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (2 : \u211d) + 2 = 4 := by norm_num\n\ntheorem h\u2083 : (2 : \u211d) * 2 = 4 := by norm_num\n\ntheorem h\u2084 : (2 : \u211d) / 2 = 1 := by norm_num\n\ntheorem h\u2085 : (1 : \u211d) + 1 = 2 := by norm_num\n\ntheorem h\u2086 : (1 : \u211d) - 1 = 0 := by norm_num\n\ntheorem h\u2087 : (2 : \u211d) ^ 2 = 4 := by norm_num\n\ntheorem h\u2088 : (4 : \u211d) ^ (1 / 2 : \u211d) = 2 := by norm_num\n\ntheorem h\u2089 : (2 : \u211d) ^ 3 = 8 := by norm_num\n\ntheorem h\u2081\u2080 : (8 : \u211d) ^ (1 / 3 : \u211d) = 2 := by norm_num\n\ntheorem h\u2081\u2081 : (2 : \u211d) ^ 4 = 16 := by norm_num\n\ntheorem h\u2081\u2082 : (16 : \u211d) ^ (1 / 4 : \u211d) = 2 := by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (1 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (1 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (1 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (1 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (1 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (1 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (1 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 : \u211d) \u2260 0 := by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083 : (2 / 3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084 : (1 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085 : (3 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086 : (4 / 3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2087 : (5 / 2 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2088 : (3 / 4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2089 : (5 / 3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2080 : (7 / 4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2081 : (8 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2082 : (11 / 6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2083 : (5 / 4 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2084 : (7 / 3 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2085 : (13 / 6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2086 : (7 / 5 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2087 : (17 / 8 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2088 : (19 / 6 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2081\u2089 : (23 / 7 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2080 : (29 / 10 : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2081 : (1 / (2 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2082 : (1 / (1 / 2) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2083 : (1 / (2 / 5) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2084 : (1 / (1 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2085 : (1 / (1 / 4) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2086 : (1 / (1 / 5) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2087 : (1 / (1 / 6) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2088 : (1 / (1 / 7) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2082\u2089 : (1 / (1 / 8) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2080 : (1 / (1 / 9) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2081 : (1 / (1 / 10) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2082 : (1 / (1 / 11) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2083 : (1 / (1 / 12) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2084 : (1 / (1 / 13) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2085 : (1 / (1 / 14) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2086 : (1 / (1 / 15) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2087 : (1 / (1 / 16) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2088 : (1 / (1 / 17) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2083\u2089 : (1 / (1 / 18) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2080 : (1 / (1 / 19) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2081 : (1 / (1 / 20) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2082 : (1 / (2 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2083 : (1 / (1 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2084 : (1 / (1 / 4) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2085 : (1 / (1 / 5) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2086 : (1 / (1 / 6) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2087 : (1 / (1 / 7) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2088 : (1 / (1 / 8) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2084\u2089 : (1 / (1 / 9) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2080 : (1 / (1 / 10) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2081 : (1 / (1 / 11) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2082 : (1 / (1 / 12) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2083 : (1 / (1 / 13) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2084 : (1 / (1 / 14) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2085 : (1 / (1 / 15) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2086 : (1 / (1 / 16) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2087 : (1 / (1 / 17) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2088 : (1 / (1 / 18) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2085\u2089 : (1 / (1 / 19) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2080 : (1 / (1 / 20) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2081 : (1 / (2 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2082 : (1 / (1 / 3) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2083 : (1 / (1 / 4) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2084 : (1 / (1 / 5) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2085 : (1 / (1 / 6) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2086 : (1 / (1 / 7) : \u211d) \u2260 0 := by norm_num\n\ntheorem h\u2086\u2087 : (1 / (1 / 8",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem h\u2081 : (2 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2082 : (1 : \u211d) \u2260 0 := by norm_num\ntheorem h\u2083 : (24 : \u211d) \u2260 0 := by norm_num\n\ntheorem div_arith_irrational : (2 / 1 : \u211d) \u2260 (24 / 15 : \u211d) := by\n  norm_num"
        ]
    },
    {
        "name": "lean_workbook_plus_49489",
        "split": "test",
        "formal_statement": "theorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by",
        "model_outputs": [
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a ^ 2 - b ^ 2)]\n```",
            "\n  rw [show a ^ 3 + b ^ 3 = (a + b) ^ 3 - 3 * a * b * (a + b) by ring]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]\n```",
            "\n  rw [pow_three, pow_three]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  simp only [pow_succ, add_mul, mul_assoc]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  rw [show (a + b) ^ 3 = a ^ 3 + 3 * a ^ 2 * b + 3 * a * b ^ 2 + b ^ 3 by ring]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (a + b)]\n```",
            "\n  rw [pow_three]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]\n```",
            "\n  simp only [pow_three, add_mul, mul_add, mul_assoc]\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 a ^ 2 - 2 * a * b + b ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]\n```",
            "\n  have h : \u2200 x : \u211d, x ^ 2 \u2265 0 := fun _ => by nlinarith\n  nlinarith [h (a - b), h (a + b)]\n```",
            "\n  rw [pow_three, pow_three, pow_three]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  rw [pow_three, pow_three]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (a + b)]\n```",
            "\n  have h\u2080 : 0 \u2264 3 * a ^ 2 * b := by nlinarith\n  have h\u2081 : 0 \u2264 3 * a * b ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  rw [show a ^ 3 + b ^ 3 = (a + b) ^ 3 - 3 * a * b * (a + b) by ring]\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]\n```",
            "\n  rw [show (a + b) ^ 3 = a ^ 3 + 3 * a ^ 2 * b + 3 * a * b ^ 2 + b ^ 3 by ring]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  have h\u2080 : a ^ 3 + b ^ 3 - (a + b) ^ 3 \u2264 0 := by\n    nlinarith [sq_nonneg (a - b)]\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  rw [show a ^ 3 + b ^ 3 = (a + b) ^ 3 - 3 * a * b * (a + b) by ring]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  rw [pow_three, pow_three, add_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  rw [pow_three, pow_three]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  have h : a ^ 3 + b ^ 3 - (a + b) ^ 3 \u2264 0 := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n  linarith\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a ^ 2 - b ^ 2)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [show a ^ 3 + b ^ 3 = (a + b) ^ 3 - 3 * a * b * (a + b) by ring]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [pow_three, pow_three]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  simp only [pow_succ, add_mul, mul_assoc]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [show (a + b) ^ 3 = a ^ 3 + 3 * a ^ 2 * b + 3 * a * b ^ 2 + b ^ 3 by ring]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [pow_three]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  simp only [pow_three, add_mul, mul_add, mul_assoc]\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 a ^ 2 - 2 * a * b + b ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  have h : \u2200 x : \u211d, x ^ 2 \u2265 0 := fun _ => by nlinarith\n  nlinarith [h (a - b), h (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [pow_three, pow_three, pow_three]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [pow_three, pow_three]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  have h\u2080 : 0 \u2264 3 * a ^ 2 * b := by nlinarith\n  have h\u2081 : 0 \u2264 3 * a * b ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [show a ^ 3 + b ^ 3 = (a + b) ^ 3 - 3 * a * b * (a + b) by ring]\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [show (a + b) ^ 3 = a ^ 3 + 3 * a ^ 2 * b + 3 * a * b ^ 2 + b ^ 3 by ring]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  have h\u2080 : a ^ 3 + b ^ 3 - (a + b) ^ 3 \u2264 0 := by\n    nlinarith [sq_nonneg (a - b)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [show a ^ 3 + b ^ 3 = (a + b) ^ 3 - 3 * a * b * (a + b) by ring]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [pow_three, pow_three, add_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [pow_three, pow_three]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  have h : a ^ 3 + b ^ 3 - (a + b) ^ 3 \u2264 0 := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]"
        ]
    },
    {
        "name": "lean_workbook_plus_39163",
        "split": "test",
        "formal_statement": "theorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by",
        "model_outputs": [
            "\n  rw [fib_add]\n```",
            "\n  induction' n with n ih\n  simp\n  rw [fib_add_two, ih]\n  ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp only [fib_add_two, ih, Nat.add_succ, Nat.add_zero]\n    ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [fib_succ_eq]\n    simp only [Nat.add_succ, Nat.succ_add, Nat.add_zero] at ihn \u22a2\n    ihn\n```",
            "\n  induction n <;> simp_all [fib_add_two, add_mul, mul_add, add_comm, add_left_comm, add_assoc]\n  ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_succ_eq, add_assoc, ih]\n    simp only [fib_succ_eq, add_assoc, mul_add, mul_comm, mul_left_comm, add_left_comm]\n    ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add_two]\n    simp only [Nat.add_succ, Nat.add_zero, Nat.zero_add] at ih \u22a2\n    linarith\n```",
            "\n  norm_num\n  <;> simp [fib_add, add_comm, mul_comm, mul_assoc, mul_left_comm]\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add m n]\n    simp only [Nat.add_succ, Nat.succ_add, Nat.add_zero, Nat.zero_add] at ih \u22a2\n    simp [fib_add, ih]\n    ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add_two]\n    simp only [Nat.add_succ, Nat.succ_add, Nat.add_zero, Nat.zero_add, fib_add]\n    ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add] at ih\n    simp_all [fib_add, add_mul, mul_add, add_assoc, mul_comm, mul_left_comm]\n    ring\n```",
            "\n  simp [fib_add]\n```",
            "\n  norm_num\n  <;> simp [fib_add]\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add_two]\n    simp only [Nat.add_succ, Nat.add_zero, Nat.zero_add] at ih \u22a2\n    linarith\n```",
            "\n  induction' n with n ih generalizing m\n  simp\n  specialize ih (m + 1)\n  simp_all [fib_add_two]\n  ring\n```",
            "\n  rw [fib_add_two]\n  ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [add_assoc, add_succ, add_comm]\n    simp only [fib_succ_succ, ih, mul_add, mul_comm, mul_left_comm, mul_assoc, add_assoc, add_comm,\n      add_left_comm]\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp only [fib_add_two, ih, Nat.add_succ, Nat.add_zero, Nat.succ_add]\n    ring\n```",
            "\n  rw [fib_add]\n  ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add m n]\n    simp only [Nat.add_succ, Nat.add_zero, Nat.zero_add, fib_add]\n    ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp only [fib_add_two, ih, Nat.add_succ, Nat.add_zero, Nat.succ_add]\n    ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add_two, ih]\n    ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add_two, ih]\n    simp only [Nat.add_succ, Nat.succ_add, Nat.add_one, Nat.one_add]\n    ring\n```",
            "\n  rw [add_assoc, fib_add_two, add_comm]\n  ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [fib_add_two, ihn]\n    ring\n```",
            "\n  induction' n with n ih generalizing m\n  simp\n  specialize ih (m + 1)\n  rw [ih]\n  simp only [add_assoc, add_right_comm, fib_add_two]\n  ring\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [fib_succ_eq, add_assoc, ihn, fib_add_two, add_comm]\n    ring\n```",
            "\n  induction' n with n ih generalizing m\n  simp\n  specialize ih (m + 1)\n  rw [add_assoc m 1 n, add_comm 1 n] at ih\n  simp only [ih, fib_add_two, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```",
            "\n  induction' n with n ih\n  simp\n  rw [fib_add_two, ih]\n  ring\n```",
            "\n  induction' n with n ih generalizing m <;>\n  simp_all [fib_add, mul_comm, mul_assoc, mul_left_comm]\n  <;>\n  ring\n  <;>\n  simp_all [fib_add, mul_comm, mul_assoc, mul_left_comm]\n  <;>\n  ring\n```",
            "\n  simp [fib_add]\n```",
            "\n  induction' n with n ih generalizing m\n  simp\n  specialize ih (m + 1)\n  rw [ih]\n  simp only [Nat.add_succ, fib_add_two]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  rw [fib_add]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction' n with n ih\n  simp\n  rw [fib_add_two, ih]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp only [fib_add_two, ih, Nat.add_succ, Nat.add_zero]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [fib_succ_eq]\n    simp only [Nat.add_succ, Nat.succ_add, Nat.add_zero] at ihn \u22a2\n    ihn",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n <;> simp_all [fib_add_two, add_mul, mul_add, add_comm, add_left_comm, add_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_succ_eq, add_assoc, ih]\n    simp only [fib_succ_eq, add_assoc, mul_add, mul_comm, mul_left_comm, add_left_comm]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add_two]\n    simp only [Nat.add_succ, Nat.add_zero, Nat.zero_add] at ih \u22a2\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  norm_num\n  <;> simp [fib_add, add_comm, mul_comm, mul_assoc, mul_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add m n]\n    simp only [Nat.add_succ, Nat.succ_add, Nat.add_zero, Nat.zero_add] at ih \u22a2\n    simp [fib_add, ih]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add_two]\n    simp only [Nat.add_succ, Nat.succ_add, Nat.add_zero, Nat.zero_add, fib_add]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add] at ih\n    simp_all [fib_add, add_mul, mul_add, add_assoc, mul_comm, mul_left_comm]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  simp [fib_add]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  norm_num\n  <;> simp [fib_add]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add_two]\n    simp only [Nat.add_succ, Nat.add_zero, Nat.zero_add] at ih \u22a2\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction' n with n ih generalizing m\n  simp\n  specialize ih (m + 1)\n  simp_all [fib_add_two]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  rw [fib_add_two]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [add_assoc, add_succ, add_comm]\n    simp only [fib_succ_succ, ih, mul_add, mul_comm, mul_left_comm, mul_assoc, add_assoc, add_comm,\n      add_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp only [fib_add_two, ih, Nat.add_succ, Nat.add_zero, Nat.succ_add]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  rw [fib_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add m n]\n    simp only [Nat.add_succ, Nat.add_zero, Nat.zero_add, fib_add]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp only [fib_add_two, ih, Nat.add_succ, Nat.add_zero, Nat.succ_add]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add_two, ih]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_add_two, ih]\n    simp only [Nat.add_succ, Nat.succ_add, Nat.add_one, Nat.one_add]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  rw [add_assoc, fib_add_two, add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [fib_add_two, ihn]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction' n with n ih generalizing m\n  simp\n  specialize ih (m + 1)\n  rw [ih]\n  simp only [add_assoc, add_right_comm, fib_add_two]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [fib_succ_eq, add_assoc, ihn, fib_add_two, add_comm]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction' n with n ih generalizing m\n  simp\n  specialize ih (m + 1)\n  rw [add_assoc m 1 n, add_comm 1 n] at ih\n  simp only [ih, fib_add_two, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction' n with n ih\n  simp\n  rw [fib_add_two, ih]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction' n with n ih generalizing m <;>\n  simp_all [fib_add, mul_comm, mul_assoc, mul_left_comm]\n  <;>\n  ring\n  <;>\n  simp_all [fib_add, mul_comm, mul_assoc, mul_left_comm]\n  <;>\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  simp [fib_add]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_add (m n : \u2115) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) := by\n  induction' n with n ih generalizing m\n  simp\n  specialize ih (m + 1)\n  rw [ih]\n  simp only [Nat.add_succ, fib_add_two]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_78890",
        "split": "test",
        "formal_statement": "theorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by",
        "model_outputs": [
            "\n  simp [List.ofFn, List.map_ofFn]\n  rfl\n```",
            "\n  decide\n```",
            "\n  simp [List.ofFn, Fin.val_zero, Fin.val_one, Fin.val_two, Fin.val_three]\n  rfl\n```",
            "\n  simp [List.ofFn]\n```",
            "\n  rw [List.ofFn]\n  rfl\n```",
            "\n  simp [List.ofFn, List.toArray]\n```",
            "\n  simp [List.ofFn_fin_succ]\n```",
            "\n  rw [List.ofFn]\n  rfl\n```",
            "\n  simp [Fin.forall_fin_four]\n```",
            "\n  decide\n```",
            "\n  simp [List.ofFn]\n```",
            "\n  simp [List.ofFn, List.range]\n  rfl\n```",
            "\n  simp [Fin.forall_fin_succ]\n```",
            "\n  simp [List.ofFn, Fin.val]\n```",
            "\n  rfl\n```",
            "\n  simp [List.ofFn_succ]\n```",
            "\n  simp [Fin.val_zero, Fin.val_one, Fin.val_two, Fin.val_three]\n  rfl\n```",
            "\n  simp [List.ofFn]\n  decide\n```",
            "\n  simp [List.ofFn, List.range, List.map]\n  rfl\n```",
            "\n  simp [List.ofFn, Fin.sum_univ_succ]\n```",
            "\n  decide\n```",
            "\n  simp [List.ofFn, Fin.sum_univ_succ]\n```",
            "\n  simp [List.ofFn, Fin.sum_univ_succ]\n```",
            "\n  decide\n```",
            "\n  simp [List.ofFn_eq_map, List.range_succ]\n  rfl\n```",
            "\n  rfl\n```",
            "\n  simp\n  rfl\n```",
            "\n  simp [Fin.ofFn]\n```",
            "\n  simp [List.ofFn_succ]\n```",
            "\n  decide\n```",
            "\n  simp\n  rfl\n```",
            "\n  simp [Fin.forall_fin_succ]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn, List.map_ofFn]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn, Fin.val_zero, Fin.val_one, Fin.val_two, Fin.val_three]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  rw [List.ofFn]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn, List.toArray]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn_fin_succ]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  rw [List.ofFn]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [Fin.forall_fin_four]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn, List.range]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [Fin.forall_fin_succ]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn, Fin.val]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn_succ]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [Fin.val_zero, Fin.val_one, Fin.val_two, Fin.val_three]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn]\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn, List.range, List.map]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn, Fin.sum_univ_succ]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn, Fin.sum_univ_succ]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn, Fin.sum_univ_succ]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn_eq_map, List.range_succ]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [Fin.ofFn]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [List.ofFn_succ]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem powers_of_two_eq : List.ofFn (fun n : Fin 4 => 2 ^ (n : \u2115)) = [1, 2, 4, 8] := by\n  simp [Fin.forall_fin_succ]"
        ]
    },
    {
        "name": "lean_workbook_plus_82571",
        "split": "test",
        "formal_statement": "theorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by",
        "model_outputs": [
            "\n  rw [\u2190 sub_nonneg]\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz, h]\n```",
            "\n  have h' : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    gcongr\n    <;> simp_all\n    <;> linarith\n  simp_all\n  nlinarith [Real.log_le_sub_one_of_pos (by linarith : 0 < 1)]\n```",
            "\n  have h\u2080 : y * Real.log y + z * Real.log z \u2264 -1 := by\n    have h\u2081 : y * Real.log y + z * Real.log z \u2264 (y + z) * Real.log ((y + z) / 2) + y * Real.log y + z * Real.log z - (y + z) * Real.log ((y + z) / 2) := by\n      nlinarith\n    have h\u2082 : (y + z) * Real.log ((y + z) / 2) = 0 := by\n      rw [h]\n      nlinarith\n    nlinarith\n  exact h\u2080\n```",
            "\n  rw [\u2190 h]\n  nlinarith [Real.log_le_sub_one_of_pos (add_pos hy hz), Real.log_le_sub_one_of_pos hy]\n```",
            "\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]\n```",
            "\n  nlinarith [Real.log_le_sub_one_of_pos (by linarith : 0 < y), Real.log_le_sub_one_of_pos (by linarith : 0 < z)]\n```",
            "\n  rw [\u2190 sub_nonneg]\n  have h' : y + z = 1 := by linarith\n  have h'' : 0 < y := by linarith\n  have h''' : 0 < z := by linarith\n  nlinarith [Real.log_le_sub_one_of_pos h'', Real.log_le_sub_one_of_pos h''']\n```",
            "\n  have h' : z = 1 - y := by linarith\n  subst h'\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos (show 0 < 1 - y by linarith)]\n```",
            "\n  have h\u2081 : 0 < y + z := by linarith\n  have h\u2082 : Real.log (y + z) = Real.log 1 := by rw [h]\n  have h\u2083 : Real.log 1 = 0 := by norm_num\n  have h\u2084 : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    gcongr\n    <;> apply Real.log_le_log <;> linarith\n  have h\u2085 : y * Real.log (y + z) + z * Real.log (y + z) = (y + z) * Real.log (y + z) := by ring\n  have h\u2086 : (y + z) * Real.log (y + z) = 0 := by rw [h\u2082, h\u2083]; ring\n  linarith\n```",
            "\n  rw [\u2190 sub_nonneg]\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz, h]\n```",
            "\n  have : 0 < y * z := mul_pos hy hz\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]\n```",
            "\n  rw [\u2190 h]\n  nlinarith [Real.log_le_sub_one_of_pos (by linarith : y > 0), Real.log_le_sub_one_of_pos (by linarith : z > 0)]\n```",
            "\n  have h\u2081 : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    gcongr\n    <;>\n      linarith\n  rw [h] at h\u2081\n  linarith [Real.log_one]\n```",
            "\n  have h\u2081 : y * Real.log y + z * Real.log z \u2264 (y + z) * Real.log ((y + z) / 2) := by\n    nlinarith [Real.log_le_log_iff (by linarith) (by linarith),\n      Real.log_le_log_iff (by linarith) (by linarith)]\n  rw [h] at h\u2081\n  nlinarith [Real.log_le_log_iff (by linarith) (by linarith)]\n```",
            "\n  have h\u2080 : y = 1 - z := by linarith\n  rw [h\u2080]\n  have h\u2081 : Real.log (1 - z) \u2264 (1 - z) * (-1) := by\n    apply Real.log_le_mul_neg_one\n    linarith\n  have h\u2082 : Real.log z \u2264 z * (-1) := by\n    apply Real.log_le_mul_neg_one\n    linarith\n  nlinarith\n```",
            "\n  have h\u2081 : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    nlinarith [Real.log_le_log_iff (by positivity) (by positivity)]\n  nlinarith [h\u2081]\n```",
            "\n  rw [\u2190 h]\n  have h\u2081 : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    gcongr\n    exact Real.log_le_log_of_le (by linarith) (by linarith)\n    exact Real.log_le_log_of_le (by linarith) (by linarith)\n  have h\u2082 : y * Real.log (y + z) + z * Real.log (y + z) = (y + z) * Real.log (y + z) := by ring\n  rw [h\u2082] at h\u2081\n  have h\u2083 : (y + z) * Real.log (y + z) = -1 := by\n    rw [h]\n    simp\n    linarith\n  linarith\n```",
            "\n  rw [\u2190 h]\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]\n```",
            "\n  have hy' : y = 1 - z := by linarith\n  rw [hy'] at *\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]\n```",
            "\n  have : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    gcongr\n    apply Real.log_le_log\n    \u00b7 linarith\n    \u00b7 linarith\n  rw [h] at this\n  linarith [Real.log_one]\n```",
            "\n  rw [\u2190 neg_neg (1 : \u211d), \u2190 neg_mul_eq_neg_mul, \u2190 neg_mul_eq_neg_mul]\n  nlinarith [mul_pos hy hz, Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]\n```",
            "\n  have h\u2080 : y * Real.log y + z * Real.log z = -(y * Real.log y + z * Real.log z) := by\n    rw [\u2190 sub_eq_zero]\n    nlinarith\n  nlinarith [mul_self_nonneg (y - z), Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]\n```",
            "\n  rw [\u2190 sub_nonneg]\n  have hy' : y < 1 := by linarith\n  have hz' : z < 1 := by linarith\n  have hy'' : y - 1 < 0 := by linarith\n  have hz'' : z - 1 < 0 := by linarith\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]\n```",
            "\n  rw [\u2190 sub_nonneg]\n  have h\u2080 : y * Real.log y + z * Real.log z - (-1) = y * Real.log y + z * Real.log z + 1 := by ring\n  rw [h\u2080]\n  have h\u2081 : y * Real.log y + z * Real.log z + 1 \u2265 0 := by\n    nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]\n  linarith\n```",
            "\n  rw [\u2190 h]\n  nlinarith [Real.log_mul (ne_of_gt hy) (ne_of_gt hz), Real.log_mul (ne_of_gt hy) (ne_of_gt hz)]\n```",
            "\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]\n```",
            "\n  have h\u2081 : 0 < y := hy\n  have h\u2082 : 0 < z := hz\n  have h\u2083 : y + z = 1 := h\n  have h\u2084 : y * Real.log y + z * Real.log z \u2264 -1 := by\n    nlinarith [Real.log_le_sub_one_of_pos h\u2081, Real.log_le_sub_one_of_pos h\u2082]\n  exact h\u2084\n```",
            "\n  have h\u2081 : y * Real.log y + z * Real.log z = (1 - z) * Real.log (1 - z) + z * Real.log z := by\n    rw [\u2190 h]\n    ring_nf\n  rw [h\u2081]\n  nlinarith [Real.log_le_sub_one_of_pos (sub_pos.mpr hz)]\n```",
            "\n  rw [\u2190 sub_nonneg]\n  nlinarith [Real.log_le_sub_one_of_pos (by linarith : 0 < y), Real.log_le_sub_one_of_pos (by linarith : 0 < z)]\n```",
            "\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz, h]\n```",
            "\n  have h\u2080 : y \u2264 1 := by linarith\n  have h\u2081 : z \u2264 1 := by linarith\n  have h\u2082 : y * Real.log y \u2264 0 := by\n    nlinarith [Real.log_le_sub_one_of_pos hy]\n  have h\u2083 : z * Real.log z \u2264 0 := by\n    nlinarith [Real.log_le_sub_one_of_pos hz]\n  nlinarith\n```",
            "\n  have hy' : 0 < y := by linarith\n  have hz' : 0 < z := by linarith\n  have hy'' : y = 1 - z := by linarith\n  rw [hy'']\n  have hz'' : z = 1 - y := by linarith\n  rw [hz'']\n  have hy''' : y - 1 + z = 0 := by linarith\n  have hz''' : z - 1 + y = 0 := by linarith\n  rw [Real.log_one]\n  simp only [zero_add, zero_mul, add_zero, mul_one, sub_zero, sub_neg_eq_add]\n  nlinarith [Real.log_le_sub_one_of_pos hy', Real.log_le_sub_one_of_pos hz']\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 sub_nonneg]\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h' : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    gcongr\n    <;> simp_all\n    <;> linarith\n  simp_all\n  nlinarith [Real.log_le_sub_one_of_pos (by linarith : 0 < 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h\u2080 : y * Real.log y + z * Real.log z \u2264 -1 := by\n    have h\u2081 : y * Real.log y + z * Real.log z \u2264 (y + z) * Real.log ((y + z) / 2) + y * Real.log y + z * Real.log z - (y + z) * Real.log ((y + z) / 2) := by\n      nlinarith\n    have h\u2082 : (y + z) * Real.log ((y + z) / 2) = 0 := by\n      rw [h]\n      nlinarith\n    nlinarith\n  exact h\u2080",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 h]\n  nlinarith [Real.log_le_sub_one_of_pos (add_pos hy hz), Real.log_le_sub_one_of_pos hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  nlinarith [Real.log_le_sub_one_of_pos (by linarith : 0 < y), Real.log_le_sub_one_of_pos (by linarith : 0 < z)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 sub_nonneg]\n  have h' : y + z = 1 := by linarith\n  have h'' : 0 < y := by linarith\n  have h''' : 0 < z := by linarith\n  nlinarith [Real.log_le_sub_one_of_pos h'', Real.log_le_sub_one_of_pos h''']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h' : z = 1 - y := by linarith\n  subst h'\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos (show 0 < 1 - y by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h\u2081 : 0 < y + z := by linarith\n  have h\u2082 : Real.log (y + z) = Real.log 1 := by rw [h]\n  have h\u2083 : Real.log 1 = 0 := by norm_num\n  have h\u2084 : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    gcongr\n    <;> apply Real.log_le_log <;> linarith\n  have h\u2085 : y * Real.log (y + z) + z * Real.log (y + z) = (y + z) * Real.log (y + z) := by ring\n  have h\u2086 : (y + z) * Real.log (y + z) = 0 := by rw [h\u2082, h\u2083]; ring\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 sub_nonneg]\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have : 0 < y * z := mul_pos hy hz\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 h]\n  nlinarith [Real.log_le_sub_one_of_pos (by linarith : y > 0), Real.log_le_sub_one_of_pos (by linarith : z > 0)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h\u2081 : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    gcongr\n    <;>\n      linarith\n  rw [h] at h\u2081\n  linarith [Real.log_one]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h\u2081 : y * Real.log y + z * Real.log z \u2264 (y + z) * Real.log ((y + z) / 2) := by\n    nlinarith [Real.log_le_log_iff (by linarith) (by linarith),\n      Real.log_le_log_iff (by linarith) (by linarith)]\n  rw [h] at h\u2081\n  nlinarith [Real.log_le_log_iff (by linarith) (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h\u2080 : y = 1 - z := by linarith\n  rw [h\u2080]\n  have h\u2081 : Real.log (1 - z) \u2264 (1 - z) * (-1) := by\n    apply Real.log_le_mul_neg_one\n    linarith\n  have h\u2082 : Real.log z \u2264 z * (-1) := by\n    apply Real.log_le_mul_neg_one\n    linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h\u2081 : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    nlinarith [Real.log_le_log_iff (by positivity) (by positivity)]\n  nlinarith [h\u2081]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 h]\n  have h\u2081 : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    gcongr\n    exact Real.log_le_log_of_le (by linarith) (by linarith)\n    exact Real.log_le_log_of_le (by linarith) (by linarith)\n  have h\u2082 : y * Real.log (y + z) + z * Real.log (y + z) = (y + z) * Real.log (y + z) := by ring\n  rw [h\u2082] at h\u2081\n  have h\u2083 : (y + z) * Real.log (y + z) = -1 := by\n    rw [h]\n    simp\n    linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 h]\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have hy' : y = 1 - z := by linarith\n  rw [hy'] at *\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have : y * Real.log y + z * Real.log z \u2264 y * Real.log (y + z) + z * Real.log (y + z) := by\n    gcongr\n    apply Real.log_le_log\n    \u00b7 linarith\n    \u00b7 linarith\n  rw [h] at this\n  linarith [Real.log_one]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 neg_neg (1 : \u211d), \u2190 neg_mul_eq_neg_mul, \u2190 neg_mul_eq_neg_mul]\n  nlinarith [mul_pos hy hz, Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h\u2080 : y * Real.log y + z * Real.log z = -(y * Real.log y + z * Real.log z) := by\n    rw [\u2190 sub_eq_zero]\n    nlinarith\n  nlinarith [mul_self_nonneg (y - z), Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 sub_nonneg]\n  have hy' : y < 1 := by linarith\n  have hz' : z < 1 := by linarith\n  have hy'' : y - 1 < 0 := by linarith\n  have hz'' : z - 1 < 0 := by linarith\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 sub_nonneg]\n  have h\u2080 : y * Real.log y + z * Real.log z - (-1) = y * Real.log y + z * Real.log z + 1 := by ring\n  rw [h\u2080]\n  have h\u2081 : y * Real.log y + z * Real.log z + 1 \u2265 0 := by\n    nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 h]\n  nlinarith [Real.log_mul (ne_of_gt hy) (ne_of_gt hz), Real.log_mul (ne_of_gt hy) (ne_of_gt hz)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h\u2081 : 0 < y := hy\n  have h\u2082 : 0 < z := hz\n  have h\u2083 : y + z = 1 := h\n  have h\u2084 : y * Real.log y + z * Real.log z \u2264 -1 := by\n    nlinarith [Real.log_le_sub_one_of_pos h\u2081, Real.log_le_sub_one_of_pos h\u2082]\n  exact h\u2084",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h\u2081 : y * Real.log y + z * Real.log z = (1 - z) * Real.log (1 - z) + z * Real.log z := by\n    rw [\u2190 h]\n    ring_nf\n  rw [h\u2081]\n  nlinarith [Real.log_le_sub_one_of_pos (sub_pos.mpr hz)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  rw [\u2190 sub_nonneg]\n  nlinarith [Real.log_le_sub_one_of_pos (by linarith : 0 < y), Real.log_le_sub_one_of_pos (by linarith : 0 < z)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  nlinarith [Real.log_le_sub_one_of_pos hy, Real.log_le_sub_one_of_pos hz, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have h\u2080 : y \u2264 1 := by linarith\n  have h\u2081 : z \u2264 1 := by linarith\n  have h\u2082 : y * Real.log y \u2264 0 := by\n    nlinarith [Real.log_le_sub_one_of_pos hy]\n  have h\u2083 : z * Real.log z \u2264 0 := by\n    nlinarith [Real.log_le_sub_one_of_pos hz]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem CM_ineq (y z : \u211d) (hy : y > 0) (hz : z > 0) (h : y + z = 1) : y * Real.log y + z * Real.log z \u2264 -1 := by\n  have hy' : 0 < y := by linarith\n  have hz' : 0 < z := by linarith\n  have hy'' : y = 1 - z := by linarith\n  rw [hy'']\n  have hz'' : z = 1 - y := by linarith\n  rw [hz'']\n  have hy''' : y - 1 + z = 0 := by linarith\n  have hz''' : z - 1 + y = 0 := by linarith\n  rw [Real.log_one]\n  simp only [zero_add, zero_mul, add_zero, mul_one, sub_zero, sub_neg_eq_add]\n  nlinarith [Real.log_le_sub_one_of_pos hy', Real.log_le_sub_one_of_pos hz']"
        ]
    },
    {
        "name": "lean_workbook_plus_45492",
        "split": "test",
        "formal_statement": "theorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by",
        "model_outputs": [
            "\n  constructor <;> nlinarith [sq_nonneg a, sq_nonneg b]\n```",
            "\n  constructor <;>\n  (try\n  { nlinarith })\n  <;>\n  (try\n  { nlinarith })\n```",
            "\n  constructor\n  nlinarith\n  nlinarith\n```",
            "\n  constructor <;>\n  (try\n    nlinarith)\n```",
            "\n  constructor <;> nlinarith\n```",
            "\n  constructor <;>\n  (try\n  {\n    nlinarith\n  })\n```",
            "\n  constructor <;>\n  nlinarith\n```",
            "\n  constructor <;>\n  nlinarith\n```",
            "\n  constructor <;>\n  nlinarith\n```",
            "\n  constructor\n  nlinarith [pow_two_nonneg a]\n  nlinarith [pow_two_nonneg b]\n```",
            "\n  constructor <;>\n  (try\n    nlinarith)\n```",
            "\n  constructor <;>\n  nlinarith\n```",
            "\n  constructor <;> nlinarith\n```",
            "\n  constructor <;> nlinarith\n```",
            "\n  constructor\n  next =>\n    nlinarith\n  next =>\n    nlinarith\n```",
            "\n  constructor <;>\n  (try\n  nlinarith) <;>\n  nlinarith [sq_nonneg a, sq_nonneg b]\n```",
            "\n  constructor\n  nlinarith\n  nlinarith\n```",
            "\n  constructor <;> nlinarith\n```",
            "\n  constructor\n  nlinarith\n  nlinarith\n```",
            "\n  constructor <;>\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (b - 1)]\n```",
            "\n  constructor <;>\n  nlinarith\n```",
            "\n  constructor <;> nlinarith\n```",
            "\n  constructor <;>\n    nlinarith [sq_nonneg a, sq_nonneg b, h]\n```",
            "\n  constructor <;>\n  nlinarith\n```",
            "\n  constructor\n  <;> nlinarith [h]\n```",
            "\n  constructor <;> nlinarith\n```",
            "\n  constructor\n  next =>\n    nlinarith\n  next =>\n    nlinarith\n```",
            "\n  constructor <;> nlinarith\n```",
            "\n  constructor <;>\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (b - 1)]\n```",
            "\n  constructor\n  nlinarith\n  nlinarith\n```",
            "\n  constructor\n  nlinarith\n  nlinarith\n```",
            "\n  constructor <;>\n  nlinarith [sq_nonneg a, sq_nonneg b]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;> nlinarith [sq_nonneg a, sq_nonneg b]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  (try\n  { nlinarith })\n  <;>\n  (try\n  { nlinarith })",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  (try\n    nlinarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  (try\n  {\n    nlinarith\n  })",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor\n  nlinarith [pow_two_nonneg a]\n  nlinarith [pow_two_nonneg b]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  (try\n    nlinarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor\n  next =>\n    nlinarith\n  next =>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  (try\n  nlinarith) <;>\n  nlinarith [sq_nonneg a, sq_nonneg b]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (b - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n    nlinarith [sq_nonneg a, sq_nonneg b, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor\n  <;> nlinarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor\n  next =>\n    nlinarith\n  next =>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (b - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inequality_of_sum_squares_le_two (a b : \u211d) (h : a^2 + b^2 \u2264 2) : a \u2264 1 \u2227 b \u2264 1 := by\n  constructor <;>\n  nlinarith [sq_nonneg a, sq_nonneg b]"
        ]
    },
    {
        "name": "lean_workbook_plus_67669",
        "split": "test",
        "formal_statement": "theorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by",
        "model_outputs": [
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  simp_all only [mul_comm, mul_left_comm, mul_assoc, mul_right_comm]\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]\n```",
            "\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]\n```",
            "\n  simp_all only [mul_one, mul_div_assoc, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [mul_self_nonneg (x / a - y / b), mul_self_nonneg (y / b - z / c), mul_self_nonneg (z / c - x / a)]\n```",
            "\n  nlinarith [mul_self_nonneg (x / a - y / b), mul_self_nonneg (y / b - z / c), mul_self_nonneg (z / c - x / a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), habc, h]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), h, habc]\n```",
            "\n  field_simp [ha, hb, hc]\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  field_simp\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  rw [add_assoc] at habc\n  nlinarith [mul_self_nonneg (x / a - y / b), mul_self_nonneg (y / b - z / c), mul_self_nonneg (z / c - x / a)]\n```",
            "\n  field_simp\n  nlinarith [sq_nonneg (x - y), h, habc]\n```",
            "\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b), mul_self_nonneg (a - b)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]\n```",
            "\n  simp_all only [sq]\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]\n```",
            "\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]\n```",
            "\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  field_simp\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]\n```",
            "\n  have h\u2080 : x ^ 2 / a + y ^ 2 / b + z ^ 2 / c - x * y / a - y * z / b - z * x / c =\n      (x - y) ^ 2 / a + (y - z) ^ 2 / b + (z - x) ^ 2 / c := by\n    ring_nf\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  simp_all only [mul_comm, mul_left_comm, mul_assoc, mul_right_comm]\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  simp_all only [mul_one, mul_div_assoc, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [mul_self_nonneg (x / a - y / b), mul_self_nonneg (y / b - z / c), mul_self_nonneg (z / c - x / a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [mul_self_nonneg (x / a - y / b), mul_self_nonneg (y / b - z / c), mul_self_nonneg (z / c - x / a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (a - b), habc, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), h, habc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  field_simp [ha, hb, hc]\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  field_simp\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  rw [add_assoc] at habc\n  nlinarith [mul_self_nonneg (x / a - y / b), mul_self_nonneg (y / b - z / c), mul_self_nonneg (z / c - x / a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  field_simp\n  nlinarith [sq_nonneg (x - y), h, habc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b), mul_self_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  ring_nf\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  simp_all only [sq]\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [sq_nonneg (x / a - y / b), sq_nonneg (y / b - z / c), sq_nonneg (z / c - x / a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  field_simp\n  nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fermat_le_sum_squares {a b c x y z : \u211d} (ha : 0 < a) (hb : 0 < b) (hc : 0 < c)      (habc : a + b + c = 3) (h : a * b * c = 1) :      x ^ 2 / a + y ^ 2 / b + z ^ 2 / c \u2265 x * y / a + y * z / b + z * x / c := by\n  have h\u2080 : x ^ 2 / a + y ^ 2 / b + z ^ 2 / c - x * y / a - y * z / b - z * x / c =\n      (x - y) ^ 2 / a + (y - z) ^ 2 / b + (z - x) ^ 2 / c := by\n    ring_nf\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]"
        ]
    },
    {
        "name": "lean_workbook_55500",
        "split": "test",
        "formal_statement": "theorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by",
        "model_outputs": [
            "\n  constructor <;> intro h <;> omega\n```",
            "\n  constructor <;> intro h <;>\n  omega\n```",
            "\n  constructor <;> intro h\n  all_goals\n    omega\n```",
            "\n  omega\n```",
            "\n  constructor <;> intro h\n  next =>\n    linarith\n  next =>\n    linarith\n```",
            "\n  constructor <;> intro h <;> omega\n```",
            "\n  omega\n```",
            "\n  cases n <;> simp [Nat.mul_succ, Nat.add_assoc, Nat.add_left_comm, Nat.add_comm]\n  <;> omega\n```",
            "\n  constructor <;> intro h\n  <;>\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  constructor <;> intro h\n  <;> linarith\n```",
            "\n  omega\n```",
            "\n  cases n <;> simp [Nat.mul_succ]\n  decide\n```",
            "\n  constructor <;> intro h <;> omega\n```",
            "\n  constructor <;> intro h\n  next =>\n    linarith\n  next =>\n    linarith\n```",
            "\n  omega\n```",
            "\n  constructor <;> intro h\n  all_goals omega\n```",
            "\n  cases n <;> simp_all [Nat.mul_succ]\n  omega\n```",
            "\n  cases n <;> simp [Nat.succ_le_iff]\n  <;> omega\n```",
            "\n  constructor <;> intro h <;> omega\n```",
            "\n  cases n <;> norm_num\n  simp\n  omega\n```",
            "\n  constructor <;> intro h <;> omega\n```",
            "\n  constructor <;> intro h <;> omega\n```",
            "\n  cases n <;> simp_all [Nat.succ_le_iff]\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  constructor <;> intro h <;> omega\n```",
            "\n  constructor <;> intro h\n  all_goals omega\n```",
            "\n  cases n <;> simp [Nat.succ_eq_add_one, mul_add, mul_one, add_assoc, add_comm, add_left_comm]\n  norm_num\n  omega\n```",
            "\n  constructor <;> intro h\n  all_goals\n    nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h <;>\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h\n  all_goals\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h\n  next =>\n    linarith\n  next =>\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  cases n <;> simp [Nat.mul_succ, Nat.add_assoc, Nat.add_left_comm, Nat.add_comm]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h\n  <;>\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  cases n <;> simp [Nat.mul_succ]\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h\n  next =>\n    linarith\n  next =>\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h\n  all_goals omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  cases n <;> simp_all [Nat.mul_succ]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  cases n <;> simp [Nat.succ_le_iff]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  cases n <;> norm_num\n  simp\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  cases n <;> simp_all [Nat.succ_le_iff]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h\n  all_goals omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  cases n <;> simp [Nat.succ_eq_add_one, mul_add, mul_one, add_assoc, add_comm, add_left_comm]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_lt_two_mul_add_one {n : \u2115} : 3 < 2 * n + 1 \u2194 1 \u2264 n := by\n  constructor <;> intro h\n  all_goals\n    nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_26525",
        "split": "test",
        "formal_statement": "theorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by",
        "model_outputs": [
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by apply sq_nonneg\n  ring_nf at h\u2080 h\u2081 \u22a2\n  nlinarith\n```",
            "\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  rw [pow_three]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : \u2200 x : \u211d, x ^ 2 \u2265 0 := by\n    intro x\n    nlinarith\n  nlinarith [h\u2080 (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  norm_num\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  rw [sq, sq]\n  norm_num\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  simp [sq]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by apply sq_nonneg\n  ring_nf at h\u2080 h\u2081 \u22a2\n  nlinarith\n```",
            "\n  have h\u2080 : \u2200 x : \u211d, x ^ 2 \u2265 0 := fun x => sq_nonneg x\n  have h\u2081 : \u2200 x y : \u211d, x ^ 2 + y ^ 2 \u2265 2 * x * y := fun x y => by\n    nlinarith [sq_nonneg (x - y)]\n  nlinarith [h\u2080 (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by apply sq_nonneg\n  ring_nf at h\u2080 h\u2081 \u22a2\n  nlinarith\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  simp [sq, mul_assoc]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n    have h\u2081 : 0 \u2264 (a - b) ^ 2 := by\n      apply sq_nonneg\n    have h\u2082 : 0 \u2264 (a + b) ^ 2 := by\n      apply sq_nonneg\n    nlinarith\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by apply sq_nonneg\n  ring_nf at h\u2080 h\u2081 \u22a2\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  rw [pow_three]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  have h\u2080 : \u2200 x : \u211d, x ^ 2 \u2265 0 := by\n    intro x\n    nlinarith\n  nlinarith [h\u2080 (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  norm_num\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  rw [sq, sq]\n  norm_num\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  simp [sq]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by apply sq_nonneg\n  ring_nf at h\u2080 h\u2081 \u22a2\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  have h\u2080 : \u2200 x : \u211d, x ^ 2 \u2265 0 := fun x => sq_nonneg x\n  have h\u2081 : \u2200 x y : \u211d, x ^ 2 + y ^ 2 \u2265 2 * x * y := fun x y => by\n    nlinarith [sq_nonneg (x - y)]\n  nlinarith [h\u2080 (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by apply sq_nonneg\n  ring_nf at h\u2080 h\u2081 \u22a2\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  simp [sq, mul_assoc]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_sq_le (a b : \u211d) : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n  have h\u2080 : a * b ^ 2 \u2264 (a ^ 2 + b ^ 2) ^ (3 / 2) := by\n    have h\u2081 : 0 \u2264 (a - b) ^ 2 := by\n      apply sq_nonneg\n    have h\u2082 : 0 \u2264 (a + b) ^ 2 := by\n      apply sq_nonneg\n    nlinarith\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_plus_52965",
        "split": "test",
        "formal_statement": "theorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by",
        "model_outputs": [
            "\n  use s.toFinset.filter (fun x \u21a6 x \u2208 s)\n  simp [h]\n```",
            "\n  induction' h with k h IH\n  case refl => exact \u27e8s, subset_rfl, rfl\u27e9\n  case step =>\n    obtain \u27e8t, ht\u27e9 := IH\n    exact \u27e8t, ht.1, ht.2.symm \u25b8 Nat.succ_inj'.1 (card_insert_of_not_mem ht.1).symm\u27e9\n```",
            "\n  use s.filter (fun _ \u21a6 True)\n  simp only [Finset.card_filter, Finset.filter_true_of_mem, Finset.card_range,\n    Finset.filter_eq', Finset.card_map]\n  exact \u27e8Finset.filter_subset _ _, by simp_all\u27e9\n```",
            "\n  exact \u27e8s.filter (fun x => x \u2208 s), by simp [Finset.filter_subset], by simp [Finset.card_filter, h]\u27e9\n```",
            "\n  induction' h with m h IH\n  exacts [\u27e8\u2205, by simp\u27e9,\n    let \u27e8t, ht\u27e9 := IH\n    \u27e8t.cons (Classical.choose (Finset.exists_mem_of_ne_empty (by rwa [Finset.card_pos, Nat.succ_pos'] at ht))),\n      Finset.subset.trans ht.1 (Finset.cons_subset_cons _ le_rfl),\n      by simp [ht.2]\u27e9]\n```",
            "\n  obtain \u27e8t, ht\u27e9 := Finset.exists_subset_card_eq s n h\n  exact \u27e8t, ht\u27e9\n```",
            "\n  use s.toFinset.filter (fun x => x \u2208 s)\n  simp [h]\n```",
            "\n  use s.filter (fun x => x \u2208 s)\n  simp [h]\n```",
            "\n  exact \u27e8s.filter (fun _ => True), by simp, by simpa using h\u27e9\n```",
            "\n  use s.filter (fun x => x \u2208 s)\n  simp [h]\n```",
            "\n  exact exists_subset_of_card_le h\n```",
            "\n  exact \u27e8s.filter (fun x => x \u2208 s), by simp, by simp [h]\u27e9\n```",
            "\n  use Finset.filter (fun _ => True) s |>.choose\n  simp only [Finset.card_choose, Nat.choose_self, Nat.cast_id, eq_self_iff_true, and_self_iff]\n  exact \u27e8Finset.filter_subset _, by simpa using h\u27e9\n```",
            "\n  obtain \u27e8t, ht\u27e9 := Finset.exists_subset_card_eq s n h\n  exact \u27e8t, ht\u27e9\n```",
            "\n  exact exists_subset_card_eq h\n```",
            "\n  exact exists_subset_card_eq s n h\n```",
            "\n  use Finset.filter (fun x => x \u2208 s) (Finset.range n)\n  simp only [Finset.filter_eq', Finset.card_range, Finset.card_filter]\n  exact \u27e8Finset.filter_subset _, by omega\u27e9\n```",
            "\n  exact \u27e8Finset.filter (fun x \u21a6 x \u2208 s) (Finset.range n), by simp [Finset.filter_subset], by simp [Finset.card_filter, h]\u27e9\n```",
            "\n  exact exists_subset_card_eq s n h\n```",
            "\n  obtain \u27e8t, ht\u2081, ht\u2082\u27e9 := Finset.exists_smaller_set s n h\n  exact \u27e8t, ht\u2081, ht\u2082\u27e9\n```",
            "\n  use s.filter (fun x => x \u2208 s)\n  simp [h, Finset.card_filter]\n```",
            "\n  classical\n    use Finset.image (fun _ => Classical.choose (s.card_pos.mp (by linarith))) (Finset.range n)\n    simp [Finset.card_image_of_injective _ (fun _ _ h => by injection h), h]\n```",
            "\n  exact \u27e8s.filter fun x => x \u2208 s, by simp [h]\u27e9\n```",
            "\n  classical\n  exact \u27e8Finset.filter (fun x : \u03b1 => x \u2208 s) (Finset.range n), by simp [Finset.filter_subset], by simp [Finset.card_filter]\u27e9\n```",
            "\n  exact exists_subset_card_eq.mpr h\n```",
            "\n  use s.toList.take n\n  simp [Finset.card_toList, h]\n  constructor\n  exact List.take_subset _ _\n  rw [List.length_take]\n  exact Nat.min_eq_left h\n```",
            "\n  use Finset.filter (fun x \u21a6 x \u2208 s) (Finset.range n)\n  simp [Finset.filter_subset, Finset.card_range]\n  rwa [Finset.card_filter]\n```",
            "\n  induction h with\n  | refl =>\n    exact \u27e8s, by simp\u27e9\n  | step _ ih =>\n    obtain \u27e8t, ht\u2081, ht\u2082\u27e9 := ih\n    exact \u27e8t, ht\u2081, ht\u2082\u27e9\n```",
            "\n  exact \u27e8Finset.filter (fun _ \u21a6 True) s, by simp [h]\u27e9\n```",
            "\n  rw [\u2190 Nat.card_eq_fintype_card] at h\n  obtain \u27e8t, ht\u27e9 := Finset.exists_intermediate_set s { x | x \u2208 s } n h\n  use t\n  simp_all\n```",
            "\n  use s.filter (fun x => x \u2208 s)\n  simp [h]\n```",
            "\n  exact exists_subset_card_eq s n h\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  use s.toFinset.filter (fun x \u21a6 x \u2208 s)\n  simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  induction' h with k h IH\n  case refl => exact \u27e8s, subset_rfl, rfl\u27e9\n  case step =>\n    obtain \u27e8t, ht\u27e9 := IH\n    exact \u27e8t, ht.1, ht.2.symm \u25b8 Nat.succ_inj'.1 (card_insert_of_not_mem ht.1).symm\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  use s.filter (fun _ \u21a6 True)\n  simp only [Finset.card_filter, Finset.filter_true_of_mem, Finset.card_range,\n    Finset.filter_eq', Finset.card_map]\n  exact \u27e8Finset.filter_subset _ _, by simp_all\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact \u27e8s.filter (fun x => x \u2208 s), by simp [Finset.filter_subset], by simp [Finset.card_filter, h]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  induction' h with m h IH\n  exacts [\u27e8\u2205, by simp\u27e9,\n    let \u27e8t, ht\u27e9 := IH\n    \u27e8t.cons (Classical.choose (Finset.exists_mem_of_ne_empty (by rwa [Finset.card_pos, Nat.succ_pos'] at ht))),\n      Finset.subset.trans ht.1 (Finset.cons_subset_cons _ le_rfl),\n      by simp [ht.2]\u27e9]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  obtain \u27e8t, ht\u27e9 := Finset.exists_subset_card_eq s n h\n  exact \u27e8t, ht\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  use s.toFinset.filter (fun x => x \u2208 s)\n  simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  use s.filter (fun x => x \u2208 s)\n  simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact \u27e8s.filter (fun _ => True), by simp, by simpa using h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  use s.filter (fun x => x \u2208 s)\n  simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact exists_subset_of_card_le h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact \u27e8s.filter (fun x => x \u2208 s), by simp, by simp [h]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  use Finset.filter (fun _ => True) s |>.choose\n  simp only [Finset.card_choose, Nat.choose_self, Nat.cast_id, eq_self_iff_true, and_self_iff]\n  exact \u27e8Finset.filter_subset _, by simpa using h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  obtain \u27e8t, ht\u27e9 := Finset.exists_subset_card_eq s n h\n  exact \u27e8t, ht\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact exists_subset_card_eq h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact exists_subset_card_eq s n h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  use Finset.filter (fun x => x \u2208 s) (Finset.range n)\n  simp only [Finset.filter_eq', Finset.card_range, Finset.card_filter]\n  exact \u27e8Finset.filter_subset _, by omega\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact \u27e8Finset.filter (fun x \u21a6 x \u2208 s) (Finset.range n), by simp [Finset.filter_subset], by simp [Finset.card_filter, h]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact exists_subset_card_eq s n h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  obtain \u27e8t, ht\u2081, ht\u2082\u27e9 := Finset.exists_smaller_set s n h\n  exact \u27e8t, ht\u2081, ht\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  use s.filter (fun x => x \u2208 s)\n  simp [h, Finset.card_filter]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  classical\n    use Finset.image (fun _ => Classical.choose (s.card_pos.mp (by linarith))) (Finset.range n)\n    simp [Finset.card_image_of_injective _ (fun _ _ h => by injection h), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact \u27e8s.filter fun x => x \u2208 s, by simp [h]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  classical\n  exact \u27e8Finset.filter (fun x : \u03b1 => x \u2208 s) (Finset.range n), by simp [Finset.filter_subset], by simp [Finset.card_filter]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact exists_subset_card_eq.mpr h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  use s.toList.take n\n  simp [Finset.card_toList, h]\n  constructor\n  exact List.take_subset _ _\n  rw [List.length_take]\n  exact Nat.min_eq_left h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  use Finset.filter (fun x \u21a6 x \u2208 s) (Finset.range n)\n  simp [Finset.filter_subset, Finset.card_range]\n  rwa [Finset.card_filter]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  induction h with\n  | refl =>\n    exact \u27e8s, by simp\u27e9\n  | step _ ih =>\n    obtain \u27e8t, ht\u2081, ht\u2082\u27e9 := ih\n    exact \u27e8t, ht\u2081, ht\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact \u27e8Finset.filter (fun _ \u21a6 True) s, by simp [h]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  rw [\u2190 Nat.card_eq_fintype_card] at h\n  obtain \u27e8t, ht\u27e9 := Finset.exists_intermediate_set s { x | x \u2208 s } n h\n  use t\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  use s.filter (fun x => x \u2208 s)\n  simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Finset.exists_le_card (s : Finset \u03b1) (n : \u2115) (h : n \u2264 s.card) :      (\u2203 t : Finset \u03b1, t \u2286 s \u2227 t.card = n) := by\n  exact exists_subset_card_eq s n h"
        ]
    },
    {
        "name": "lean_workbook_plus_39089",
        "split": "test",
        "formal_statement": "theorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by",
        "model_outputs": [
            "\n  simp only [sq, sub_mul, mul_sub, mul_one, mul_neg, neg_mul, neg_neg, add_assoc]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith\n```",
            "\n  rw [sq, sq, sq]\n  nlinarith\n```",
            "\n  apply add_nonneg\n  <;> nlinarith\n  <;> nlinarith\n```",
            "\n  linarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  ring\n  nlinarith\n```",
            "\n  ring_nf\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  apply add_nonneg\n  <;> nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  apply add_nonneg\n  <;> nlinarith\n```",
            "\n  rw [sq, sq, sq]\n  linarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  apply add_nonneg\n  <;> nlinarith\n  <;> nlinarith\n  <;> nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  simp only [sq, sub_nonneg]\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  apply add_nonneg\n  <;> nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  apply add_nonneg <;> nlinarith\n```",
            "\n  simp only [sq, add_assoc, add_left_neg, add_zero]\n  nlinarith\n```",
            "\n  apply add_nonneg\n  repeat'\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  apply add_nonneg\n  all_goals\n    nlinarith\n```",
            "\n  simp only [sq, sub_eq_add_neg, add_assoc]\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  linarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  simp only [sq, sub_mul, mul_sub]\n  linarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  rw [sq, sq, sq]\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  simp only [sq, sub_mul, mul_sub, mul_one, mul_neg, neg_mul, neg_neg, add_assoc]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  rw [sq, sq, sq]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  apply add_nonneg\n  <;> nlinarith\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  linarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  ring\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  apply add_nonneg\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  apply add_nonneg\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  rw [sq, sq, sq]\n  linarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  apply add_nonneg\n  <;> nlinarith\n  <;> nlinarith\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  simp only [sq, sub_nonneg]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  apply add_nonneg\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  apply add_nonneg <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  simp only [sq, add_assoc, add_left_neg, add_zero]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  apply add_nonneg\n  repeat'\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  apply add_nonneg\n  all_goals\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  simp only [sq, sub_eq_add_neg, add_assoc]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  linarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  simp only [sq, sub_mul, mul_sub]\n  linarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem trivial_ineq (a b c : \u211d) : 0 \u2264 (a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2 := by\n  rw [sq, sq, sq]\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_14059",
        "split": "test",
        "formal_statement": "theorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by",
        "model_outputs": [
            "\n  have : a \u2261 b [MOD n] := h\n  rw [Nat.modEq_iff_dvd] at this \u22a2\n  omega\n```",
            "\n  have : a - c \u2261 b - c [MOD n] := h.sub (by omega)\n  simpa [Nat.ModEq, Nat.add_comm] using this\n```",
            "\n  rw [Nat.modEq_iff_dvd] at h \u22a2\n  simpa [sub_eq_add_neg, add_comm] using h\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  omega\n```",
            "\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n] at h\n  simp_all [Nat.modeq, Nat.add_mod, Nat.mul_mod]\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  omega\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  omega\n```",
            "\n  have : (a - c) % n = (b - c) % n := by\n    rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n]\n    simp [h, Nat.add_mod, Nat.mul_mod]\n  exact Nat.ModEq.of_dvd (by omega)\n```",
            "\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n, \u2190 Nat.mod_add_div c n]\n  simp_all [Nat.modeq, Nat.add_sub_cancel]\n```",
            "\n  rw [Nat.modeq] at h \u22a2\n  omega\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  omega\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  omega\n```",
            "\n  rw [Nat.modeq] at h \u22a2\n  simp_all [Nat.mod_eq_of_lt]\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  omega\n```",
            "\n  apply Nat.ModEq.sub h\n```",
            "\n  have h\u2081 : a % n = b % n := h\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n]\n  simp [h\u2081, Nat.add_mod, Nat.mul_mod, Nat.mod_mod]\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  omega\n```",
            "\n  rw [Nat.modeq] at h \u22a2\n  simp_all [Nat.mod_eq_of_lt]\n```",
            "\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n] at h\n  rw [\u2190 Nat.mod_add_div a c, \u2190 Nat.mod_add_div b c]\n  simpa [Nat.add_sub_assoc, Nat.add_sub_cancel] using h\n```",
            "\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n]\n  simp_all [Nat.ModEq, Nat.add_mod, Nat.mul_mod, Nat.mod_mod, Nat.mod_self,\n    Nat.zero_add, Nat.add_zero]\n```",
            "\n  have h\u2081 : c % n < n := Nat.mod_lt c (Nat.pos_of_ne_zero (Nat.ne_of_gt (Nat.zero_lt_of_lt h)))\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n] at h\n  omega\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  omega\n```",
            "\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n]\n  simp [Nat.ModEq, Nat.add_mod, Nat.mul_mod] at h \u22a2\n  omega\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  omega\n```",
            "\n  have h\u2081 : a - c + c = b - c + c := by omega\n  have h\u2082 : a = b - c + c := by omega\n  simpa [h\u2082] using h\n```",
            "\n  rw [Nat.modeq] at h \u22a2\n  omega\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  omega\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  omega\n```",
            "\n  rw [Nat.ModEq] at h \u22a2\n  have h' := Nat.mod_add_mod a n c\n  have h'' := Nat.mod_add_mod b n c\n  omega\n```",
            "\n  rw [Nat.modEq_iff_dvd] at *\n  simpa [sub_eq_add_neg, add_comm, add_left_comm] using h\n```",
            "\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n] at h\n  omega\n```",
            "\n  rw [Nat.Modeq] at h \u22a2\n  omega\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  have : a \u2261 b [MOD n] := h\n  rw [Nat.modEq_iff_dvd] at this \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  have : a - c \u2261 b - c [MOD n] := h.sub (by omega)\n  simpa [Nat.ModEq, Nat.add_comm] using this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.modEq_iff_dvd] at h \u22a2\n  simpa [sub_eq_add_neg, add_comm] using h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n] at h\n  simp_all [Nat.modeq, Nat.add_mod, Nat.mul_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  have : (a - c) % n = (b - c) % n := by\n    rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n]\n    simp [h, Nat.add_mod, Nat.mul_mod]\n  exact Nat.ModEq.of_dvd (by omega)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n, \u2190 Nat.mod_add_div c n]\n  simp_all [Nat.modeq, Nat.add_sub_cancel]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.modeq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.modeq] at h \u22a2\n  simp_all [Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  apply Nat.ModEq.sub h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  have h\u2081 : a % n = b % n := h\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n]\n  simp [h\u2081, Nat.add_mod, Nat.mul_mod, Nat.mod_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.modeq] at h \u22a2\n  simp_all [Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n] at h\n  rw [\u2190 Nat.mod_add_div a c, \u2190 Nat.mod_add_div b c]\n  simpa [Nat.add_sub_assoc, Nat.add_sub_cancel] using h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n]\n  simp_all [Nat.ModEq, Nat.add_mod, Nat.mul_mod, Nat.mod_mod, Nat.mod_self,\n    Nat.zero_add, Nat.add_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  have h\u2081 : c % n < n := Nat.mod_lt c (Nat.pos_of_ne_zero (Nat.ne_of_gt (Nat.zero_lt_of_lt h)))\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n] at h\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n]\n  simp [Nat.ModEq, Nat.add_mod, Nat.mul_mod] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  have h\u2081 : a - c + c = b - c + c := by omega\n  have h\u2082 : a = b - c + c := by omega\n  simpa [h\u2082] using h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.modeq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.ModEq] at h \u22a2\n  have h' := Nat.mod_add_mod a n c\n  have h'' := Nat.mod_add_mod b n c\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.modEq_iff_dvd] at *\n  simpa [sub_eq_add_neg, add_comm, add_left_comm] using h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [\u2190 Nat.mod_add_div a n, \u2190 Nat.mod_add_div b n] at h\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modeq_sub (n : \u2115) {a b : \u2115} (c : \u2115) (h : a \u2261 b [MOD n]) : a - c \u2261 b - c [MOD n] := by\n  rw [Nat.Modeq] at h \u22a2\n  omega"
        ]
    },
    {
        "name": "lean_workbook_plus_23676",
        "split": "test",
        "formal_statement": "theorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by",
        "model_outputs": [
            "\n  have ha : 0 < a := by linarith\n  have hb : 0 < b := by linarith\n  nlinarith\n```",
            "\n  have h1 : a \u2264 a * b := by nlinarith\n  linarith\n```",
            "\n  nlinarith\n```",
            "\n  have h1 : a \u2264 a * b := by\n    nlinarith\n  nlinarith\n```",
            "\n  have : 0 < a := by linarith\n  nlinarith\n```",
            "\n  have ha : 0 \u2264 a := by linarith\n  nlinarith\n```",
            "\n  have : 0 \u2264 a * b := mul_nonneg b0 (zero_le_two.trans a2)\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - 1)]\n```",
            "\n  have h : 0 \u2264 a := by linarith\n  nlinarith\n```",
            "\n  nlinarith [mul_le_mul_of_nonneg_right a2 b0]\n```",
            "\n  have a1 : 1 \u2264 a := by linarith\n  have ab : a + b \u2264 a * b := by\n    calc\n      a + b \u2264 2 * b := by linarith\n      _ \u2264 a * b := by linarith\n  exact ab\n```",
            "\n  nlinarith\n```",
            "\n  have h\u2081 : a * b \u2265 a + b := by nlinarith\n  linarith\n```",
            "\n  have a1 : 1 \u2264 a := by linarith\n  have a2 : 0 \u2264 a - 1 := by linarith\n  have b1 : 0 \u2264 a - 1 := by linarith\n  have b2 : 0 \u2264 b := by linarith\n  nlinarith\n```",
            "\n  have h\u2080 : 0 < a := by linarith\n  have h\u2081 : 0 < b := by linarith\n  have h\u2082 : 0 < a * b := mul_pos h\u2080 h\u2081\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 a - 1 := by linarith\n  nlinarith [mul_nonneg (sub_nonneg.mpr a2) b0]\n```",
            "\n  have a1 : 1 \u2264 a := by linarith\n  have a2' : 0 < a := by linarith\n  have a2'' : 0 \u2264 a := by linarith\n  have b1 : 1 \u2264 b := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : a + b \u2264 2 * b + a := by linarith\n  have h\u2081 : 2 * b + a \u2264 2 * b + a * b := by linarith\n  linarith\n```",
            "\n  have : 2 * b \u2264 a * b := by\n    gcongr\n  linarith\n```",
            "\n  nlinarith [mul_le_mul_of_nonneg_right a2 b0]\n```",
            "\n  have : 0 < a := by linarith\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  have h1 : 2 * b \u2264 a * b := by\n    apply mul_le_mul_right b0\n    linarith\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 b := by linarith\n  have h\u2081 : 0 < a := by linarith\n  have h\u2082 : 0 < b := by linarith\n  have h\u2083 : 0 \u2264 a * b := by positivity\n  have h\u2084 : a + b \u2264 a * b := by\n    calc\n      a + b \u2264 a + a := by rel [h\u2082.le]\n      _ = 2 * a := by ring\n      _ \u2264 a * b := by rel [h\u2080, h\u2081]\n  exact h\u2084\n```",
            "\n  have h1 : 0 < a := by linarith\n  nlinarith\n```",
            "\n  have h\u2081 : a + b \u2264 2 * b + a := by linarith\n  have h\u2082 : 2 * b + a \u2264 2 * b + a * b := by linarith\n  linarith\n```",
            "\n  nlinarith\n```",
            "\n  have h1 : a \u2264 a * b := by\n    nlinarith\n  linarith\n```",
            "\n  have h\u2081 : 0 < a := by linarith\n  have h\u2082 : 0 < b := by linarith\n  have h\u2083 : 0 < a * b := mul_pos h\u2081 h\u2082\n  nlinarith [h\u2081, h\u2082, h\u2083]\n```",
            "\n  have a_pos : 0 < a := by linarith\n  have ab_pos : 0 < a * b := mul_pos (zero_lt_two.trans_le a2) b0\n  nlinarith\n```",
            "\n  have h1 : a + b \u2264 2 * b + a := by linarith\n  have h2 : 2 * b + a \u2264 a * b + b := by linarith\n  linarith\n```",
            "\n  have : 0 < a := by linarith\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have ha : 0 < a := by linarith\n  have hb : 0 < b := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h1 : a \u2264 a * b := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h1 : a \u2264 a * b := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 0 < a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have ha : 0 \u2264 a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 0 \u2264 a * b := mul_nonneg b0 (zero_le_two.trans a2)\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith [sq_nonneg (a - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h : 0 \u2264 a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith [mul_le_mul_of_nonneg_right a2 b0]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have a1 : 1 \u2264 a := by linarith\n  have ab : a + b \u2264 a * b := by\n    calc\n      a + b \u2264 2 * b := by linarith\n      _ \u2264 a * b := by linarith\n  exact ab",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h\u2081 : a * b \u2265 a + b := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have a1 : 1 \u2264 a := by linarith\n  have a2 : 0 \u2264 a - 1 := by linarith\n  have b1 : 0 \u2264 a - 1 := by linarith\n  have b2 : 0 \u2264 b := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h\u2080 : 0 < a := by linarith\n  have h\u2081 : 0 < b := by linarith\n  have h\u2082 : 0 < a * b := mul_pos h\u2080 h\u2081\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h\u2080 : 0 \u2264 a - 1 := by linarith\n  nlinarith [mul_nonneg (sub_nonneg.mpr a2) b0]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have a1 : 1 \u2264 a := by linarith\n  have a2' : 0 < a := by linarith\n  have a2'' : 0 \u2264 a := by linarith\n  have b1 : 1 \u2264 b := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h\u2080 : a + b \u2264 2 * b + a := by linarith\n  have h\u2081 : 2 * b + a \u2264 2 * b + a * b := by linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 2 * b \u2264 a * b := by\n    gcongr\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith [mul_le_mul_of_nonneg_right a2 b0]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 0 < a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h1 : 2 * b \u2264 a * b := by\n    apply mul_le_mul_right b0\n    linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h\u2080 : 0 \u2264 b := by linarith\n  have h\u2081 : 0 < a := by linarith\n  have h\u2082 : 0 < b := by linarith\n  have h\u2083 : 0 \u2264 a * b := by positivity\n  have h\u2084 : a + b \u2264 a * b := by\n    calc\n      a + b \u2264 a + a := by rel [h\u2082.le]\n      _ = 2 * a := by ring\n      _ \u2264 a * b := by rel [h\u2080, h\u2081]\n  exact h\u2084",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h1 : 0 < a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h\u2081 : a + b \u2264 2 * b + a := by linarith\n  have h\u2082 : 2 * b + a \u2264 2 * b + a * b := by linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h1 : a \u2264 a * b := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h\u2081 : 0 < a := by linarith\n  have h\u2082 : 0 < b := by linarith\n  have h\u2083 : 0 < a * b := mul_pos h\u2081 h\u2082\n  nlinarith [h\u2081, h\u2082, h\u2083]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have a_pos : 0 < a := by linarith\n  have ab_pos : 0 < a * b := mul_pos (zero_lt_two.trans_le a2) b0\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h1 : a + b \u2264 2 * b + a := by linarith\n  have h2 : 2 * b + a \u2264 a * b + b := by linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 0 < a := by linarith\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_7096",
        "split": "test",
        "formal_statement": "theorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by",
        "model_outputs": [
            "\n  norm_num [Nat.le_of_lt_succ (by decide : 0 < 6)]\n```",
            "\n  linarith [show (0 : \u211d) < \u03b5 from by linarith]\n```",
            "\n  exact Real.sqrt_pos.2 (by norm_num)\n```",
            "\n  exact by norm_num\n```",
            "\n  exact by linarith [Real.pi_pos]\n```",
            "\n  norm_num\n  <;> linarith\n```",
            "\n  simp only [zero_lt_one]\n  linarith\n```",
            "\n  have h : 0 < 1 / 10 := by norm_num\n  linarith\n```",
            "\n  simp [\u03b5]\n```",
            "\n  let \u03b5 : \u211d := 2\n  have : 0 < \u03b5 := by norm_num\n  exact this\n```",
            "\n  exact by norm_num\n```",
            "\n  let M := 10 ^ 400\n  let N := 10 ^ 200\n  have h\u2081 : 0 < \u03b5 := by linarith [Nat.zero_lt_one]\n  have h\u2082 : 0 < \u03b5 := by linarith [Nat.zero_lt_one]\n  have h\u2083 : 0 < \u03b5 := by linarith [Nat.zero_lt_one]\n  have h\u2084 : 0 < \u03b5 := by linarith [Nat.zero_lt_one]\n  have h\u2085 : 0 < \u03b5 := by linarith [Nat.zero_lt_one]\n  exact h\u2085\n```",
            "\n  norm_num\n  linarith\n```",
            "\n  exact Real.eps_pos\n```",
            "\n  norm_num\n  <;> simp [M, \u03b5]\n  <;> linarith\n```",
            "\n  have h : 0 < \u03b5 := by simp\n  exact h\n```",
            "\n  exact by simp [add_comm, mul_comm, mul_left_comm, mul_assoc]\n```",
            "\n  simp_all only [gt_iff_lt]\n  norm_num\n```",
            "\n  exact Real.eps_pos\n```",
            "\n  let m : \u2115 := 4000\n  have h\u2081 : 0 < m := by norm_num\n  have h\u2082 : 0 < \u03b5 := by\n    exact calc\n      0 < m := h\u2081\n      _ \u2264 4000 := by norm_num\n      _ \u2264 \u03b5 := by norm_num\n  exact h\u2082\n```",
            "\n  exact Real.sqrt_pos.2 (by norm_num)\n```",
            "\n  norm_num\n  <;> exact 0\n```",
            "\n  exact by norm_num\n```",
            "\n  exact Real.sqrt_pos.mp (by norm_num)\n```",
            "\n  exact Real.epsilon_pos\n```",
            "\n  exact by\n    norm_num\n```",
            "\n  exact show (0 : \u211d) < \u03b5 by norm_num\n```",
            "\n  exact \u03b5_pos\n```",
            "\n  norm_num\n  <;> apply Nat.cast_pos.2\n  <;> norm_num\n```",
            "\n  exact by\n    norm_num\n    linarith\n```",
            "\n  exact Real.sqrt_pos.mp (by linarith)\n```",
            "\n  exact by linarith [Real.pi_pos]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  norm_num [Nat.le_of_lt_succ (by decide : 0 < 6)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  linarith [show (0 : \u211d) < \u03b5 from by linarith]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact Real.sqrt_pos.2 (by norm_num)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact by linarith [Real.pi_pos]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  norm_num\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  simp only [zero_lt_one]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  have h : 0 < 1 / 10 := by norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  simp [\u03b5]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  let \u03b5 : \u211d := 2\n  have : 0 < \u03b5 := by norm_num\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  let M := 10 ^ 400\n  let N := 10 ^ 200\n  have h\u2081 : 0 < \u03b5 := by linarith [Nat.zero_lt_one]\n  have h\u2082 : 0 < \u03b5 := by linarith [Nat.zero_lt_one]\n  have h\u2083 : 0 < \u03b5 := by linarith [Nat.zero_lt_one]\n  have h\u2084 : 0 < \u03b5 := by linarith [Nat.zero_lt_one]\n  have h\u2085 : 0 < \u03b5 := by linarith [Nat.zero_lt_one]\n  exact h\u2085",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact Real.eps_pos",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  norm_num\n  <;> simp [M, \u03b5]\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  have h : 0 < \u03b5 := by simp\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact by simp [add_comm, mul_comm, mul_left_comm, mul_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  simp_all only [gt_iff_lt]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact Real.eps_pos",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  let m : \u2115 := 4000\n  have h\u2081 : 0 < m := by norm_num\n  have h\u2082 : 0 < \u03b5 := by\n    exact calc\n      0 < m := h\u2081\n      _ \u2264 4000 := by norm_num\n      _ \u2264 \u03b5 := by norm_num\n  exact h\u2082",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact Real.sqrt_pos.2 (by norm_num)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  norm_num\n  <;> exact 0",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact Real.sqrt_pos.mp (by norm_num)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact Real.epsilon_pos",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact by\n    norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact show (0 : \u211d) < \u03b5 by norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact \u03b5_pos",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  norm_num\n  <;> apply Nat.cast_pos.2\n  <;> norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact by\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact Real.sqrt_pos.mp (by linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc_\u03b5 : (0 : \u211d) < \u03b5 := by\n  exact by linarith [Real.pi_pos]"
        ]
    },
    {
        "name": "lean_workbook_4536",
        "split": "test",
        "formal_statement": "theorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by",
        "model_outputs": [
            "\n  rw [arccos_eq_arcsin, \u2190 arcsin_div_one_add_sq, div_eq_mul_inv]\n  field_simp\n  ring\n  rw [sqrt_sq_eq_abs, abs_eq_self.mpr]\n  all_goals nlinarith\n```",
            "\n  rw [\u2190 arccos_sq_eq_arctan_sq, sq, sq]\n  field_simp [h]\n```",
            "\n  rw [arccos_eq_arctan]\n  field_simp\n  ring_nf\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [arccos, \u2190 neg_eq_iff_eq_neg]\n  field_simp [sqrt_eq_iff_sq_eq, h]\n  ring_nf\n  congr\n  rw [sqrt_sq, add_comm]\n  ring_nf\n  rw [add_comm]\n  ring_nf\n```",
            "\n  rw [arccos_eq_arctan]\n  field_simp [sqrt_sq_eq_abs, abs_of_nonneg h]\n```",
            "\n  rw [eq_comm]\n  apply Eq.symm\n  rw [arccos_eq_arctan]\n  rw [inv_nonneg]\n  exact sqrt_nonneg _\n```",
            "\n  rw [eq_comm]\n  rw [arccos_eq_arctan]\n  rw [inv_nonneg]\n  exact by positivity\n```",
            "\n  rw [arccos_eq_arctan]\n  field_simp [h]\n```",
            "\n  rw [arccos_eq_arctan]\n  simp [h]\n```",
            "\n  rw [eq_comm]\n  apply Eq.symm\n  rw [arccos_eq_arctan]\n  field_simp [h]\n```",
            "\n  rw [eq_comm]\n  apply Eq.symm\n  rw [arccos_eq_arctan]\n  norm_cast\n  ring_nf\n  rw [sqrt_sq_eq_abs]\n  norm_cast\n  rw [abs_of_nonneg h]\n```",
            "\n  rw [arccos_eq_arctan, inv_eq_one_div, div_eq_mul_inv]\n  congr\n  ring_nf\n```",
            "\n  rw [eq_comm]\n  rw [arccos_eq_arctan]\n  rw [inv_nonneg]\n  positivity\n```",
            "\n  rw [eq_comm]\n  rw [arccos, eq_comm]\n  rw [arccos, eq_comm]\n  rw [arccos]\n  norm_num\n  rw [eq_comm]\n  rw [arccos]\n  norm_num\n  field_simp\n  ring\n```",
            "\n  rw [arccos_eq_arcsin, arcsin_eq_arctan_div_sqrt]\n  field_simp\n  rw [add_comm]\n```",
            "\n  rw [arccos_eq_arcsin, \u2190 one_div, div_eq_mul_inv]\n  field_simp\n  ring_nf\n  rw [sqrt_div, sqrt_sq, one_div, arctan_eq_arcsin]\n  all_goals nlinarith\n```",
            "\n  rw [arccos_eq_arctan]\n  field_simp [h]\n```",
            "\n  rw [arccos_eq_arctan]\n  norm_num\n  ring_nf\n  norm_num\n  rw [sqrt_sq_eq_abs]\n  norm_num\n  linarith\n```",
            "\n  rw [\u2190 arccos_eq_arcsin]\n  field_simp [sqrt_sq_eq_abs, abs_of_nonneg, h]\n```",
            "\n  rw [arccos_eq_arcsin, sqrt_eq_rpow, \u2190 inv_sqrt_one_add_lt_two x]\n  field_simp [h, Real.sqrt_eq_zero, add_nonneg, h, zero_le_one]\n  ring\n```",
            "\n  rw [eq_comm]\n  rw [eq_comm]\n  apply Eq.symm\n  rw [eq_comm]\n  apply Eq.symm\n  field_simp [h]\n  rw [Real.sqrt_sq_eq_abs, abs_of_nonneg h]\n```",
            "\n  rw [arccos, \u2190 eq_comm]\n  field_simp [Real.sqrt_eq_iff_sq_eq, h, add_nonneg h (sq_nonneg _),\n    add_le_add_left (sq_nonneg _) 1]\n  ring\n```",
            "\n  rw [arccos_eq_arctan]\n  field_simp [sqrt_sq_eq_abs, abs_of_nonneg, h]\n```",
            "\n  rw [eq_comm]\n  apply Eq.symm\n  rw [arccos, eq_comm]\n  apply Eq.symm\n  rw [arccos, eq_comm]\n  apply Eq.symm\n  rw [arccos]\n  norm_cast\n```",
            "\n  rw [arccos_eq_arcsin]\n  rw [arcsin_eq_arctan]\n  norm_cast\n```",
            "\n  rw [arccos_eq_arctan]\n  field_simp [h]\n```",
            "\n  rw [eq_comm]\n  apply Eq.symm\n  rw [arccos_eq_arctan]\n  rw [inv_nonneg]\n  apply sqrt_nonneg\n```",
            "\n  rw [arccos_eq_arcsin]\n  rw [Real.arctan_eq_arcsin]\n  rw [Real.sqrt_inv]\n  rw [Real.sqrt_sq_eq_abs]\n  rw [abs_of_nonneg]\n  ring_nf\n  nlinarith\n```",
            "\n  rw [arccos_eq_arctan, inv_eq_one_div]\n  rw [add_comm]\n  norm_cast\n```",
            "\n  rw [arccos_eq_arctan]\n  field_simp [h]\n```",
            "\n  rw [arccos_eq_arcsin, \u2190 arcsin_eq_arctan]\n  rw [eq_comm]\n  rw [eq_comm]\n  field_simp\n  ring\n```",
            "\n  rw [arccos_eq_arctan, \u2190 tan_pi_div_two_sub, tan_pi_div_two_sub]\n  field_simp\n  rw [sqrt_sq h]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arcsin, \u2190 arcsin_div_one_add_sq, div_eq_mul_inv]\n  field_simp\n  ring\n  rw [sqrt_sq_eq_abs, abs_eq_self.mpr]\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [\u2190 arccos_sq_eq_arctan_sq, sq, sq]\n  field_simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan]\n  field_simp\n  ring_nf\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos, \u2190 neg_eq_iff_eq_neg]\n  field_simp [sqrt_eq_iff_sq_eq, h]\n  ring_nf\n  congr\n  rw [sqrt_sq, add_comm]\n  ring_nf\n  rw [add_comm]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan]\n  field_simp [sqrt_sq_eq_abs, abs_of_nonneg h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [eq_comm]\n  apply Eq.symm\n  rw [arccos_eq_arctan]\n  rw [inv_nonneg]\n  exact sqrt_nonneg _",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [eq_comm]\n  rw [arccos_eq_arctan]\n  rw [inv_nonneg]\n  exact by positivity",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan]\n  field_simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan]\n  simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [eq_comm]\n  apply Eq.symm\n  rw [arccos_eq_arctan]\n  field_simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [eq_comm]\n  apply Eq.symm\n  rw [arccos_eq_arctan]\n  norm_cast\n  ring_nf\n  rw [sqrt_sq_eq_abs]\n  norm_cast\n  rw [abs_of_nonneg h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan, inv_eq_one_div, div_eq_mul_inv]\n  congr\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [eq_comm]\n  rw [arccos_eq_arctan]\n  rw [inv_nonneg]\n  positivity",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [eq_comm]\n  rw [arccos, eq_comm]\n  rw [arccos, eq_comm]\n  rw [arccos]\n  norm_num\n  rw [eq_comm]\n  rw [arccos]\n  norm_num\n  field_simp\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arcsin, arcsin_eq_arctan_div_sqrt]\n  field_simp\n  rw [add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arcsin, \u2190 one_div, div_eq_mul_inv]\n  field_simp\n  ring_nf\n  rw [sqrt_div, sqrt_sq, one_div, arctan_eq_arcsin]\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan]\n  field_simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan]\n  norm_num\n  ring_nf\n  norm_num\n  rw [sqrt_sq_eq_abs]\n  norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [\u2190 arccos_eq_arcsin]\n  field_simp [sqrt_sq_eq_abs, abs_of_nonneg, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arcsin, sqrt_eq_rpow, \u2190 inv_sqrt_one_add_lt_two x]\n  field_simp [h, Real.sqrt_eq_zero, add_nonneg, h, zero_le_one]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [eq_comm]\n  rw [eq_comm]\n  apply Eq.symm\n  rw [eq_comm]\n  apply Eq.symm\n  field_simp [h]\n  rw [Real.sqrt_sq_eq_abs, abs_of_nonneg h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos, \u2190 eq_comm]\n  field_simp [Real.sqrt_eq_iff_sq_eq, h, add_nonneg h (sq_nonneg _),\n    add_le_add_left (sq_nonneg _) 1]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan]\n  field_simp [sqrt_sq_eq_abs, abs_of_nonneg, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [eq_comm]\n  apply Eq.symm\n  rw [arccos, eq_comm]\n  apply Eq.symm\n  rw [arccos, eq_comm]\n  apply Eq.symm\n  rw [arccos]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arcsin]\n  rw [arcsin_eq_arctan]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan]\n  field_simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [eq_comm]\n  apply Eq.symm\n  rw [arccos_eq_arctan]\n  rw [inv_nonneg]\n  apply sqrt_nonneg",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arcsin]\n  rw [Real.arctan_eq_arcsin]\n  rw [Real.sqrt_inv]\n  rw [Real.sqrt_sq_eq_abs]\n  rw [abs_of_nonneg]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan, inv_eq_one_div]\n  rw [add_comm]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan]\n  field_simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arcsin, \u2190 arcsin_eq_arctan]\n  rw [eq_comm]\n  rw [eq_comm]\n  field_simp\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arctan_eq_arccos {x : \u211d} (h : 0 \u2264 x) : arctan x = arccos (\u221a(1 + x ^ 2))\u207b\u00b9 := by\n  rw [arccos_eq_arctan, \u2190 tan_pi_div_two_sub, tan_pi_div_two_sub]\n  field_simp\n  rw [sqrt_sq h]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_75474",
        "split": "test",
        "formal_statement": "theorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by",
        "model_outputs": [
            "\n  constructor <;> intro h <;>\n  linarith\n```",
            "\n  constructor <;> intro h\n  nlinarith\n  nlinarith\n```",
            "\n  constructor <;> intro <;> linarith\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro h\n  <;> nlinarith\n  <;> nlinarith\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro <;>\n  linarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro h\n  all_goals nlinarith [sq_nonneg (c + d), sq_nonneg (c - d)]\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor\n  case mp =>\n    intro h\n    nlinarith\n  case mpr =>\n    intro h\n    nlinarith\n```",
            "\n  ring_nf\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro h\n  all_goals nlinarith\n```",
            "\n  constructor <;> intro <;>\n  nlinarith\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro h\n  all_goals nlinarith\n```",
            "\n  constructor <;> intro h <;>\n    nlinarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro h\n  nlinarith\n  nlinarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor\n  <;> intro h\n  <;> nlinarith\n  <;> nlinarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro <;>\n  linarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro <;>\n    linarith\n```",
            "\n  constructor <;> intro <;> linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;>\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h\n  <;> nlinarith\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro <;>\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h\n  all_goals nlinarith [sq_nonneg (c + d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor\n  case mp =>\n    intro h\n    nlinarith\n  case mpr =>\n    intro h\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  ring_nf\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor\n  <;> intro h\n  <;> nlinarith\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro <;>\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro <;>\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_pow_two_add_b_pow_two_le_c_pow_two_add_d_pow_two : a ^ 2 + b ^ 2 \u2264 c ^ 2 + d ^ 2 \u2194 0 \u2264 (c + d) * (c - d) := by\n  constructor <;> intro <;> linarith"
        ]
    },
    {
        "name": "lean_workbook_20895",
        "split": "test",
        "formal_statement": "theorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by",
        "model_outputs": [
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  linarith\n```",
            "\n  omega\n```",
            "\n  cases' h with h\u2080 h\u2081\n  omega\n```",
            "\n  cases' h with h\u2080 h\u2081\n  linarith\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  cases' h with h\u2081 h\u2082\n  linarith\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  cases' h with h\u2080 h\u2081\n  linarith\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  cases' h with h\u2080 h\u2081\n  omega\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  cases' h with h\u2080 h\u2081\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  cases' h with h\u2080 h\u2081\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  cases' h with h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  cases' h with h\u2080 h\u2081\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_median_succ_succ {m n k : \u2115} (a b c d e : \u2115) (h : m \u2264 n \u2227 n \u2264 k)     (nm : n \u2264 m + 1) (mk : m \u2264 k + 1)     (h2 : (a + b + c + d + e) / 5 < m) (h3 : (a + b + c + d + e) / 5 < n) (h4 : (a + b + c + d + e) / 5 < k)     (nh : n \u2264 (a + b + c) / 2) (mk : m \u2264 (a + b + c) / 2) :     (a + b + c + d + e) / 5 \u2264 (a + b + c) / 2 := by\n  cases' h with h\u2080 h\u2081\n  omega"
        ]
    },
    {
        "name": "lean_workbook_plus_61869",
        "split": "test",
        "formal_statement": "theorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by",
        "model_outputs": [
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith\n```",
            "\n  have h : (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 \u2265 0 := by\n    nlinarith\n  linarith\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith [sq_nonneg a]\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith [sq_nonneg b]\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith [sq_nonneg c]\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (a - 1) ^ 2 := by\n    nlinarith\n  have h\u2082 : 0 \u2264 (b - 1) ^ 2 := by\n    nlinarith\n  have h\u2083 : 0 \u2264 (c - 1) ^ 2 := by\n    nlinarith\n  linarith\n```",
            "\n  have h : \u2200 x : \u211d, x ^ 2 \u2264 1 := by\n    intro x\n    nlinarith [sq_nonneg (x - 1)]\n  linarith [h a, h b, h c]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - 1) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (c - 1) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (1 + a)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (b - 1), sq_nonneg (1 + b)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (c - 1), sq_nonneg (1 + c)]\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]\n```",
            "\n  have h\u2081 : a ^ 2 \u2264 1 := by\n    have h\u2082 : a ^ 2 \u2264 1 := by\n      nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n    nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2082 : b ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2083 : c ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 := by\n    apply add_nonneg\n    repeat'\n      nlinarith\n  linarith\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]\n```",
            "\n  linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]\n```",
            "\n  have h\u2081 : 0 \u2264 (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 a ^ 2 + b ^ 2 + c ^ 2 - (a + b + c) ^ 2 / 3 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]\n  linarith [sq_nonneg a, sq_nonneg b, sq_nonneg c]\n```",
            "\n  have : (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 \u2265 0 := by nlinarith\n  nlinarith\n```",
            "\n  linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith\n```",
            "\n  have h : \u2200 x : \u211d, x ^ 2 \u2264 1 \u2192 x ^ 2 \u2264 3 / 3 := by\n    intro x hx\n    linarith\n  have h\u2081 := h a (by nlinarith)\n  have h\u2082 := h b (by nlinarith)\n  have h\u2083 := h c (by nlinarith)\n  linarith\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith\n```",
            "\n  have h : \u2200 x : \u211d, x ^ 2 \u2264 1 := by\n    intro x\n    nlinarith [sq_nonneg x, sq_nonneg (x - 1)]\n  linarith [h a, h b, h c]\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith [sq_nonneg a]\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith [sq_nonneg b]\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith [sq_nonneg c]\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by nlinarith\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith [sq_nonneg a, sq_nonneg (a - 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith [sq_nonneg b, sq_nonneg (b - 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith [sq_nonneg c, sq_nonneg (c - 1)]\n  linarith\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - 1) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by apply sq_nonneg\n  have h\u2082 : 0 \u2264 (c - 1) ^ 2 := by apply sq_nonneg\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h : (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 \u2265 0 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith [sq_nonneg a]\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith [sq_nonneg b]\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith [sq_nonneg c]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2081 : 0 \u2264 (a - 1) ^ 2 := by\n    nlinarith\n  have h\u2082 : 0 \u2264 (b - 1) ^ 2 := by\n    nlinarith\n  have h\u2083 : 0 \u2264 (c - 1) ^ 2 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h : \u2200 x : \u211d, x ^ 2 \u2264 1 := by\n    intro x\n    nlinarith [sq_nonneg (x - 1)]\n  linarith [h a, h b, h c]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : 0 \u2264 (a - 1) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (c - 1) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (1 + a)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (b - 1), sq_nonneg (1 + b)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (c - 1), sq_nonneg (1 + c)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2081 : a ^ 2 \u2264 1 := by\n    have h\u2082 : a ^ 2 \u2264 1 := by\n      nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n    nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2082 : b ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2083 : c ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : 0 \u2264 (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 := by\n    apply add_nonneg\n    repeat'\n      nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2081 : 0 \u2264 (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 a ^ 2 + b ^ 2 + c ^ 2 - (a + b + c) ^ 2 / 3 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : 0 \u2264 (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]\n  linarith [sq_nonneg a, sq_nonneg b, sq_nonneg c]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have : (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 \u2265 0 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h : \u2200 x : \u211d, x ^ 2 \u2264 1 \u2192 x ^ 2 \u2264 3 / 3 := by\n    intro x hx\n    linarith\n  have h\u2081 := h a (by nlinarith)\n  have h\u2082 := h b (by nlinarith)\n  have h\u2083 := h c (by nlinarith)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    linarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h : \u2200 x : \u211d, x ^ 2 \u2264 1 := by\n    intro x\n    nlinarith [sq_nonneg x, sq_nonneg (x - 1)]\n  linarith [h a, h b, h c]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (b - 1), sq_nonneg (b + 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by\n    nlinarith [sq_nonneg (c - 1), sq_nonneg (c + 1)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith [sq_nonneg a]\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith [sq_nonneg b]\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith [sq_nonneg c]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : 0 \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by nlinarith\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith [sq_nonneg a, sq_nonneg (a - 1)]\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith [sq_nonneg b, sq_nonneg (b - 1)]\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith [sq_nonneg c, sq_nonneg (c - 1)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 \u2264 1 := by nlinarith\n  have h\u2081 : b ^ 2 \u2264 1 := by nlinarith\n  have h\u2082 : c ^ 2 \u2264 1 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n    linarith [sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_square_le (a b c : \u211d) : a ^ 2 + b ^ 2 + c ^ 2 \u2264 3 := by\n  have h\u2080 : 0 \u2264 (a - 1) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (b - 1) ^ 2 := by apply sq_nonneg\n  have h\u2082 : 0 \u2264 (c - 1) ^ 2 := by apply sq_nonneg\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_49841",
        "split": "test",
        "formal_statement": "theorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by",
        "model_outputs": [
            "\n  rw [Real.sq_sqrt h]\n```",
            "\n  rw [sq]\n  exact Real.mul_self_sqrt h\n```",
            "\n  rw [Real.sq_sqrt h]\n```",
            "\n  rw [sq]\n  exact Real.mul_self_sqrt h\n```",
            " rw [sq, mul_self_sqrt h]\n\ntheorem sqrt_sq {x} (hx : 0 \u2264 x) : \u221a(x ^ 2) = x := by rw [sq, sqrt_mul_self hx]\n\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x :=\n  \u27e8fun h => by rw [\u2190 h, sq_sqrt hx], fun h => by rw [\u2190 h, sqrt_sq hy]\u27e9\n\ntheorem sqrt_mul_self_eq_abs (x : \u211d) : \u221a(x * x) = |x| := by\n  rw [\u2190 abs_mul_abs_self x, sqrt_mul_self (abs_nonneg _)]\n\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by rw [sq, sqrt_mul_self_eq_abs]\n\n@[simp]\ntheorem sqrt_zero : \u221a0 = 0 := by rw [\u2190 mul_self_eq_zero, sqrt_mul_self (by norm_num : (0 : \u211d) \u2265 0)]\n\n@[simp]\ntheorem sqrt_one : \u221a1 = 1 := by rw [\u2190 mul_self_eq_one, sqrt_mul_self (by norm_num : (1 : \u211d) \u2265 0)]\n\ntheorem sqrt_mul (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221a(x * y) = \u221ax * \u221ay := by\n  rw [sqrt_eq_iff_sq_eq, sq, mul_self_sqrt (mul_nonneg hx hy), mul_assoc, \u2190 sqrt_mul_self hx,\n    mul_comm, \u2190 mul_assoc, \u2190 sqrt_mul_self hy, \u2190 sq, \u2190 sqrt_mul hx]\n  positivity\n```",
            "\n  rw [sq]\n  exact Real.sqrt_mul_self h\n```",
            "\n  rw [sq, Real.mul_self_sqrt h]\n```",
            "\n  rw [sq]\n  exact Real.sqrt_mul_self h\n```",
            "\n  rw [sq, mul_self_sqrt h]\n```",
            "\n  rw [sq, mul_self_sqrt h]\n```",
            "\n  rw [sq]\n  exact Real.mul_self_sqrt h\n```",
            "\n  rw [sq, Real.mul_self_sqrt h]\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;>\n  nlinarith\n```",
            "\n  rw [Real.sq_sqrt h]\n```",
            "\n  rw [sq, mul_self_sqrt h]\n```",
            "\n  rw [sqrt_eq_iff_mul_self_eq, mul_self_eq_mul_self_iff]\n  exact \u27e8h, by linarith\u27e9\n```",
            " rw [Real.sq_sqrt h]\n\ntheorem sqrt_eq_iff_sq_eq (h : 0 \u2264 x) (h\u2081 : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x :=\n  \u27e8fun h\u2082 => by rw [\u2190 h\u2082, sq_sqrt h], fun h\u2082 => by rw [\u2190 h\u2082, Real.sqrt_sq h\u2081]\u27e9\n\ntheorem sqrt_mul_self (h : 0 \u2264 x) : \u221a(x * x) = x := by rw [\u2190 sq, sq_sqrt h]\n\ntheorem sqrt_sq (h : 0 \u2264 x) : \u221a(x ^ 2) = x := by rw [sq, sqrt_mul_self h]\n\ntheorem sqrt_eq_zero_of_nonpos (h : x \u2264 0) : \u221ax = 0 :=\n  (Real.sqrt_eq_zero_of_nonpos h).trans <| by rw [sq, mul_zero]\n```",
            "\n  rw [Real.sq_sqrt h]\n```",
            " rw [sq, mul_self_sqrt h]\n\ntheorem sqrt_sq (h : 0 \u2264 x) : \u221a(x ^ 2) = x := by rw [sq, sqrt_mul_self h]\n\ntheorem sqrt_eq_iff_sq_eq (h : 0 \u2264 x) (h' : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  rw [\u2190 h.antisymm_iff, h'.antisymm_iff]\n  exact sqrt_sq h'\n\ntheorem sqrt_mul_self_eq_abs (x : \u03b1) : \u221a(x * x) = |x| := by\n  rw [\u2190 abs_mul_abs_self x, sqrt_sq (abs_nonneg _)]\n\ntheorem sqrt_sq_eq_abs (x : \u03b1) : \u221a(x ^ 2) = |x| := by rw [sq, sqrt_mul_self_eq_abs]\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq]\n  exacts [mul_self_nonneg _, h]\n```",
            "\n  rw [sq]\n  exact Real.sqrt_mul_self h\n```",
            "\n  rw [Real.sq_sqrt h]\n```",
            "\n  rw [sq]\n  exact Real.sqrt_mul_self h\n```",
            "\n  rw [sq, \u2190 Real.sqrt_mul_self h]\n```",
            "\n  rw [Real.sq_sqrt h]\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith\n```",
            " rw [Real.sqrt_eq_iff_mul_self_eq (by positivity) (by positivity)]\n  <;> nlinarith\n```",
            "\n  rw [sq]\n  exact Real.mul_self_sqrt h\n```",
            "\n  rw [sq, mul_self_sqrt h]\n```",
            "\n  rw [sq]\n  rw [Real.sqrt_mul_self h]\n```",
            "\n  rw [sq]\n  exact Real.mul_self_sqrt h\n```",
            "\n  rw [sq, Real.mul_self_sqrt h]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.mul_self_sqrt h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.mul_self_sqrt h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by rw [sq, mul_self_sqrt h]\n\ntheorem sqrt_sq {x} (hx : 0 \u2264 x) : \u221a(x ^ 2) = x := by rw [sq, sqrt_mul_self hx]\n\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x :=\n  \u27e8fun h => by rw [\u2190 h, sq_sqrt hx], fun h => by rw [\u2190 h, sqrt_sq hy]\u27e9\n\ntheorem sqrt_mul_self_eq_abs (x : \u211d) : \u221a(x * x) = |x| := by\n  rw [\u2190 abs_mul_abs_self x, sqrt_mul_self (abs_nonneg _)]\n\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by rw [sq, sqrt_mul_self_eq_abs]\n\n@[simp]\ntheorem sqrt_zero : \u221a0 = 0 := by rw [\u2190 mul_self_eq_zero, sqrt_mul_self (by norm_num : (0 : \u211d) \u2265 0)]\n\n@[simp]\ntheorem sqrt_one : \u221a1 = 1 := by rw [\u2190 mul_self_eq_one, sqrt_mul_self (by norm_num : (1 : \u211d) \u2265 0)]\n\ntheorem sqrt_mul (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221a(x * y) = \u221ax * \u221ay := by\n  rw [sqrt_eq_iff_sq_eq, sq, mul_self_sqrt (mul_nonneg hx hy), mul_assoc, \u2190 sqrt_mul_self hx,\n    mul_comm, \u2190 mul_assoc, \u2190 sqrt_mul_self hy, \u2190 sq, \u2190 sqrt_mul hx]\n  positivity",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.sqrt_mul_self h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, Real.mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.sqrt_mul_self h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.mul_self_sqrt h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, Real.mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sqrt_eq_iff_mul_self_eq, mul_self_eq_mul_self_iff]\n  exact \u27e8h, by linarith\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by rw [Real.sq_sqrt h]\n\ntheorem sqrt_eq_iff_sq_eq (h : 0 \u2264 x) (h\u2081 : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x :=\n  \u27e8fun h\u2082 => by rw [\u2190 h\u2082, sq_sqrt h], fun h\u2082 => by rw [\u2190 h\u2082, Real.sqrt_sq h\u2081]\u27e9\n\ntheorem sqrt_mul_self (h : 0 \u2264 x) : \u221a(x * x) = x := by rw [\u2190 sq, sq_sqrt h]\n\ntheorem sqrt_sq (h : 0 \u2264 x) : \u221a(x ^ 2) = x := by rw [sq, sqrt_mul_self h]\n\ntheorem sqrt_eq_zero_of_nonpos (h : x \u2264 0) : \u221ax = 0 :=\n  (Real.sqrt_eq_zero_of_nonpos h).trans <| by rw [sq, mul_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by rw [sq, mul_self_sqrt h]\n\ntheorem sqrt_sq (h : 0 \u2264 x) : \u221a(x ^ 2) = x := by rw [sq, sqrt_mul_self h]\n\ntheorem sqrt_eq_iff_sq_eq (h : 0 \u2264 x) (h' : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  rw [\u2190 h.antisymm_iff, h'.antisymm_iff]\n  exact sqrt_sq h'\n\ntheorem sqrt_mul_self_eq_abs (x : \u03b1) : \u221a(x * x) = |x| := by\n  rw [\u2190 abs_mul_abs_self x, sqrt_sq (abs_nonneg _)]\n\ntheorem sqrt_sq_eq_abs (x : \u03b1) : \u221a(x ^ 2) = |x| := by rw [sq, sqrt_mul_self_eq_abs]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq]\n  exacts [mul_self_nonneg _, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.sqrt_mul_self h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.sqrt_mul_self h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, \u2190 Real.sqrt_mul_self h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by rw [Real.sqrt_eq_iff_mul_self_eq (by positivity) (by positivity)]\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.mul_self_sqrt h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  rw [Real.sqrt_mul_self h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq]\n  exact Real.mul_self_sqrt h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_sqrt (h : 0 \u2264 x) : \u221ax ^ 2 = x := by\n  rw [sq, Real.mul_self_sqrt h]"
        ]
    },
    {
        "name": "lean_workbook_8496",
        "split": "test",
        "formal_statement": "theorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by",
        "model_outputs": [
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have h : \u2200 x : \u211d, x ^ 2 \u2265 0 := fun x => sq_nonneg x\n  linarith [h (a - c), h (b - c)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - c) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  linarith [sq_nonneg (b - c)]\n```",
            "\n  have h : 0 \u2264 (a - c / 2) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (a - c)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b / 2) ^ 2 + (c - b / 2) ^ 2 := by\n    nlinarith\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (b - c) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (c - a) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : (a - c) ^ 2 + (a - b) ^ 2 + (b - c) ^ 2 \u2265 0 := by nlinarith\n  linarith\n```",
            "\n  have h : 0 \u2264 (a - c) ^ 2 + (a - b) ^ 2 := by\n    linarith [sq_nonneg (a - c), sq_nonneg (a - b)]\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c)]\n```",
            "\n  have h : (a - c) ^ 2 + (b - c) ^ 2 \u2265 0 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - c) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by\n    nlinarith\n  nlinarith\n```",
            "\n  linarith [mul_self_nonneg (a - b), mul_self_nonneg (c - b)]\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by\n    apply add_nonneg\n    \u00b7 apply sq_nonneg\n    \u00b7 apply sq_nonneg\n  linarith\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b / 2) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - c / 2) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - c) ^ 2 + (a - b) ^ 2 + (b - c) ^ 2 := by\n    linarith [sq_nonneg (a - c), sq_nonneg (a - b), sq_nonneg (b - c)]\n  linarith\n```",
            "\n  have h : \u2200 x : \u211d, x ^ 2 \u2265 0 := fun x => sq_nonneg x\n  linarith [h (a - b), h (a - c), h (b - c)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - c) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (b - c) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - c / 2) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (b - c) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - c) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2082 : 0 \u2264 (b - c) ^ 2 := by apply sq_nonneg\n  linarith\n```",
            "\n  have h\u2080 : (a - b) ^ 2 + (a - c) ^ 2 \u2265 0 := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a - c)]\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b / 2) ^ 2 := by positivity\n  have h\u2081 : 0 \u2264 (a - c / 2) ^ 2 := by positivity\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a + b), sq_nonneg (a - b)]\n```",
            "\n  have h : \u2200 x : \u211d, x ^ 2 \u2265 0 := fun x => sq_nonneg x\n  linarith [h (a - b), h (c - b)]\n```",
            "\n  have h : 0 \u2264 (a - c) ^ 2 + (a - b) ^ 2 + (b - c) ^ 2 := by positivity\n  linarith\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by nlinarith\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h : \u2200 x : \u211d, x ^ 2 \u2265 0 := fun x => sq_nonneg x\n  linarith [h (a - c), h (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - c) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  linarith [sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h : 0 \u2264 (a - c / 2) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (a - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - b / 2) ^ 2 + (c - b / 2) ^ 2 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (b - c) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (c - a) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : (a - c) ^ 2 + (a - b) ^ 2 + (b - c) ^ 2 \u2265 0 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h : 0 \u2264 (a - c) ^ 2 + (a - b) ^ 2 := by\n    linarith [sq_nonneg (a - c), sq_nonneg (a - b)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h : (a - c) ^ 2 + (b - c) ^ 2 \u2265 0 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - c) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  linarith [mul_self_nonneg (a - b), mul_self_nonneg (c - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by\n    apply add_nonneg\n    \u00b7 apply sq_nonneg\n    \u00b7 apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - b / 2) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a - c / 2) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  linarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - c) ^ 2 + (a - b) ^ 2 + (b - c) ^ 2 := by\n    linarith [sq_nonneg (a - c), sq_nonneg (a - b), sq_nonneg (b - c)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h : \u2200 x : \u211d, x ^ 2 \u2265 0 := fun x => sq_nonneg x\n  linarith [h (a - b), h (a - c), h (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - c) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (b - c) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - c / 2) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (b - c) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - c) ^ 2 := by apply sq_nonneg\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2082 : 0 \u2264 (b - c) ^ 2 := by apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : (a - b) ^ 2 + (a - c) ^ 2 \u2265 0 := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a - c)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - b / 2) ^ 2 := by positivity\n  have h\u2081 : 0 \u2264 (a - c / 2) ^ 2 := by positivity\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  nlinarith [sq_nonneg (a + b), sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h : \u2200 x : \u211d, x ^ 2 \u2265 0 := fun x => sq_nonneg x\n  linarith [h (a - b), h (c - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h : 0 \u2264 (a - c) ^ 2 + (a - b) ^ 2 + (b - c) ^ 2 := by positivity\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem euler_quadratic_form (a b c : \u211d) : 2 * a ^ 2 + b ^ 2 + c ^ 2 \u2265 b * c := by\n  have h : 0 \u2264 (a - b) ^ 2 + (a - c) ^ 2 := by nlinarith\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_plus_60865",
        "split": "test",
        "formal_statement": "theorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by",
        "model_outputs": [
            "\n  rw [add_sq]\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  simp only [sq]\n  ring\n  nlinarith\n```",
            "\n  simp only [sq, add_assoc]\n  linarith [mul_self_nonneg (a - b)]\n```",
            "\n  rw [sq, add_comm]\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  rw [sq, sq]\n  ring\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  rw [sq, add_sq]\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  simp only [sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_right_comm]\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  rw [add_sq]\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  rw [sq, sq]\n  linarith [sq_nonneg (a + b), sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a + b), sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  rw [sq, sq]\n  nlinarith [mul_self_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  rw [add_sq]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  simp only [sq]\n  ring\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  simp only [sq, add_assoc]\n  linarith [mul_self_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  rw [sq, add_comm]\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  rw [sq, sq]\n  ring\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  ring_nf\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  rw [sq, add_sq]\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  simp only [sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_right_comm]\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  rw [add_sq]\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  rw [sq, sq]\n  linarith [sq_nonneg (a + b), sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  ring_nf\n  nlinarith [sq_nonneg (a + b), sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  ring_nf\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  rw [sq, sq]\n  nlinarith [mul_self_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_sq (a b : \u211d) : a ^ 2 + b ^ 2 \u2264 (a + b) ^ 2 := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]"
        ]
    },
    {
        "name": "lean_workbook_plus_48224",
        "split": "test",
        "formal_statement": "theorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by",
        "model_outputs": [
            "\n  rw [\u2190 mul_lt_mul_left (Real.exp_pos _)]\n  rw [\u2190 Real.log_lt_log_iff (by positivity)]\n  rw [Real.log_mul (by positivity) (by positivity)]\n  rw [Real.log_rpow (by positivity)]\n  rw [Real.log_rpow (by positivity)]\n  nlinarith\n```",
            "\n  gcongr\n  ring_nf\n  nlinarith\n```",
            "\n  have h1 : 0 < x^a * y^b := by positivity\n  have h2 : 0 < Real.exp (b * (y - x)) := by positivity\n  have h3 : 0 < x^b * y^b := by positivity\n  have h4 : 0 < (x^b * y^b) * Real.exp (b * (y - x)) := by positivity\n  nlinarith [mul_lt_mul_of_pos_right ha h2]\n```",
            "\n  have h1 : x^a < x^b := by\n    apply Real.rpow_lt_rpow_of_exponent_lt hx hxb ha\n  have h2 : y^b < Real.exp (b * (y - x)) := by\n    apply Real.rpow_lt_exp_iff_of_pos hb hy hxy\n  nlinarith\n```",
            "\n  have hx' : x^b * y^b > 0 := by positivity\n  have hy' : x^b * y^b > 0 := by positivity\n  have hxy' : 0 < Real.exp (b * (y - x)) := by positivity\n  have ha' : a * Real.log x < b * Real.log y := by\n    nlinarith [Real.log_le_log_iff (by positivity) (by positivity) (by linarith),\n      Real.log_le_log_iff (by positivity) (by positivity) (by linarith)]\n  nlinarith [Real.log_le_log_iff (by positivity) (by positivity) (by linarith),\n    Real.log_le_log_iff (by positivity) (by positivity) (by linarith)]\n```",
            "\n  apply mul_lt_mul'\n  <;> nlinarith\n  <;> apply Real.exp_pos\n  <;> nlinarith\n```",
            "\n  rw [mul_comm (x^a)]\n  gcongr\n  all_goals\n    try norm_num\n    nlinarith\n```",
            "\n  have h\u2081 : 0 < x^b := by positivity\n  have h\u2082 : 0 < y^b := by positivity\n  have h\u2083 : 0 < Real.exp (b * (y - x)) := by positivity\n  have h\u2084 : 0 < b * (y - x) := by positivity\n  have h\u2085 : 0 < x^b * y^b := by positivity\n  have h\u2086 : 0 < Real.exp (b * (y - x)) := by positivity\n  have h\u2087 : 0 < x^a * y^b := by positivity\n  have h\u2088 : x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n    apply mul_lt_mul_of_pos_left _ h\u2086\n    nlinarith [Real.rpow_lt_rpow_of_exponent_lt ha hxb, Real.rpow_lt_rpow_of_exponent_lt hb hyb]\n  linarith\n```",
            "\n  rw [mul_comm]\n  nlinarith [Real.exp_pos (b * (y - x)), pow_pos hx a, pow_pos hy b, mul_pos hx hy]\n```",
            "\n  rw [mul_assoc]\n  nlinarith [mul_pos hx hy, mul_pos hx (Real.exp_pos _), mul_pos hy (Real.exp_pos _)]\n```",
            "\n  have h1 : 0 < x^b * y^b := by positivity\n  have h2 : 0 < Real.exp (b * (y - x)) := by positivity\n  have h3 : 0 < b * (y - x) := by positivity\n  have h4 : x^a < x^b := by\n    apply rpow_lt_rpow_of_exponent_lt hx hxb\n    linarith\n  have h5 : y^b < y^b * Real.exp (b * (y - x)) := by\n    apply lt_mul_of_one_lt_right (rpow_pos_of_pos hy b)\n    apply Real.exp_pos\n  nlinarith\n```",
            "\n  have h1 : 0 < x^a * y^b := by positivity\n  have h2 : 0 < x^b * y^b := by positivity\n  have h3 : 0 < Real.exp (b * (y - x)) := by positivity\n  have h4 : 0 < b * (y - x) := by positivity\n  have h5 : 0 < Real.exp (b * (y - x)) := by positivity\n  nlinarith [Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  have h : x^a * y^b < x^b * y^b := by\n    apply mul_lt_mul_of_pos_right _ (Real.exp_pos (b * (y - x)))\n    exact pow_lt_pow_of_lt_left hx hxy ha\n  rw [\u2190 mul_assoc] at h\n  rw [\u2190 mul_assoc]\n  gcongr\n```",
            "\n  rw [\u2190 mul_one (x ^ a * y ^ b), \u2190 mul_one (x ^ b * y ^ b), \u2190 Real.exp_zero]\n  gcongr\n  linarith\n```",
            "\n  rw [mul_comm, \u2190 mul_assoc]\n  gcongr\n  all_goals positivity\n```",
            "\n  gcongr\n  all_goals\n    linarith [ha, hb, hx, hy, hxy, hxb, hyb]\n```",
            "\n  rw [mul_assoc]\n  rw [mul_comm]\n  rw [\u2190 mul_assoc]\n  apply mul_lt_mul_of_pos_left _ (Real.exp_pos _)\n  apply pow_lt_pow_of_lt_left hx hxy _\n  linarith\n```",
            "\n  apply lt_of_le_of_lt (mul_le_mul_of_nonneg_right _ (Real.exp_pos _).le)\n  nlinarith [Real.rpow_le_rpow_of_exponent_le hxb (sub_nonneg.mpr hxy.le)]\n```",
            "\n  rw [\u2190 Real.exp_lt_exp]\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_pos (b * (y - x))]\n```",
            "\n  rw [mul_comm]\n  nlinarith [Real.rpow_lt_rpow_of_exponent_lt hx hxy, Real.rpow_lt_rpow_of_exponent_lt hy hxy]\n```",
            "\n  rw [mul_assoc]\n  gcongr\n  all_goals\n    linarith\n```",
            "\n  rw [mul_comm]\n  nlinarith [Real.rpow_lt_rpow_of_exponent_lt hx hxy, Real.rpow_lt_rpow_of_exponent_lt hy hxy]\n```",
            "\n  rw [mul_comm (x^a)]\n  nlinarith [Real.rpow_lt_rpow_of_exponent_lt hx hxy, Real.rpow_lt_rpow_of_exponent_lt hy hxy]\n```",
            "\n  have ha' : 0 < a := by linarith\n  have ha'' : 0 < a / b := by positivity\n  have hxy' : 0 < y - x := by linarith\n  have hxy'' : 0 < x ^ (a - b) := by positivity\n  have hxy''' : 0 < y ^ (a - b) := by positivity\n  calc\n    x ^ a * y ^ b = x ^ b * y ^ b * x ^ (a - b) := by\n      rw [\u2190 mul_assoc, \u2190 Real.rpow_add hx, sub_add_cancel]\n    _ < x ^ b * y ^ b * (x ^ (a - b) * y ^ (a - b)) := by\n      gcongr\n      exact Real.rpow_lt_rpow hx hxy (by positivity)\n    _ = (x ^ b * y ^ b) * Real.exp (b * (y - x)) := by\n      rw [Real.exp_eq_exp]\n      ring_nf\n      rw [Real.exp_log]\n      \u00b7 ring\n      \u00b7 positivity\n```",
            "\n  rw [mul_comm, \u2190 mul_assoc]\n  gcongr\n  all_goals positivity\n```",
            "\n  rw [\u2190 mul_lt_mul_left (show 0 < x^a * y^b by positivity)]\n  rw [\u2190 Real.log_lt_log_iff (show 0 < x^a * y^b by positivity)]\n  nlinarith [Real.log_le_log_iff (by positivity) (by positivity)]\n```",
            "\n  rw [mul_comm, \u2190mul_assoc]\n  gcongr\n  all_goals positivity\n```",
            "\n  rw [mul_comm]\n  nlinarith [Real.exp_pos (b * (y - x)), mul_pos hx hy, hx, hy, hb]\n```",
            "\n  rw [\u2190 mul_lt_mul_right (Real.exp_pos (b * (y - x)))]\n  rw [mul_assoc]\n  rw [\u2190 mul_assoc]\n  rw [\u2190 mul_assoc]\n  nlinarith [Real.exp_pos (b * (y - x)), Real.exp_log (by nlinarith : 0 < b * (y - x))]\n```",
            "\n  have h_exp : 0 < Real.exp (b * (y - x)) := Real.exp_pos _\n  nlinarith [mul_pos (pow_pos hx a) (pow_pos hy b),\n    mul_pos (pow_pos hx b) (pow_pos hy b)]\n```",
            "\n  nlinarith [mul_pos hx hy, Real.exp_pos (b * (y - x))]\n```",
            "\n  have h1 : 0 < Real.exp (b * (y - x)) := by apply Real.exp_pos\n  have h2 : 0 < x^b * y^b := by positivity\n  have h3 : 0 < x^a * y^b := by positivity\n  have h4 : 0 < Real.exp (a * (y - x)) := by positivity\n  have h5 : 0 < x^b * y^b * Real.exp (b * (y - x)) := by positivity\n  nlinarith [Real.rpow_lt_rpow_iff_of_neg (by linarith : 0 < x) (by linarith : 0 < y) (by linarith : a < b)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [\u2190 mul_lt_mul_left (Real.exp_pos _)]\n  rw [\u2190 Real.log_lt_log_iff (by positivity)]\n  rw [Real.log_mul (by positivity) (by positivity)]\n  rw [Real.log_rpow (by positivity)]\n  rw [Real.log_rpow (by positivity)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  gcongr\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  have h1 : 0 < x^a * y^b := by positivity\n  have h2 : 0 < Real.exp (b * (y - x)) := by positivity\n  have h3 : 0 < x^b * y^b := by positivity\n  have h4 : 0 < (x^b * y^b) * Real.exp (b * (y - x)) := by positivity\n  nlinarith [mul_lt_mul_of_pos_right ha h2]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  have h1 : x^a < x^b := by\n    apply Real.rpow_lt_rpow_of_exponent_lt hx hxb ha\n  have h2 : y^b < Real.exp (b * (y - x)) := by\n    apply Real.rpow_lt_exp_iff_of_pos hb hy hxy\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  have hx' : x^b * y^b > 0 := by positivity\n  have hy' : x^b * y^b > 0 := by positivity\n  have hxy' : 0 < Real.exp (b * (y - x)) := by positivity\n  have ha' : a * Real.log x < b * Real.log y := by\n    nlinarith [Real.log_le_log_iff (by positivity) (by positivity) (by linarith),\n      Real.log_le_log_iff (by positivity) (by positivity) (by linarith)]\n  nlinarith [Real.log_le_log_iff (by positivity) (by positivity) (by linarith),\n    Real.log_le_log_iff (by positivity) (by positivity) (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  apply mul_lt_mul'\n  <;> nlinarith\n  <;> apply Real.exp_pos\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_comm (x^a)]\n  gcongr\n  all_goals\n    try norm_num\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  have h\u2081 : 0 < x^b := by positivity\n  have h\u2082 : 0 < y^b := by positivity\n  have h\u2083 : 0 < Real.exp (b * (y - x)) := by positivity\n  have h\u2084 : 0 < b * (y - x) := by positivity\n  have h\u2085 : 0 < x^b * y^b := by positivity\n  have h\u2086 : 0 < Real.exp (b * (y - x)) := by positivity\n  have h\u2087 : 0 < x^a * y^b := by positivity\n  have h\u2088 : x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n    apply mul_lt_mul_of_pos_left _ h\u2086\n    nlinarith [Real.rpow_lt_rpow_of_exponent_lt ha hxb, Real.rpow_lt_rpow_of_exponent_lt hb hyb]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_comm]\n  nlinarith [Real.exp_pos (b * (y - x)), pow_pos hx a, pow_pos hy b, mul_pos hx hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_assoc]\n  nlinarith [mul_pos hx hy, mul_pos hx (Real.exp_pos _), mul_pos hy (Real.exp_pos _)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  have h1 : 0 < x^b * y^b := by positivity\n  have h2 : 0 < Real.exp (b * (y - x)) := by positivity\n  have h3 : 0 < b * (y - x) := by positivity\n  have h4 : x^a < x^b := by\n    apply rpow_lt_rpow_of_exponent_lt hx hxb\n    linarith\n  have h5 : y^b < y^b * Real.exp (b * (y - x)) := by\n    apply lt_mul_of_one_lt_right (rpow_pos_of_pos hy b)\n    apply Real.exp_pos\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  have h1 : 0 < x^a * y^b := by positivity\n  have h2 : 0 < x^b * y^b := by positivity\n  have h3 : 0 < Real.exp (b * (y - x)) := by positivity\n  have h4 : 0 < b * (y - x) := by positivity\n  have h5 : 0 < Real.exp (b * (y - x)) := by positivity\n  nlinarith [Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  have h : x^a * y^b < x^b * y^b := by\n    apply mul_lt_mul_of_pos_right _ (Real.exp_pos (b * (y - x)))\n    exact pow_lt_pow_of_lt_left hx hxy ha\n  rw [\u2190 mul_assoc] at h\n  rw [\u2190 mul_assoc]\n  gcongr",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [\u2190 mul_one (x ^ a * y ^ b), \u2190 mul_one (x ^ b * y ^ b), \u2190 Real.exp_zero]\n  gcongr\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_comm, \u2190 mul_assoc]\n  gcongr\n  all_goals positivity",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  gcongr\n  all_goals\n    linarith [ha, hb, hx, hy, hxy, hxb, hyb]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_assoc]\n  rw [mul_comm]\n  rw [\u2190 mul_assoc]\n  apply mul_lt_mul_of_pos_left _ (Real.exp_pos _)\n  apply pow_lt_pow_of_lt_left hx hxy _\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  apply lt_of_le_of_lt (mul_le_mul_of_nonneg_right _ (Real.exp_pos _).le)\n  nlinarith [Real.rpow_le_rpow_of_exponent_le hxb (sub_nonneg.mpr hxy.le)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [\u2190 Real.exp_lt_exp]\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_pos (b * (y - x))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_comm]\n  nlinarith [Real.rpow_lt_rpow_of_exponent_lt hx hxy, Real.rpow_lt_rpow_of_exponent_lt hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_assoc]\n  gcongr\n  all_goals\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_comm]\n  nlinarith [Real.rpow_lt_rpow_of_exponent_lt hx hxy, Real.rpow_lt_rpow_of_exponent_lt hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_comm (x^a)]\n  nlinarith [Real.rpow_lt_rpow_of_exponent_lt hx hxy, Real.rpow_lt_rpow_of_exponent_lt hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  have ha' : 0 < a := by linarith\n  have ha'' : 0 < a / b := by positivity\n  have hxy' : 0 < y - x := by linarith\n  have hxy'' : 0 < x ^ (a - b) := by positivity\n  have hxy''' : 0 < y ^ (a - b) := by positivity\n  calc\n    x ^ a * y ^ b = x ^ b * y ^ b * x ^ (a - b) := by\n      rw [\u2190 mul_assoc, \u2190 Real.rpow_add hx, sub_add_cancel]\n    _ < x ^ b * y ^ b * (x ^ (a - b) * y ^ (a - b)) := by\n      gcongr\n      exact Real.rpow_lt_rpow hx hxy (by positivity)\n    _ = (x ^ b * y ^ b) * Real.exp (b * (y - x)) := by\n      rw [Real.exp_eq_exp]\n      ring_nf\n      rw [Real.exp_log]\n      \u00b7 ring\n      \u00b7 positivity",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_comm, \u2190 mul_assoc]\n  gcongr\n  all_goals positivity",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [\u2190 mul_lt_mul_left (show 0 < x^a * y^b by positivity)]\n  rw [\u2190 Real.log_lt_log_iff (show 0 < x^a * y^b by positivity)]\n  nlinarith [Real.log_le_log_iff (by positivity) (by positivity)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_comm, \u2190mul_assoc]\n  gcongr\n  all_goals positivity",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [mul_comm]\n  nlinarith [Real.exp_pos (b * (y - x)), mul_pos hx hy, hx, hy, hb]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  rw [\u2190 mul_lt_mul_right (Real.exp_pos (b * (y - x)))]\n  rw [mul_assoc]\n  rw [\u2190 mul_assoc]\n  rw [\u2190 mul_assoc]\n  nlinarith [Real.exp_pos (b * (y - x)), Real.exp_log (by nlinarith : 0 < b * (y - x))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  have h_exp : 0 < Real.exp (b * (y - x)) := Real.exp_pos _\n  nlinarith [mul_pos (pow_pos hx a) (pow_pos hy b),\n    mul_pos (pow_pos hx b) (pow_pos hy b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  nlinarith [mul_pos hx hy, Real.exp_pos (b * (y - x))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem superexponential_bound (a b x y : \u211d) (ha : a < b) (hb : 0 < b) (hx : 0 < x) (hy : 0 < y)     (hxy : x < y) (hxb : x \u2264 b) (hyb : y \u2264 b) :     x^a * y^b < (x^b * y^b) * Real.exp (b * (y - x)) := by\n  have h1 : 0 < Real.exp (b * (y - x)) := by apply Real.exp_pos\n  have h2 : 0 < x^b * y^b := by positivity\n  have h3 : 0 < x^a * y^b := by positivity\n  have h4 : 0 < Real.exp (a * (y - x)) := by positivity\n  have h5 : 0 < x^b * y^b * Real.exp (b * (y - x)) := by positivity\n  nlinarith [Real.rpow_lt_rpow_iff_of_neg (by linarith : 0 < x) (by linarith : 0 < y) (by linarith : a < b)]"
        ]
    },
    {
        "name": "lean_workbook_plus_71803",
        "split": "test",
        "formal_statement": "theorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by",
        "model_outputs": [
            "\n  constructor <;> intro h\n  case mp =>\n    cases' h with h\u2081 h\u2082\n    exact Or.inl (le_antisymm h\u2081 h\u2082)\n  case mpr =>\n    cases' h with h h <;> simp_all\n```",
            "\n  constructor <;> intro h <;> cases h <;> simp_all [le_succ_iff]\n```",
            "\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero => contradiction\n    | succ b =>\n      cases a with\n      | zero => simp_all\n      | succ a =>\n        simp_all\n```",
            "\n  constructor\n  rintro \u27e8h\u2081, h\u2082\u27e9\n  rw [le_antisymm_iff] at h\u2081\n  rw [le_antisymm_iff] at h\u2082\n  cases' h\u2081 with h\u2081 h\u2081 <;> cases' h\u2082 with h\u2082 h\u2082 <;> simp_all\n  rintro (rfl | rfl) <;> simp\n```",
            "\n  constructor <;> intro h <;> cases h <;> simp_all [le_succ_iff]\n```",
            "\n  constructor <;> intro h <;> cases h with | intro h\u2081 h\u2082 =>\n    <;> cases b with | zero =>\n      <;> simp_all [succ_eq_add_one]\n    <;> nlinarith\n```",
            "\n  cases a <;> cases b <;> simp_all (config := { decide := true })\n```",
            "\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero =>\n      cases a <;> simp_all\n    | succ b =>\n      cases a <;> simp_all\n```",
            "\n  constructor <;> intro h <;> cases h <;> simp_all [le_refl, le_of_lt]\n```",
            "\n  cases' le_or_lt b a with h h <;>\n  cases' le_or_lt b (succ a) with h' h' <;>\n  simp_all [succ_le_succ_iff, le_of_lt]\n  <;>\n  omega\n```",
            "\n  constructor <;> intro h <;> cases h with | intro h\u2081 h\u2082 => <;> simp_all\n  <;> omega\n```",
            "\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero =>\n      cases a with\n      | zero => simp_all\n      | succ a => simp_all\n    | succ b =>\n      cases a with\n      | zero => simp_all\n      | succ a => simp_all\n```",
            "\n  constructor <;> intro h <;> cases h <;> simp_all [le_of_lt]\n  <;> omega\n```",
            "\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero =>\n      cases a <;> simp_all\n    | succ b =>\n      cases a <;> simp_all\n```",
            "\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    cases h\u2081 with\n    | refl =>\n      simp_all\n    | step h\u2081 =>\n      simp_all\n```",
            "\n  cases' b with b <;> simp_all\n```",
            "\n  by_cases a = b <;> by_cases b = succ a <;> simp_all\n```",
            "\n  constructor <;> intro h <;>\n  cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero =>\n      rw [le_zero_eq] at h\u2081\n      rw [h\u2081]\n      simp\n    | succ b =>\n      cases b with\n      | zero =>\n        simp_all\n      | succ b =>\n        rw [le_succ_iff] at h\u2082\n        cases h\u2082 with\n        | inl h\u2082 =>\n          left\n          rw [h\u2082]\n        | inr h\u2082 =>\n          right\n          rw [h\u2082]\n```",
            "\n  constructor\n  rintro \u27e8h\u2081, h\u2082\u27e9\n  exact Or.inl (le_antisymm h\u2081 h\u2082)\n  rintro (rfl | rfl)\n  exact \u27e8le_succ a, le_refl (succ a)\u27e9\n  exact \u27e8le_succ a, le_refl (succ a)\u27e9\n```",
            "\n  constructor <;> intro h <;>\n    cases h with\n    | intro hab hba =>\n      cases b with\n      | zero =>\n        cases a with\n        | zero => simp_all\n        | succ a => simp_all\n      | succ b =>\n        cases a with\n        | zero => simp_all\n        | succ a => simp_all\n```",
            "\n  cases' le_or_lt a b with h\u2081 h\u2081 <;> cases' le_or_lt b (succ a) with h\u2082 h\u2082 <;>\n    simp_all [le_of_lt, lt_succ_iff]\n```",
            "\n  constructor <;> intro h\n  case mp =>\n    cases' h with h\u2081 h\u2082\n    exact Or.inl (le_antisymm h\u2081 (Nat.le_of_lt_succ h\u2082))\n    exact Or.inr (le_antisymm (Nat.le_of_lt_succ h\u2082) h\u2081)\n  case mpr =>\n    cases' h with h h\n    exact \u27e8le_of_eq h, le_of_eq (Eq.trans h (Eq.refl (succ a)))\u27e9\n    exact \u27e8le_of_eq (Eq.symm h), le_of_eq (Eq.symm h)\u27e9\n```",
            "\n  constructor\n  intro h\n  by_cases h' : b = a\n  exacts [Or.inl h', Or.inr (le_antisymm h.2 (Nat.le_of_lt_succ h.1))]\n  have h\u2081 : b \u2264 a := Nat.le_of_lt_succ (lt_of_le_of_ne h.2 h')\n  have h\u2082 : a \u2264 b := h.1\n  exact le_antisymm h\u2081 h\u2082\n  rintro (rfl | rfl)\n  exact \u27e8le_succ a, le_refl (succ a)\u27e9\n  exact \u27e8le_succ a, le_refl (succ a)\u27e9\n```",
            "\n  constructor <;> intro h <;> cases h with\n  | intro h\u2080 h\u2081 =>\n    cases h\u2081\n    exacts [Or.inl rfl, Or.inr rfl]\n```",
            "\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    exact Or.inl (by rw [succ_le_iff] at h\u2082; exact (le_antisymm h\u2081 h\u2082).symm)\n  | inl h\u2081 => exact \u27e8h\u2081.le, h\u2081.symm \u25b8 le_succ a\u27e9\n  | inr h\u2081 => exact \u27e8h\u2081.symm \u25b8 le_succ a, h\u2081.symm \u25b8 Nat.le_refl (succ a)\u27e9\n```",
            "\n  constructor <;> intro h\n  case mp =>\n    cases' h with h\u2081 h\u2082\n    have h\u2081 : b = a := by linarith\n    have h\u2082 : b = succ a := by linarith\n    exact Or.inl h\u2081\n  case mpr =>\n    cases' h with h h\n    exact \u27e8by subst h; rfl, by subst h; rfl\u27e9\n    exact \u27e8by subst h; rfl, by subst h; rfl\u27e9\n```",
            "\n  cases' le_or_lt b a with h h <;> cases' le_or_lt b (succ a) with h' h' <;> simp_all [succ_le_succ_iff]\n```",
            "\n  cases a <;> cases b <;> simp\n```",
            "\n  constructor <;> intro h <;> cases h <;> simp_all\n  <;> omega\n```",
            "\n  constructor <;> intro h <;>\n  cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero =>\n      simp_all\n    | succ b =>\n      simp_all\n      left\n      rfl\n```",
            "\n  cases a <;> cases b <;> simp_all (config := { contextual := true })\n```",
            "\n  cases a <;> cases b <;> simp\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h\n  case mp =>\n    cases' h with h\u2081 h\u2082\n    exact Or.inl (le_antisymm h\u2081 h\u2082)\n  case mpr =>\n    cases' h with h h <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h <;> simp_all [le_succ_iff]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero => contradiction\n    | succ b =>\n      cases a with\n      | zero => simp_all\n      | succ a =>\n        simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor\n  rintro \u27e8h\u2081, h\u2082\u27e9\n  rw [le_antisymm_iff] at h\u2081\n  rw [le_antisymm_iff] at h\u2082\n  cases' h\u2081 with h\u2081 h\u2081 <;> cases' h\u2082 with h\u2082 h\u2082 <;> simp_all\n  rintro (rfl | rfl) <;> simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h <;> simp_all [le_succ_iff]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h with | intro h\u2081 h\u2082 =>\n    <;> cases b with | zero =>\n      <;> simp_all [succ_eq_add_one]\n    <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  cases a <;> cases b <;> simp_all (config := { decide := true })",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero =>\n      cases a <;> simp_all\n    | succ b =>\n      cases a <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h <;> simp_all [le_refl, le_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  cases' le_or_lt b a with h h <;>\n  cases' le_or_lt b (succ a) with h' h' <;>\n  simp_all [succ_le_succ_iff, le_of_lt]\n  <;>\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h with | intro h\u2081 h\u2082 => <;> simp_all\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero =>\n      cases a with\n      | zero => simp_all\n      | succ a => simp_all\n    | succ b =>\n      cases a with\n      | zero => simp_all\n      | succ a => simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h <;> simp_all [le_of_lt]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero =>\n      cases a <;> simp_all\n    | succ b =>\n      cases a <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    cases h\u2081 with\n    | refl =>\n      simp_all\n    | step h\u2081 =>\n      simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  cases' b with b <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  by_cases a = b <;> by_cases b = succ a <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;>\n  cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero =>\n      rw [le_zero_eq] at h\u2081\n      rw [h\u2081]\n      simp\n    | succ b =>\n      cases b with\n      | zero =>\n        simp_all\n      | succ b =>\n        rw [le_succ_iff] at h\u2082\n        cases h\u2082 with\n        | inl h\u2082 =>\n          left\n          rw [h\u2082]\n        | inr h\u2082 =>\n          right\n          rw [h\u2082]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor\n  rintro \u27e8h\u2081, h\u2082\u27e9\n  exact Or.inl (le_antisymm h\u2081 h\u2082)\n  rintro (rfl | rfl)\n  exact \u27e8le_succ a, le_refl (succ a)\u27e9\n  exact \u27e8le_succ a, le_refl (succ a)\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;>\n    cases h with\n    | intro hab hba =>\n      cases b with\n      | zero =>\n        cases a with\n        | zero => simp_all\n        | succ a => simp_all\n      | succ b =>\n        cases a with\n        | zero => simp_all\n        | succ a => simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  cases' le_or_lt a b with h\u2081 h\u2081 <;> cases' le_or_lt b (succ a) with h\u2082 h\u2082 <;>\n    simp_all [le_of_lt, lt_succ_iff]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h\n  case mp =>\n    cases' h with h\u2081 h\u2082\n    exact Or.inl (le_antisymm h\u2081 (Nat.le_of_lt_succ h\u2082))\n    exact Or.inr (le_antisymm (Nat.le_of_lt_succ h\u2082) h\u2081)\n  case mpr =>\n    cases' h with h h\n    exact \u27e8le_of_eq h, le_of_eq (Eq.trans h (Eq.refl (succ a)))\u27e9\n    exact \u27e8le_of_eq (Eq.symm h), le_of_eq (Eq.symm h)\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor\n  intro h\n  by_cases h' : b = a\n  exacts [Or.inl h', Or.inr (le_antisymm h.2 (Nat.le_of_lt_succ h.1))]\n  have h\u2081 : b \u2264 a := Nat.le_of_lt_succ (lt_of_le_of_ne h.2 h')\n  have h\u2082 : a \u2264 b := h.1\n  exact le_antisymm h\u2081 h\u2082\n  rintro (rfl | rfl)\n  exact \u27e8le_succ a, le_refl (succ a)\u27e9\n  exact \u27e8le_succ a, le_refl (succ a)\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h with\n  | intro h\u2080 h\u2081 =>\n    cases h\u2081\n    exacts [Or.inl rfl, Or.inr rfl]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h with\n  | intro h\u2081 h\u2082 =>\n    exact Or.inl (by rw [succ_le_iff] at h\u2082; exact (le_antisymm h\u2081 h\u2082).symm)\n  | inl h\u2081 => exact \u27e8h\u2081.le, h\u2081.symm \u25b8 le_succ a\u27e9\n  | inr h\u2081 => exact \u27e8h\u2081.symm \u25b8 le_succ a, h\u2081.symm \u25b8 Nat.le_refl (succ a)\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h\n  case mp =>\n    cases' h with h\u2081 h\u2082\n    have h\u2081 : b = a := by linarith\n    have h\u2082 : b = succ a := by linarith\n    exact Or.inl h\u2081\n  case mpr =>\n    cases' h with h h\n    exact \u27e8by subst h; rfl, by subst h; rfl\u27e9\n    exact \u27e8by subst h; rfl, by subst h; rfl\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  cases' le_or_lt b a with h h <;> cases' le_or_lt b (succ a) with h' h' <;> simp_all [succ_le_succ_iff]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  cases a <;> cases b <;> simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;> cases h <;> simp_all\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  constructor <;> intro h <;>\n  cases h with\n  | intro h\u2081 h\u2082 =>\n    cases b with\n    | zero =>\n      simp_all\n    | succ b =>\n      simp_all\n      left\n      rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  cases a <;> cases b <;> simp_all (config := { contextual := true })",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_le_succ_iff : a \u2264 b \u2227 b \u2264 succ a \u2194 b = a \u2228 b = succ a := by\n  cases a <;> cases b <;> simp"
        ]
    },
    {
        "name": "lean_workbook_plus_353",
        "split": "test",
        "formal_statement": "theorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by",
        "model_outputs": [
            "\n  by_cases X <;> by_cases Y <;> simp_all\n```",
            "\n  by_cases X <;> simp_all\n```",
            "\n  by_cases h : X <;> simp [h]\n```",
            "\n  apply Iff.intro <;> intro h <;> by_cases hX : X <;> simp_all\n```",
            "\n  constructor <;> intro h <;> tauto\n```",
            "\n  apply Iff.intro <;> intro h <;> tauto\n```",
            "\n  constructor <;> intro h <;> intro hX <;> cases h <;> contradiction\n```",
            "\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)\n```",
            "\n  constructor <;> intro h <;> tauto\n```",
            "\n  constructor\n  intro h\n  intro hX\n  cases h <;> simp_all\n  intro h\n  by_cases hX : X\n  left\n  exact hX\n  right\n  exact h hX\n```",
            "\n  simp\n```",
            "\n  by_cases h : X <;> by_cases h' : Y <;> simp_all\n```",
            "\n  by_cases h : X <;> simp [h]\n```",
            "\n  apply Iff.intro <;> intro h\n  next =>\n    intro hX\n    cases h with\n    | inl h => contradiction\n    | inr h => exact h\n  next =>\n    by_cases hX : X\n    case inl => exact Or.inl hX\n    case inr => exact Or.inr (h hX)\n```",
            "\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)\n```",
            "\n  apply Iff.intro\n  intro h hX\n  cases' h with hX hY\n  exact absurd hX hX\n  exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)\n```",
            "\n  constructor\n  intro h\n  intro hX\n  cases h <;> contradiction\n  intro h\n  by_cases hX : X\n  left\n  exact hX\n  right\n  exact h hX\n```",
            "\n  apply Iff.intro <;> intro <;> tauto\n```",
            "\n  exact \u27e8fun h \u21a6 Or.elim h (fun hX \u21a6 False.elim (hX \u2039_\u203a)) fun hY \u21a6 hY, fun h \u21a6 by_cases (fun hX \u21a6 Or.inr (h hX)) fun hX \u21a6 Or.inl hX\u27e9\n```",
            "\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)\n```",
            "\n  constructor <;> intro h <;> cases h <;> simp_all <;> tauto\n```",
            "\n  apply Iff.intro\n  intro h\n  intro h'\n  cases h with\n  | inl h => contradiction\n  | inr h => exact h\n  intro h\n  by_cases h' : X\n  exact Or.inr (h h')\n  exact Or.inl h'\n```",
            "\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)\n```",
            "\n  apply Iff.intro\n  intro h hnotX\n  cases' h with hX hY\n  contradiction\n  exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)\n```",
            "\n  apply Iff.intro\n  intro h hx\n  cases' h with h h <;> contradiction\n  intro h\n  by_cases hx : X\n  exact Or.inl hx\n  exact Or.inr (h hx)\n```",
            "\n  by_cases h : X <;> simp [h]\n```",
            "\n  apply Iff.intro <;> intro h <;> tauto\n```",
            "\n  constructor <;> intro h <;> by_cases X <;> simp_all\n```",
            "\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  by_cases hX : X\n  case pos => exact Or.inl hX\n  case neg => exact Or.inr (h hX)\n```",
            "\n  by_cases h : X <;> simp [h]\n```",
            "\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  apply Or.elim (Classical.em X)\n  intro hX\n  exact Or.inl hX\n  intro hX\n  exact Or.inr (h hX)\n```",
            "\n  by_cases x : X <;> by_cases y : Y <;> simp_all\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  by_cases X <;> by_cases Y <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  by_cases X <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  by_cases h : X <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro <;> intro h <;> by_cases hX : X <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  constructor <;> intro h <;> tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro <;> intro h <;> tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  constructor <;> intro h <;> intro hX <;> cases h <;> contradiction",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  constructor <;> intro h <;> tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  constructor\n  intro h\n  intro hX\n  cases h <;> simp_all\n  intro h\n  by_cases hX : X\n  left\n  exact hX\n  right\n  exact h hX",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  by_cases h : X <;> by_cases h' : Y <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  by_cases h : X <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro <;> intro h\n  next =>\n    intro hX\n    cases h with\n    | inl h => contradiction\n    | inr h => exact h\n  next =>\n    by_cases hX : X\n    case inl => exact Or.inl hX\n    case inr => exact Or.inr (h hX)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro\n  intro h hX\n  cases' h with hX hY\n  exact absurd hX hX\n  exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  constructor\n  intro h\n  intro hX\n  cases h <;> contradiction\n  intro h\n  by_cases hX : X\n  left\n  exact hX\n  right\n  exact h hX",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro <;> intro <;> tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  exact \u27e8fun h \u21a6 Or.elim h (fun hX \u21a6 False.elim (hX \u2039_\u203a)) fun hY \u21a6 hY, fun h \u21a6 by_cases (fun hX \u21a6 Or.inr (h hX)) fun hX \u21a6 Or.inl hX\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  constructor <;> intro h <;> cases h <;> simp_all <;> tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro\n  intro h\n  intro h'\n  cases h with\n  | inl h => contradiction\n  | inr h => exact h\n  intro h\n  by_cases h' : X\n  exact Or.inr (h h')\n  exact Or.inl h'",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro\n  intro h hnotX\n  cases' h with hX hY\n  contradiction\n  exact hY\n  intro h\n  by_cases hX : X\n  exact Or.inl hX\n  exact Or.inr (h hX)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro\n  intro h hx\n  cases' h with h h <;> contradiction\n  intro h\n  by_cases hx : X\n  exact Or.inl hx\n  exact Or.inr (h hx)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  by_cases h : X <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro <;> intro h <;> tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  constructor <;> intro h <;> by_cases X <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  by_cases hX : X\n  case pos => exact Or.inl hX\n  case neg => exact Or.inr (h hX)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  by_cases h : X <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  apply Iff.intro\n  intro h\n  intro hX\n  cases h with\n  | inl hX' => exact absurd hX' hX\n  | inr hY => exact hY\n  intro h\n  apply Or.elim (Classical.em X)\n  intro hX\n  exact Or.inl hX\n  intro hX\n  exact Or.inr (h hX)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem or_iff_not_imp_left : X \u2228 Y \u2194 \u00acX \u2192 Y := by\n  by_cases x : X <;> by_cases y : Y <;> simp_all"
        ]
    },
    {
        "name": "lean_workbook_24532",
        "split": "test",
        "formal_statement": "theorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by",
        "model_outputs": [
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro h\n  case mp =>\n    nlinarith\n  case mpr =>\n    nlinarith\n```",
            "\n  constructor <;> intro h\n  <;> contrapose! h\n  <;> nlinarith\n```",
            "\n  constructor <;> intro h\n  nlinarith\n  nlinarith\n```",
            "\n  constructor <;> intro h\n  <;> by_cases hb : b \u2264 0\n  <;> nlinarith\n  <;> nlinarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro h <;>\n  linarith\n```",
            "\n  constructor\n  intro h\n  nlinarith\n  intro h\n  nlinarith\n```",
            "\n  rw [\u2190 mul_le_mul_right (by linarith : 0 < a), mul_comm]\n  simp [mul_comm, mul_left_comm]\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro h\n  all_goals nlinarith\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro h <;> nlinarith\n```",
            "\n  constructor <;> intro h\n  <;> contrapose! h\n  <;> nlinarith\n```",
            "\n  constructor <;> intro h\n  case mp =>\n    nlinarith\n  case mpr =>\n    nlinarith\n```",
            "\n  constructor <;> intro h\n  case mp =>\n    nlinarith\n  case mpr =>\n    nlinarith\n```",
            "\n  by_cases h : a = 0 <;> simp [h, le_mul_self_iff]\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  rw [\u2190 mul_le_mul_iff_left a]\n  simp\n```",
            "\n  constructor <;> intro h\n  next => nlinarith\n  next => nlinarith\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro h\n  <;> nlinarith\n  <;> nlinarith\n```",
            "\n  constructor\n  intro h\n  nlinarith\n  intro h\n  nlinarith\n```",
            "\n  constructor <;> intro h\n  <;> nlinarith\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor\n  next =>\n    intro h\n    nlinarith\n  next =>\n    intro h\n    nlinarith\n```",
            "\n  constructor <;> intro h <;> linarith\n```",
            "\n  constructor <;> intro h\n  <;> by_cases hb : b \u2264 0\n  <;> linarith\n  <;> nlinarith\n```",
            "\n  constructor <;> intro h\n  <;> linarith\n```",
            "\n  apply Iff.intro <;> intro h <;> linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  case mp =>\n    nlinarith\n  case mpr =>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  <;> contrapose! h\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  <;> by_cases hb : b \u2264 0\n  <;> nlinarith\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;>\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor\n  intro h\n  nlinarith\n  intro h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  rw [\u2190 mul_le_mul_right (by linarith : 0 < a), mul_comm]\n  simp [mul_comm, mul_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  <;> contrapose! h\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  case mp =>\n    nlinarith\n  case mpr =>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  case mp =>\n    nlinarith\n  case mpr =>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  by_cases h : a = 0 <;> simp [h, le_mul_self_iff]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  rw [\u2190 mul_le_mul_iff_left a]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  next => nlinarith\n  next => nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  <;> nlinarith\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor\n  intro h\n  nlinarith\n  intro h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor\n  next =>\n    intro h\n    nlinarith\n  next =>\n    intro h\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  <;> by_cases hb : b \u2264 0\n  <;> linarith\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  constructor <;> intro h\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem le_mul_self_iff : a \u2264 b * a \u2194 b \u2264 1 := by\n  apply Iff.intro <;> intro h <;> linarith"
        ]
    },
    {
        "name": "lean_workbook_plus_43954",
        "split": "test",
        "formal_statement": "theorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by",
        "model_outputs": [
            "\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2081] at h\u2080\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082] at h\u2080; linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2081] at h\u2080\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082] at h\u2080\n  rw [h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2081] at h\u2080\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2080.symm] at h\u2081; linarith\n```",
            "\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```",
            "\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2081] at h\u2080\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082] at h\u2080; linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2081] at h\u2080\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082] at h\u2080\n  rw [h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2081] at h\u2080\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2080.symm] at h\u2081; linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_eq_of_eq {x y z : \u211d} (h\u2080 : x + y = z) (h\u2081 : z = 20) (h\u2082 : x = 5) (h\u2083 : y = y) : y = 15 := by\n  rw [h\u2082, h\u2081] at h\u2080\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_plus_42591",
        "split": "test",
        "formal_statement": "theorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by",
        "model_outputs": [
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  rw [\u2190 div_le_one (by positivity)]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have : a * b * c \u2264 (a + b) / 2 * c + (b + c) / 2 * a + (c + a) / 2 * b := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2080 : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  exact h\u2080\n```",
            "\n  have h\u2080 : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  exact h\u2080\n```",
            "\n  have h1 := (mul_le_mul_of_nonneg_right (by linarith : a \u2264 a + b + c) (by positivity : 0 \u2264 c))\n  have h2 := (mul_le_mul_of_nonneg_right (by linarith : b \u2264 a + b + c) (by positivity : 0 \u2264 c))\n  have h3 := (mul_le_mul_of_nonneg_right (by linarith : c \u2264 a + b + c) (by positivity : 0 \u2264 c))\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2081 : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (b - c) ^ 2 := by nlinarith\n  have h\u2083 : 0 \u2264 (c - a) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  exact h\u2080\n```",
            "\n  have h\u2081 := mul_self_nonneg (a - b)\n  have h\u2082 := mul_self_nonneg (b - c)\n  have h\u2083 := mul_self_nonneg (c - a)\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  rw [\u2190 div_le_one (by positivity)]\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  have : a * b * c \u2264 (a + b) / 2 * c + (b + c) / 2 * a + (c + a) / 2 * b := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  have h : a + b + c \u2265 3 * (a * b * c) ^ (1 / 3) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  have h\u2080 : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  exact h\u2080",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  have h\u2080 : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  exact h\u2080",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  have h1 := (mul_le_mul_of_nonneg_right (by linarith : a \u2264 a + b + c) (by positivity : 0 \u2264 c))\n  have h2 := (mul_le_mul_of_nonneg_right (by linarith : b \u2264 a + b + c) (by positivity : 0 \u2264 c))\n  have h3 := (mul_le_mul_of_nonneg_right (by linarith : c \u2264 a + b + c) (by positivity : 0 \u2264 c))\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  have h\u2081 : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (b - c) ^ 2 := by nlinarith\n  have h\u2083 : 0 \u2264 (c - a) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  have h\u2080 : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  exact h\u2080",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  have h\u2081 := mul_self_nonneg (a - b)\n  have h\u2082 := mul_self_nonneg (b - c)\n  have h\u2083 := mul_self_nonneg (c - a)\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ThreeInequalities (a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) : a * b * c \u2264 (1 / 3) * (a + b + c) := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]"
        ]
    },
    {
        "name": "lean_workbook_3912",
        "split": "test",
        "formal_statement": "theorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by",
        "model_outputs": [
            "\n  have h\u2081 : a \u2223 b * 1 := by simpa [hab] using habc\n  simpa using h\u2081\n```",
            "\n  have : a \u2223 b * c := habc\n  have : gcd a c = 1 := hab\n  have : a \u2223 b := by\n    cases' exists_dvd_and_dvd_of_dvd_mul this with \u27e8d, hd, hdb, hdc\u27e9\n    have : d = 1 := by\n      have : d \u2223 1 := by\n        trans a\n        \u00b7 exact hdb\n        \u00b7 exact this\n      exact dvd_one.mp this\n    rw [this] at hdb\n    simp [hdb, hdc]\n  assumption\n```",
            "\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [Int.natAbs_gcd] at hab\n  rw [Int.natAbs_mul] at habc\n  exact Nat.dvd_of_mul_dvd_mul_left (Int.natAbs_pos.mpr (gcd_ne_zero_left a)) habc\n```",
            "\n  have h := dvd_of_mul_left_dvd habc\n  simp_all\n```",
            "\n  rw [dvd_iff_exists_eq_mul_left] at habc \u22a2\n  rcases habc with \u27e8d, hd\u27e9\n  use d\n  rw [\u2190 mul_one d] at hd\n  rw [\u2190 mul_one d]\n  apply mul_left_cancel\u2080 (gcd_eq_left.mp (mul_right_cancel\u2080 (by linarith) hd))\n```",
            "\n  have h\u2081 : a \u2223 b * 1 := by simpa [hab] using habc\n  simpa using h\u2081\n```",
            "\n  rcases exists_dvd_and_dvd_of_dvd_mul habc with \u27e8x, y, hxy, hx, hy\u27e9\n  have : a \u2223 x * y := hxy\n  have : a \u2223 x := by\n    rw [\u2190 mul_one a]\n    apply dvd_mul_of_dvd_right\n    simpa [hab] using hx\n  have : a \u2223 y := by\n    rw [\u2190 mul_one a]\n    apply dvd_mul_of_dvd_right\n    simpa [hab] using hy\n  simpa [*, mul_comm] using hxy\n```",
            "\n  rcases exists_gcd_one a c hab with \u27e8k, hk\u27e9\n  rcases exists_mul_a_eq_gcd a c with \u27e8l, hl\u27e9\n  rw [\u2190 hl, mul_comm] at habc\n  rcases exists_mul_b_eq_gcd b a with \u27e8m, hm\u27e9\n  rw [\u2190 hm] at habc\n  exact (dvd_mul_right a m).trans habc\n```",
            "\n  have h1 : a \u2223 b * c := habc\n  have h2 : a \u2223 b := by\n    have h3 : a \u2223 b * c := h1\n    have h4 : a \u2223 b * c := by\n      apply h3\n    have h5 : a \u2223 b := by\n      apply dvd_of_dvd_mul_right\n      apply h4\n      apply hab\n    apply h5\n  apply h2\n```",
            "\n  obtain \u27e8k, hk\u27e9 := habc\n  rw [hk]\n  apply dvd_of_mul_left_dvd\n  rw [gcd_eq_left_iff_dvd] at hab\n  apply hab\n  exact \u27e8k, by simp [mul_comm, mul_assoc, mul_left_comm]\u27e9\n```",
            "\n  rw [\u2190 Int.natAbs_dvd, \u2190 Int.natAbs_dvd]\n  apply Int.natAbs_dvd_natAbs.2\n  rw [Int.natAbs_mul] at habc\n  rw [Int.natAbs_gcd] at hab\n  apply Nat.dvd_of_mul_dvd_mul_right (Nat.pos_of_ne_zero fun H : Int.natAbs c = 0 => by simp_all)\n  simp_all\n```",
            "\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [Int.natAbs_dvd_natAbs] at habc\n  rw [Int.gcd_eq_natAbs] at hab\n  rw [Int.natAbs_dvd_natAbs] at hab\n  exact Nat.dvd_of_dvd_mul_left_of_gcd_one habc hab\n```",
            "\n  have : a \u2223 b * gcd a c := by\n    rw [mul_comm]\n    exact habc\n  rw [hab] at this\n  exact\n    dvd_of_mul_left_dvd this\n```",
            "\n  have h : a \u2223 b * c := habc\n  exact (Int.dvd_mul_right b c).mp (h.trans (Int.gcd_dvd_left a c))\n```",
            "\n  have h\u2081 := dvd_trans (gcd_dvd_left a c) habc\n  have h\u2082 := dvd_trans (gcd_dvd_right a c) habc\n  exact (natAbs_dvd.mpr h\u2081).trans (natAbs_dvd.mpr h\u2082)\n```",
            "\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [Int.natAbs_mul] at habc\n  exact Nat.dvd_of_mul_dvd_mul_left (Int.natAbs_pos.mpr (by aesop)) habc\n```",
            "\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [Int.natAbs_mul] at habc\n  rw [Int.natAbs_gcd] at hab\n  exact Nat.dvd_of_mul_dvd_mul_left (Int.natAbs_pos.2 <| by aesop) <| by simpa [hab] using habc\n```",
            "\n  have h : a \u2223 b * gcd a c := by simpa [hab] using habc\n  exact (Int.dvd_mul_right _ _).mp (h.trans (Int.dvd_mul_left _ _))\n```",
            "\n  obtain \u27e8d, rfl\u27e9 := habc\n  rw [mul_assoc] at habc\n  exact mul_left_cancel\u2080 (by simpa [hab] using mul_dvd_mul_left a (dvd_mul_right c d)) habc\n```",
            "\n  rw [\u2190 Int.mul_one a] at habc\n  exact (Int.dvd_mul_right a 1).mp (by simpa [Int.gcd_mul_left] using habc)\n```",
            "\n  rw [dvd_iff_exists_eq_mul_left] at habc \u22a2\n  obtain \u27e8b', rfl\u27e9 := habc\n  use b'\n  rw [mul_assoc]\n  exact (Nat.gcd_eq_right <| Int.natAbs_dvd_natAbs.2 <| by omega).symm.dvd.trans (Int.dvd_mul_right _ _)\n```",
            "\n  have h\u2080 := Nat.gcd_dvd_right (Int.natAbs a) (Int.natAbs c)\n  rw [Int.natAbs_gcd_eq_right hab] at h\u2080\n  have h\u2081 : (1 : \u2115) \u2223 Int.natAbs a := by simp\n  have h\u2082 := Nat.dvd_of_mul_dvd_mul_left h\u2081 (Int.natAbs_dvd_natAbs.mpr habc)\n  exact Int.dvd_of_natAbs_dvd h\u2082\n```",
            "\n  have h : a \u2223 b * c := habc\n  have h' : a \u2223 b * c := by rwa [mul_comm]\n  have h'' : a \u2223 b * c := by rwa [mul_comm]\n  have h''' : a \u2223 b * c := by rwa [mul_comm]\n  have h'''' : a \u2223 b * c := by rwa [mul_comm]\n  have h'''''' : a \u2223 b * c := by rwa [mul_comm]\n  exact (Nat.dvd_of_mul_dvd_mul_right (Nat.gcd_pos_of_pos_left c (Nat.pos_of_ne_zero (fun h => by simp_all)))).mp\n    (by simp_all)\n```",
            "\n  have h := dvd_mul_of_dvd_left habc c\n  rw [mul_comm] at h\n  exact (coprime.dvd_of_dvd_mul_right hab h).mp\n```",
            "\n  exact\n    dvd_of_mul_left_dvd (by rw [mul_comm]; exact (gcd_dvd_left a c).mul_left b) habc\n```",
            "\n  have h := Nat.dvd_of_mul_dvd_mul_right (show 0 < (a.natAbs : \u2115) from Nat.pos_of_ne_zero\n    (fun h => by simp_all [Int.natAbs_zero])) (by simpa [Int.natAbs_mul, Int.natAbs_ofNat]\n      using habc)\n  rw [Nat.mul_comm] at h\n  exact Int.dvd_of_natAbs_dvd_natAbs (by simpa [Int.natAbs_mul, Int.natAbs_ofNat] using h)\n```",
            "\n  rw [mul_comm] at habc\n  rw [dvd_iff_exists_eq_mul_left] at habc \u22a2\n  obtain \u27e8d, hd\u27e9 := habc\n  use d\n  rw [mul_comm] at hd\n  rw [\u2190 hd]\n  apply mul_left_cancel\u2080 (gcd_dvd_left a c)\n  rw [\u2190 mul_assoc]\n  rw [\u2190 mul_assoc] at hd\n  nth_rewrite 2 [\u2190 gcd_mul_left] at hd\n  rw [hab, one_mul] at hd\n  linarith\n```",
            "\n  have h1 : a \u2223 b * c := habc\n  have h2 : a \u2223 b * c := by\n    exact h1\n  have h3 : a \u2223 b := by\n    apply dvd_of_dvd_mul_right\n    exact h2\n    exact hab\n  exact h3\n```",
            "\n  rw [\u2190 mul_one a] at habc\n  exact\n    mul_left_cancel\u2080 (by simpa [hab] using gcd_dvd_left a c) habc\n```",
            "\n  rw [\u2190 Int.dvd_natAbs] at *\n  rw [\u2190 Int.natAbs_dvd_natAbs] at habc\n  rw [gcd_eq_gcd_ab] at hab\n  norm_cast at habc\n  rw [\u2190 mul_right_inj' (pos_of_gt (gcd_pos_of_ne_zero_left c (natAbs_pos.mpr (ne_of_gt\n    (pos_of_gt (gcd_pos_of_ne_zero_right a (natAbs_pos.mpr (ne_of_gt (pos_of_gt\n      hab)))))))))] at hab\n  norm_cast at hab\n  omega\n```",
            "\n  rw [dvd_iff_exists_eq_mul_right] at habc \u22a2\n  rcases habc with \u27e8d, hd\u27e9\n  use d\n  rw [\u2190 mul_right_inj' (gcd_pos_of_non_zero_left c (by linarith : a \u2260 0))] at hd\n  rw [\u2190 hd, mul_comm, mul_assoc, mul_comm c, \u2190 mul_assoc, mul_comm a, mul_comm a]\n  exact mul_dvd_mul_left a (dvd_mul_right c d)\n```",
            "\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [Int.natAbs_mul] at habc\n  exact Nat.dvd_of_mul_dvd_mul_right (Int.natAbs_pos.2 <| gcd_pos_of_pos_left c (Int.natAbs_pos.2 (by linarith))) habc\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h\u2081 : a \u2223 b * 1 := by simpa [hab] using habc\n  simpa using h\u2081",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have : a \u2223 b * c := habc\n  have : gcd a c = 1 := hab\n  have : a \u2223 b := by\n    cases' exists_dvd_and_dvd_of_dvd_mul this with \u27e8d, hd, hdb, hdc\u27e9\n    have : d = 1 := by\n      have : d \u2223 1 := by\n        trans a\n        \u00b7 exact hdb\n        \u00b7 exact this\n      exact dvd_one.mp this\n    rw [this] at hdb\n    simp [hdb, hdc]\n  assumption",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [Int.natAbs_gcd] at hab\n  rw [Int.natAbs_mul] at habc\n  exact Nat.dvd_of_mul_dvd_mul_left (Int.natAbs_pos.mpr (gcd_ne_zero_left a)) habc",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h := dvd_of_mul_left_dvd habc\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [dvd_iff_exists_eq_mul_left] at habc \u22a2\n  rcases habc with \u27e8d, hd\u27e9\n  use d\n  rw [\u2190 mul_one d] at hd\n  rw [\u2190 mul_one d]\n  apply mul_left_cancel\u2080 (gcd_eq_left.mp (mul_right_cancel\u2080 (by linarith) hd))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h\u2081 : a \u2223 b * 1 := by simpa [hab] using habc\n  simpa using h\u2081",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rcases exists_dvd_and_dvd_of_dvd_mul habc with \u27e8x, y, hxy, hx, hy\u27e9\n  have : a \u2223 x * y := hxy\n  have : a \u2223 x := by\n    rw [\u2190 mul_one a]\n    apply dvd_mul_of_dvd_right\n    simpa [hab] using hx\n  have : a \u2223 y := by\n    rw [\u2190 mul_one a]\n    apply dvd_mul_of_dvd_right\n    simpa [hab] using hy\n  simpa [*, mul_comm] using hxy",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rcases exists_gcd_one a c hab with \u27e8k, hk\u27e9\n  rcases exists_mul_a_eq_gcd a c with \u27e8l, hl\u27e9\n  rw [\u2190 hl, mul_comm] at habc\n  rcases exists_mul_b_eq_gcd b a with \u27e8m, hm\u27e9\n  rw [\u2190 hm] at habc\n  exact (dvd_mul_right a m).trans habc",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h1 : a \u2223 b * c := habc\n  have h2 : a \u2223 b := by\n    have h3 : a \u2223 b * c := h1\n    have h4 : a \u2223 b * c := by\n      apply h3\n    have h5 : a \u2223 b := by\n      apply dvd_of_dvd_mul_right\n      apply h4\n      apply hab\n    apply h5\n  apply h2",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  obtain \u27e8k, hk\u27e9 := habc\n  rw [hk]\n  apply dvd_of_mul_left_dvd\n  rw [gcd_eq_left_iff_dvd] at hab\n  apply hab\n  exact \u27e8k, by simp [mul_comm, mul_assoc, mul_left_comm]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [\u2190 Int.natAbs_dvd, \u2190 Int.natAbs_dvd]\n  apply Int.natAbs_dvd_natAbs.2\n  rw [Int.natAbs_mul] at habc\n  rw [Int.natAbs_gcd] at hab\n  apply Nat.dvd_of_mul_dvd_mul_right (Nat.pos_of_ne_zero fun H : Int.natAbs c = 0 => by simp_all)\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [Int.natAbs_dvd_natAbs] at habc\n  rw [Int.gcd_eq_natAbs] at hab\n  rw [Int.natAbs_dvd_natAbs] at hab\n  exact Nat.dvd_of_dvd_mul_left_of_gcd_one habc hab",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have : a \u2223 b * gcd a c := by\n    rw [mul_comm]\n    exact habc\n  rw [hab] at this\n  exact\n    dvd_of_mul_left_dvd this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h : a \u2223 b * c := habc\n  exact (Int.dvd_mul_right b c).mp (h.trans (Int.gcd_dvd_left a c))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h\u2081 := dvd_trans (gcd_dvd_left a c) habc\n  have h\u2082 := dvd_trans (gcd_dvd_right a c) habc\n  exact (natAbs_dvd.mpr h\u2081).trans (natAbs_dvd.mpr h\u2082)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [Int.natAbs_mul] at habc\n  exact Nat.dvd_of_mul_dvd_mul_left (Int.natAbs_pos.mpr (by aesop)) habc",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [Int.natAbs_mul] at habc\n  rw [Int.natAbs_gcd] at hab\n  exact Nat.dvd_of_mul_dvd_mul_left (Int.natAbs_pos.2 <| by aesop) <| by simpa [hab] using habc",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h : a \u2223 b * gcd a c := by simpa [hab] using habc\n  exact (Int.dvd_mul_right _ _).mp (h.trans (Int.dvd_mul_left _ _))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  obtain \u27e8d, rfl\u27e9 := habc\n  rw [mul_assoc] at habc\n  exact mul_left_cancel\u2080 (by simpa [hab] using mul_dvd_mul_left a (dvd_mul_right c d)) habc",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [\u2190 Int.mul_one a] at habc\n  exact (Int.dvd_mul_right a 1).mp (by simpa [Int.gcd_mul_left] using habc)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [dvd_iff_exists_eq_mul_left] at habc \u22a2\n  obtain \u27e8b', rfl\u27e9 := habc\n  use b'\n  rw [mul_assoc]\n  exact (Nat.gcd_eq_right <| Int.natAbs_dvd_natAbs.2 <| by omega).symm.dvd.trans (Int.dvd_mul_right _ _)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h\u2080 := Nat.gcd_dvd_right (Int.natAbs a) (Int.natAbs c)\n  rw [Int.natAbs_gcd_eq_right hab] at h\u2080\n  have h\u2081 : (1 : \u2115) \u2223 Int.natAbs a := by simp\n  have h\u2082 := Nat.dvd_of_mul_dvd_mul_left h\u2081 (Int.natAbs_dvd_natAbs.mpr habc)\n  exact Int.dvd_of_natAbs_dvd h\u2082",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h : a \u2223 b * c := habc\n  have h' : a \u2223 b * c := by rwa [mul_comm]\n  have h'' : a \u2223 b * c := by rwa [mul_comm]\n  have h''' : a \u2223 b * c := by rwa [mul_comm]\n  have h'''' : a \u2223 b * c := by rwa [mul_comm]\n  have h'''''' : a \u2223 b * c := by rwa [mul_comm]\n  exact (Nat.dvd_of_mul_dvd_mul_right (Nat.gcd_pos_of_pos_left c (Nat.pos_of_ne_zero (fun h => by simp_all)))).mp\n    (by simp_all)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h := dvd_mul_of_dvd_left habc c\n  rw [mul_comm] at h\n  exact (coprime.dvd_of_dvd_mul_right hab h).mp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  exact\n    dvd_of_mul_left_dvd (by rw [mul_comm]; exact (gcd_dvd_left a c).mul_left b) habc",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h := Nat.dvd_of_mul_dvd_mul_right (show 0 < (a.natAbs : \u2115) from Nat.pos_of_ne_zero\n    (fun h => by simp_all [Int.natAbs_zero])) (by simpa [Int.natAbs_mul, Int.natAbs_ofNat]\n      using habc)\n  rw [Nat.mul_comm] at h\n  exact Int.dvd_of_natAbs_dvd_natAbs (by simpa [Int.natAbs_mul, Int.natAbs_ofNat] using h)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [mul_comm] at habc\n  rw [dvd_iff_exists_eq_mul_left] at habc \u22a2\n  obtain \u27e8d, hd\u27e9 := habc\n  use d\n  rw [mul_comm] at hd\n  rw [\u2190 hd]\n  apply mul_left_cancel\u2080 (gcd_dvd_left a c)\n  rw [\u2190 mul_assoc]\n  rw [\u2190 mul_assoc] at hd\n  nth_rewrite 2 [\u2190 gcd_mul_left] at hd\n  rw [hab, one_mul] at hd\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  have h1 : a \u2223 b * c := habc\n  have h2 : a \u2223 b * c := by\n    exact h1\n  have h3 : a \u2223 b := by\n    apply dvd_of_dvd_mul_right\n    exact h2\n    exact hab\n  exact h3",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [\u2190 mul_one a] at habc\n  exact\n    mul_left_cancel\u2080 (by simpa [hab] using gcd_dvd_left a c) habc",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [\u2190 Int.dvd_natAbs] at *\n  rw [\u2190 Int.natAbs_dvd_natAbs] at habc\n  rw [gcd_eq_gcd_ab] at hab\n  norm_cast at habc\n  rw [\u2190 mul_right_inj' (pos_of_gt (gcd_pos_of_ne_zero_left c (natAbs_pos.mpr (ne_of_gt\n    (pos_of_gt (gcd_pos_of_ne_zero_right a (natAbs_pos.mpr (ne_of_gt (pos_of_gt\n      hab)))))))))] at hab\n  norm_cast at hab\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [dvd_iff_exists_eq_mul_right] at habc \u22a2\n  rcases habc with \u27e8d, hd\u27e9\n  use d\n  rw [\u2190 mul_right_inj' (gcd_pos_of_non_zero_left c (by linarith : a \u2260 0))] at hd\n  rw [\u2190 hd, mul_comm, mul_assoc, mul_comm c, \u2190 mul_assoc, mul_comm a, mul_comm a]\n  exact mul_dvd_mul_left a (dvd_mul_right c d)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dvd_of_dvd_mul_left_of_gcd_one {a b c : \u2124} (habc : a \u2223 b * c) (hab : gcd a c = 1) :      a \u2223 b := by\n  rw [\u2190 Int.dvd_natAbs] at habc \u22a2\n  rw [Int.natAbs_mul] at habc\n  exact Nat.dvd_of_mul_dvd_mul_right (Int.natAbs_pos.2 <| gcd_pos_of_pos_left c (Int.natAbs_pos.2 (by linarith))) habc"
        ]
    },
    {
        "name": "lean_workbook_12299",
        "split": "test",
        "formal_statement": "theorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by",
        "model_outputs": [
            "\n  constructor <;> intro h\u2081 <;> simp_all\n```",
            "\n  constructor <;> intro h' <;> aesop\n```",
            "\n  constructor <;> intro <;> aesop\n```",
            "\n  constructor <;> intro h\u2081 <;> aesop\n```",
            "\n  tauto\n```",
            "\n  tauto\n```",
            "\n  apply Iff.intro\n  intro h\u2080\n  cases h\u2080 with\n  | intro ha hb =>\n    apply hb\n  intro h\u2080\n  apply And.intro\n  exact h\u2080.left\n  cases h h\u2080.left with\n  | inl hb =>\n    exact hb\n  | inr hc =>\n    apply h\u2080\n    exact And.intro h\u2080.left hc\n```",
            "\n  constructor <;> intro h\u2081 <;> simp_all\n```",
            "\n  by_cases h\u2081 : b <;> by_cases h\u2082 : c <;> simp_all\n```",
            "\n  by_cases hb : b <;> by_cases hc : c <;> simp_all\n```",
            "\n  by_cases hc : c <;> simp [*]\n  <;> tauto\n```",
            "\n  by_cases hb : b <;> by_cases hc : c <;> simp_all\n```",
            "\n  constructor <;> intro h\u2081 <;> simp_all\n```",
            "\n  constructor <;> intro h\u2080 <;> simp_all\n```",
            "\n  by_cases h\u2081 : b <;> by_cases h\u2082 : c <;> simp_all\n```",
            "\n  by_cases h\u2081 : a <;> by_cases h\u2082 : b <;> simp_all\n```",
            "\n  by_cases h\u2081 : b <;> by_cases h\u2082 : c <;> simp_all\n```",
            "\n  constructor <;> intro h\u2081\n  exact h\u2081.2\n  exact Or.imp_right (fun h\u2082 => h\u2081 \u27e8h\u2082.1, h\u2082.2\u27e9) (h h\u2081.1)\n```",
            "\n  by_cases hc : c <;> simp [hc] at h \u22a2 <;> tauto\n```",
            "\n  by_cases hc : c\n  <;> simp_all\n  <;> tauto\n```",
            "\n  constructor <;> intro h\u2081 <;> cases h\u2081 <;> aesop\n```",
            "\n  by_cases b <;> by_cases c <;> simp_all\n```",
            "\n  constructor <;> intro h\u2081\n  <;> simp_all\n  <;> intro h\u2082\n  <;> simp_all\n```",
            "\n  by_cases hb : b <;> by_cases hc : c <;> simp_all\n```",
            "\n  constructor <;> simp_all\n  <;> intro h\u2081 h\u2082 <;> aesop\n```",
            "\n  tauto\n```",
            "\n  tauto\n```",
            "\n  by_cases h\u2081 : a <;> by_cases h\u2082 : b <;> by_cases h\u2083 : c <;> simp_all\n```",
            "\n  constructor <;> intro h' <;> aesop\n```",
            "\n  tauto\n```",
            "\n  tauto\n```",
            "\n  apply Iff.intro <;> intro h' <;> cases' h' with ha hb <;>\n    cases' h ha with hb hc <;> simp_all\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> intro h\u2081 <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> intro h' <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> intro <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> intro h\u2081 <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  apply Iff.intro\n  intro h\u2080\n  cases h\u2080 with\n  | intro ha hb =>\n    apply hb\n  intro h\u2080\n  apply And.intro\n  exact h\u2080.left\n  cases h h\u2080.left with\n  | inl hb =>\n    exact hb\n  | inr hc =>\n    apply h\u2080\n    exact And.intro h\u2080.left hc",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> intro h\u2081 <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases h\u2081 : b <;> by_cases h\u2082 : c <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases hb : b <;> by_cases hc : c <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases hc : c <;> simp [*]\n  <;> tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases hb : b <;> by_cases hc : c <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> intro h\u2081 <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> intro h\u2080 <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases h\u2081 : b <;> by_cases h\u2082 : c <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases h\u2081 : a <;> by_cases h\u2082 : b <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases h\u2081 : b <;> by_cases h\u2082 : c <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> intro h\u2081\n  exact h\u2081.2\n  exact Or.imp_right (fun h\u2082 => h\u2081 \u27e8h\u2082.1, h\u2082.2\u27e9) (h h\u2081.1)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases hc : c <;> simp [hc] at h \u22a2 <;> tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases hc : c\n  <;> simp_all\n  <;> tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> intro h\u2081 <;> cases h\u2081 <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases b <;> by_cases c <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> intro h\u2081\n  <;> simp_all\n  <;> intro h\u2082\n  <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases hb : b <;> by_cases hc : c <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> simp_all\n  <;> intro h\u2081 h\u2082 <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  by_cases h\u2081 : a <;> by_cases h\u2082 : b <;> by_cases h\u2083 : c <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  constructor <;> intro h' <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem implies_or_eq_and_imp {c : Prop} (h : a \u2192 b \u2228 c) : a \u2227 b \u2194 a \u2227 c \u2192 b := by\n  apply Iff.intro <;> intro h' <;> cases' h' with ha hb <;>\n    cases' h ha with hb hc <;> simp_all"
        ]
    },
    {
        "name": "lean_workbook_12220",
        "split": "test",
        "formal_statement": "theorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by",
        "model_outputs": [
            "\n  nlinarith [sq_sqrt (show 0 \u2264 2 / (x + 2) from by linarith)]\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [sq_sqrt (show (x + 2)\u207b\u00b9 * (x + 2) * (x + 2) \u2265 0 by nlinarith)]\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [div_nonneg (sqrt_nonneg (2 / (x + 2))) (by norm_num : (0 : \u211d) \u2264 2)]\n```",
            "\n  nlinarith [hx]\n```",
            "\n  rw [div_le_iff_of_neg hx]\n  linarith [sq_nonneg (x + 2)]\n```",
            "\n  nlinarith [sq_sqrt (show (2 / (x + 2)) \u2265 0 from by positivity)]\n```",
            "\n  have h\u2080 : 0 < 2 / (x + 2) := by positivity\n  have h\u2081 : 0 < \u221a(2 / (x + 2)) := by positivity\n  nlinarith\n```",
            "\n  nlinarith [hx]\n```",
            "\n  nlinarith [sq_nonneg (x + 2)]\n```",
            "\n  nlinarith [sq_sqrt (show 0 \u2264 2 / (x + 2) by positivity)]\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [hx]\n```",
            "\n  rw [div_le_iff (show (0 : \u211d) < 4 by norm_num)]\n  nlinarith [sq_nonneg (x + 2)]\n```",
            "\n  rw [\u2190 sub_nonpos]\n  nlinarith [sq_sqrt (show (0 : \u211d) \u2264 2 / (x + 2) by linarith), hx]\n```",
            "\n  have hx' : x + 2 \u2264 2 := by linarith\n  have hx'' : 0 < x + 2 := by linarith\n  rw [div_le_iff hx'']\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [hx]\n```",
            "\n  nlinarith [hx]\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  field_simp\n  nlinarith\n```",
            "\n  rw [div_le_iff_of_neg (by norm_num : (0 : \u211d) < 2)]\n  nlinarith [hx]\n```",
            "\n  nlinarith [hx]\n```",
            "\n  nlinarith\n```",
            "\n  have h : x + 2 > 0 := by linarith\n  nlinarith [h, hx]\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [hx]\n```",
            "\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [sq_sqrt (show 0 \u2264 2 / (x + 2) from by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [sq_sqrt (show (x + 2)\u207b\u00b9 * (x + 2) * (x + 2) \u2265 0 by nlinarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [div_nonneg (sqrt_nonneg (2 / (x + 2))) (by norm_num : (0 : \u211d) \u2264 2)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  rw [div_le_iff_of_neg hx]\n  linarith [sq_nonneg (x + 2)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [sq_sqrt (show (2 / (x + 2)) \u2265 0 from by positivity)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  have h\u2080 : 0 < 2 / (x + 2) := by positivity\n  have h\u2081 : 0 < \u221a(2 / (x + 2)) := by positivity\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [sq_nonneg (x + 2)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [sq_sqrt (show 0 \u2264 2 / (x + 2) by positivity)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  rw [div_le_iff (show (0 : \u211d) < 4 by norm_num)]\n  nlinarith [sq_nonneg (x + 2)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  rw [\u2190 sub_nonpos]\n  nlinarith [sq_sqrt (show (0 : \u211d) \u2264 2 / (x + 2) by linarith), hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  have hx' : x + 2 \u2264 2 := by linarith\n  have hx'' : 0 < x + 2 := by linarith\n  rw [div_le_iff hx'']\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  field_simp\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  rw [div_le_iff_of_neg (by norm_num : (0 : \u211d) < 2)]\n  nlinarith [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  have h : x + 2 > 0 := by linarith\n  nlinarith [h, hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_two_div_add_two_div_le_one_of_neg (hx : x < 0) :     \u221a(2 / (x + 2)) / 2 + x / 4 \u2264 0 := by\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_70313",
        "split": "test",
        "formal_statement": "theorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
        "model_outputs": [
            "\n  simp [Nat.one_div_pow, summable_nat_pow_inv]\n```",
            "\n  simp [Nat.summable_one_div_pow_iff, one_lt_iff_ne_zero_and_ne_one]\n```",
            "\n  refine' \u27e8fun h => _, fun h => summable_one_div_pow_of_le h\u27e9\n  by_contra hp\n  push_neg at hp\n  have : (1 : \u211d) \u2264 p := by linarith\n  have : Summable fun n : \u2115 => 1 / (n : \u211d) ^ 1 := by\n    refine' Real.summable_one_div_pow_of_le _ this\n    exact fun n => by simpa using one_le_pow_of_one_le this n\n  have := (summable_one_div_pow_of_le h).sub this\n  simp only [one_div, sub_zero, summable_one_div_pow_of_le h, this,\n    summable_one_div_pow_of_le (by linarith : 1 \u2264 p)] at this\n  simpa [\u2190 not_le] using this\n```",
            "\n  rw [Real.summable_one_div_pow]\n  norm_cast\n```",
            "\n  constructor\n  case mp =>\n    intro h\n    by_contra h'\n    push_neg at h'\n    have : \u2200 n : \u2115, n \u2260 0 \u2192 1 / (n : \u211d) ^ p \u2265 1 := by\n      intro n hn\n      have : 1 \u2264 (n : \u211d) ^ p := by\n        apply one_le_pow_of_one_le\n        exact one_le_of_lt (by simpa using hn)\n      exact one_div_le_one_of_one_le this\n    have : Summable fun n : \u2115 => 1 := by\n      refine' summable_of_nonneg_of_le (fun n => zero_le_one) this _\n      intro n\n      split_ifs\n      all_goals simp_all\n    exact not_summable_one h this\n  case mpr =>\n    intro h\n    have hp : 0 < p := by\n      linarith\n    exact summable_one_div_nat_pow_of_pos hp\n```",
            "\n  rw [\u2190 summable_one_div_nat_pow']\n  simp [Nat.lt_succ_iff]\n```",
            "\n  simp only [summable_one_div_pow_of_le]\n  norm_num\n```",
            "\n  by_cases hp : 1 < p\n  \u00b7 simp only [hp, if_true]\n    have h\u2081 : \u2200 n : \u2115, 0 < n ^ p := by\n      intro n\n      positivity\n    have h\u2082 : \u2200 n : \u2115, 1 \u2264 n ^ p := by\n      intro n\n      exact one_le_pow_of_one_le (zero_le n) p\n    exact\n      summable_one_div_of_le h\u2081 h\u2082\n  \u00b7 simp only [hp, if_false]\n    have hp' : p \u2264 1 := by\n      linarith\n    exact not_summable_one_div_pow_of_le hp'\n```",
            "\n  simp only [one_div, inv_pow]\n  exact \u27e8fun h => by simpa [\u2190 not_le] using h.not_summable_nat_pow_inv, fun h =>\n    summable_nat_pow_inv.2 h\u27e9\n```",
            "\n  rw [summable_one_div_pow_of_le]\n  simp [le_iff_lt_or_eq]\n```",
            "\n  norm_num\n  simpa using Real.summable_one_div_pow_of_le one_le_two p\n```",
            "\n  constructor\n  case mp =>\n    intro h\n    by_contra h'\n    push_neg at h'\n    have : \u00acSummable fun n : \u2115 => 1 / (n : \u211d) ^ p := by\n      intro hs\n      have h := hs.nonneg_of_nonneg (fun n : \u2115 => by positivity)\n      simp_all\n    contradiction\n  case mpr =>\n    intro h\n    have h\u2081 : 0 < p := by linarith\n    have h\u2082 : Summable fun n : \u2115 => 1 / (n : \u211d) ^ p := by\n      simpa [Real.summable_one_div_pow_of_le] using h\n    simpa [h\u2082] using h\n```",
            "\n  rw [summable_one_div_pow, summable_nat_pow_inv]\n```",
            "\n  by_cases hp : 1 < p <;> simp [summable_one_div_pow, hp]\n  <;>\n  simp_all [Real.summable_one_div_pow]\n  <;>\n  linarith\n```",
            "\n  refine' \u27e8fun h => _, fun h => summable_one_div_nat_pow.2 h\u27e9\n  by_contra! h'\n  have : \u00acSummable (fun n : \u2115 => 1 / (n : \u211d) ^ p) := by\n    rw [summable_one_div_nat_pow]\n    exact h'\n  contradiction\n```",
            "\n  by_cases h : 1 < p <;> simp [h, Real.summable_one_div_nat_pow]\n```",
            "\n  constructor\n  \u00b7 intro h\n    by_contra h'\n    push_neg at h'\n    have : \u2211' n : \u2115, 1 / (n : \u211d) ^ p = 0 := by\n      refine tsum_eq_zero_of_not_summable ?_\n      simp [summable_one_div_nat_pow, h']\n    exact (by simp [this] : (1 : \u211d) \u2260 0) h\n  \u00b7 intro h\n    simp [summable_one_div_nat_pow, h]\n```",
            "\n  constructor\n  \u00b7 intro hp\n    by_contra h\n    push_neg at h\n    have : (\u2211' n : \u2115, 1 / (n : \u211d) ^ p) \u2264 \u2211' n : \u2115, 1 / (n : \u211d) := by\n      refine tsum_le_tsum ?_ (summable_one_div_pow_of_le h) hp\n      intro n\n      exact one_div_le_one_div_of_le (by positivity) (pow_le_one _ (by positivity) h)\n    have : \u2211' n : \u2115, 1 / (n : \u211d) = \u221e := ENNReal.summable.tsum_eq_top_of_eq_top (by simp)\n    linarith\n  \u00b7 intro hp\n    have h := Real.summable_one_div_pow_of_le hp\n    simpa only [one_div] using h\n```",
            "\n  by_cases h\u2080 : p \u2264 1 <;> simp [h\u2080]\n  <;> rcases exists_nat_one_lt_pow_lt h\u2080 with \u27e8k, hk_one, hk_lt_p\u27e9\n  <;> exact @Real.summable_one_div_pow_of_le k hk_one.le hk_lt_p\n  <;> simpa using @Real.summable_one_div_pow_of_le k hk_one.le hk_lt_p\n```",
            "\n  refine' \u27e8fun h => _, fun h => summable_one_div_nat_pow.2 h\u27e9\n  by_contra hp\n  push_neg at hp\n  have : \u2200 n : \u2115, n \u2208 Set.univ \u2192 0 < (n : \u211d) ^ p := fun n _ =>\n    pow_pos (Nat.cast_pos.mpr n.pos) p\n  exact not_summable_of_pos_of_summable _ this h\n```",
            "\n  simp [summable_one_div_pow_of_le one_le_two]\n```",
            "\n  simp only [one_div]\n  refine \u27e8fun h => ?_, fun h => summable_one_div_pow_of_le h.le\u27e9\n  by_contra h'\n  push_neg at h'\n  refine' not_summable_one_div_pow_of_le h' at h\n  exact h summable_nat_pow_inv\n```",
            "\n  refine' \u27e8fun h => _, fun h => summable_one_div_nat_pow.2 h\u27e9\n  by_contra hp\n  push_neg at hp\n  have : \u2200 n : \u2115, n \u2260 0 \u2192 1 / (n : \u211d) ^ p \u2265 1 := by\n    intro n hn\n    have hnp : (n : \u211d) ^ p \u2264 1 := by\n      have hnp : (n : \u2115) \u2264 1 := Nat.le_of_not_lt (lt_of_le_of_ne hp (by rintro rfl; simp_all))\n      norm_cast at hnp \u22a2\n      exact pow_le_one _ (by simp_all) hnp\n    rw [one_div]\n    exact inv_le_one hnp\n  obtain \u27e8n, hn\u27e9 := exists_nat_gt 1\n  specialize this n (by linarith)\n  have : (n : \u211d) ^ p > 0 := by positivity\n  linarith\n```",
            "\n  constructor\n  case mp =>\n    intro h\n    by_contra h'\n    push_neg at h'\n    rw [summable_one_div_pow_of_le h'] at h\n    exact not_summable_harmonic_series h\n  case mpr =>\n    intro h\n    have h' : 1 < p := h\n    rw [summable_one_div_pow_of_le h']\n```",
            "\n  constructor\n  case mp =>\n    intro h\n    by_contra h'\n    rw [not_lt] at h'\n    have : \u2200 n : \u2115, 0 < n \u2192 1 / (n : \u211d) ^ p \u2264 1 / (1 : \u211d) ^ p := by\n      intro n hn\n      exact div_le_div_of_le_left (by norm_num) (by norm_num) (pow_le_one _ (by norm_num) h')\n    have : Summable fun n : \u2115 => 1 / (1 : \u211d) ^ p := by\n      simpa only [one_div_one_pow] using summable_one\n    have : \u2211' n : \u2115, 1 / (n : \u211d) ^ p \u2264 \u2211' n : \u2115, 1 / (1 : \u211d) ^ p :=\n      tsum_le_tsum this (eventually_of_forall this) h\n    simp only [tsum_geometric_of_lt_1 (by norm_num) h', one_pow] at this\n    linarith\n  case mpr =>\n    intro h\n    simpa only [one_div] using summable_geometric_of_lt_1 (by norm_num) h\n```",
            "\n  norm_num\n  exact \u27e8fun h => by simpa using h.nat_of_le_one (by norm_num), fun h => by\n    simpa using h.one_div.nat_of_le_one (by norm_num)\u27e9\n```",
            "\n  by_cases hp : 1 < p <;> simp_all [hp, summable_one_div_pow]\n```",
            "\n  simp only [one_div, Nat.cast_pow]\n  norm_cast\n```",
            "\n  simp [Nat.cast_lt, \u2190 not_lt, not_summable_one_div_nat_pow]\n```",
            "\n  simp [summable_one_div_pow]\n```",
            "\n  constructor\n  \u00b7 intro h\n    by_contra h'\n    push_neg at h'\n    have : \u2211' n : \u2115, 1 / (n : \u211d) ^ p = 0 := by\n      apply tsum_eq_zero_of_not_summable\n      exact not_summable_of_one_div_pow_le_one h'\n    simp_all\n  \u00b7 intro h\n    have h\u2081 : \u2211' n : \u2115, 1 / (n : \u211d) ^ p \u2264 \u2211' n : \u2115, (1 / 2) ^ n := by\n      refine tsum_le_tsum ?_\n        (summable_geometric_of_lt_one (by norm_num) (by linarith)) (summable_geometric_of_lt_one (by norm_num) h)\n      intro n\n      rw [one_div, one_div]\n      refine inv_le_inv_of_le (pow_pos (by norm_num) _) ?_\n      exact pow_le_pow_of_le_left (by norm_num) (by linarith) _\n    have h\u2082 : \u2211' n : \u2115, (1 / 2) ^ n = 2 := by\n      rw [tsum_geometric_of_lt_one (by norm_num) (by linarith)]\n    linarith\n```",
            "\n  refine' \u27e8fun h => _, fun h => summable_one_div_nat_pow_of_le' h\u27e9\n  by_contra hn\n  rw [not_lt] at hn\n  have := h.nat_of_le hn\n  simpa [\u2190 NNReal.summable_coe, NNReal.summable_one_div_nat_pow] using this\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [Nat.one_div_pow, summable_nat_pow_inv]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [Nat.summable_one_div_pow_iff, one_lt_iff_ne_zero_and_ne_one]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  refine' \u27e8fun h => _, fun h => summable_one_div_pow_of_le h\u27e9\n  by_contra hp\n  push_neg at hp\n  have : (1 : \u211d) \u2264 p := by linarith\n  have : Summable fun n : \u2115 => 1 / (n : \u211d) ^ 1 := by\n    refine' Real.summable_one_div_pow_of_le _ this\n    exact fun n => by simpa using one_le_pow_of_one_le this n\n  have := (summable_one_div_pow_of_le h).sub this\n  simp only [one_div, sub_zero, summable_one_div_pow_of_le h, this,\n    summable_one_div_pow_of_le (by linarith : 1 \u2264 p)] at this\n  simpa [\u2190 not_le] using this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  rw [Real.summable_one_div_pow]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  constructor\n  case mp =>\n    intro h\n    by_contra h'\n    push_neg at h'\n    have : \u2200 n : \u2115, n \u2260 0 \u2192 1 / (n : \u211d) ^ p \u2265 1 := by\n      intro n hn\n      have : 1 \u2264 (n : \u211d) ^ p := by\n        apply one_le_pow_of_one_le\n        exact one_le_of_lt (by simpa using hn)\n      exact one_div_le_one_of_one_le this\n    have : Summable fun n : \u2115 => 1 := by\n      refine' summable_of_nonneg_of_le (fun n => zero_le_one) this _\n      intro n\n      split_ifs\n      all_goals simp_all\n    exact not_summable_one h this\n  case mpr =>\n    intro h\n    have hp : 0 < p := by\n      linarith\n    exact summable_one_div_nat_pow_of_pos hp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  rw [\u2190 summable_one_div_nat_pow']\n  simp [Nat.lt_succ_iff]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp only [summable_one_div_pow_of_le]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases hp : 1 < p\n  \u00b7 simp only [hp, if_true]\n    have h\u2081 : \u2200 n : \u2115, 0 < n ^ p := by\n      intro n\n      positivity\n    have h\u2082 : \u2200 n : \u2115, 1 \u2264 n ^ p := by\n      intro n\n      exact one_le_pow_of_one_le (zero_le n) p\n    exact\n      summable_one_div_of_le h\u2081 h\u2082\n  \u00b7 simp only [hp, if_false]\n    have hp' : p \u2264 1 := by\n      linarith\n    exact not_summable_one_div_pow_of_le hp'",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp only [one_div, inv_pow]\n  exact \u27e8fun h => by simpa [\u2190 not_le] using h.not_summable_nat_pow_inv, fun h =>\n    summable_nat_pow_inv.2 h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  rw [summable_one_div_pow_of_le]\n  simp [le_iff_lt_or_eq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  norm_num\n  simpa using Real.summable_one_div_pow_of_le one_le_two p",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  constructor\n  case mp =>\n    intro h\n    by_contra h'\n    push_neg at h'\n    have : \u00acSummable fun n : \u2115 => 1 / (n : \u211d) ^ p := by\n      intro hs\n      have h := hs.nonneg_of_nonneg (fun n : \u2115 => by positivity)\n      simp_all\n    contradiction\n  case mpr =>\n    intro h\n    have h\u2081 : 0 < p := by linarith\n    have h\u2082 : Summable fun n : \u2115 => 1 / (n : \u211d) ^ p := by\n      simpa [Real.summable_one_div_pow_of_le] using h\n    simpa [h\u2082] using h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  rw [summable_one_div_pow, summable_nat_pow_inv]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases hp : 1 < p <;> simp [summable_one_div_pow, hp]\n  <;>\n  simp_all [Real.summable_one_div_pow]\n  <;>\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  refine' \u27e8fun h => _, fun h => summable_one_div_nat_pow.2 h\u27e9\n  by_contra! h'\n  have : \u00acSummable (fun n : \u2115 => 1 / (n : \u211d) ^ p) := by\n    rw [summable_one_div_nat_pow]\n    exact h'\n  contradiction",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases h : 1 < p <;> simp [h, Real.summable_one_div_nat_pow]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  constructor\n  \u00b7 intro h\n    by_contra h'\n    push_neg at h'\n    have : \u2211' n : \u2115, 1 / (n : \u211d) ^ p = 0 := by\n      refine tsum_eq_zero_of_not_summable ?_\n      simp [summable_one_div_nat_pow, h']\n    exact (by simp [this] : (1 : \u211d) \u2260 0) h\n  \u00b7 intro h\n    simp [summable_one_div_nat_pow, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  constructor\n  \u00b7 intro hp\n    by_contra h\n    push_neg at h\n    have : (\u2211' n : \u2115, 1 / (n : \u211d) ^ p) \u2264 \u2211' n : \u2115, 1 / (n : \u211d) := by\n      refine tsum_le_tsum ?_ (summable_one_div_pow_of_le h) hp\n      intro n\n      exact one_div_le_one_div_of_le (by positivity) (pow_le_one _ (by positivity) h)\n    have : \u2211' n : \u2115, 1 / (n : \u211d) = \u221e := ENNReal.summable.tsum_eq_top_of_eq_top (by simp)\n    linarith\n  \u00b7 intro hp\n    have h := Real.summable_one_div_pow_of_le hp\n    simpa only [one_div] using h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases h\u2080 : p \u2264 1 <;> simp [h\u2080]\n  <;> rcases exists_nat_one_lt_pow_lt h\u2080 with \u27e8k, hk_one, hk_lt_p\u27e9\n  <;> exact @Real.summable_one_div_pow_of_le k hk_one.le hk_lt_p\n  <;> simpa using @Real.summable_one_div_pow_of_le k hk_one.le hk_lt_p",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  refine' \u27e8fun h => _, fun h => summable_one_div_nat_pow.2 h\u27e9\n  by_contra hp\n  push_neg at hp\n  have : \u2200 n : \u2115, n \u2208 Set.univ \u2192 0 < (n : \u211d) ^ p := fun n _ =>\n    pow_pos (Nat.cast_pos.mpr n.pos) p\n  exact not_summable_of_pos_of_summable _ this h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [summable_one_div_pow_of_le one_le_two]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp only [one_div]\n  refine \u27e8fun h => ?_, fun h => summable_one_div_pow_of_le h.le\u27e9\n  by_contra h'\n  push_neg at h'\n  refine' not_summable_one_div_pow_of_le h' at h\n  exact h summable_nat_pow_inv",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  refine' \u27e8fun h => _, fun h => summable_one_div_nat_pow.2 h\u27e9\n  by_contra hp\n  push_neg at hp\n  have : \u2200 n : \u2115, n \u2260 0 \u2192 1 / (n : \u211d) ^ p \u2265 1 := by\n    intro n hn\n    have hnp : (n : \u211d) ^ p \u2264 1 := by\n      have hnp : (n : \u2115) \u2264 1 := Nat.le_of_not_lt (lt_of_le_of_ne hp (by rintro rfl; simp_all))\n      norm_cast at hnp \u22a2\n      exact pow_le_one _ (by simp_all) hnp\n    rw [one_div]\n    exact inv_le_one hnp\n  obtain \u27e8n, hn\u27e9 := exists_nat_gt 1\n  specialize this n (by linarith)\n  have : (n : \u211d) ^ p > 0 := by positivity\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  constructor\n  case mp =>\n    intro h\n    by_contra h'\n    push_neg at h'\n    rw [summable_one_div_pow_of_le h'] at h\n    exact not_summable_harmonic_series h\n  case mpr =>\n    intro h\n    have h' : 1 < p := h\n    rw [summable_one_div_pow_of_le h']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  constructor\n  case mp =>\n    intro h\n    by_contra h'\n    rw [not_lt] at h'\n    have : \u2200 n : \u2115, 0 < n \u2192 1 / (n : \u211d) ^ p \u2264 1 / (1 : \u211d) ^ p := by\n      intro n hn\n      exact div_le_div_of_le_left (by norm_num) (by norm_num) (pow_le_one _ (by norm_num) h')\n    have : Summable fun n : \u2115 => 1 / (1 : \u211d) ^ p := by\n      simpa only [one_div_one_pow] using summable_one\n    have : \u2211' n : \u2115, 1 / (n : \u211d) ^ p \u2264 \u2211' n : \u2115, 1 / (1 : \u211d) ^ p :=\n      tsum_le_tsum this (eventually_of_forall this) h\n    simp only [tsum_geometric_of_lt_1 (by norm_num) h', one_pow] at this\n    linarith\n  case mpr =>\n    intro h\n    simpa only [one_div] using summable_geometric_of_lt_1 (by norm_num) h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  norm_num\n  exact \u27e8fun h => by simpa using h.nat_of_le_one (by norm_num), fun h => by\n    simpa using h.one_div.nat_of_le_one (by norm_num)\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases hp : 1 < p <;> simp_all [hp, summable_one_div_pow]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp only [one_div, Nat.cast_pow]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [Nat.cast_lt, \u2190 not_lt, not_summable_one_div_nat_pow]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [summable_one_div_pow]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  constructor\n  \u00b7 intro h\n    by_contra h'\n    push_neg at h'\n    have : \u2211' n : \u2115, 1 / (n : \u211d) ^ p = 0 := by\n      apply tsum_eq_zero_of_not_summable\n      exact not_summable_of_one_div_pow_le_one h'\n    simp_all\n  \u00b7 intro h\n    have h\u2081 : \u2211' n : \u2115, 1 / (n : \u211d) ^ p \u2264 \u2211' n : \u2115, (1 / 2) ^ n := by\n      refine tsum_le_tsum ?_\n        (summable_geometric_of_lt_one (by norm_num) (by linarith)) (summable_geometric_of_lt_one (by norm_num) h)\n      intro n\n      rw [one_div, one_div]\n      refine inv_le_inv_of_le (pow_pos (by norm_num) _) ?_\n      exact pow_le_pow_of_le_left (by norm_num) (by linarith) _\n    have h\u2082 : \u2211' n : \u2115, (1 / 2) ^ n = 2 := by\n      rw [tsum_geometric_of_lt_one (by norm_num) (by linarith)]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem summable_one_div_nat_pow {p : \u2115} :     (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  refine' \u27e8fun h => _, fun h => summable_one_div_nat_pow_of_le' h\u27e9\n  by_contra hn\n  rw [not_lt] at hn\n  have := h.nat_of_le hn\n  simpa [\u2190 NNReal.summable_coe, NNReal.summable_one_div_nat_pow] using this"
        ]
    },
    {
        "name": "lean_workbook_43177",
        "split": "test",
        "formal_statement": "theorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by",
        "model_outputs": [
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, mul_add, mul_sub]\n  ring\n```",
            "\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub, mul_add, mul_sub]\n  ring\n```",
            "\n  rw [cos_add, cos_sub]\n  ring\n```",
            "\n  rw [cos_add, cos_sub]\n  ring\n```",
            "\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.cos_add, Complex.cos_sub, Complex.sin_sub]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub, mul_add, mul_sub]\n  ring\n```",
            "\n  rw [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, mul_add, mul_sub, mul_comm, mul_left_comm]\n  ring\n```",
            "\n  rw [cos_add_cos]\n```",
            "\n  rw [cos_add, cos_sub]\n  ring\n```",
            "\n  rw [cos_add, cos_sub]\n  ring\n```",
            "\n  rw [cos_add, cos_sub]\n  ring\n```",
            "\n  rw [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring\n```",
            "\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  simp only [two_mul, add_mul, cos_add, cos_sub]\n  ring\n```",
            "\n  rw [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, mul_add, mul_sub, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring\n```",
            "\n  rw [cos_add, cos_sub]\n  ring\n```",
            "\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub, mul_add, mul_sub, mul_comm, mul_left_comm]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, mul_add, mul_sub, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```",
            "\n  have h\u2080 : cos x = cos ((x + y) / 2 + (x - y) / 2) := by ring_nf\n  have h\u2081 : cos y = cos ((x + y) / 2 - (x - y) / 2) := by ring_nf\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub]\n  ring\n```",
            "\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, mul_add, mul_sub, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, mul_add, mul_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub, mul_add, mul_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.cos_add, Complex.cos_sub, Complex.sin_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub, mul_add, mul_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, mul_add, mul_sub, mul_comm, mul_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [cos_add_cos]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  simp only [two_mul, add_mul, cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, mul_add, mul_sub, mul_comm, mul_left_comm, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub, mul_add, mul_sub, mul_comm, mul_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, mul_add, mul_sub, mul_comm, mul_left_comm, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : cos x = cos ((x + y) / 2 + (x - y) / 2) := by ring_nf\n  have h\u2081 : cos y = cos ((x + y) / 2 - (x - y) / 2) := by ring_nf\n  rw [h\u2080, h\u2081]\n  simp only [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_add_cos (x y : \u211d) : cos x + cos y = 2 * cos ((x + y) / 2) * cos ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, mul_add, mul_sub, mul_comm, mul_left_comm, mul_assoc]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_18761",
        "split": "test",
        "formal_statement": "theorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by",
        "model_outputs": [
            "\n  exact \u27e8by simp [ofReal_mul, hr], by simp [ofReal_mul, hr]\u27e9\n```",
            "\n  constructor <;> simp [hr, mul_assoc]\n```",
            "\n  constructor <;> simp [hr, mul_comm, mul_assoc, mul_left_comm]\n```",
            "\n  simp [Complex.ofReal_mul, hr]\n```",
            "\n  simp [Complex.ofReal_mul, hr]\n```",
            "\n  exact \u27e8by simp [mul_re, mul_im, hr], by simp [mul_re, mul_im, hr]\u27e9\n```",
            "\n  exact \u27e8by simp [mul_re, ofReal_re, ofReal_im, hr], by simp [mul_re, ofReal_re, ofReal_im, hr]\u27e9\n```",
            "\n  constructor <;> simp [mul_assoc, hr]\n```",
            "\n  rw [Complex.ofReal_mul]\n  simp [Complex.ext_iff, hr]\n```",
            "\n  apply And.intro\n  <;> simp [hr, mul_comm]\n```",
            "\n  simp [Complex.ofReal_mul, hr]\n```",
            "\n  simp [Complex.ofReal_mul, hr]\n```",
            "\n  constructor\n  <;> simp [Complex.mul_re, Complex.mul_im, hr]\n```",
            "\n  constructor <;> simp [ofReal_mul, hr]\n```",
            "\n  constructor <;> simp [mul_comm, hr]\n```",
            "\n  constructor\n  <;> simp [hr]\n```",
            "\n  rw [Complex.ofReal_mul]\n  simp [Complex.mul_re, Complex.mul_im, hr]\n```",
            "\n  simp [Complex.ofReal_mul, hr]\n```",
            "\n  exact \u27e8by simp [ofReal_mul, hr], by simp [ofReal_mul, hr]\u27e9\n```",
            "\n  rw [Complex.mul_def]\n  simp [hr]\n```",
            "\n  exact \u27e8by simp [Complex.ofReal_mul, hr], by simp [Complex.ofReal_mul, hr]\u27e9\n```",
            "\n  simp [Complex.mul_re, Complex.mul_im, hr]\n```",
            "\n  exact \u27e8by simp [hr], by simp [hr]\u27e9\n```",
            "\n  rw [Complex.mul_re, Complex.mul_im]\n  simp [hr]\n```",
            "\n  simp [Complex.ofReal_mul, hr]\n```",
            "\n  rw [Complex.mul_re, Complex.mul_im]\n  simp [hr]\n```",
            "\n  exact \u27e8by simp [mul_re, mul_im, hr], by simp [mul_re, mul_im, hr]\u27e9\n```",
            "\n  simp [Complex.ofReal_mul, hr]\n```",
            "\n  constructor\n  <;> simp [mul_comm, mul_assoc, mul_left_comm, ofReal_re, ofReal_im, mul_re, mul_im, hr]\n```",
            "\n  exact \u27e8by simp [Complex.mul_re, hr], by simp [Complex.mul_im, hr]\u27e9\n```",
            "\n  simp [Complex.ofReal_mul, hr]\n```",
            "\n  rw [mul_comm]\n  exact \u27e8by simp [mul_comm, hr], by simp [mul_comm, hr]\u27e9\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  exact \u27e8by simp [ofReal_mul, hr], by simp [ofReal_mul, hr]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  constructor <;> simp [hr, mul_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  constructor <;> simp [hr, mul_comm, mul_assoc, mul_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  simp [Complex.ofReal_mul, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  simp [Complex.ofReal_mul, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  exact \u27e8by simp [mul_re, mul_im, hr], by simp [mul_re, mul_im, hr]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  exact \u27e8by simp [mul_re, ofReal_re, ofReal_im, hr], by simp [mul_re, ofReal_re, ofReal_im, hr]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  constructor <;> simp [mul_assoc, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  rw [Complex.ofReal_mul]\n  simp [Complex.ext_iff, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  apply And.intro\n  <;> simp [hr, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  simp [Complex.ofReal_mul, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  simp [Complex.ofReal_mul, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  constructor\n  <;> simp [Complex.mul_re, Complex.mul_im, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  constructor <;> simp [ofReal_mul, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  constructor <;> simp [mul_comm, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  constructor\n  <;> simp [hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  rw [Complex.ofReal_mul]\n  simp [Complex.mul_re, Complex.mul_im, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  simp [Complex.ofReal_mul, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  exact \u27e8by simp [ofReal_mul, hr], by simp [ofReal_mul, hr]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  rw [Complex.mul_def]\n  simp [hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  exact \u27e8by simp [Complex.ofReal_mul, hr], by simp [Complex.ofReal_mul, hr]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  simp [Complex.mul_re, Complex.mul_im, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  exact \u27e8by simp [hr], by simp [hr]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  rw [Complex.mul_re, Complex.mul_im]\n  simp [hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  simp [Complex.ofReal_mul, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  rw [Complex.mul_re, Complex.mul_im]\n  simp [hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  exact \u27e8by simp [mul_re, mul_im, hr], by simp [mul_re, mul_im, hr]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  simp [Complex.ofReal_mul, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  constructor\n  <;> simp [mul_comm, mul_assoc, mul_left_comm, ofReal_re, ofReal_im, mul_re, mul_im, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  exact \u27e8by simp [Complex.mul_re, hr], by simp [Complex.mul_im, hr]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  simp [Complex.ofReal_mul, hr]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem show_ofReal_mul (r : \u211d) (s : \u2102) (hr : 0 \u2264 r) : (r * s).re = r * s.re \u2227 (r * s).im = r * s.im := by\n  rw [mul_comm]\n  exact \u27e8by simp [mul_comm, hr], by simp [mul_comm, hr]\u27e9"
        ]
    },
    {
        "name": "lean_workbook_plus_9727",
        "split": "test",
        "formal_statement": "theorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by",
        "model_outputs": [
            "\n  have h\u2081 : w^2 * (a * b * c)^2 = w^2 * (a^2 * b^2 * c^2) := by ring\n  rw [h\u2081]\n  nlinarith [sq_nonneg (a * b * c - w * a * b), sq_nonneg (a * b * c - w * b * c),\n    sq_nonneg (a * b * c - w * c * a)]\n```",
            "\n  nlinarith [sq_nonneg (a * b * c), sq_nonneg (a * b), sq_nonneg (b * c), sq_nonneg (c * a)]\n```",
            "\n  have : w \u2264 1 := by assumption\n  nlinarith [sq_nonneg (a * b - c * w), sq_nonneg (b * c - a * w), sq_nonneg (c * a - b * w)]\n```",
            "\n  have h\u2081 : w \u2265 0 := by linarith\n  nlinarith [sq_nonneg (a * b * c), mul_self_nonneg (a * b - c * b), mul_self_nonneg (b * c - a * c)]\n```",
            "\n  nlinarith [sq_nonneg (w * a * b - c * (a * b))]\n```",
            "\n  nlinarith [sq_nonneg (a * b - c), sq_nonneg (b * c - a), sq_nonneg (c * a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a * b * c), sq_nonneg (a * b), sq_nonneg (b * c), sq_nonneg (c * a)]\n```",
            "\n  have h' : 0 \u2264 1 - w := by linarith\n  nlinarith [sq_nonneg (a * b * c), sq_nonneg (a * b), sq_nonneg (b * c), sq_nonneg (c * a)]\n```",
            "\n  nlinarith [sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a), sq_nonneg (c * a - a * b)]\n```",
            "\n  nlinarith [sq_nonneg (a * b - c), h]\n```",
            "\n  nlinarith [sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a), sq_nonneg (c * a - a * b)]\n```",
            "\n  nlinarith [sq_nonneg (w * a * b - b * c),\n    sq_nonneg (b * c - c * a),\n    sq_nonneg (c * a - a * b)]\n```",
            "\n  nlinarith [sq_nonneg (a * b * c - w * a * b), sq_nonneg (a * b * c - w * b * c),\n    sq_nonneg (a * b * c - w * c * a)]\n```",
            "\n  nlinarith [sq_nonneg (a * b - c), sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (w * a * b - b * c), sq_nonneg (w * b * c - c * a), sq_nonneg (w * c * a - a * b)]\n```",
            "\n  have h' : 0 \u2264 (a * b - b * c)^2 + (b * c - c * a)^2 := by nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a * b * c - w * a * b),\n    sq_nonneg (a * b * c - w * b * c),\n    sq_nonneg (a * b * c - w * c * a)]\n```",
            "\n  nlinarith [sq_nonneg (w * a * b - b * c), sq_nonneg (b * c - c * a), sq_nonneg (c * a - a * b)]\n```",
            "\n  nlinarith [sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a)]\n```",
            "\n  nlinarith [sq_nonneg (a * b * c - w * a * b),\n    sq_nonneg (a * b * c - w * b * c),\n    sq_nonneg (a * b * c - w * c * a)]\n```",
            "\n  nlinarith [sq_nonneg (a * b - c * w), sq_nonneg (a * c - b * w), sq_nonneg (b * c - a * w)]\n```",
            "\n  nlinarith [sq_nonneg (a * b * c), sq_nonneg (a * b), sq_nonneg (b * c), sq_nonneg (c * a)]\n```",
            "\n  nlinarith [sq_nonneg (a * b * c - w * (b * c + c * a + a * b))]\n```",
            "\n  nlinarith [sq_nonneg (a * b * c), sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a)]\n```",
            "\n  nlinarith [sq_nonneg (a * b - c * w), sq_nonneg (b * c - a * w), sq_nonneg (c * a - b * w)]\n```",
            "\n  nlinarith [sq_nonneg (a * b - c * a), sq_nonneg (b * c - a * b), sq_nonneg (c * a - b * c)]\n```",
            "\n  nlinarith [sq_nonneg (a * b * c - w * a * b), sq_nonneg (a * b * c - w * b * c), sq_nonneg (a * b * c - w * c * a)]\n```",
            "\n  nlinarith [sq_nonneg (a * b * c - w * a * b), sq_nonneg (a * b * c - w * b * c), sq_nonneg (a * b * c - w * c * a)]\n```",
            "\n  nlinarith [sq_nonneg (a * b - c * w), sq_nonneg (b * c - a * w), sq_nonneg (c * a - b * w)]\n```",
            "\n  nlinarith [sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a)]\n```",
            "\n  nlinarith [sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a), sq_nonneg (c * a - a * b)]\n```",
            "\n  nlinarith [sq_nonneg (a * b * c), h]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  have h\u2081 : w^2 * (a * b * c)^2 = w^2 * (a^2 * b^2 * c^2) := by ring\n  rw [h\u2081]\n  nlinarith [sq_nonneg (a * b * c - w * a * b), sq_nonneg (a * b * c - w * b * c),\n    sq_nonneg (a * b * c - w * c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b * c), sq_nonneg (a * b), sq_nonneg (b * c), sq_nonneg (c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  have : w \u2264 1 := by assumption\n  nlinarith [sq_nonneg (a * b - c * w), sq_nonneg (b * c - a * w), sq_nonneg (c * a - b * w)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  have h\u2081 : w \u2265 0 := by linarith\n  nlinarith [sq_nonneg (a * b * c), mul_self_nonneg (a * b - c * b), mul_self_nonneg (b * c - a * c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (w * a * b - c * (a * b))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - c), sq_nonneg (b * c - a), sq_nonneg (c * a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b * c), sq_nonneg (a * b), sq_nonneg (b * c), sq_nonneg (c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  have h' : 0 \u2264 1 - w := by linarith\n  nlinarith [sq_nonneg (a * b * c), sq_nonneg (a * b), sq_nonneg (b * c), sq_nonneg (c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a), sq_nonneg (c * a - a * b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - c), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a), sq_nonneg (c * a - a * b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (w * a * b - b * c),\n    sq_nonneg (b * c - c * a),\n    sq_nonneg (c * a - a * b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b * c - w * a * b), sq_nonneg (a * b * c - w * b * c),\n    sq_nonneg (a * b * c - w * c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - c), sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (w * a * b - b * c), sq_nonneg (w * b * c - c * a), sq_nonneg (w * c * a - a * b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  have h' : 0 \u2264 (a * b - b * c)^2 + (b * c - c * a)^2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b * c - w * a * b),\n    sq_nonneg (a * b * c - w * b * c),\n    sq_nonneg (a * b * c - w * c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (w * a * b - b * c), sq_nonneg (b * c - c * a), sq_nonneg (c * a - a * b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b * c - w * a * b),\n    sq_nonneg (a * b * c - w * b * c),\n    sq_nonneg (a * b * c - w * c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - c * w), sq_nonneg (a * c - b * w), sq_nonneg (b * c - a * w)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b * c), sq_nonneg (a * b), sq_nonneg (b * c), sq_nonneg (c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b * c - w * (b * c + c * a + a * b))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b * c), sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - c * w), sq_nonneg (b * c - a * w), sq_nonneg (c * a - b * w)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - c * a), sq_nonneg (b * c - a * b), sq_nonneg (c * a - b * c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b * c - w * a * b), sq_nonneg (a * b * c - w * b * c), sq_nonneg (a * b * c - w * c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b * c - w * a * b), sq_nonneg (a * b * c - w * b * c), sq_nonneg (a * b * c - w * c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - c * w), sq_nonneg (b * c - a * w), sq_nonneg (c * a - b * w)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b - b * c), sq_nonneg (b * c - c * a), sq_nonneg (c * a - a * b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_le_two_mul_sub_mul_sub {w : \u211d} (a b c : \u211d) (h : w \u2264 1) :     w^2 * (a * b * c)^2 \u2264 2 * (a * b)^2 * c^2 - w * a^2 * b^2 - w * b^2 * c^2 - w * c^2 * a^2 := by\n  nlinarith [sq_nonneg (a * b * c), h]"
        ]
    },
    {
        "name": "lean_workbook_plus_42854",
        "split": "test",
        "formal_statement": "theorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by",
        "model_outputs": [
            "\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Nat.cast_succ, add_lt_add_iff_left]\n    apply lt_of_le_of_lt\n    \u00b7 norm_num\n    \u00b7 apply ih\n```",
            "\n  have : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) \u2264 1 / 2 ^ k := by\n    intro k\n    norm_num\n  exact (sum_le_sum this).trans_lt (by simp [Finset.sum_range_succ, add_halves])\n```",
            "\n  induction n with\n  | zero => norm_num\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn, Nat.cast_succ]\n    norm_num\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, add_zero]\n    linarith\n```",
            "\n  have : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) = (2 ^ k)\u207b\u00b9 := fun k => by simp\n  simp_all only [this]\n  norm_num\n  apply sum_lt_sum_of_nonneg\n  intro i _\n  norm_num\n  simp\n  apply pow_pos\n  norm_num\n```",
            "\n  have h\u2080 : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) = (2 ^ (n - k) : \u211d) / (2 ^ n : \u211d) := by\n    intro k\n    rw [pow_sub, pow_sub]\n    \u00b7 field_simp\n    \u00b7 linarith\n    \u00b7 linarith\n  simp_all only [h\u2080, Finset.sum_div, Finset.sum_pow_sub]\n  norm_num\n```",
            "\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.pow_succ, Nat.div_eq_of_lt]\n    linarith\n```",
            "\n  norm_num\n  exact_mod_cast Nat.sum_range_one_div_pow_lt 1 n\n```",
            "\n  have : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) = (2 : \u211d) ^ (-k : \u2124) := by\n    intro k\n    simp [zpow_neg, zpow_ofNat]\n  simp_rw [this]\n  apply sum_lt_sum_of_nonneg\n  exact fun k _ => by positivity\n  intro k hk\n  simp_all only [neg_add_cancel_right, zpow_neg, zpow_ofNat]\n  norm_num\n  linarith [Int.ofNat_lt.2 (by linarith : 0 < k)]\n```",
            "\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    simp_all [Finset.sum_range_succ, add_lt_add_iff_left]\n    norm_num\n    linarith\n```",
            "\n  norm_num\n  exact_mod_cast Nat.geom_sum_lt _ zero_lt_two\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    norm_num\n    linarith\n```",
            "\n  induction n <;> simp_all [Finset.sum_range_succ, Nat.pow_succ]\n  norm_num\n  linarith\n```",
            "\n  norm_num\n  exact (Finset.sum_range_succ (fun k => (1 / (2 ^ k) : \u211d)) n).symm \u25b8\n    (lt_add_iff_pos_right _).2 (by positivity)\n```",
            "\n  norm_num\n  have : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) = (2 ^ (0 : \u2124) - 2 ^ (k : \u2124)) / (2 ^ k) := by\n    intro k\n    norm_num\n    field_simp\n  simp_all only [this]\n  norm_num\n  exact @sum_range_induction \u211d _ _ (fun k => 2 ^ (0 : \u2124) - 2 ^ (k : \u2124)) (by norm_num) (by norm_num) _\n```",
            "\n  induction n with\n  | zero => norm_num\n  | succ n hn =>\n    rw [Finset.range_succ, Finset.sum_insert Finset.not_mem_range_self]\n    norm_num [hn]\n    linarith\n```",
            "\n  norm_num\n  exact_mod_cast Nat.geom_sum_lt _ zero_lt_two\n```",
            "\n  norm_num\n  exact lt_of_le_of_lt (by simp [Finset.sum_range_succ]) (by norm_num)\n```",
            "\n  norm_num\n  apply lt_of_le_of_lt (Nat.sum_le_sum_of_subset_of_nonneg _ (fun x _ _ \u21a6 by norm_num))\n  simp only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, Nat.zero_eq,\n    add_zero, zero_add, Nat.cast_one, one_mul, Nat.cast_succ, add_assoc]\n  apply lt_of_le_of_lt (Nat.sum_le_sum_of_subset_of_nonneg _ (fun x _ _ \u21a6 by norm_num))\n  simp only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, Nat.zero_eq,\n    add_zero, zero_add, Nat.cast_one, one_mul, Nat.cast_succ, add_assoc]\n  apply lt_of_le_of_lt (Nat.sum_le_sum_of_subset_of_nonneg _ (fun x _ _ \u21a6 by norm_num))\n  norm_num\n  norm_num\n  norm_num\n```",
            "\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.pow_succ, Nat.div_eq_of_lt]\n    linarith\n```",
            "\n  rw [\u2190 Nat.succ_le_iff]\n  cases n with\n  | zero => norm_num\n  | succ n =>\n    norm_num\n    exact (Nat.geom_sum_Ioo_lt 1 n.succ_pos).trans_le (by norm_num)\n```",
            "\n  rw [\u2190 Nat.cast_two]\n  exact (sum_geometric_two_le n).trans_lt (Nat.cast_lt.2 (Nat.lt_succ_self 1))\n```",
            "\n  have : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) = \u2211 k in Finset.range n, (2 ^ (n - k) : \u211d) := by\n    apply Finset.sum_congr rfl\n    intro k hk\n    rw [\u2190 one_div_one_div (2 ^ k : \u211d)]\n    norm_num\n    rw [one_div_one_div]\n  rw [this]\n  exact lt_of_le_of_lt\n    (Finset.sum_le_sum fun k hk => by simp [Nat.sub_le])\n    (by simp [Finset.sum_range_succ,\n      lt_add_iff_pos_right, pow_pos (by norm_num : (0 : \u211d) < 2)])\n```",
            "\n  norm_num\n  <;> simp_all [Finset.sum_range_succ]\n  <;> linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, zero_add,\n      lt_add_iff_pos_right]\n    apply lt_of_lt_of_le _ (le_of_eq (by simp [pow_succ, div_eq_mul_inv, mul_inv, mul_assoc]))\n    positivity\n```",
            "\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    simp_all [Finset.sum_range_succ, add_comm]\n    norm_num\n    linarith\n```",
            "\n  have : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) = (2 ^ (1 - k))\u207b\u00b9 := by\n    intro k\n    rw [one_div, inv_eq_iff_eq_inv]\n    norm_cast\n  simp_all only [this]\n  apply sum_lt_sum\n  intro i hi\n  simp_all only [Finset.mem_range]\n  apply inv_pos.2\n  norm_num\n  apply pow_pos\n  norm_num\n```",
            "\n  norm_num\n  <;> linarith [Finset.sum_le_sum_of_subset_of_nonneg (Finset.range_mono (Nat.le_succ n))\n    (fun x _ _ => by norm_num)]\n```",
            "\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.pow_succ, Nat.div_eq_of_lt]\n    linarith\n```",
            "\n  induction n with\n  | zero => norm_num\n  | succ n ih =>\n    simp_all only [Finset.range_succ, Finset.sum_insert Finset.not_mem_range_self,\n      add_lt_add_iff_right]\n    norm_num\n    linarith\n```",
            "\n  norm_num\n  induction n <;> simp_all [Finset.sum_range_succ, Nat.pow_succ, Nat.pow_zero, Nat.one_div]\n  linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    simp only [Finset.sum_range_succ, ihn, Nat.cast_succ, add_lt_add_iff_left]\n    norm_num\n    <;> simp [Nat.succ_eq_add_one, pow_add, mul_comm, mul_assoc, mul_left_comm]\n    <;> linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Nat.cast_succ, add_lt_add_iff_left]\n    apply lt_of_le_of_lt\n    \u00b7 norm_num\n    \u00b7 apply ih",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  have : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) \u2264 1 / 2 ^ k := by\n    intro k\n    norm_num\n  exact (sum_le_sum this).trans_lt (by simp [Finset.sum_range_succ, add_halves])",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  induction n with\n  | zero => norm_num\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn, Nat.cast_succ]\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, add_zero]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  have : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) = (2 ^ k)\u207b\u00b9 := fun k => by simp\n  simp_all only [this]\n  norm_num\n  apply sum_lt_sum_of_nonneg\n  intro i _\n  norm_num\n  simp\n  apply pow_pos\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  have h\u2080 : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) = (2 ^ (n - k) : \u211d) / (2 ^ n : \u211d) := by\n    intro k\n    rw [pow_sub, pow_sub]\n    \u00b7 field_simp\n    \u00b7 linarith\n    \u00b7 linarith\n  simp_all only [h\u2080, Finset.sum_div, Finset.sum_pow_sub]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.pow_succ, Nat.div_eq_of_lt]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  exact_mod_cast Nat.sum_range_one_div_pow_lt 1 n",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  have : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) = (2 : \u211d) ^ (-k : \u2124) := by\n    intro k\n    simp [zpow_neg, zpow_ofNat]\n  simp_rw [this]\n  apply sum_lt_sum_of_nonneg\n  exact fun k _ => by positivity\n  intro k hk\n  simp_all only [neg_add_cancel_right, zpow_neg, zpow_ofNat]\n  norm_num\n  linarith [Int.ofNat_lt.2 (by linarith : 0 < k)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    simp_all [Finset.sum_range_succ, add_lt_add_iff_left]\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  exact_mod_cast Nat.geom_sum_lt _ zero_lt_two",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  induction n <;> simp_all [Finset.sum_range_succ, Nat.pow_succ]\n  norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  exact (Finset.sum_range_succ (fun k => (1 / (2 ^ k) : \u211d)) n).symm \u25b8\n    (lt_add_iff_pos_right _).2 (by positivity)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  have : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) = (2 ^ (0 : \u2124) - 2 ^ (k : \u2124)) / (2 ^ k) := by\n    intro k\n    norm_num\n    field_simp\n  simp_all only [this]\n  norm_num\n  exact @sum_range_induction \u211d _ _ (fun k => 2 ^ (0 : \u2124) - 2 ^ (k : \u2124)) (by norm_num) (by norm_num) _",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  induction n with\n  | zero => norm_num\n  | succ n hn =>\n    rw [Finset.range_succ, Finset.sum_insert Finset.not_mem_range_self]\n    norm_num [hn]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  exact_mod_cast Nat.geom_sum_lt _ zero_lt_two",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  exact lt_of_le_of_lt (by simp [Finset.sum_range_succ]) (by norm_num)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  apply lt_of_le_of_lt (Nat.sum_le_sum_of_subset_of_nonneg _ (fun x _ _ \u21a6 by norm_num))\n  simp only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, Nat.zero_eq,\n    add_zero, zero_add, Nat.cast_one, one_mul, Nat.cast_succ, add_assoc]\n  apply lt_of_le_of_lt (Nat.sum_le_sum_of_subset_of_nonneg _ (fun x _ _ \u21a6 by norm_num))\n  simp only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, Nat.zero_eq,\n    add_zero, zero_add, Nat.cast_one, one_mul, Nat.cast_succ, add_assoc]\n  apply lt_of_le_of_lt (Nat.sum_le_sum_of_subset_of_nonneg _ (fun x _ _ \u21a6 by norm_num))\n  norm_num\n  norm_num\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.pow_succ, Nat.div_eq_of_lt]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  rw [\u2190 Nat.succ_le_iff]\n  cases n with\n  | zero => norm_num\n  | succ n =>\n    norm_num\n    exact (Nat.geom_sum_Ioo_lt 1 n.succ_pos).trans_le (by norm_num)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  rw [\u2190 Nat.cast_two]\n  exact (sum_geometric_two_le n).trans_lt (Nat.cast_lt.2 (Nat.lt_succ_self 1))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  have : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) = \u2211 k in Finset.range n, (2 ^ (n - k) : \u211d) := by\n    apply Finset.sum_congr rfl\n    intro k hk\n    rw [\u2190 one_div_one_div (2 ^ k : \u211d)]\n    norm_num\n    rw [one_div_one_div]\n  rw [this]\n  exact lt_of_le_of_lt\n    (Finset.sum_le_sum fun k hk => by simp [Nat.sub_le])\n    (by simp [Finset.sum_range_succ,\n      lt_add_iff_pos_right, pow_pos (by norm_num : (0 : \u211d) < 2)])",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  <;> simp_all [Finset.sum_range_succ]\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, zero_add,\n      lt_add_iff_pos_right]\n    apply lt_of_lt_of_le _ (le_of_eq (by simp [pow_succ, div_eq_mul_inv, mul_inv, mul_assoc]))\n    positivity",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    simp_all [Finset.sum_range_succ, add_comm]\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  have : \u2200 k : \u2115, (1 / (2 ^ k) : \u211d) = (2 ^ (1 - k))\u207b\u00b9 := by\n    intro k\n    rw [one_div, inv_eq_iff_eq_inv]\n    norm_cast\n  simp_all only [this]\n  apply sum_lt_sum\n  intro i hi\n  simp_all only [Finset.mem_range]\n  apply inv_pos.2\n  norm_num\n  apply pow_pos\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  <;> linarith [Finset.sum_le_sum_of_subset_of_nonneg (Finset.range_mono (Nat.le_succ n))\n    (fun x _ _ => by norm_num)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.pow_succ, Nat.div_eq_of_lt]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  induction n with\n  | zero => norm_num\n  | succ n ih =>\n    simp_all only [Finset.range_succ, Finset.sum_insert Finset.not_mem_range_self,\n      add_lt_add_iff_right]\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  norm_num\n  induction n <;> simp_all [Finset.sum_range_succ, Nat.pow_succ, Nat.pow_zero, Nat.one_div]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_one_div_two_pow_lt (n : \u2115) : (\u2211 k in Finset.range n, (1 / (2 ^ k) : \u211d)) < 2 := by\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    simp only [Finset.sum_range_succ, ihn, Nat.cast_succ, add_lt_add_iff_left]\n    norm_num\n    <;> simp [Nat.succ_eq_add_one, pow_add, mul_comm, mul_assoc, mul_left_comm]\n    <;> linarith"
        ]
    },
    {
        "name": "lean_workbook_plus_52304",
        "split": "test",
        "formal_statement": "theorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by",
        "model_outputs": [
            "\n  simp only [sq, add_mul, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  simp only [sq, mul_add, mul_comm, mul_left_comm, add_assoc, add_left_comm]\n  ring\n```",
            "\n  rw [mul_comm]\n  ring\n```",
            "\n  rw [add_comm, add_assoc]\n  ring\n```",
            "\n  ring\n```",
            "\n  rw [add_comm]\n  ring\n```",
            "\n  rw [sq, add_assoc]\n  ring\n```",
            "\n  simp only [add_sq, mul_one, mul_zero, zero_add, add_zero, mul_assoc]\n  ring\n```",
            "\n  rw [add_comm, add_comm]\n  ring\n```",
            "\n  ring\n```",
            " ring\n```",
            "\n  simp only [add_sq, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```",
            "\n  rw [sq, sq]\n  ring\n```",
            "\n  rw [sq, mul_comm]\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  rw [pow_two]\n  ring\n```",
            "\n  rw [sq, sq]\n  ring\n```",
            "\n  ring\n```",
            "\n  rw [sq, add_comm]\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  ring_nf\n```",
            "\n  rw [sq, add_comm]\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  simp only [sq, add_mul, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  simp only [sq, mul_add, mul_comm, mul_left_comm, add_assoc, add_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  rw [mul_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  rw [add_comm, add_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  rw [add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  rw [sq, add_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  simp only [add_sq, mul_one, mul_zero, zero_add, add_zero, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  rw [add_comm, add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  simp only [add_sq, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  rw [sq, sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  rw [sq, mul_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  rw [pow_two]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  rw [sq, sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  rw [sq, add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  rw [sq, add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_add_mul_self (x y : \u211d) : x ^ 2 + y * (2 * x) + y ^ 2 = (x + y) ^ 2 := by\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_42467",
        "split": "test",
        "formal_statement": "theorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by",
        "model_outputs": [
            "\n  field_simp [tan_eq_sin_div_cos, ha, hb]\n  rw [\u2190 sqrt_div, \u2190 sqrt_div]\n  field_simp [sin_arcsin, cos_arcsin, ha, hb]\n```",
            "\n  field_simp [ha, hb, tan_half, tan_eq_sin_div_cos, sin_arcsin]\n  ring_nf\n```",
            "\n  field_simp [tan_half, ha, hb]\n  ring_nf\n```",
            "\n  field_simp [Real.tan_eq_sin_div_cos, Real.sin_sq, Real.cos_sq, ha, hb]\n  ring\n```",
            "\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, ha, hb]\n  ring\n```",
            "\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, ha, hb]\n  ring\n```",
            "\n  field_simp [ha, hb]\n  rw [tan_half, tan_half, div_mul_div_comm, mul_comm, mul_div_assoc]\n```",
            "\n  field_simp [tan_eq_sin_div_cos, ha, hb, sin_sq, cos_sq]\n  ring\n```",
            "\n  field_simp [ha, hb, tan_eq_sin_div_cos, mul_comm, mul_left_comm, mul_assoc]\n  ring_nf\n  <;> congr 1 <;> norm_num\n```",
            "\n  field_simp [tan_half, ha, hb]\n```",
            "\n  field_simp [tan_half, ha, hb]\n  ring_nf\n```",
            "\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, cos_arcsin, ha, hb]\n  ring\n```",
            "\n  field_simp [tan_half, ha, hb]\n  ring\n```",
            "\n  field_simp [Real.tan_arcsin, ha, hb]\n```",
            "\n  field_simp [tan_half, ha, hb]\n```",
            "\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, ha.le, hb.le]\n  ring\n```",
            "\n  field_simp [tan_eq_sin_div_cos, ha, hb]\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  field_simp [sin_sq, cos_sq]\n  ring_nf\n```",
            "\n  field_simp [tan_half, ha, hb]\n  ring_nf\n```",
            "\n  field_simp [ha, hb, tan_eq_sin_div_cos, sin_arcsin, cos_arcsin]\n  ring_nf\n```",
            "\n  field_simp [Real.tan_arcsin, ha, hb]\n  ring\n```",
            "\n  field_simp [tan_half, ha, hb]\n  ring_nf\n```",
            "\n  field_simp [tan_half, ha, hb]\n```",
            "\n  field_simp [tan_eq_sin_div_cos, ha, hb]\n  rw [\u2190 mul_div_mul_right (sin (arcsin a / 2) / cos (arcsin a / 2)) (sin (arcsin b / 2) / cos (arcsin b / 2)) (by norm_num)]\n  rw [sin_arcsin, cos_arcsin]\n  field_simp\n```",
            "\n  field_simp [Real.tan_arcsin, ha, hb]\n  ring\n```",
            "\n  field_simp [Real.tan_arcsin, ha, hb]\n  ring\n```",
            "\n  field_simp [tan_eq_sin_div_cos, ha, hb]\n  rw [\u2190 mul_div_mul_right (sin (arcsin a / 2)) (cos (arcsin a / 2)) (cos (arcsin b / 2))]\n  rw [\u2190 mul_div_mul_right (sin (arcsin b / 2)) (cos (arcsin b / 2)) (cos (arcsin a / 2))]\n  field_simp [sin_sq, cos_sq, ha, hb]\n  ring\n```",
            "\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, cos_arcsin, ha, hb]\n  ring\n```",
            "\n  field_simp [tan_half, ha, hb]\n  ring_nf\n  <;> norm_num\n```",
            "\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, cos_arcsin, ha, hb]\n  ring\n```",
            "\n  field_simp [tan_half, ha, hb]\n  ring\n```",
            "\n  field_simp [tan_eq_sin_div_cos, ha, hb]\n  rw [sqrt_div, sqrt_div] <;> field_simp [ha, hb]\n  <;> ring_nf\n  <;> norm_num\n```",
            "\n  field_simp [tan_half, ha, hb]\n  ring_nf\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, ha, hb]\n  rw [\u2190 sqrt_div, \u2190 sqrt_div]\n  field_simp [sin_arcsin, cos_arcsin, ha, hb]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [ha, hb, tan_half, tan_eq_sin_div_cos, sin_arcsin]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_half, ha, hb]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [Real.tan_eq_sin_div_cos, Real.sin_sq, Real.cos_sq, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [ha, hb]\n  rw [tan_half, tan_half, div_mul_div_comm, mul_comm, mul_div_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, ha, hb, sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [ha, hb, tan_eq_sin_div_cos, mul_comm, mul_left_comm, mul_assoc]\n  ring_nf\n  <;> congr 1 <;> norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_half, ha, hb]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_half, ha, hb]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, cos_arcsin, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_half, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [Real.tan_arcsin, ha, hb]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_half, ha, hb]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, ha.le, hb.le]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, ha, hb]\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  field_simp [sin_sq, cos_sq]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_half, ha, hb]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [ha, hb, tan_eq_sin_div_cos, sin_arcsin, cos_arcsin]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [Real.tan_arcsin, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_half, ha, hb]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_half, ha, hb]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, ha, hb]\n  rw [\u2190 mul_div_mul_right (sin (arcsin a / 2) / cos (arcsin a / 2)) (sin (arcsin b / 2) / cos (arcsin b / 2)) (by norm_num)]\n  rw [sin_arcsin, cos_arcsin]\n  field_simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [Real.tan_arcsin, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [Real.tan_arcsin, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, ha, hb]\n  rw [\u2190 mul_div_mul_right (sin (arcsin a / 2)) (cos (arcsin a / 2)) (cos (arcsin b / 2))]\n  rw [\u2190 mul_div_mul_right (sin (arcsin b / 2)) (cos (arcsin b / 2)) (cos (arcsin a / 2))]\n  field_simp [sin_sq, cos_sq, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, cos_arcsin, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_half, ha, hb]\n  ring_nf\n  <;> norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, sin_arcsin, cos_arcsin, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_half, ha, hb]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_eq_sin_div_cos, ha, hb]\n  rw [sqrt_div, sqrt_div] <;> field_simp [ha, hb]\n  <;> ring_nf\n  <;> norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tangent_of_two_ne_zero {a b : \u211d} (ha : a \u2260 0) (hb : b \u2260 0) :     tan (arcsin a / 2) / tan (arcsin b / 2) = sqrt ((1 - a) / (1 + a)) / sqrt ((1 - b) / (1 + b)) := by\n  field_simp [tan_half, ha, hb]\n  ring_nf"
        ]
    },
    {
        "name": "lean_workbook_plus_50747",
        "split": "test",
        "formal_statement": "theorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by",
        "model_outputs": [
            "\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith\n```",
            "\n  have h : 0 \u2264 (x - y) ^ 2 := by\n    apply sq_nonneg\n  linarith\n```",
            "\n  have h : 0 \u2264 (x - y) ^ 2 := by\n    apply sq_nonneg\n  simp [sq, mul_comm, sub_mul, mul_sub] at h\n  linarith\n```",
            "\n  have h : (x - y) ^ 2 \u2265 0 := by\n    apply sq_nonneg\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (x - y) ^ 2 := by apply sq_nonneg\n  linarith\n```",
            "\n  have h : (x - y) ^ 2 \u2265 0 := by apply sq_nonneg\n  linarith\n```",
            "\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  simp [sq, mul_assoc, mul_comm, mul_left_comm] at h\n  linarith\n```",
            "\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  simp only [sq, mul_self_eq_mul_self_iff, sub_eq_iff_eq_add, add_comm] at h\n  linarith\n```",
            "\n  have : (x - y) ^ 2 \u2265 0 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := by nlinarith\n  simp [sq, \u2190 sub_add] at h\u2080\n  linarith\n```",
            "\n  linarith [sq_nonneg (x - y)]\n```",
            "\n  have h : (x - y) ^ 2 \u2265 0 := by nlinarith\n  simp [sq, \u2190 sub_mul] at h\n  linarith\n```",
            "\n  have h : (x - y) ^ 2 \u2265 0 := by nlinarith\n  nlinarith\n```",
            "\n  have h : (x - y) ^ 2 \u2265 0 := by\n    nlinarith\n  linarith\n```",
            "\n  linarith [sq_nonneg (x - y)]\n```",
            "\n  linarith [sq_nonneg (x - y)]\n```",
            "\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (x - y) ^ 2 := by nlinarith\n  have h\u2082 : (x - y) ^ 2 = x ^ 2 - 2 * x * y + y ^ 2 := by ring\n  linarith\n```",
            "\n  have : 0 \u2264 (x - y) ^ 2 := by positivity\n  linarith\n```",
            "\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith\n```",
            "\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith\n```",
            "\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := by apply sq_nonneg\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (x - y) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := by nlinarith\n  simp [sq, sub_mul, mul_sub, \u2190 sub_add, sub_nonneg] at h\u2080\n  linarith\n```",
            "\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := by\n    nlinarith\n  simp only [sq] at h\u2080\n  linarith\n```",
            "\n  have h : 0 \u2264 (x - y) ^ 2 := by\n    nlinarith\n  linarith\n```",
            "\n  have : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith\n```",
            "\n  have h : (x - y) ^ 2 \u2265 0 := by apply sq_nonneg\n  simp [sq, sub_mul, mul_assoc] at h\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (x - y) ^ 2 := sq_nonneg (x - y)\n  simp only [sq, \u2190 sub_mul, sub_nonneg] at h\u2080\n  linarith\n```",
            "\n  have h : 0 \u2264 (x - y) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith\n```",
            "\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : 0 \u2264 (x - y) ^ 2 := by\n    apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : 0 \u2264 (x - y) ^ 2 := by\n    apply sq_nonneg\n  simp [sq, mul_comm, sub_mul, mul_sub] at h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := by\n    apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h\u2080 : 0 \u2264 (x - y) ^ 2 := by apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := by apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  simp [sq, mul_assoc, mul_comm, mul_left_comm] at h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  simp only [sq, mul_self_eq_mul_self_iff, sub_eq_iff_eq_add, add_comm] at h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have : (x - y) ^ 2 \u2265 0 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := by nlinarith\n  simp [sq, \u2190 sub_add] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  linarith [sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := by nlinarith\n  simp [sq, \u2190 sub_mul] at h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  linarith [sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  linarith [sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h\u2081 : 0 \u2264 (x - y) ^ 2 := by nlinarith\n  have h\u2082 : (x - y) ^ 2 = x ^ 2 - 2 * x * y + y ^ 2 := by ring\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have : 0 \u2264 (x - y) ^ 2 := by positivity\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := by apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h\u2081 : 0 \u2264 (x - y) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := by nlinarith\n  simp [sq, sub_mul, mul_sub, \u2190 sub_add, sub_nonneg] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := by\n    nlinarith\n  simp only [sq] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : 0 \u2264 (x - y) ^ 2 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : (x - y) ^ 2 \u2265 0 := by apply sq_nonneg\n  simp [sq, sub_mul, mul_assoc] at h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h\u2080 : 0 \u2264 (x - y) ^ 2 := sq_nonneg (x - y)\n  simp only [sq, \u2190 sub_mul, sub_nonneg] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h : 0 \u2264 (x - y) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem TrivialInequality' {x y : \u211d} : x ^ 2 + y ^ 2 \u2265 2 * x * y := by\n  have h\u2080 : (x - y) ^ 2 \u2265 0 := sq_nonneg (x - y)\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_plus_75314",
        "split": "test",
        "formal_statement": "theorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by",
        "model_outputs": [
            "\n  have h\u2080 : f 0 = 0 := by\n    have h\u2081 := hf 0 0\n    simp at h\u2081\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2082 := hf 1 0\n    simp at h\u2082\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2083 := hf x 1\n    simp at h\u2083\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9\n```",
            "\n  have h\u2080 : f 0 = 0 := by\n    have h\u2080 := hf 0 0\n    simp at h\u2080\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2081 := hf 1 0\n    simp at h\u2081\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2082 := hf x 0\n    simp at h\u2082\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9\n```",
            "\n  have h1 := hf 1 0\n  have h2 := hf 0 1\n  have h3 := hf 1 1\n  simp at h1 h2 h3\n  constructor\n  linarith\n  intro x\n  linarith\n```",
            "\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 0 1\n  have h\u2084 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083 h\u2084\n  norm_num at h\u2081 h\u2082 h\u2083 h\u2084\n  exact \u27e8by linarith, fun x => by linarith\u27e9\n```",
            "\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 0 1\n  simp at h\u2081 h\u2082 h\u2083\n  have h\u2084 : f 1 = 1 / 2 := by linarith\n  have h\u2085 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2086 := hf x 1\n    have h\u2087 := hf 1 x\n    simp at h\u2086 h\u2087\n    linarith\n  exact \u27e8h\u2084, h\u2085\u27e9\n```",
            "\n  have h\u2080 : f 0 = 0 := by\n    have h\u2080 := hf 0 0\n    simp at h\u2080\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2081 := hf 1 0\n    simp at h\u2081\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2082 := hf x 0\n    simp at h\u2082\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9\n```",
            "\n  have h\u2080 : f 0 = 0 := by\n    specialize hf 0 0\n    simp_all\n  have h\u2081 : f 1 = 1 / 2 := by\n    specialize hf 0 1\n    simp_all\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    specialize hf x 1\n    simp_all\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9\n```",
            "\n  have h\u2081 := hf 1 0\n  have h\u2082 := hf 0 1\n  have h\u2083 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083\n  ring_nf at h\u2081 h\u2082 h\u2083\n  linarith\n```",
            "\n  have h\u2081 := hf 0 1\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083\n  norm_num at h\u2081 h\u2082 h\u2083\n  constructor <;> intro x <;> ring_nf <;> linarith\n```",
            "\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 0 1\n  have h\u2083 := hf 1 0\n  have h\u2084 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083 h\u2084\n  norm_num at h\u2081 h\u2082 h\u2083 h\u2084\n  exact \u27e8by linarith, fun x => by linarith\u27e9\n```",
            "\n  have h\u2081 := hf 1 0\n  have h\u2082 := hf 0 1\n  have h\u2083 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083\n  constructor\n  linarith\n  intro x\n  linarith\n```",
            "\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2082 := hf 0 1\n    have h\u2083 := hf 1 0\n    have h\u2084 := hf 1 1\n    simp at h\u2082 h\u2083 h\u2084\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2083 := hf x 0\n    have h\u2084 := hf 0 x\n    simp at h\u2083 h\u2084\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9\n```",
            "\n  have h\u2080 : f 0 = 0 := by\n    have h\u2081 := hf 0 0\n    simp at h\u2081\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2082 := hf 1 0\n    simp at h\u2082\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2083 := hf x 0\n    simp at h\u2083\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9\n```",
            "\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2081 := hf 0 1\n    have h\u2082 := hf 1 0\n    have h\u2083 := hf 1 1\n    simp at h\u2081 h\u2082 h\u2083\n    linarith\n  constructor\n  exact h\u2081\n  intro x\n  have h\u2082 := hf x 0\n  simp at h\u2082\n  linarith\n```",
            "\n  have h1 : f 1 = 1 / 2 := by\n    have h1 := hf 0 1\n    have h2 := hf 1 0\n    have h3 := hf 1 1\n    simp at h1 h2 h3\n    linarith\n  constructor\n  exact h1\n  intro x\n  have h1 := hf x 0\n  have h2 := hf 0 x\n  simp at h1 h2\n  linarith\n```",
            "\n  have h1 := hf 1 0\n  have h2 := hf 0 1\n  simp only [add_zero, zero_add, zero_pow, zero_mul, add_left_neg, mul_zero] at h1 h2\n  linarith\n```",
            "\n  have h\u2081 := hf 1 0\n  have h\u2082 := hf 0 1\n  have h\u2083 := hf 1 1\n  simp only [add_zero, zero_add, one_pow, zero_pow, one_mul, zero_mul, zero_add, add_zero,\n    one_ne_zero, (show (2 : \u211d) \u2260 0 by norm_num)] at h\u2081 h\u2082 h\u2083\n  norm_num at h\u2081 h\u2082 h\u2083\n  constructor <;> linarith\n```",
            "\n  have h\u2081 := hf 0 1\n  have h\u2082 := hf 1 0\n  simp at h\u2081 h\u2082\n  have h\u2083 := hf 1 1\n  simp at h\u2083\n  constructor\n  linarith\n  intro x\n  have h\u2084 := hf x (-x)\n  simp at h\u2084\n  linarith\n```",
            "\n  have h\u2080 := hf 0 0\n  have h\u2081 := hf 1 0\n  have h\u2082 := hf 0 1\n  simp at h\u2080 h\u2081 h\u2082\n  constructor\n  linarith\n  intro x\n  linarith [hf x 0, hf 0 x, hf x x]\n```",
            "\n  have h\u2080 := hf 1 0\n  have h\u2081 := hf 0 1\n  have h\u2082 := hf 1 1\n  simp only [add_zero, zero_add, zero_pow, zero_mul, zero_sub, add_left_neg, add_zero,\n    one_pow, mul_one, sub_zero, sub_neg_eq_add, add_comm, add_left_comm, add_assoc] at h\u2080 h\u2081 h\u2082\n  norm_num at h\u2080 h\u2081 h\u2082\n  constructor\n  linarith\n  intro x\n  linarith\n```",
            "\n  have h\u2080 : f 0 = 0 := by\n    have h\u2080 := hf 0 0\n    simp at h\u2080\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2081 := hf 1 0\n    simp at h\u2081\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2082 := hf x 1\n    simp at h\u2082\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9\n```",
            "\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 0 1\n  simp at h\u2081 h\u2082 h\u2083\n  have h\u2084 : f 1 = 1 / 2 := by linarith\n  have h\u2085 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2086 := hf x 1\n    have h\u2087 := hf 1 x\n    simp at h\u2086 h\u2087\n    linarith\n  exact \u27e8h\u2084, h\u2085\u27e9\n```",
            "\n  have h\u2080 : f 0 = 0 := by\n    have h\u2081 := hf 0 0\n    simp at h\u2081\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2082 := hf 1 0\n    simp at h\u2082\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2083 := hf x 0\n    simp at h\u2083\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9\n```",
            "\n  have h\u2081 := hf 1 0\n  simp at h\u2081\n  have h\u2082 := hf 0 1\n  simp at h\u2082\n  have h\u2083 := hf 1 1\n  simp at h\u2083\n  constructor\n  linarith\n  intro x\n  linarith\n```",
            "\n  have h1 := hf 1 0\n  have h2 := hf 0 1\n  simp at h1 h2\n  have h3 := hf 1 1\n  simp at h3\n  constructor\n  linarith\n  intro x\n  have h4 := hf x 0\n  simp at h4\n  have h5 := hf 0 x\n  simp at h5\n  linarith\n```",
            "\n  have h\u2080 : f 0 = 0 := by\n    specialize hf 0 0\n    simp at hf\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    specialize hf 1 0\n    simp at hf\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    specialize hf x 1\n    simp at hf\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9\n```",
            "\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 0 1\n  have h\u2084 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083 h\u2084\n  norm_num at h\u2081 h\u2082 h\u2083 h\u2084\n  exact \u27e8by linarith, fun x => by linarith\u27e9\n```",
            "\n  have h1 := hf 1 0\n  simp at h1\n  have h2 := hf 0 1\n  simp at h2\n  have h3 := hf 1 1\n  simp at h3\n  constructor\n  linarith\n  intro x\n  linarith\n```",
            "\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 0 1\n  have h\u2084 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083 h\u2084\n  norm_num at h\u2081 h\u2082 h\u2083 h\u2084\n  constructor\n  linarith\n  intro x\n  linarith\n```",
            "\n  have h\u2081 := hf 1 0\n  have h\u2082 := hf 0 1\n  have h\u2083 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083\n  constructor\n  linarith\n  intro x\n  linarith\n```",
            "\n  have h1 := hf 1 0\n  have h2 := hf 0 1\n  simp only [zero_add, one_mul, zero_mul, zero_add, add_zero, zero_sub, sub_zero,\n    add_right_neg, add_zero] at h1 h2\n  constructor <;> linarith\n```",
            "\n  have h1 := hf 1 0\n  have h2 := hf 0 1\n  simp at h1 h2\n  have h3 := hf 1 1\n  simp at h3\n  constructor\n  linarith\n  intro x\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2080 : f 0 = 0 := by\n    have h\u2081 := hf 0 0\n    simp at h\u2081\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2082 := hf 1 0\n    simp at h\u2082\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2083 := hf x 1\n    simp at h\u2083\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2080 : f 0 = 0 := by\n    have h\u2080 := hf 0 0\n    simp at h\u2080\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2081 := hf 1 0\n    simp at h\u2081\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2082 := hf x 0\n    simp at h\u2082\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h1 := hf 1 0\n  have h2 := hf 0 1\n  have h3 := hf 1 1\n  simp at h1 h2 h3\n  constructor\n  linarith\n  intro x\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 0 1\n  have h\u2084 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083 h\u2084\n  norm_num at h\u2081 h\u2082 h\u2083 h\u2084\n  exact \u27e8by linarith, fun x => by linarith\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 0 1\n  simp at h\u2081 h\u2082 h\u2083\n  have h\u2084 : f 1 = 1 / 2 := by linarith\n  have h\u2085 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2086 := hf x 1\n    have h\u2087 := hf 1 x\n    simp at h\u2086 h\u2087\n    linarith\n  exact \u27e8h\u2084, h\u2085\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2080 : f 0 = 0 := by\n    have h\u2080 := hf 0 0\n    simp at h\u2080\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2081 := hf 1 0\n    simp at h\u2081\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2082 := hf x 0\n    simp at h\u2082\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2080 : f 0 = 0 := by\n    specialize hf 0 0\n    simp_all\n  have h\u2081 : f 1 = 1 / 2 := by\n    specialize hf 0 1\n    simp_all\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    specialize hf x 1\n    simp_all\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 1 0\n  have h\u2082 := hf 0 1\n  have h\u2083 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083\n  ring_nf at h\u2081 h\u2082 h\u2083\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 0 1\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083\n  norm_num at h\u2081 h\u2082 h\u2083\n  constructor <;> intro x <;> ring_nf <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 0 1\n  have h\u2083 := hf 1 0\n  have h\u2084 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083 h\u2084\n  norm_num at h\u2081 h\u2082 h\u2083 h\u2084\n  exact \u27e8by linarith, fun x => by linarith\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 1 0\n  have h\u2082 := hf 0 1\n  have h\u2083 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083\n  constructor\n  linarith\n  intro x\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2082 := hf 0 1\n    have h\u2083 := hf 1 0\n    have h\u2084 := hf 1 1\n    simp at h\u2082 h\u2083 h\u2084\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2083 := hf x 0\n    have h\u2084 := hf 0 x\n    simp at h\u2083 h\u2084\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2080 : f 0 = 0 := by\n    have h\u2081 := hf 0 0\n    simp at h\u2081\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2082 := hf 1 0\n    simp at h\u2082\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2083 := hf x 0\n    simp at h\u2083\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2081 := hf 0 1\n    have h\u2082 := hf 1 0\n    have h\u2083 := hf 1 1\n    simp at h\u2081 h\u2082 h\u2083\n    linarith\n  constructor\n  exact h\u2081\n  intro x\n  have h\u2082 := hf x 0\n  simp at h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h1 : f 1 = 1 / 2 := by\n    have h1 := hf 0 1\n    have h2 := hf 1 0\n    have h3 := hf 1 1\n    simp at h1 h2 h3\n    linarith\n  constructor\n  exact h1\n  intro x\n  have h1 := hf x 0\n  have h2 := hf 0 x\n  simp at h1 h2\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h1 := hf 1 0\n  have h2 := hf 0 1\n  simp only [add_zero, zero_add, zero_pow, zero_mul, add_left_neg, mul_zero] at h1 h2\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 1 0\n  have h\u2082 := hf 0 1\n  have h\u2083 := hf 1 1\n  simp only [add_zero, zero_add, one_pow, zero_pow, one_mul, zero_mul, zero_add, add_zero,\n    one_ne_zero, (show (2 : \u211d) \u2260 0 by norm_num)] at h\u2081 h\u2082 h\u2083\n  norm_num at h\u2081 h\u2082 h\u2083\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 0 1\n  have h\u2082 := hf 1 0\n  simp at h\u2081 h\u2082\n  have h\u2083 := hf 1 1\n  simp at h\u2083\n  constructor\n  linarith\n  intro x\n  have h\u2084 := hf x (-x)\n  simp at h\u2084\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2080 := hf 0 0\n  have h\u2081 := hf 1 0\n  have h\u2082 := hf 0 1\n  simp at h\u2080 h\u2081 h\u2082\n  constructor\n  linarith\n  intro x\n  linarith [hf x 0, hf 0 x, hf x x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2080 := hf 1 0\n  have h\u2081 := hf 0 1\n  have h\u2082 := hf 1 1\n  simp only [add_zero, zero_add, zero_pow, zero_mul, zero_sub, add_left_neg, add_zero,\n    one_pow, mul_one, sub_zero, sub_neg_eq_add, add_comm, add_left_comm, add_assoc] at h\u2080 h\u2081 h\u2082\n  norm_num at h\u2080 h\u2081 h\u2082\n  constructor\n  linarith\n  intro x\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2080 : f 0 = 0 := by\n    have h\u2080 := hf 0 0\n    simp at h\u2080\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2081 := hf 1 0\n    simp at h\u2081\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2082 := hf x 1\n    simp at h\u2082\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 0 1\n  simp at h\u2081 h\u2082 h\u2083\n  have h\u2084 : f 1 = 1 / 2 := by linarith\n  have h\u2085 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2086 := hf x 1\n    have h\u2087 := hf 1 x\n    simp at h\u2086 h\u2087\n    linarith\n  exact \u27e8h\u2084, h\u2085\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2080 : f 0 = 0 := by\n    have h\u2081 := hf 0 0\n    simp at h\u2081\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    have h\u2082 := hf 1 0\n    simp at h\u2082\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    have h\u2083 := hf x 0\n    simp at h\u2083\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 1 0\n  simp at h\u2081\n  have h\u2082 := hf 0 1\n  simp at h\u2082\n  have h\u2083 := hf 1 1\n  simp at h\u2083\n  constructor\n  linarith\n  intro x\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h1 := hf 1 0\n  have h2 := hf 0 1\n  simp at h1 h2\n  have h3 := hf 1 1\n  simp at h3\n  constructor\n  linarith\n  intro x\n  have h4 := hf x 0\n  simp at h4\n  have h5 := hf 0 x\n  simp at h5\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2080 : f 0 = 0 := by\n    specialize hf 0 0\n    simp at hf\n    linarith\n  have h\u2081 : f 1 = 1 / 2 := by\n    specialize hf 1 0\n    simp at hf\n    linarith\n  have h\u2082 : \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n    intro x\n    specialize hf x 1\n    simp at hf\n    linarith\n  exact \u27e8h\u2081, h\u2082\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 0 1\n  have h\u2084 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083 h\u2084\n  norm_num at h\u2081 h\u2082 h\u2083 h\u2084\n  exact \u27e8by linarith, fun x => by linarith\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h1 := hf 1 0\n  simp at h1\n  have h2 := hf 0 1\n  simp at h2\n  have h3 := hf 1 1\n  simp at h3\n  constructor\n  linarith\n  intro x\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 0 0\n  have h\u2082 := hf 1 0\n  have h\u2083 := hf 0 1\n  have h\u2084 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083 h\u2084\n  norm_num at h\u2081 h\u2082 h\u2083 h\u2084\n  constructor\n  linarith\n  intro x\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h\u2081 := hf 1 0\n  have h\u2082 := hf 0 1\n  have h\u2083 := hf 1 1\n  simp at h\u2081 h\u2082 h\u2083\n  constructor\n  linarith\n  intro x\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h1 := hf 1 0\n  have h2 := hf 0 1\n  simp only [zero_add, one_mul, zero_mul, zero_add, add_zero, zero_sub, sub_zero,\n    add_right_neg, add_zero] at h1 h2\n  constructor <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc_2020_p19 (f : \u211d \u2192 \u211d) (hf: \u2200 x y : \u211d, f (x + y) = f x + f y + x ^ 2 + y ^ 2) :      f 1 = 1 / 2 \u2227 \u2200 x : \u211d, f x = x ^ 2 / 2 := by\n  have h1 := hf 1 0\n  have h2 := hf 0 1\n  simp at h1 h2\n  have h3 := hf 1 1\n  simp at h3\n  constructor\n  linarith\n  intro x\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_plus_565",
        "split": "test",
        "formal_statement": "theorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by",
        "model_outputs": [
            "\n  ring_nf\n```",
            "\n  ring_nf\n```",
            "\n  simp only [sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  ring\n```",
            "\n  simp only [mul_add, mul_comm, mul_left_comm, mul_right_comm, add_assoc, add_left_comm, add_right_comm]\n  ring\n```",
            "\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  linarith\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  simp only [two_mul, sq, sub_eq_add_neg]\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  simp only [sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_right_comm, sub_eq_add_neg, neg_add_rev]\n  ring\n```",
            "\n  simp only [mul_comm, mul_left_comm, mul_assoc, add_assoc, add_left_comm, add_comm, sub_eq_add_neg,\n    neg_add_rev]\n  ring\n```",
            "\n  simp only [two_mul, add_sq]\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  simp only [mul_add, add_mul, mul_comm, mul_left_comm, mul_right_comm, add_assoc, add_left_comm,\n    add_right_comm]\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring_nf\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  simp only [sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  simp only [mul_add, mul_comm, mul_left_comm, mul_right_comm, add_assoc, add_left_comm, add_right_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  simp only [two_mul, sq, sub_eq_add_neg]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  simp only [sq, mul_add, add_mul, mul_comm, mul_left_comm, mul_right_comm, sub_eq_add_neg, neg_add_rev]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  simp only [mul_comm, mul_left_comm, mul_assoc, add_assoc, add_left_comm, add_comm, sub_eq_add_neg,\n    neg_add_rev]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  simp only [two_mul, add_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  simp only [mul_add, add_mul, mul_comm, mul_left_comm, mul_right_comm, add_assoc, add_left_comm,\n    add_right_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Problem11 (a b c : \u211d) : 2 * (a ^ 2 + b ^ 2 + c ^ 2) - (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 - 2 * (a * b + b * c + c * a) := by\n  ring_nf"
        ]
    },
    {
        "name": "lean_workbook_plus_30310",
        "split": "test",
        "formal_statement": "theorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by",
        "model_outputs": [
            "\n  nlinarith [h, h]\n```",
            "\n  nlinarith [h]\n```",
            "\n  rw [sq, sq]\n  exact mul_le_mul h h (by linarith) (by linarith)\n```",
            "\n  have h\u2081 : 0 \u2264 (y - x) * (y + x) := mul_nonneg (sub_nonneg.mpr h) (add_nonneg (le_of_lt (lt_of_le_of_lt (le_refl 0) h)) (le_refl 0))\n  linarith\n```",
            "\n  nlinarith [h]\n```",
            "\n  nlinarith [h]\n```",
            "\n  nlinarith [sq_nonneg (y - x), h]\n```",
            "\n  have h' : 0 \u2264 y - x := by linarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), h]\n```",
            "\n  nlinarith [h, sq_nonneg (x - y)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), h]\n```",
            "\n  nlinarith [abs_le.mpr \u27e8(le_of_lt (sub_pos.mpr h)), (sub_nonneg.mpr h)\u27e9]\n```",
            "\n  have h\u2081 : 0 \u2264 (y - x) * (y + x) := by\n    nlinarith\n  linarith\n```",
            "\n  nlinarith [h]\n```",
            "\n  have h\u2081 : -y \u2264 x := by linarith\n  have h\u2082 : x ^ 2 \u2264 y ^ 2 := by nlinarith\n  exact h\u2082\n```",
            "\n  have h\u2081 : x ^ 2 - y ^ 2 \u2264 0 := by\n    nlinarith\n  linarith\n```",
            "\n  have h1 : 0 \u2264 (y - x) * (y + x) := by nlinarith\n  linarith\n```",
            "\n  have h1 : 0 \u2264 (y - x) := by linarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (y - x), sq_nonneg (x + y)]\n```",
            "\n  have h\u2080 : x ^ 2 - y ^ 2 \u2264 0 := by nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (x - y)]\n```",
            "\n  nlinarith [h]\n```",
            "\n  nlinarith [h, h]\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (y - x), sq_nonneg (x + y)]\n```",
            "\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 y + x := by linarith\n  have h\u2082 : 0 \u2264 y - x := by linarith\n  nlinarith\n```",
            "\n  nlinarith [h]\n```",
            "\n  rw [sq, sq]\n  exact mul_le_mul h h (le_trans (by norm_num) h) (le_trans (by norm_num) h)\n```",
            "\n  nlinarith [sq_nonneg (y - x), h]\n```",
            "\n  nlinarith [sq_nonneg (y - x), h]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [h, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  rw [sq, sq]\n  exact mul_le_mul h h (by linarith) (by linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  have h\u2081 : 0 \u2264 (y - x) * (y + x) := mul_nonneg (sub_nonneg.mpr h) (add_nonneg (le_of_lt (lt_of_le_of_lt (le_refl 0) h)) (le_refl 0))\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [sq_nonneg (y - x), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  have h' : 0 \u2264 y - x := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [sq_nonneg (x - y), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [h, sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [sq_nonneg (x - y), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [abs_le.mpr \u27e8(le_of_lt (sub_pos.mpr h)), (sub_nonneg.mpr h)\u27e9]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  have h\u2081 : 0 \u2264 (y - x) * (y + x) := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  have h\u2081 : -y \u2264 x := by linarith\n  have h\u2082 : x ^ 2 \u2264 y ^ 2 := by nlinarith\n  exact h\u2082",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  have h\u2081 : x ^ 2 - y ^ 2 \u2264 0 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  have h1 : 0 \u2264 (y - x) * (y + x) := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  have h1 : 0 \u2264 (y - x) := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [sq_nonneg (y - x), sq_nonneg (x + y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  have h\u2080 : x ^ 2 - y ^ 2 \u2264 0 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [h, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [sq_nonneg (y - x), sq_nonneg (x + y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  have h\u2081 : 0 \u2264 y + x := by linarith\n  have h\u2082 : 0 \u2264 y - x := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  rw [sq, sq]\n  exact mul_le_mul h h (le_trans (by norm_num) h) (le_trans (by norm_num) h)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [sq_nonneg (y - x), h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.sq_le_sq {x y : \u211d} (h : x \u2264 y) : x ^ 2 \u2264 y ^ 2 := by\n  nlinarith [sq_nonneg (y - x), h]"
        ]
    },
    {
        "name": "lean_workbook_plus_51827",
        "split": "test",
        "formal_statement": "theorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by",
        "model_outputs": [
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  constructor <;> intro h <;> omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero, dvd_iff_mod_eq_zero]\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  constructor <;> intro h <;> omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  simp [Int.modEq_iff_dvd]\n```",
            "\n  constructor <;> intro h\n  exact h\n  exact h\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]\n  constructor <;> intro h <;> rw [\u2190 sub_eq_zero] at h <;> simpa [sub_eq_add_neg] using h\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, dvd_iff_mod_eq_zero, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro h\n  <;> simp [Int.ModEq] at h \u22a2\n  <;> omega\n```",
            "\n  constructor <;> intro h <;> simp_all [Int.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro h <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro h <;> simp_all only [dvd_iff_mod_eq_zero, Int.ModEq]\n  <;> omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  simp [Int.modEq_iff_dvd]\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  constructor <;> intro h\n  <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro h <;> simp_all only [Int.ModEq, dvd_iff_mod_eq_zero, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega\n```",
            "\n  simp [Int.modEq_iff_dvd]\n```",
            "\n  simp [Int.modEq_iff_dvd, Int.emod_eq_emod_iff_emod_sub_eq_zero, Int.sub_self]\n```",
            "\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]\n  omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero, Int.dvd_iff_emod_eq_zero]\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro h\n  <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  rw [Int.modEq_iff_dvd, Int.emod_eq_emod_iff_emod_sub_eq_zero, Int.dvd_iff_emod_eq_zero,\n    Int.emod_eq_zero_of_dvd]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  constructor <;> intro h <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  constructor <;> intro h <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.modEq_iff_dvd]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro h\n  exact h\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]\n  constructor <;> intro h <;> rw [\u2190 sub_eq_zero] at h <;> simpa [sub_eq_add_neg] using h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro <;> simp_all [Int.ModEq, dvd_iff_mod_eq_zero, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro h\n  <;> simp [Int.ModEq] at h \u22a2\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro h <;> simp_all [Int.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro h <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro h <;> simp_all only [dvd_iff_mod_eq_zero, Int.ModEq]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.modEq_iff_dvd]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro h\n  <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro h <;> simp_all only [Int.ModEq, dvd_iff_mod_eq_zero, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro <;> simp_all [Int.ModEq, dvd_iff_mod_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.modEq_iff_dvd]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.modEq_iff_dvd, Int.emod_eq_emod_iff_emod_sub_eq_zero, Int.sub_self]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero, Int.dvd_iff_emod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro h\n  <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  rw [Int.modEq_iff_dvd, Int.emod_eq_emod_iff_emod_sub_eq_zero, Int.dvd_iff_emod_eq_zero,\n    Int.emod_eq_zero_of_dvd]"
        ]
    },
    {
        "name": "lean_workbook_52510",
        "split": "test",
        "formal_statement": "theorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by",
        "model_outputs": [
            "\n  have h1 : x * y + y * z + z * x \u2264 (x + y + z) ^ 2 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  rw [h] at h1\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  have hx' : 0 < x := hx.1\n  have hy' : 0 < y := hx.2.1\n  have hz' : 0 < z := hx.2.2\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  have h\u2081 : x * y + y * z + z * x \u2264 (x + y + z) ^ 2 / 3 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  rw [h] at h\u2081\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  have h\u2080 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  linarith\n```",
            "\n  have h1 : x + y + z = 1 := h\n  have h2 : 0 < x := hx.1\n  have h3 : 0 < y := hx.2.1\n  have h4 : 0 < z := hx.2.2\n  have h5 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  exact h5\n```",
            "\n  have h\u2081 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  exact h\u2081\n```",
            "\n  have hx' : 0 < x := hx.1\n  have hy' : 0 < y := hx.2.1\n  have hz' : 0 < z := hx.2.2\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  have h\u2080 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  have h1 : x * y + y * z + z * x \u2264 (x + y + z) ^ 2 / 12 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  rw [h] at h1\n  linarith\n```",
            "\n  nlinarith [mul_self_nonneg (x + y + z),\n    mul_self_nonneg (x - y),\n    mul_self_nonneg (y - z),\n    mul_self_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  have h' : 0 < x + y + z := by linarith\n  have h'' : x * y + y * z + z * x \u2264 (x + y + z) ^ 2 / 3 := by\n    nlinarith [sq_nonneg (x + y + z), sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  have h1 : x * y + y * z + z * x \u2264 (x + y + z) ^ 2 / 12 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  rw [h] at h1\n  linarith\n```",
            "\n  have h\u2081 : x + y + z \u2264 3 / 4 + 1 / 4 := by linarith\n  have h\u2082 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  exact h\u2082\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  have h1 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  linarith\n```",
            "\n  have h' : x + y + z = 1 := by linarith\n  have h'' : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  have h\u2081 : x + y + z \u2264 3 := by\n    linarith\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h1 : x * y + y * z + z * x \u2264 (x + y + z) ^ 2 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  rw [h] at h1\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have hx' : 0 < x := hx.1\n  have hy' : 0 < y := hx.2.1\n  have hz' : 0 < z := hx.2.2\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h\u2081 : x * y + y * z + z * x \u2264 (x + y + z) ^ 2 / 3 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  rw [h] at h\u2081\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h\u2080 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h1 : x + y + z = 1 := h\n  have h2 : 0 < x := hx.1\n  have h3 : 0 < y := hx.2.1\n  have h4 : 0 < z := hx.2.2\n  have h5 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  exact h5",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h\u2081 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  exact h\u2081",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have hx' : 0 < x := hx.1\n  have hy' : 0 < y := hx.2.1\n  have hz' : 0 < z := hx.2.2\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h\u2080 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [mul_self_nonneg (x - y), mul_self_nonneg (y - z), mul_self_nonneg (z - x)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h1 : x * y + y * z + z * x \u2264 (x + y + z) ^ 2 / 12 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  rw [h] at h1\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [mul_self_nonneg (x + y + z),\n    mul_self_nonneg (x - y),\n    mul_self_nonneg (y - z),\n    mul_self_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h' : 0 < x + y + z := by linarith\n  have h'' : x * y + y * z + z * x \u2264 (x + y + z) ^ 2 / 3 := by\n    nlinarith [sq_nonneg (x + y + z), sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h1 : x * y + y * z + z * x \u2264 (x + y + z) ^ 2 / 12 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  rw [h] at h1\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h\u2081 : x + y + z \u2264 3 / 4 + 1 / 4 := by linarith\n  have h\u2082 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  exact h\u2082",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h1 : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h' : x + y + z = 1 := by linarith\n  have h'' : x * y + y * z + z * x \u2264 1 / 4 := by\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  have h\u2081 : x + y + z \u2264 3 := by\n    linarith\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem d_le (x y z : \u211d) (hx : 0 < x \u2227 0 < y \u2227 0 < z) (h : x + y + z = 1) :     x * y + y * z + z * x \u2264 1 / 4 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]"
        ]
    },
    {
        "name": "lean_workbook_plus_66593",
        "split": "test",
        "formal_statement": "theorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by",
        "model_outputs": [
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  cases' h with ha hb\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]\n```",
            "\n  have h\u2081 : 0 \u2264 2 * a ^ 4 - a ^ 3 + a ^ 2 - a := by\n    nlinarith\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 a := by linarith\n  have h\u2082 : a^3 - a^2 \u2265 0 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 2 * a^4 - a^3 + a^2 - a := by\n    nlinarith [sq_nonneg (a^2 - a)]\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]\n```",
            "\n  nlinarith [h.1, h.2]\n```",
            "\n  have h\u2081 : 0 \u2264 a^4 := by positivity\n  have h\u2082 : 0 \u2264 a^3 := by positivity\n  have h\u2083 : 0 \u2264 a^2 := by positivity\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - 1)]\n```",
            "\n  have h\u2080 : 0 \u2264 a := by linarith\n  have h\u2081 : a \u2264 1 := by linarith\n  have h\u2082 : 0 \u2264 a^4 := by positivity\n  have h\u2083 : 0 \u2264 a^3 := by positivity\n  have h\u2084 : 0 \u2264 a^2 := by positivity\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a^2 - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - 1)]\n```",
            "\n  nlinarith [sq_nonneg (a^2 - a), sq_nonneg (a^2 + a)]\n```",
            "\n  have h\u2080 : 0 \u2264 a \u2227 a \u2264 1 := h\n  have h\u2081 : 0 \u2264 a := h\u2080.1\n  have h\u2082 : a \u2264 1 := h\u2080.2\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - 1), h.1]\n```",
            "\n  have h\u2080 : 2 * a ^ 4 - a ^ 3 + a ^ 2 - a = (a ^ 2 - a) * (2 * a ^ 2 + a + 1) := by\n    ring\n  rw [h\u2080]\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a^2 - a), sq_nonneg (a^2 + a - 1)]\n```",
            "\n  have h\u2081 : 0 \u2264 a := by linarith\n  have h\u2082 : 0 \u2264 a^2 := by nlinarith\n  have h\u2083 : 0 \u2264 a^4 := by nlinarith\n  nlinarith\n```",
            "\n  cases' h with h\u2080 h\u2081\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]\n```",
            "\n  have h\u2080 : a^2 \u2265 a^4 := by nlinarith\n  have h\u2081 : a^3 - a \u2265 0 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 a := by linarith\n  have h\u2082 : a \u2264 1 := by linarith\n  nlinarith [sq_nonneg (a^2 - a)]\n```",
            "\n  have h\u2081 : 0 \u2264 2 * a ^ 4 - a ^ 3 + a ^ 2 - a := by\n    nlinarith [sq_nonneg (a ^ 2 - a), h.1, h.2]\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]\n```",
            "\n  have h\u2080 : 0 \u2264 a := h.1\n  have h\u2081 : a \u2264 1 := h.2\n  nlinarith [sq_nonneg (a^2 - a)]\n```",
            "\n  have h\u2080 : 0 \u2264 a \u2227 a \u2264 1 := h\n  have h\u2081 : 0 \u2264 a := h\u2080.1\n  have h\u2082 : a \u2264 1 := h\u2080.2\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n```",
            "\n  have h\u2081 : 0 \u2264 2 * a^4 - a^3 + a^2 - a := by\n    nlinarith [sq_nonneg (a - 1), h.1, h.2]\n  linarith\n```",
            "\n  have h\u2081 : a^3 - a^2 \u2265 0 := by\n    nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]\n```",
            "\n  cases' h with ha hb\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - 1)]\n```",
            "\n  have h\u2081 : 0 \u2264 a \u2227 a \u2264 1 := h\n  have h\u2082 : 0 \u2264 a := h\u2081.1\n  have h\u2083 : a \u2264 1 := h\u2081.2\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  cases' h with ha hb\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2081 : 0 \u2264 2 * a ^ 4 - a ^ 3 + a ^ 2 - a := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2081 : 0 \u2264 a := by linarith\n  have h\u2082 : a^3 - a^2 \u2265 0 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2080 : 0 \u2264 2 * a^4 - a^3 + a^2 - a := by\n    nlinarith [sq_nonneg (a^2 - a)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith [h.1, h.2]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2081 : 0 \u2264 a^4 := by positivity\n  have h\u2082 : 0 \u2264 a^3 := by positivity\n  have h\u2083 : 0 \u2264 a^2 := by positivity\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith [sq_nonneg (a - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2080 : 0 \u2264 a := by linarith\n  have h\u2081 : a \u2264 1 := by linarith\n  have h\u2082 : 0 \u2264 a^4 := by positivity\n  have h\u2083 : 0 \u2264 a^3 := by positivity\n  have h\u2084 : 0 \u2264 a^2 := by positivity\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith [sq_nonneg (a^2 - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith [sq_nonneg (a - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith [sq_nonneg (a^2 - a), sq_nonneg (a^2 + a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2080 : 0 \u2264 a \u2227 a \u2264 1 := h\n  have h\u2081 : 0 \u2264 a := h\u2080.1\n  have h\u2082 : a \u2264 1 := h\u2080.2\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith [sq_nonneg (a - 1), h.1]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2080 : 2 * a ^ 4 - a ^ 3 + a ^ 2 - a = (a ^ 2 - a) * (2 * a ^ 2 + a + 1) := by\n    ring\n  rw [h\u2080]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith [sq_nonneg (a^2 - a), sq_nonneg (a^2 + a - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2081 : 0 \u2264 a := by linarith\n  have h\u2082 : 0 \u2264 a^2 := by nlinarith\n  have h\u2083 : 0 \u2264 a^4 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  cases' h with h\u2080 h\u2081\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2080 : a^2 \u2265 a^4 := by nlinarith\n  have h\u2081 : a^3 - a \u2265 0 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2081 : 0 \u2264 a := by linarith\n  have h\u2082 : a \u2264 1 := by linarith\n  nlinarith [sq_nonneg (a^2 - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2081 : 0 \u2264 2 * a ^ 4 - a ^ 3 + a ^ 2 - a := by\n    nlinarith [sq_nonneg (a ^ 2 - a), h.1, h.2]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2080 : 0 \u2264 a := h.1\n  have h\u2081 : a \u2264 1 := h.2\n  nlinarith [sq_nonneg (a^2 - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2080 : 0 \u2264 a \u2227 a \u2264 1 := h\n  have h\u2081 : 0 \u2264 a := h\u2080.1\n  have h\u2082 : a \u2264 1 := h\u2080.2\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2081 : 0 \u2264 2 * a^4 - a^3 + a^2 - a := by\n    nlinarith [sq_nonneg (a - 1), h.1, h.2]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2081 : a^3 - a^2 \u2265 0 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  cases' h with ha hb\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a^2 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem m_32 (a : \u211d) (h : 0 \u2264 a \u2227 a \u2264 1) :     2*a^4 - a^3 + a^2 - a \u2265 0 := by\n  have h\u2081 : 0 \u2264 a \u2227 a \u2264 1 := h\n  have h\u2082 : 0 \u2264 a := h\u2081.1\n  have h\u2083 : a \u2264 1 := h\u2081.2\n  nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]"
        ]
    },
    {
        "name": "lean_workbook_plus_82603",
        "split": "test",
        "formal_statement": "theorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by",
        "model_outputs": [
            "\n  rw [\u2190 Nat.mod_add_div n 2, h]\n  simp [Nat.add_mod, Nat.mul_mod, Nat.div_mod, Nat.add_div, Nat.mul_div, Nat.add_assoc]\n  ring\n  omega\n```",
            "\n  rw [choose_eq_factorial_div_factorial (Nat.le_add_right _ _)]\n  have h\u2080 : 1 \u2264 m + 1 := Nat.succ_le_succ (Nat.zero_le _)\n  have h\u2081 : 0 < m + 1 := Nat.zero_lt_succ _\n  have h\u2082 : (m + 1) * (m + n - 1).choose m = (m + n).choose m * (m + n - m) := by\n    have h\u2082 : m + n - (m + n - m) = m := by omega\n    rw [\u2190 Nat.choose_mul_succ_eq, \u2190 Nat.succ_sub (Nat.le_of_lt h\u2081), h\u2082]\n  rw [Nat.mul_div_assoc _ (Nat.dvd_of_mul_left_eq _ h\u2082), Nat.mul_div_cancel _ h\u2080]\n```",
            "\n  rw [\u2190 Nat.mod_add_div n 2, h]\n  simp [Nat.choose_eq_factorial_div_factorial, Nat.factorial]\n  ring\n  norm_num\n  omega\n```",
            "\n  rw [Nat.choose_symm_add]\n  rw [Nat.add_comm]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  omega\n```",
            "\n  rw [choose_eq_factorial_div_factorial (m + n).le_add_left]\n  rw [choose_eq_factorial_div_factorial (m + n - 1).le_add_left]\n  field_simp [Nat.factorial_ne_zero, Nat.factorial_mul_factorial_dvd_factorial (m + n - 1).le_add_left,\n    Nat.factorial_mul_factorial_dvd_factorial (m + n).le_add_left, h]\n  ring\n```",
            "\n  rw [add_comm, choose_symm_of_eq_add, add_comm]\n  simp [h, choose_mul_succ_eq]\n```",
            "\n  rw [\u2190 Nat.mod_add_div n 2, h]\n  simp [Nat.add_mul, Nat.mul_div_cancel_left]\n```",
            "\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even h]\n  rw [Nat.choose_symm_add]\n  rw [Nat.choose_mul_succ_eq]\n  ring\n```",
            "\n  rw [choose_eq_factorial_div_factorial (le_add_right (le_refl m))]\n  norm_num [Nat.choose_eq_factorial_div_factorial (le_add_right (le_refl m))]\n  field_simp [Nat.factorial_ne_zero, Nat.factorial_ne_zero, Nat.factorial_ne_zero]\n  ring\n```",
            "\n  rw [choose_eq_factorial_div_factorial (le_add_right (le_refl m))]\n  rw [choose_eq_factorial_div_factorial (le_add_left (le_refl n))]\n  norm_num [Nat.factorial]\n  ring_nf\n  omega\n```",
            "\n  rw [choose_eq_factorial_div_factorial (le_add_left m n), choose_eq_factorial_div_factorial (le_add_left (m + n - 1) 1)]\n  simp [factorial, h, add_comm, mul_comm, add_assoc, mul_assoc, mul_div_assoc,\n    mul_div_cancel_left]\n```",
            "\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even h]\n  rw [choose_symm_of_eq_add]\n  rw [Nat.mul_div_cancel_left _ (by norm_num : 0 < 2)]\n  ring\n```",
            "\n  rw [\u2190 choose_symm_of_eq_add]\n  rw [add_comm]\n  simp [Nat.choose_symm_of_eq_add, h]\n  ring\n```",
            "\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even h]\n  simp [Nat.add_comm, Nat.add_left_comm, Nat.add_assoc, choose_mul_succ_eq]\n```",
            "\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even h]\n  rw [choose_symm_of_eq_add]\n  rw [add_comm]\n  simp [Nat.add_mul_div_left, Nat.div_le_self]\n```",
            "\n  rw [\u2190 Nat.mod_add_div n 2, h]\n  norm_num\n  omega\n```",
            "\n  rw [\u2190 Nat.succ_pred_eq_of_pos (Nat.pos_of_ne_zero (Nat.two_ne_zero : 2 \u2260 0))]\n  simp [Nat.choose_succ_succ, mul_comm, mul_left_comm]\n  omega\n```",
            "\n  rw [choose_eq_factorial_div_factorial]\n  rw [choose_eq_factorial_div_factorial]\n  norm_num\n  apply Eq.symm\n  field_simp [Nat.factorial_ne_zero]\n  ring\n  omega\n```",
            "\n  rw [\u2190 Nat.succ_pred_eq_of_pos (Nat.pos_of_ne_zero (Nat.odd_iff_not_even.mp h))]\n  simp [Nat.choose_succ_succ, Nat.mul_succ, Nat.succ_mul, Nat.add_succ, Nat.succ_add]\n  ring\n```",
            "\n  rw [\u2190 Nat.succ_pred_eq_of_pos (by linarith : 0 < n)]\n  simp [choose, Nat.factorial, h]\n  ring\n```",
            "\n  rw [\u2190 Nat.succ_pred_eq_of_pos (Nat.pos_of_ne_zero (Nat.ne_of_mod_eq_zero h))]\n  simp [Nat.choose_succ_succ, Nat.succ_sub_succ, Nat.mul_div_assoc]\n  ring\n```",
            "\n  rw [\u2190 choose_symm (Nat.add_le_add_left (Nat.div_le_self _ _) _)]\n  simp [Nat.add_comm, Nat.mul_comm, Nat.mul_assoc, Nat.mul_left_comm, Nat.add_assoc,\n    Nat.add_left_comm, Nat.add_comm, Nat.mul_comm, Nat.mul_assoc, Nat.mul_left_comm]\n  norm_num [Nat.choose_succ_succ, Nat.choose_symm_of_eq_add, Nat.choose_symm_of_eq_add,\n    Nat.choose_symm_of_eq_add, Nat.choose_symm_of_eq_add, Nat.choose_symm_of_eq_add,\n    Nat.choose_symm_of_eq_add]\n  ring_nf\n  omega\n```",
            "\n  rw [add_comm]\n  rw [Nat.choose_symm_add]\n  field_simp [h]\n  ring\n```",
            "\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even h]\n  simp [Nat.choose_succ_right_eq, Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]\n```",
            "\n  rw [choose_symm_of_eq_add]\n  norm_num\n  omega\n```",
            "\n  rw [Nat.choose_symm_add]\n  rw [Nat.choose_symm_add]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  omega\n```",
            "\n  rw [Nat.choose_symm_of_eq_add]\n  simp [h, Nat.choose_symm_of_eq_add, Nat.add_comm, Nat.add_left_comm]\n  ring\n```",
            "\n  rw [choose_symm_of_eq_add]\n  rw [add_comm]\n  norm_num\n  omega\n```",
            "\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even (Nat.even_iff.mpr h)]\n  simp [Nat.choose, Nat.mul_div_assoc, Nat.mul_div_cancel_left]\n```",
            "\n  rw [choose_symm_of_eq_add]\n  simp [h, add_assoc, add_comm, add_left_comm]\n  rw [Nat.div_mul_cancel]\n  simp [Nat.factorial]\n  ring_nf\n  omega\n```",
            "\n  rw [Nat.choose_eq_factorial_div_factorial (le_add_left _ _)]\n  rw [Nat.choose_eq_factorial_div_factorial (le_add_right _ _)]\n  field_simp [Nat.factorial]\n  ring_nf\n  omega\n```",
            "\n  rw [\u2190 Nat.mod_add_div n 2, h]\n  simp [Nat.choose, Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.mod_add_div n 2, h]\n  simp [Nat.add_mod, Nat.mul_mod, Nat.div_mod, Nat.add_div, Nat.mul_div, Nat.add_assoc]\n  ring\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [choose_eq_factorial_div_factorial (Nat.le_add_right _ _)]\n  have h\u2080 : 1 \u2264 m + 1 := Nat.succ_le_succ (Nat.zero_le _)\n  have h\u2081 : 0 < m + 1 := Nat.zero_lt_succ _\n  have h\u2082 : (m + 1) * (m + n - 1).choose m = (m + n).choose m * (m + n - m) := by\n    have h\u2082 : m + n - (m + n - m) = m := by omega\n    rw [\u2190 Nat.choose_mul_succ_eq, \u2190 Nat.succ_sub (Nat.le_of_lt h\u2081), h\u2082]\n  rw [Nat.mul_div_assoc _ (Nat.dvd_of_mul_left_eq _ h\u2082), Nat.mul_div_cancel _ h\u2080]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.mod_add_div n 2, h]\n  simp [Nat.choose_eq_factorial_div_factorial, Nat.factorial]\n  ring\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [Nat.choose_symm_add]\n  rw [Nat.add_comm]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [choose_eq_factorial_div_factorial (m + n).le_add_left]\n  rw [choose_eq_factorial_div_factorial (m + n - 1).le_add_left]\n  field_simp [Nat.factorial_ne_zero, Nat.factorial_mul_factorial_dvd_factorial (m + n - 1).le_add_left,\n    Nat.factorial_mul_factorial_dvd_factorial (m + n).le_add_left, h]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [add_comm, choose_symm_of_eq_add, add_comm]\n  simp [h, choose_mul_succ_eq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.mod_add_div n 2, h]\n  simp [Nat.add_mul, Nat.mul_div_cancel_left]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even h]\n  rw [Nat.choose_symm_add]\n  rw [Nat.choose_mul_succ_eq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [choose_eq_factorial_div_factorial (le_add_right (le_refl m))]\n  norm_num [Nat.choose_eq_factorial_div_factorial (le_add_right (le_refl m))]\n  field_simp [Nat.factorial_ne_zero, Nat.factorial_ne_zero, Nat.factorial_ne_zero]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [choose_eq_factorial_div_factorial (le_add_right (le_refl m))]\n  rw [choose_eq_factorial_div_factorial (le_add_left (le_refl n))]\n  norm_num [Nat.factorial]\n  ring_nf\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [choose_eq_factorial_div_factorial (le_add_left m n), choose_eq_factorial_div_factorial (le_add_left (m + n - 1) 1)]\n  simp [factorial, h, add_comm, mul_comm, add_assoc, mul_assoc, mul_div_assoc,\n    mul_div_cancel_left]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even h]\n  rw [choose_symm_of_eq_add]\n  rw [Nat.mul_div_cancel_left _ (by norm_num : 0 < 2)]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 choose_symm_of_eq_add]\n  rw [add_comm]\n  simp [Nat.choose_symm_of_eq_add, h]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even h]\n  simp [Nat.add_comm, Nat.add_left_comm, Nat.add_assoc, choose_mul_succ_eq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even h]\n  rw [choose_symm_of_eq_add]\n  rw [add_comm]\n  simp [Nat.add_mul_div_left, Nat.div_le_self]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.mod_add_div n 2, h]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.succ_pred_eq_of_pos (Nat.pos_of_ne_zero (Nat.two_ne_zero : 2 \u2260 0))]\n  simp [Nat.choose_succ_succ, mul_comm, mul_left_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [choose_eq_factorial_div_factorial]\n  rw [choose_eq_factorial_div_factorial]\n  norm_num\n  apply Eq.symm\n  field_simp [Nat.factorial_ne_zero]\n  ring\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.succ_pred_eq_of_pos (Nat.pos_of_ne_zero (Nat.odd_iff_not_even.mp h))]\n  simp [Nat.choose_succ_succ, Nat.mul_succ, Nat.succ_mul, Nat.add_succ, Nat.succ_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.succ_pred_eq_of_pos (by linarith : 0 < n)]\n  simp [choose, Nat.factorial, h]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.succ_pred_eq_of_pos (Nat.pos_of_ne_zero (Nat.ne_of_mod_eq_zero h))]\n  simp [Nat.choose_succ_succ, Nat.succ_sub_succ, Nat.mul_div_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 choose_symm (Nat.add_le_add_left (Nat.div_le_self _ _) _)]\n  simp [Nat.add_comm, Nat.mul_comm, Nat.mul_assoc, Nat.mul_left_comm, Nat.add_assoc,\n    Nat.add_left_comm, Nat.add_comm, Nat.mul_comm, Nat.mul_assoc, Nat.mul_left_comm]\n  norm_num [Nat.choose_succ_succ, Nat.choose_symm_of_eq_add, Nat.choose_symm_of_eq_add,\n    Nat.choose_symm_of_eq_add, Nat.choose_symm_of_eq_add, Nat.choose_symm_of_eq_add,\n    Nat.choose_symm_of_eq_add]\n  ring_nf\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [add_comm]\n  rw [Nat.choose_symm_add]\n  field_simp [h]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even h]\n  simp [Nat.choose_succ_right_eq, Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [choose_symm_of_eq_add]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [Nat.choose_symm_add]\n  rw [Nat.choose_symm_add]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  rw [Nat.add_comm]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [Nat.choose_symm_of_eq_add]\n  simp [h, Nat.choose_symm_of_eq_add, Nat.add_comm, Nat.add_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [choose_symm_of_eq_add]\n  rw [add_comm]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.two_mul_div_two_add_one_of_even (Nat.even_iff.mpr h)]\n  simp [Nat.choose, Nat.mul_div_assoc, Nat.mul_div_cancel_left]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [choose_symm_of_eq_add]\n  simp [h, add_assoc, add_comm, add_left_comm]\n  rw [Nat.div_mul_cancel]\n  simp [Nat.factorial]\n  ring_nf\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [Nat.choose_eq_factorial_div_factorial (le_add_left _ _)]\n  rw [Nat.choose_eq_factorial_div_factorial (le_add_right _ _)]\n  field_simp [Nat.factorial]\n  ring_nf\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem binomial_recurrence_odd (h : n % 2 = 0) : (m + n).choose m = (n / 2 + 1) * ((m + n - 1).choose m) / (m + 1) := by\n  rw [\u2190 Nat.mod_add_div n 2, h]\n  simp [Nat.choose, Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_49744",
        "split": "test",
        "formal_statement": "theorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by",
        "model_outputs": [
            "\n  ext x\n  by_cases h : x \u2208 t <;> simp [h]\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  by_cases h\u2081 : x \u2208 t <;> by_cases h\u2082 : x \u2208 s <;> simp_all [Set.mem_union, Set.mem_diff, Set.mem_inter]\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  constructor <;> intro h <;> simp_all [Set.mem_union, Set.mem_diff, Set.mem_inter]\n```",
            "\n  ext x\n  simp [or_iff_not_imp_left, and_imp]\n  tauto\n```",
            "\n  ext x\n  simp only [Set.mem_union, Set.mem_diff, Set.mem_inter_iff, and_or_left, and_not_self,\n    false_and, or_false]\n  tauto\n```",
            "\n  ext x\n  by_cases h : x \u2208 t <;> simp_all\n```",
            "\n  ext x\n  by_cases h\u2080 : x \u2208 t <;> simp [h\u2080]\n```",
            "\n  ext x\n  simp [and_comm, or_iff_not_imp_left, not_and_or]\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  simp only [Set.mem_diff, Set.mem_union, Set.mem_inter]\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  simp only [Set.mem_diff, Set.mem_union, Set.mem_inter]\n  tauto\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp_all\n```",
            "\n  ext x\n  simp only [Set.mem_diff, Set.mem_union, Set.mem_inter]\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  constructor <;> simp (config := { contextual := true })\n```",
            "\n  apply Eq.symm\n  apply Eq.symm\n  apply Eq.symm\n  rw [inter_comm]\n  ext x\n  by_cases h : x \u2208 s <;> by_cases h' : x \u2208 t <;> simp [h, h']\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  constructor <;> intro h <;> simp at h <;> simp [h]\n```",
            "\n  ext x\n  simp [or_iff_not_imp_left, and_iff_right_of_imp]\n  tauto\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  by_cases h : x \u2208 t <;> simp [h]\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```",
            "\n  ext x\n  constructor <;> simp (config := { contextual := true })\n  <;> intro h <;> simp_all\n  <;> simp [h]\n```",
            "\n  ext x\n  constructor <;> intro h\n  all_goals\n    by_cases hx : x \u2208 t <;> simp_all [Set.mem_diff, Set.mem_inter_iff]\n```",
            "\n  ext x\n  simp [or_imp, forall_and, @or_comm (x \u2208 t)]\n```",
            "\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases h : x \u2208 t <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases h\u2081 : x \u2208 t <;> by_cases h\u2082 : x \u2208 s <;> simp_all [Set.mem_union, Set.mem_diff, Set.mem_inter]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  constructor <;> intro h <;> simp_all [Set.mem_union, Set.mem_diff, Set.mem_inter]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  simp [or_iff_not_imp_left, and_imp]\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  simp only [Set.mem_union, Set.mem_diff, Set.mem_inter_iff, and_or_left, and_not_self,\n    false_and, or_false]\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases h : x \u2208 t <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases h\u2080 : x \u2208 t <;> simp [h\u2080]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  simp [and_comm, or_iff_not_imp_left, not_and_or]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  simp only [Set.mem_diff, Set.mem_union, Set.mem_inter]\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  simp only [Set.mem_diff, Set.mem_union, Set.mem_inter]\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  simp only [Set.mem_diff, Set.mem_union, Set.mem_inter]\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  constructor <;> simp (config := { contextual := true })",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  apply Eq.symm\n  apply Eq.symm\n  apply Eq.symm\n  rw [inter_comm]\n  ext x\n  by_cases h : x \u2208 s <;> by_cases h' : x \u2208 t <;> simp [h, h']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  constructor <;> intro h <;> simp at h <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  simp [or_iff_not_imp_left, and_iff_right_of_imp]\n  tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases h : x \u2208 t <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  constructor <;> simp (config := { contextual := true })\n  <;> intro h <;> simp_all\n  <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  constructor <;> intro h\n  all_goals\n    by_cases hx : x \u2208 t <;> simp_all [Set.mem_diff, Set.mem_inter_iff]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  simp [or_imp, forall_and, @or_comm (x \u2208 t)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem diff_union_inter (s t : Set \u03b1) : s \\ t \u222a s \u2229 t = s := by\n  ext x\n  by_cases hx : x \u2208 t <;> simp [hx]"
        ]
    },
    {
        "name": "lean_workbook_21504",
        "split": "test",
        "formal_statement": "theorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by",
        "model_outputs": [
            "\n  constructor <;> intro h <;>\n  simp_all [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_of_lt] <;> omega\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega\n```",
            "\n  constructor <;> intro <;> simp_all only [Int.ModEq, Int.emod_eq_of_lt] <;> omega\n```",
            "\n  constructor <;> intro h <;>\n  simp_all only [Int.ModEq, Int.emod_eq_of_lt] <;>\n  omega\n```",
            "\n  constructor <;> intro h\n  <;> simp [Int.ModEq, Int.emod_eq_of_lt] at h \u22a2\n  <;> omega\n```",
            "\n  constructor <;> intro h <;>\n  simp [Int.ModEq, Int.emod_eq_of_lt] at h \u22a2 <;>\n  omega\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega\n```",
            "\n  constructor <;> intro h <;> simp [Int.ModEq] at h <;> simp [h]\n```",
            "\n  constructor <;> intro h\n  <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega\n```",
            "\n  constructor <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  constructor <;> intro h <;>\n    simp [Int.ModEq, Int.emod_eq_of_lt] at h <;>\n    omega\n```",
            "\n  constructor <;> intro h <;> simp_all only [Int.ModEq, Int.emod_eq_of_lt] <;> omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  constructor <;> intro h\n  <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  constructor <;> intro h <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega\n```",
            "\n  constructor <;> intro h\n  all_goals\n    norm_num [Int.ModEq, Int.emod_eq_of_lt] at h\n    omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  constructor <;> intro h <;> simp [Int.ModEq, Int.emod_eq_of_lt] at h <;> simp [h]\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  constructor <;> intro h <;>\n    simp [Int.ModEq, Int.emod_eq_of_lt] at h \u22a2 <;>\n    omega\n```",
            "\n  constructor <;> intro h <;>\n    simp_all only [Int.ModEq, Int.emod_eq_of_lt] <;>\n      omega\n```",
            "\n  constructor <;> intro h\n  <;> simp_all only [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  constructor <;> intro h\n  all_goals\n    norm_num [Int.ModEq, Int.emod_eq_of_lt] at h\n    omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_of_lt]\n```",
            "\n  constructor <;> intro h <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h <;>\n  simp_all [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_of_lt] <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro <;> simp_all only [Int.ModEq, Int.emod_eq_of_lt] <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h <;>\n  simp_all only [Int.ModEq, Int.emod_eq_of_lt] <;>\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h\n  <;> simp [Int.ModEq, Int.emod_eq_of_lt] at h \u22a2\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h <;>\n  simp [Int.ModEq, Int.emod_eq_of_lt] at h \u22a2 <;>\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h <;> simp [Int.ModEq] at h <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h\n  <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h <;>\n    simp [Int.ModEq, Int.emod_eq_of_lt] at h <;>\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h <;> simp_all only [Int.ModEq, Int.emod_eq_of_lt] <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  simp [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h\n  <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  simp [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  simp [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h\n  all_goals\n    norm_num [Int.ModEq, Int.emod_eq_of_lt] at h\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  simp [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h <;> simp [Int.ModEq, Int.emod_eq_of_lt] at h <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  simp [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  simp [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h <;>\n    simp [Int.ModEq, Int.emod_eq_of_lt] at h \u22a2 <;>\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h <;>\n    simp_all only [Int.ModEq, Int.emod_eq_of_lt] <;>\n      omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h\n  <;> simp_all only [Int.ModEq, Int.emod_eq_of_lt]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  simp [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h\n  all_goals\n    norm_num [Int.ModEq, Int.emod_eq_of_lt] at h\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  simp [Int.ModEq, Int.emod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_one_iff_eq_one_mod_five {n : \u2124} : n \u2261 1 [ZMOD 5] \u2194 n % 5 = 1 := by\n  constructor <;> intro h <;> simp_all [Int.ModEq, Int.emod_eq_of_lt]"
        ]
    },
    {
        "name": "lean_workbook_34511",
        "split": "test",
        "formal_statement": "theorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by",
        "model_outputs": [
            "\n  rw [uniformContinuous_iff_continuous] at h\n  exact h\n```",
            "\n  rw [Metric.uniformContinuous_iff] at h\n  exact h.continuous\n```",
            "\n  rw [Metric.uniformContinuous_iff] at h\n  exact uniformContinuous_of_uniformContinuous_id h\n```",
            "\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact uniformContinuous_iff_continuous.mp h\n```",
            "\n  rw [Metric.uniformContinuous_iff] at h\n  exact uniformContinuous_iff.1 h\n```",
            "\n  have : UniformContinuous f \u2192 Continuous f := uniformContinuous_iff.mp\n  exact this h\n```",
            "\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact continuous_iff_continuousAt.mpr fun x =>\n    Filter.Tendsto.congr' (by rw [nhds_eq_comap_uniformity]) h\n```",
            "\n  simpa using h.continuous\n```",
            "\n  rw [Metric.uniformContinuous_iff] at h\n  exact h.continuous\n```",
            "\n  rw [Metric.uniformContinuous_iff] at h\n  rw [Metric.continuous_iff]\n  intro x \u03b5 \u03b5pos\n  obtain \u27e8\u03b4, \u03b4pos, H\u27e9 := h \u03b5 \u03b5pos\n  exact \u27e8\u03b4, \u03b4pos, fun x' hx' => H x' x hx'\u27e9\n```",
            "\n  apply uniformContinuous_iff.1 h\n```",
            "\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact continuous_iff_continuousAt.mpr fun x =>\n    Filter.Tendsto.congr' h.2 (Filter.Tendsto.comp (continuous_iff_continuousAt.mp continuous_id x) h.1)\n```",
            "\n  rw [uniformContinuous_iff_continuous] at h\n  exact h\n```",
            "\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact continuous_iff_continuousAt.mpr fun x =>\n    Filter.Tendsto.continuousAt (by simpa using h)\n```",
            "\n  simp only [UniformContinuous, Metric.uniformity_basis_dist, Filter.hasBasis_iff] at h\n  refine' Metric.continuous_iff.2 fun \u03b5 \u03b50 => _\n  rcases h \u03b5 \u03b50 with \u27e8\u03b4, \u03b40, H\u03b4\u27e9\n  exact \u27e8\u03b4, \u03b40, fun {x y} hxy => H\u03b4 (dist_comm y x \u25b8 hxy)\u27e9\n```",
            "\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact continuous_iff_continuousAt.mpr fun x => tendsto_iff_dist_tendsto_zero.mpr (h.continuousAt x)\n```",
            "\n  have := h.continuous\n  exact this\n```",
            "\n  rw [uniformContinuous_iff_continuous] at h\n  exact h\n```",
            "\n  rw [Metric.uniformContinuous_iff] at h\n  exact Metric.uniformContinuous_iff.mp h\n```",
            "\n  exact h.continuous\n```",
            "\n  rw [UniformContinuous] at h\n  exact h.continuous\n```",
            "\n  rw [Metric.uniformContinuous_iff] at h\n  exact h.continuous\n```",
            "\n  simp only [UniformContinuous, Metric.uniformity_basis_dist.uniformContinuous_iff] at h\n  exact continuous_iff_continuousAt.mpr fun x => tendsto_iff_dist_tendsto_zero.mpr (h x)\n```",
            "\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact continuous_iff_continuousAt.mpr fun x =>\n    Filter.Tendsto.continuousAt (by simpa using h)\n```",
            "\n  rw [Metric.uniformContinuous_iff] at h\n  exact h.continuous\n```",
            "\n  rw [Metric.uniformContinuous_iff] at h\n  rw [Metric.continuous_iff]\n  intro x \u03b5 h\u03b5\n  obtain \u27e8\u03b4, h\u03b4, h'\u03b4\u27e9 := h \u03b5 h\u03b5\n  exact \u27e8\u03b4, h\u03b4, fun x' hx' => h'\u03b4 x' x hx'\u27e9\n```",
            "\n  exact uniformContinuous_iff_continuous.mp h\n```",
            "\n  simpa only [uniformContinuous_iff_continuous] using h\n```",
            "\n  have := h.uniformContinuousOn\n  exact continuous_iff_continuousOn_univ.mpr this.continuousOn\n```",
            "\n  exact h.continuous\n```",
            "\n  exact h.continuous\n```",
            "\n  rw [Metric.uniformContinuous_iff] at h\n  exact Metric.uniformContinuous_iff.mp h\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [uniformContinuous_iff_continuous] at h\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [Metric.uniformContinuous_iff] at h\n  exact h.continuous",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [Metric.uniformContinuous_iff] at h\n  exact uniformContinuous_of_uniformContinuous_id h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact uniformContinuous_iff_continuous.mp h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [Metric.uniformContinuous_iff] at h\n  exact uniformContinuous_iff.1 h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  have : UniformContinuous f \u2192 Continuous f := uniformContinuous_iff.mp\n  exact this h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact continuous_iff_continuousAt.mpr fun x =>\n    Filter.Tendsto.congr' (by rw [nhds_eq_comap_uniformity]) h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  simpa using h.continuous",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [Metric.uniformContinuous_iff] at h\n  exact h.continuous",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [Metric.uniformContinuous_iff] at h\n  rw [Metric.continuous_iff]\n  intro x \u03b5 \u03b5pos\n  obtain \u27e8\u03b4, \u03b4pos, H\u27e9 := h \u03b5 \u03b5pos\n  exact \u27e8\u03b4, \u03b4pos, fun x' hx' => H x' x hx'\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  apply uniformContinuous_iff.1 h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact continuous_iff_continuousAt.mpr fun x =>\n    Filter.Tendsto.congr' h.2 (Filter.Tendsto.comp (continuous_iff_continuousAt.mp continuous_id x) h.1)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [uniformContinuous_iff_continuous] at h\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact continuous_iff_continuousAt.mpr fun x =>\n    Filter.Tendsto.continuousAt (by simpa using h)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  simp only [UniformContinuous, Metric.uniformity_basis_dist, Filter.hasBasis_iff] at h\n  refine' Metric.continuous_iff.2 fun \u03b5 \u03b50 => _\n  rcases h \u03b5 \u03b50 with \u27e8\u03b4, \u03b40, H\u03b4\u27e9\n  exact \u27e8\u03b4, \u03b40, fun {x y} hxy => H\u03b4 (dist_comm y x \u25b8 hxy)\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact continuous_iff_continuousAt.mpr fun x => tendsto_iff_dist_tendsto_zero.mpr (h.continuousAt x)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  have := h.continuous\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [uniformContinuous_iff_continuous] at h\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [Metric.uniformContinuous_iff] at h\n  exact Metric.uniformContinuous_iff.mp h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  exact h.continuous",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [UniformContinuous] at h\n  exact h.continuous",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [Metric.uniformContinuous_iff] at h\n  exact h.continuous",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  simp only [UniformContinuous, Metric.uniformity_basis_dist.uniformContinuous_iff] at h\n  exact continuous_iff_continuousAt.mpr fun x => tendsto_iff_dist_tendsto_zero.mpr (h x)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [UniformContinuous, Metric.uniformity_eq_comap_nhds_zero] at h\n  exact continuous_iff_continuousAt.mpr fun x =>\n    Filter.Tendsto.continuousAt (by simpa using h)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [Metric.uniformContinuous_iff] at h\n  exact h.continuous",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [Metric.uniformContinuous_iff] at h\n  rw [Metric.continuous_iff]\n  intro x \u03b5 h\u03b5\n  obtain \u27e8\u03b4, h\u03b4, h'\u03b4\u27e9 := h \u03b5 h\u03b5\n  exact \u27e8\u03b4, h\u03b4, fun x' hx' => h'\u03b4 x' x hx'\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  exact uniformContinuous_iff_continuous.mp h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  simpa only [uniformContinuous_iff_continuous] using h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  have := h.uniformContinuousOn\n  exact continuous_iff_continuousOn_univ.mpr this.continuousOn",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  exact h.continuous",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  exact h.continuous",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Metric.uniformContinuous_of_continuous {\u03b1 \u03b2} [MetricSpace \u03b1] [MetricSpace \u03b2] {f : \u03b1 \u2192 \u03b2}     (h : UniformContinuous f) : Continuous f := by\n  rw [Metric.uniformContinuous_iff] at h\n  exact Metric.uniformContinuous_iff.mp h"
        ]
    },
    {
        "name": "lean_workbook_24730",
        "split": "test",
        "formal_statement": "theorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by",
        "model_outputs": [
            "\n  have : a - b > 0 := by linarith\n  have : a ^ n * (a - b) > 0 := by positivity\n  have : a ^ n - b ^ n > 0 := by linarith\n  linarith\n```",
            "\n  have h1 : a ^ n - b ^ n = (a - b) * \u2211 i : \u2115 in Finset.range n, a ^ i * b ^ (n - 1 - i) := by\n    rw [mul_comm]\n    exact Nat.pow_sub_pow a1 hab n\n  rw [h1]\n  exact Nat.mul_lt_mul_of_pos_left (Nat.sum_lt_sum_of_nonneg (fun i _ => Nat.zero_le _)\n    fun i hi => Nat.lt_of_succ_le (Nat.succ_le_of_lt (Nat.lt_of_le_of_lt (Nat.zero_le i) hi)))\n    (Nat.zero_lt_of_lt a1)\n```",
            "\n  have h1 : 0 < a - b := by linarith\n  nlinarith [pow_lt_pow_of_lt_left hab h1 n]\n```",
            "\n  rw [\u2190 Nat.sub_add_cancel hab]\n  nlinarith [pow_lt_pow_left a1 hab]\n```",
            "\n  have : a - b > 0 := by linarith\n  have : a ^ n - b ^ n = (a - b) * \u2211 (i : \u2115) (h : i < n), a ^ i * b ^ (n - 1 - i) := by\n    rw [mul_comm]\n    ring_nf\n    nlinarith\n  rw [this]\n  nlinarith\n```",
            "\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n := by positivity\n  have h3 : 0 < a - b := by linarith\n  have h4 : 0 < a ^ n * (a - b) := by positivity\n  have h5 : a ^ n - b ^ n < a ^ n * (a - b) := by\n    calc\n      a ^ n - b ^ n < a ^ n - 0 := by linarith\n      _ = a ^ n := by ring\n      _ \u2264 a ^ n * 1 := by linarith\n      _ \u2264 a ^ n * (a - b) := by linarith\n  linarith\n```",
            "\n  nlinarith [pow_lt_pow_of_lt_left hab (Nat.zero_le n)]\n```",
            "\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n := pow_pos (zero_lt_one.trans a1) n\n  nlinarith [pow_sub_pow_of_lt a1 hab n]\n```",
            "\n  rw [\u2190 mul_one (a ^ n - b ^ n)]\n  nlinarith\n```",
            "\n  have : 0 < a - b := sub_pos.mpr hab\n  rw [\u2190 mul_one (a ^ n), pow_succ]\n  nlinarith\n```",
            "\n  nlinarith [pow_sub_pow_of_lt a1 hab n]\n```",
            "\n  have := Nat.sub_pos_of_lt hab\n  nlinarith\n```",
            "\n  have h : a ^ n - b ^ n < a ^ n * (a - b) := by\n    nlinarith\n  exact h\n```",
            "\n  rw [\u2190 mul_one (a ^ n), \u2190 mul_one (a ^ n), \u2190 mul_one (a ^ n - b ^ n)]\n  nlinarith\n```",
            "\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n * (a - b) := by positivity\n  nlinarith\n```",
            "\n  have h1 : 0 < a - b := by linarith\n  nlinarith [pow_lt_pow_of_lt_left hab h1 n]\n```",
            "\n  rw [\u2190 mul_one (a ^ n), \u2190 mul_one (b ^ n)]\n  nlinarith\n```",
            "\n  rw [mul_comm]\n  have : 0 < a - b := sub_pos_of_lt hab\n  have : 0 < a ^ n := pow_pos (zero_lt_of_lt a1) n\n  have : 0 < a ^ n * (a - b) := mul_pos this \u20390 < a - b\u203a\n  linarith [pow_sub_pow_of_lt a1 hab n]\n```",
            "\n  nlinarith [pow_lt_pow_of_lt_left hab (by linarith : 0 < a) (by linarith : 0 < n)]\n```",
            "\n  nlinarith [pow_lt_pow_of_lt_left hab (by linarith) (by linarith)]\n```",
            "\n  nlinarith [pow_lt_pow_of_lt_left hab (Nat.zero_le _) (Nat.le_refl _)]\n```",
            "\n  rw [mul_comm]\n  nlinarith [pow_lt_pow_of_lt_left hab (Nat.zero_le _)]\n```",
            "\n  have h : 0 < a - b := by linarith\n  have h1 : 0 < a ^ n := pow_pos (zero_lt_one.trans a1) n\n  nlinarith [pow_sub_pow_of_lt a1 hab n]\n```",
            "\n  have h1 : 0 < a - b := sub_pos.mpr hab\n  nlinarith [pow_sub_pow_of_lt a1 hab]\n```",
            "\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n := pow_pos (zero_lt_of_lt a1) n\n  have h3 : 0 < a - b := by linarith\n  nlinarith [pow_sub_pow_of_lt a1 hab n]\n```",
            "\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n := pow_pos (by linarith) n\n  nlinarith [pow_sub_pow_of_lt a1 hab n]\n```",
            "\n  have h1 : 0 < a - b := sub_pos.mpr hab\n  nlinarith [pow_pos (lt_trans (by decide) a1) n]\n```",
            "\n  nlinarith\n```",
            "\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n := by positivity\n  have h3 : 0 < a - b := by linarith\n  have h4 : 0 < a ^ n := by positivity\n  have h5 : 0 < a - b := by linarith\n  have h6 : 0 < a ^ n := by positivity\n  have h7 : 0 < a - b := by linarith\n  have h8 : 0 < a ^ n := by positivity\n  have h9 : 0 < a - b := by linarith\n  have h10 : 0 < a ^ n := by positivity\n  nlinarith\n```",
            "\n  rw [\u2190 mul_one (a ^ n), pow_succ, mul_comm]\n  nlinarith\n```",
            "\n  rw [sub_lt_iff_lt_add]\n  nlinarith [pow_lt_pow_of_lt_left hab a1 n]\n```",
            "\n  nlinarith [pow_lt_pow_of_lt_left hab (by linarith) (by linarith : 0 < n)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have : a - b > 0 := by linarith\n  have : a ^ n * (a - b) > 0 := by positivity\n  have : a ^ n - b ^ n > 0 := by linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h1 : a ^ n - b ^ n = (a - b) * \u2211 i : \u2115 in Finset.range n, a ^ i * b ^ (n - 1 - i) := by\n    rw [mul_comm]\n    exact Nat.pow_sub_pow a1 hab n\n  rw [h1]\n  exact Nat.mul_lt_mul_of_pos_left (Nat.sum_lt_sum_of_nonneg (fun i _ => Nat.zero_le _)\n    fun i hi => Nat.lt_of_succ_le (Nat.succ_le_of_lt (Nat.lt_of_le_of_lt (Nat.zero_le i) hi)))\n    (Nat.zero_lt_of_lt a1)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h1 : 0 < a - b := by linarith\n  nlinarith [pow_lt_pow_of_lt_left hab h1 n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  rw [\u2190 Nat.sub_add_cancel hab]\n  nlinarith [pow_lt_pow_left a1 hab]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have : a - b > 0 := by linarith\n  have : a ^ n - b ^ n = (a - b) * \u2211 (i : \u2115) (h : i < n), a ^ i * b ^ (n - 1 - i) := by\n    rw [mul_comm]\n    ring_nf\n    nlinarith\n  rw [this]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n := by positivity\n  have h3 : 0 < a - b := by linarith\n  have h4 : 0 < a ^ n * (a - b) := by positivity\n  have h5 : a ^ n - b ^ n < a ^ n * (a - b) := by\n    calc\n      a ^ n - b ^ n < a ^ n - 0 := by linarith\n      _ = a ^ n := by ring\n      _ \u2264 a ^ n * 1 := by linarith\n      _ \u2264 a ^ n * (a - b) := by linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  nlinarith [pow_lt_pow_of_lt_left hab (Nat.zero_le n)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n := pow_pos (zero_lt_one.trans a1) n\n  nlinarith [pow_sub_pow_of_lt a1 hab n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  rw [\u2190 mul_one (a ^ n - b ^ n)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have : 0 < a - b := sub_pos.mpr hab\n  rw [\u2190 mul_one (a ^ n), pow_succ]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  nlinarith [pow_sub_pow_of_lt a1 hab n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have := Nat.sub_pos_of_lt hab\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h : a ^ n - b ^ n < a ^ n * (a - b) := by\n    nlinarith\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  rw [\u2190 mul_one (a ^ n), \u2190 mul_one (a ^ n), \u2190 mul_one (a ^ n - b ^ n)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n * (a - b) := by positivity\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h1 : 0 < a - b := by linarith\n  nlinarith [pow_lt_pow_of_lt_left hab h1 n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  rw [\u2190 mul_one (a ^ n), \u2190 mul_one (b ^ n)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  rw [mul_comm]\n  have : 0 < a - b := sub_pos_of_lt hab\n  have : 0 < a ^ n := pow_pos (zero_lt_of_lt a1) n\n  have : 0 < a ^ n * (a - b) := mul_pos this \u20390 < a - b\u203a\n  linarith [pow_sub_pow_of_lt a1 hab n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  nlinarith [pow_lt_pow_of_lt_left hab (by linarith : 0 < a) (by linarith : 0 < n)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  nlinarith [pow_lt_pow_of_lt_left hab (by linarith) (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  nlinarith [pow_lt_pow_of_lt_left hab (Nat.zero_le _) (Nat.le_refl _)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  rw [mul_comm]\n  nlinarith [pow_lt_pow_of_lt_left hab (Nat.zero_le _)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h : 0 < a - b := by linarith\n  have h1 : 0 < a ^ n := pow_pos (zero_lt_one.trans a1) n\n  nlinarith [pow_sub_pow_of_lt a1 hab n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h1 : 0 < a - b := sub_pos.mpr hab\n  nlinarith [pow_sub_pow_of_lt a1 hab]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n := pow_pos (zero_lt_of_lt a1) n\n  have h3 : 0 < a - b := by linarith\n  nlinarith [pow_sub_pow_of_lt a1 hab n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n := pow_pos (by linarith) n\n  nlinarith [pow_sub_pow_of_lt a1 hab n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h1 : 0 < a - b := sub_pos.mpr hab\n  nlinarith [pow_pos (lt_trans (by decide) a1) n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  have h1 : 0 < a - b := by linarith\n  have h2 : 0 < a ^ n := by positivity\n  have h3 : 0 < a - b := by linarith\n  have h4 : 0 < a ^ n := by positivity\n  have h5 : 0 < a - b := by linarith\n  have h6 : 0 < a ^ n := by positivity\n  have h7 : 0 < a - b := by linarith\n  have h8 : 0 < a ^ n := by positivity\n  have h9 : 0 < a - b := by linarith\n  have h10 : 0 < a ^ n := by positivity\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  rw [\u2190 mul_one (a ^ n), pow_succ, mul_comm]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  rw [sub_lt_iff_lt_add]\n  nlinarith [pow_lt_pow_of_lt_left hab a1 n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_sub_pow_of_lt (a1 : 1 < a) (hab : b < a) (n : \u2115) : a ^ n - b ^ n < a ^ n * (a - b) := by\n  nlinarith [pow_lt_pow_of_lt_left hab (by linarith) (by linarith : 0 < n)]"
        ]
    },
    {
        "name": "lean_workbook_plus_35979",
        "split": "test",
        "formal_statement": "theorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by",
        "model_outputs": [
            "\n  rw [inv_sqrt, sqrt_inv]\n  exact inv_lt_of_pos (sqrt_pos.mpr ha)\n```",
            "\n  rw [inv_sqrt]\n  norm_num\n  rw [sqrt_lt_sqrt_iff]\n  all_goals nlinarith\n```",
            "\n  rw [inv_eq_one_div, inv_eq_one_div]\n  exact div_lt_div_of_lt_left zero_lt_one (sqrt_pos.mpr ha) (sqrt_pos.mpr (one_pos.trans ha))\n```",
            "\n  rw [inv_eq_one_div, inv_eq_one_div]\n  exact div_lt_div_of_pos_of_lt (sqrt_pos.2 ha) (sqrt_lt_sqrt (by positivity) (by nlinarith))\n```",
            "\n  rw [inv_lt_inv (Real.sqrt_pos.2 ha) (Real.sqrt_pos.2 (inv_pos.2 ha))]\n  exact Real.sqrt_lt_sqrt (by positivity) (by linarith)\n```",
            "\n  rw [sqrt_lt_sqrt_iff (inv_nonneg.mpr ha.le), inv_lt_inv ha (sqrt_pos.mpr ha)]\n  nlinarith\n```",
            "\n  rw [inv_eq_one_div]\n  rw [inv_eq_one_div]\n  field_simp\n  rw [\u2190 sqrt_one]\n  apply sqrt_lt_sqrt\n  all_goals nlinarith\n```",
            "\n  rw [inv_eq_one_div, \u2190 inv_eq_one_div]\n  exact inv_lt_inv_of_lt (sqrt_pos.2 ha) (sqrt_lt.2 (by linarith))\n```",
            "\n  rw [inv_eq_one_div]\n  field_simp [ha]\n  norm_num\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity)]\n  ring_nf\n  linarith\n```",
            "\n  rw [\u2190 Real.sqrt_inv]\n  apply Real.sqrt_lt_sqrt (inv_pos.2 ha)\n  rw [inv_lt_inv (Real.sqrt_pos.2 ha) (Real.sqrt_pos.2 (inv_pos.2 ha))]\n  apply mul_lt_mul_of_pos_left _ (Real.sqrt_pos.2 ha)\n  rw [\u2190 sub_pos, \u2190 Real.sqrt_lt_sqrt_iff (inv_pos.2 ha)]\n  ring_nf\n  rw [Real.sqrt_one]\n  exact Real.sqrt_pos.2 (by linarith)\n```",
            "\n  rw [sqrt_lt (inv_nonneg.mpr (sqrt_nonneg a)) (inv_nonneg.mpr ha.le)]\n  rw [\u2190 sqrt_inv]\n  exact inv_lt_inv ha (sqrt_pos.mpr ha)\n```",
            "\n  rw [\u2190 inv_eq_one_div, \u2190 inv_eq_one_div]\n  rw [inv_lt_inv (sqrt_pos.mpr ha) (sqrt_pos.mpr (inv_pos.mpr ha))]\n  exact sqrt_lt_sqrt (by positivity) (by nlinarith)\n```",
            "\n  rw [inv_lt_inv (Real.sqrt_pos.mpr ha) (Real.sqrt_pos.mpr (inv_pos.mpr ha))]\n  exact Real.sqrt_lt_sqrt (by positivity) (by nlinarith)\n```",
            "\n  rw [\u2190 mul_lt_mul_right (Real.sqrt_pos.mpr ha)]\n  field_simp\n  rw [\u2190 Real.sqrt_lt_sqrt_iff (by positivity)]\n  ring_nf\n  nlinarith\n```",
            "\n  rw [\u2190 sqrt_inv]\n  apply sqrt_lt_sqrt\n  simp [ha]\n```",
            "\n  rw [inv_lt_inv, Real.sqrt_lt]\n  <;> linarith\n  <;> linarith\n  <;> linarith\n```",
            "\n  rw [inv_eq_one_div]\n  rw [inv_eq_one_div]\n  rw [\u2190 Real.sqrt_inv]\n  apply Real.sqrt_lt_sqrt\n  linarith\n  linarith\n```",
            "\n  rw [\u2190 inv_eq_one_div, \u2190 inv_eq_one_div]\n  exact inv_lt_inv_of_lt (sqrt_pos.mpr ha) (lt_of_le_of_ne (sqrt_nonneg _) (by simpa using ha.ne'))\n```",
            "\n  rw [inv_lt_inv (Real.sqrt_pos.2 ha) (Real.sqrt_pos.2 (inv_pos.2 ha))]\n  exact Real.sqrt_lt_sqrt (by positivity) (by linarith)\n```",
            "\n  rw [\u2190 inv_sqrt_lt_sqrt_inv, \u2190 inv_sqrt_lt_sqrt_inv]\n  linarith\n```",
            "\n  rw [inv_sqrt, sqrt_inv]\n  exact inv_lt_of_pos (sqrt_pos.2 ha)\n```",
            "\n  rw [inv_lt_inv]\n  norm_num\n  exact Real.sqrt_pos.mpr ha\n  exact Real.sqrt_pos.mpr (inv_pos.mpr ha)\n```",
            "\n  rw [inv_sqrt]\n  exact Real.rpow_lt_rpow_of_exponent_neg (sqrt_pos.mpr ha) (by linarith) (by linarith)\n```",
            "\n  rw [sqrt_lt (inv_nonneg.mpr (sqrt_nonneg a))]\n  norm_num\n  nlinarith\n```",
            "\n  rw [inv_eq_one_div]\n  rw [inv_eq_one_div]\n  apply one_div_lt_one_div_of_lt\n  exact ha\n  exact Real.sqrt_pos.mpr ha\n```",
            "\n  rw [sqrt_inv, sqrt_lt]\n  norm_num\n  exact ha\n```",
            "\n  rw [inv_eq_one_div]\n  field_simp\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity)]\n  nlinarith\n```",
            "\n  rw [sqrt_lt (inv_nonneg.mpr (sqrt_nonneg a))]\n  norm_num\n  exact inv_lt_inv (sqrt_pos.mpr ha) (sqrt_pos.mpr ha)\n```",
            "\n  rw [\u2190 inv_eq_one_div, \u2190 inv_eq_one_div]\n  exact inv_lt_inv_of_lt (sqrt_pos.mpr ha) (lt_sqrt_of_lt ha)\n```",
            "\n  rw [\u2190 Real.sqrt_inv, \u2190 Real.sqrt_inv]\n  exact Real.sqrt_lt_sqrt (inv_pos.mpr ha) (by linarith)\n```",
            "\n  rw [\u2190 inv_eq_one_div, \u2190 inv_eq_one_div]\n  exact inv_sqrt_lt_sqrt_inv ha\n```",
            "\n  rw [sqrt_lt (inv_nonneg.mpr (sqrt_nonneg a)) (inv_nonneg.mpr ha.le), \u2190 inv_lt_inv]\n  all_goals norm_num\n  all_goals nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_sqrt, sqrt_inv]\n  exact inv_lt_of_pos (sqrt_pos.mpr ha)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_sqrt]\n  norm_num\n  rw [sqrt_lt_sqrt_iff]\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_eq_one_div, inv_eq_one_div]\n  exact div_lt_div_of_lt_left zero_lt_one (sqrt_pos.mpr ha) (sqrt_pos.mpr (one_pos.trans ha))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_eq_one_div, inv_eq_one_div]\n  exact div_lt_div_of_pos_of_lt (sqrt_pos.2 ha) (sqrt_lt_sqrt (by positivity) (by nlinarith))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_lt_inv (Real.sqrt_pos.2 ha) (Real.sqrt_pos.2 (inv_pos.2 ha))]\n  exact Real.sqrt_lt_sqrt (by positivity) (by linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [sqrt_lt_sqrt_iff (inv_nonneg.mpr ha.le), inv_lt_inv ha (sqrt_pos.mpr ha)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_eq_one_div]\n  rw [inv_eq_one_div]\n  field_simp\n  rw [\u2190 sqrt_one]\n  apply sqrt_lt_sqrt\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_eq_one_div, \u2190 inv_eq_one_div]\n  exact inv_lt_inv_of_lt (sqrt_pos.2 ha) (sqrt_lt.2 (by linarith))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_eq_one_div]\n  field_simp [ha]\n  norm_num\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity)]\n  ring_nf\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [\u2190 Real.sqrt_inv]\n  apply Real.sqrt_lt_sqrt (inv_pos.2 ha)\n  rw [inv_lt_inv (Real.sqrt_pos.2 ha) (Real.sqrt_pos.2 (inv_pos.2 ha))]\n  apply mul_lt_mul_of_pos_left _ (Real.sqrt_pos.2 ha)\n  rw [\u2190 sub_pos, \u2190 Real.sqrt_lt_sqrt_iff (inv_pos.2 ha)]\n  ring_nf\n  rw [Real.sqrt_one]\n  exact Real.sqrt_pos.2 (by linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [sqrt_lt (inv_nonneg.mpr (sqrt_nonneg a)) (inv_nonneg.mpr ha.le)]\n  rw [\u2190 sqrt_inv]\n  exact inv_lt_inv ha (sqrt_pos.mpr ha)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [\u2190 inv_eq_one_div, \u2190 inv_eq_one_div]\n  rw [inv_lt_inv (sqrt_pos.mpr ha) (sqrt_pos.mpr (inv_pos.mpr ha))]\n  exact sqrt_lt_sqrt (by positivity) (by nlinarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_lt_inv (Real.sqrt_pos.mpr ha) (Real.sqrt_pos.mpr (inv_pos.mpr ha))]\n  exact Real.sqrt_lt_sqrt (by positivity) (by nlinarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [\u2190 mul_lt_mul_right (Real.sqrt_pos.mpr ha)]\n  field_simp\n  rw [\u2190 Real.sqrt_lt_sqrt_iff (by positivity)]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [\u2190 sqrt_inv]\n  apply sqrt_lt_sqrt\n  simp [ha]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_lt_inv, Real.sqrt_lt]\n  <;> linarith\n  <;> linarith\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_eq_one_div]\n  rw [inv_eq_one_div]\n  rw [\u2190 Real.sqrt_inv]\n  apply Real.sqrt_lt_sqrt\n  linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [\u2190 inv_eq_one_div, \u2190 inv_eq_one_div]\n  exact inv_lt_inv_of_lt (sqrt_pos.mpr ha) (lt_of_le_of_ne (sqrt_nonneg _) (by simpa using ha.ne'))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_lt_inv (Real.sqrt_pos.2 ha) (Real.sqrt_pos.2 (inv_pos.2 ha))]\n  exact Real.sqrt_lt_sqrt (by positivity) (by linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [\u2190 inv_sqrt_lt_sqrt_inv, \u2190 inv_sqrt_lt_sqrt_inv]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_sqrt, sqrt_inv]\n  exact inv_lt_of_pos (sqrt_pos.2 ha)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_lt_inv]\n  norm_num\n  exact Real.sqrt_pos.mpr ha\n  exact Real.sqrt_pos.mpr (inv_pos.mpr ha)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_sqrt]\n  exact Real.rpow_lt_rpow_of_exponent_neg (sqrt_pos.mpr ha) (by linarith) (by linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [sqrt_lt (inv_nonneg.mpr (sqrt_nonneg a))]\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_eq_one_div]\n  rw [inv_eq_one_div]\n  apply one_div_lt_one_div_of_lt\n  exact ha\n  exact Real.sqrt_pos.mpr ha",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [sqrt_inv, sqrt_lt]\n  norm_num\n  exact ha",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [inv_eq_one_div]\n  field_simp\n  rw [\u2190 sqrt_lt_sqrt_iff (by positivity)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [sqrt_lt (inv_nonneg.mpr (sqrt_nonneg a))]\n  norm_num\n  exact inv_lt_inv (sqrt_pos.mpr ha) (sqrt_pos.mpr ha)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [\u2190 inv_eq_one_div, \u2190 inv_eq_one_div]\n  exact inv_lt_inv_of_lt (sqrt_pos.mpr ha) (lt_sqrt_of_lt ha)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [\u2190 Real.sqrt_inv, \u2190 Real.sqrt_inv]\n  exact Real.sqrt_lt_sqrt (inv_pos.mpr ha) (by linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [\u2190 inv_eq_one_div, \u2190 inv_eq_one_div]\n  exact inv_sqrt_lt_sqrt_inv ha",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem inverse_sqrt_lt_sqrt_inv {a : \u211d} (ha : 0 < a) : (\u221aa)\u207b\u00b9 < \u221aa\u207b\u00b9 := by\n  rw [sqrt_lt (inv_nonneg.mpr (sqrt_nonneg a)) (inv_nonneg.mpr ha.le), \u2190 inv_lt_inv]\n  all_goals norm_num\n  all_goals nlinarith"
        ]
    },
    {
        "name": "lean_workbook_13204",
        "split": "test",
        "formal_statement": "theorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by",
        "model_outputs": [
            "\n  rcases h with \u27e8k, h\u27e9\n  use k - y / x\n  rw [sub_mul, \u2190 h]\n  omega\n```",
            "\n  cases' h with k hk; subst hk; exact \u27e8k - y / x, by rw [mul_sub, mul_div_cancel' _ (ne_of_gt (gt_of_ge_of_gt (Int.ofNat_le.2 (Nat.zero_le _)) (Int.ofNat_pos.2 (Nat.pos_of_ne_zero (fun hk0 => by simp_all))))))]\u27e9\n```",
            "\n  rcases h with \u27e8k, hk\u27e9\n  use k - x * (y / x)\n  rw [hk]\n  rw [mul_sub, mul_comm, mul_div_cancel' _ (mul_left_ne_zero.2 (by linarith))]\n  ring\n```",
            "\n  cases' h with k hk\n  use k - y / x\n  rw [sub_mul, \u2190 hk, sub_eq_iff_eq_add]\n  rw [\u2190 mul_right_inj' (show (x : \u2124) \u2260 0 by norm_cast; omega)]\n  omega\n```",
            "\n  cases' h with k hk\n  use k - y / x\n  rw [sub_mul, \u2190 hk]\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  omega\n```",
            "\n  rcases h with \u27e8c, rfl\u27e9\n  rw [Int.mul_ediv_cancel_left]\n  exact \u27e8c - x * c, by rw [mul_sub, sub_sub_cancel]\u27e9\n  exact Int.mul_ediv_cancel_left _ (by rintro rfl; simp)\n```",
            "\n  rw [sub_eq_add_neg]\n  exact dvd_add (dvd_mul_left z (y / x)) (by simpa [mul_comm] using h)\n```",
            "\n  cases' h with w h\n  subst h\n  rw [mul_comm]\n  use w - x * w\n  ring\n```",
            "\n  rcases h with \u27e8k, rfl\u27e9\n  rw [mul_comm]\n  omega\n```",
            "\n  cases' h with w hw\n  subst hw\n  rw [Int.mul_comm, Int.mul_sub, Int.mul_div_cancel_left]\n  exact \u27e8_ ,by ring\u27e9\n```",
            "\n  rcases h with \u27e8w, rfl\u27e9\n  rw [Int.mul_comm]\n  exact \u27e8w - x * y / x, by rw [mul_sub, mul_comm, Int.mul_ediv_cancel_left _ (mul_ne_zero hx hx)]\u27e9\n```",
            "\n  obtain \u27e8k, hk\u27e9 := h\n  use k - y / x\n  rw [\u2190 sub_eq_zero] at hk\n  rw [\u2190 sub_eq_zero]\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u2124)]\n  ring_nf\n  omega\n```",
            "\n  cases' h with w hw\n  use w - x\n  rw [hw]\n  simp [mul_comm, mul_sub, mul_assoc]\n```",
            "\n  obtain \u27e8a, ha\u27e9 := h\n  use a - x\n  rw [sub_mul, \u2190 ha]\n  ring\n```",
            "\n  rcases h with \u27e8k, rfl\u27e9\n  rw [mul_comm]\n  rw [mul_comm]\n  exact \u27e8k - x * y / x, by rw [mul_sub, mul_div_cancel' _ (mul_left_cancel\u2080 (by decide : x \u2260 0))]\u27e9\n```",
            "\n  cases' h with k hk\n  subst hk\n  rw [mul_comm]\n  exact \u27e8k - x, by simp [mul_sub, mul_comm, mul_left_comm]\u27e9\n```",
            "\n  rcases h with \u27e8k, rfl\u27e9\n  use k - x * (y / x)\n  rw [mul_sub, \u2190 mul_assoc, Int.mul_div_cancel_left y (Int.ne_zero_of_pos (Int.ofNat_pos.mpr\n    (show 0 < 3 by decide)))]\n  ring\n```",
            "\n  obtain \u27e8c, rfl\u27e9 := h\n  rw [Int.mul_ediv_cancel_left]\n  exact \u27e8c, by ring\u27e9\n  exact mul_ne_zero (by norm_num) (by norm_num)\n```",
            "\n  rcases h with \u27e8k, rfl\u27e9\n  use k - y / x\n  rw [mul_comm x z, \u2190 sub_add_cancel y (x * k), mul_sub, mul_comm x k]\n  exact mul_add _ _ _\n```",
            "\n  obtain \u27e8k, hk\u27e9 := h\n  use k - y / x\n  rw [mul_comm] at hk\n  rw [\u2190 sub_eq_iff_eq_add']\n  omega\n```",
            "\n  obtain \u27e8k, rfl\u27e9 := h\n  rw [Int.mul_ediv_cancel_left]\n  exact \u27e8k - x, by simp [mul_comm, mul_left_comm, mul_assoc]\u27e9\n  exact mul_ne_zero (by norm_num) (by norm_num)\n```",
            "\n  rcases h with \u27e8w, rfl\u27e9\n  rw [Int.mul_ediv_cancel_left]\n  ring_nf\n  simp\n```",
            "\n  rcases h with \u27e8c, rfl\u27e9\n  rw [Int.mul_ediv_cancel_left]\n  exact \u27e8c - x * (y / x), by simp [mul_sub, sub_mul, mul_comm, mul_assoc, mul_left_comm]\u27e9\n  exact mul_ne_zero (by norm_num) (by norm_num)\n```",
            "\n  obtain \u27e8k, rfl\u27e9 := h\n  rw [Int.mul_div_cancel_left]\n  exact \u27e8k - 1, by rw [Int.sub_mul, Int.mul_sub, Int.mul_one, Int.mul_add, Int.add_sub_cancel]\u27e9\n```",
            "\n  obtain \u27e8k, hk\u27e9 := h\n  use k - y / x\n  rw [mul_sub, sub_eq_iff_eq_add]\n  rw [\u2190 hk, mul_comm]\n  omega\n```",
            "\n  cases' h with k hk\n  subst hk\n  rw [mul_comm]\n  exact \u27e8k - y / x, by omega\u27e9\n```",
            "\n  rcases h with \u27e8k, rfl\u27e9\n  rw [mul_assoc]\n  exact \u27e8k - x, by simp [mul_sub, mul_comm, mul_left_comm]\u27e9\n```",
            "\n  obtain \u27e8c, rfl\u27e9 := h\n  rw [Int.mul_ediv_cancel_left]\n  exact \u27e8c - x, by simp [Int.mul_sub, Int.mul_comm]\u27e9\n  exact Int.mul_left_ne_zero_of_ne x z (by simp)\n```",
            "\n  obtain \u27e8k, hk\u27e9 := h\n  use k - y / x\n  rw [mul_comm] at hk\n  rw [\u2190 sub_eq_zero]\n  rw [\u2190 sub_eq_zero] at hk\n  omega\n```",
            "\n  cases' h with w hw\n  use w - x * (y / x)\n  rw [hw]\n  ring\n```",
            "\n  rcases h with \u27e8c, rfl\u27e9\n  use c - x\n  rw [mul_sub, mul_comm, sub_sub_self, mul_comm]\n```",
            "\n  cases' h with w hw\n  use w - x * (y / x)\n  rw [hw]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8k, h\u27e9\n  use k - y / x\n  rw [sub_mul, \u2190 h]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  cases' h with k hk; subst hk; exact \u27e8k - y / x, by rw [mul_sub, mul_div_cancel' _ (ne_of_gt (gt_of_ge_of_gt (Int.ofNat_le.2 (Nat.zero_le _)) (Int.ofNat_pos.2 (Nat.pos_of_ne_zero (fun hk0 => by simp_all))))))]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8k, hk\u27e9\n  use k - x * (y / x)\n  rw [hk]\n  rw [mul_sub, mul_comm, mul_div_cancel' _ (mul_left_ne_zero.2 (by linarith))]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  cases' h with k hk\n  use k - y / x\n  rw [sub_mul, \u2190 hk, sub_eq_iff_eq_add]\n  rw [\u2190 mul_right_inj' (show (x : \u2124) \u2260 0 by norm_cast; omega)]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  cases' h with k hk\n  use k - y / x\n  rw [sub_mul, \u2190 hk]\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8c, rfl\u27e9\n  rw [Int.mul_ediv_cancel_left]\n  exact \u27e8c - x * c, by rw [mul_sub, sub_sub_cancel]\u27e9\n  exact Int.mul_ediv_cancel_left _ (by rintro rfl; simp)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rw [sub_eq_add_neg]\n  exact dvd_add (dvd_mul_left z (y / x)) (by simpa [mul_comm] using h)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  cases' h with w h\n  subst h\n  rw [mul_comm]\n  use w - x * w\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8k, rfl\u27e9\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  cases' h with w hw\n  subst hw\n  rw [Int.mul_comm, Int.mul_sub, Int.mul_div_cancel_left]\n  exact \u27e8_ ,by ring\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8w, rfl\u27e9\n  rw [Int.mul_comm]\n  exact \u27e8w - x * y / x, by rw [mul_sub, mul_comm, Int.mul_ediv_cancel_left _ (mul_ne_zero hx hx)]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  obtain \u27e8k, hk\u27e9 := h\n  use k - y / x\n  rw [\u2190 sub_eq_zero] at hk\n  rw [\u2190 sub_eq_zero]\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u2124)]\n  ring_nf\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  cases' h with w hw\n  use w - x\n  rw [hw]\n  simp [mul_comm, mul_sub, mul_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  obtain \u27e8a, ha\u27e9 := h\n  use a - x\n  rw [sub_mul, \u2190 ha]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8k, rfl\u27e9\n  rw [mul_comm]\n  rw [mul_comm]\n  exact \u27e8k - x * y / x, by rw [mul_sub, mul_div_cancel' _ (mul_left_cancel\u2080 (by decide : x \u2260 0))]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  cases' h with k hk\n  subst hk\n  rw [mul_comm]\n  exact \u27e8k - x, by simp [mul_sub, mul_comm, mul_left_comm]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8k, rfl\u27e9\n  use k - x * (y / x)\n  rw [mul_sub, \u2190 mul_assoc, Int.mul_div_cancel_left y (Int.ne_zero_of_pos (Int.ofNat_pos.mpr\n    (show 0 < 3 by decide)))]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  obtain \u27e8c, rfl\u27e9 := h\n  rw [Int.mul_ediv_cancel_left]\n  exact \u27e8c, by ring\u27e9\n  exact mul_ne_zero (by norm_num) (by norm_num)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8k, rfl\u27e9\n  use k - y / x\n  rw [mul_comm x z, \u2190 sub_add_cancel y (x * k), mul_sub, mul_comm x k]\n  exact mul_add _ _ _",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  obtain \u27e8k, hk\u27e9 := h\n  use k - y / x\n  rw [mul_comm] at hk\n  rw [\u2190 sub_eq_iff_eq_add']\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  obtain \u27e8k, rfl\u27e9 := h\n  rw [Int.mul_ediv_cancel_left]\n  exact \u27e8k - x, by simp [mul_comm, mul_left_comm, mul_assoc]\u27e9\n  exact mul_ne_zero (by norm_num) (by norm_num)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8w, rfl\u27e9\n  rw [Int.mul_ediv_cancel_left]\n  ring_nf\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8c, rfl\u27e9\n  rw [Int.mul_ediv_cancel_left]\n  exact \u27e8c - x * (y / x), by simp [mul_sub, sub_mul, mul_comm, mul_assoc, mul_left_comm]\u27e9\n  exact mul_ne_zero (by norm_num) (by norm_num)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  obtain \u27e8k, rfl\u27e9 := h\n  rw [Int.mul_div_cancel_left]\n  exact \u27e8k - 1, by rw [Int.sub_mul, Int.mul_sub, Int.mul_one, Int.mul_add, Int.add_sub_cancel]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  obtain \u27e8k, hk\u27e9 := h\n  use k - y / x\n  rw [mul_sub, sub_eq_iff_eq_add]\n  rw [\u2190 hk, mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  cases' h with k hk\n  subst hk\n  rw [mul_comm]\n  exact \u27e8k - y / x, by omega\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8k, rfl\u27e9\n  rw [mul_assoc]\n  exact \u27e8k - x, by simp [mul_sub, mul_comm, mul_left_comm]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  obtain \u27e8c, rfl\u27e9 := h\n  rw [Int.mul_ediv_cancel_left]\n  exact \u27e8c - x, by simp [Int.mul_sub, Int.mul_comm]\u27e9\n  exact Int.mul_left_ne_zero_of_ne x z (by simp)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  obtain \u27e8k, hk\u27e9 := h\n  use k - y / x\n  rw [mul_comm] at hk\n  rw [\u2190 sub_eq_zero]\n  rw [\u2190 sub_eq_zero] at hk\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  cases' h with w hw\n  use w - x * (y / x)\n  rw [hw]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  rcases h with \u27e8c, rfl\u27e9\n  use c - x\n  rw [mul_sub, mul_comm, sub_sub_self, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem divides_sub_of_mul_left_divides {x y z : \u2124} (h : x * z \u2223 y) : z \u2223 y - x * (y / x) := by\n  cases' h with w hw\n  use w - x * (y / x)\n  rw [hw]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_51994",
        "split": "test",
        "formal_statement": "theorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
        "model_outputs": [
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq]\n  <;> linarith\n  <;> linarith\n  <;> linarith\n```",
            "\n  rw [Real.sqrt_mul_self h]\n```",
            "\n  rw [sq, Real.mul_self_sqrt h]\n```",
            "\n  rw [\u2190 sq_sqrt h]\n  ring\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [\u2190 sq_eq_sq (sqrt_nonneg x) h]\n  exact sq_sqrt h\n```",
            "\n  rw [Real.sqrt_mul_self h]\n```",
            "\n  rw [sqrt_eq_iff_sq_eq] <;>\n  nlinarith\n```",
            "\n  rw [mul_self_eq_mul_self_iff]\n  exact Or.inl (And.intro h (le_refl _))\n```",
            "\n  rw [\u2190 Real.sqrt_sq h]\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [sqrt_eq_iff_sq_eq] <;> linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq]\n  <;> linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> linarith\n```",
            "\n  rw [mul_self_eq_max_norm, norm_eq_abs, abs_of_nonneg h]\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [\u2190 Real.sqrt_sq h]\n```",
            " rw [\u2190 sq, sq_sqrt h]\n\ntheorem sqrt_eq_iff_mul_self_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y * y = x := by\n  constructor <;> intro h <;> rw [\u2190 h] <;> exact mul_self_sqrt hx\n\ntheorem sqrt_mul_self (hx : 0 \u2264 x) : \u221a(x * x) = x :=\n  sqrt_eq_iff_mul_self_eq (mul_self_nonneg x) hx |>.mpr (mul_self_sqrt hx)\n```",
            "\n  rw [\u2190 sq_eq_sq h (by linarith : 0 \u2264 x)]\n  simp [sq]\n```",
            " rw [\u2190 sq, sq_sqrt h]\n```",
            "\n  rw [\u2190 Real.sqrt_sq h]\n```",
            " rw [\u2190 sq_sqrt h]\n\ntheorem self_eq_mul_sqrt (h : 0 \u2264 x) : x = \u221ax * \u221ax := by rw [\u2190 sq_sqrt h]\n\ntheorem mul_self_eq_mul_self_iff (h\u2081 : 0 \u2264 a) (h\u2082 : 0 \u2264 b) : a * a = b * b \u2194 a = b \u2228 a = -b :=\n  mul_self_eq_mul_self_iff\n\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x :=\n  \u27e8fun h => by rw [\u2190 h, sq, mul_self_sqrt hx], fun h => by rw [\u2190 h, sqrt_sq hy]\u27e9\n\ntheorem sqrt_mul_self (hx : 0 \u2264 x) : \u221a(x * x) = x :=\n  sqrt_mul_self_eq_abs x \u25b8 (abs_eq_self.mpr hx)\n\ntheorem sqrt_sq (hx : 0 \u2264 x) : \u221a(x ^ 2) = x :=\n  sqrt_mul_self hx\n\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x :=\n  \u27e8fun h => by rw [\u2190 h, sq, mul_self_sqrt hx], fun h => by rw [\u2190 h, sqrt_sq hy]\u27e9\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [\u2190 Real.sqrt_sq h]\n```",
            " rw [sqrt_eq_iff_mul_self_eq h]\n```",
            "\n  rw [mul_self_eq_max_norm, norm_eq_abs, abs_of_nonneg h]\n```",
            "\n  rw [sqrt_eq_iff_mul_self_eq]\n  <;> linarith\n  <;> linarith\n  <;> linarith\n```",
            "\n  rw [\u2190 sq_sqrt h]\n  simp\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_mul_self h]\n```",
            "\n  rw [Real.sqrt_mul_self h]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq]\n  <;> linarith\n  <;> linarith\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_mul_self h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [sq, Real.mul_self_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [\u2190 sq_sqrt h]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [\u2190 sq_eq_sq (sqrt_nonneg x) h]\n  exact sq_sqrt h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_mul_self h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [sqrt_eq_iff_sq_eq] <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [mul_self_eq_mul_self_iff]\n  exact Or.inl (And.intro h (le_refl _))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [\u2190 Real.sqrt_sq h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [sqrt_eq_iff_sq_eq] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq]\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [mul_self_eq_max_norm, norm_eq_abs, abs_of_nonneg h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [\u2190 Real.sqrt_sq h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by rw [\u2190 sq, sq_sqrt h]\n\ntheorem sqrt_eq_iff_mul_self_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y * y = x := by\n  constructor <;> intro h <;> rw [\u2190 h] <;> exact mul_self_sqrt hx\n\ntheorem sqrt_mul_self (hx : 0 \u2264 x) : \u221a(x * x) = x :=\n  sqrt_eq_iff_mul_self_eq (mul_self_nonneg x) hx |>.mpr (mul_self_sqrt hx)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [\u2190 sq_eq_sq h (by linarith : 0 \u2264 x)]\n  simp [sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by rw [\u2190 sq, sq_sqrt h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [\u2190 Real.sqrt_sq h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by rw [\u2190 sq_sqrt h]\n\ntheorem self_eq_mul_sqrt (h : 0 \u2264 x) : x = \u221ax * \u221ax := by rw [\u2190 sq_sqrt h]\n\ntheorem mul_self_eq_mul_self_iff (h\u2081 : 0 \u2264 a) (h\u2082 : 0 \u2264 b) : a * a = b * b \u2194 a = b \u2228 a = -b :=\n  mul_self_eq_mul_self_iff\n\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x :=\n  \u27e8fun h => by rw [\u2190 h, sq, mul_self_sqrt hx], fun h => by rw [\u2190 h, sqrt_sq hy]\u27e9\n\ntheorem sqrt_mul_self (hx : 0 \u2264 x) : \u221a(x * x) = x :=\n  sqrt_mul_self_eq_abs x \u25b8 (abs_eq_self.mpr hx)\n\ntheorem sqrt_sq (hx : 0 \u2264 x) : \u221a(x ^ 2) = x :=\n  sqrt_mul_self hx\n\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x :=\n  \u27e8fun h => by rw [\u2190 h, sq, mul_self_sqrt hx], fun h => by rw [\u2190 h, sqrt_sq hy]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [\u2190 Real.sqrt_sq h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by rw [sqrt_eq_iff_mul_self_eq h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [mul_self_eq_max_norm, norm_eq_abs, abs_of_nonneg h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [sqrt_eq_iff_mul_self_eq]\n  <;> linarith\n  <;> linarith\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [\u2190 sq_sqrt h]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_mul_self h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.sqrt_mul_self h]"
        ]
    },
    {
        "name": "lean_workbook_plus_12322",
        "split": "test",
        "formal_statement": "theorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by",
        "model_outputs": [
            "\n  simp_all only [add_assoc, add_left_comm, add_right_comm]\n  apply le_of_sub_nonneg\n  ring_nf\n  nlinarith\n```",
            "\n  simp_all only [add_assoc, add_right_comm, add_left_comm, add_comm, one_div]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d), sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith\n```",
            "\n  simp_all only [one_div, add_assoc, add_right_comm, add_left_comm, add_comm, mul_assoc,\n    mul_right_comm, mul_left_comm, mul_comm, add_left_comm]\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  simp_all only [add_assoc, add_right_comm, add_left_comm, add_comm]\n  ring_nf\n  nlinarith\n```",
            "\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a - b - c + d), sq_nonneg (a - b - c - d)]\n```",
            "\n  simp_all only [add_assoc, add_left_comm, add_comm, mul_comm]\n  norm_num\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  simp_all only [one_div, pow_one]\n  repeat'\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d), sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  simp_all only [add_assoc, add_left_comm, add_right_comm, mul_assoc, mul_left_comm,\n    mul_right_comm, one_div, add_comm]\n  norm_num\n```",
            "\n  simp [h\u2082, h\u2081]\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]\n```",
            "\n  rw [h\u2082]\n  norm_num\n```",
            "\n  rw [h\u2082]\n  norm_num\n```",
            "\n  rw [h\u2082]\n  norm_num\n```",
            "\n  simp [h\u2082, h\u2081]\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (c - d)]\n```",
            "\n  field_simp\n  rw [h\u2082]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]\n```",
            "\n  simp_all only [add_assoc, add_right_comm, add_left_comm]\n  norm_num\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (c - d)]\n```",
            "\n  simp_all only [one_div, pow_one]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b - c - d)]\n```",
            "\n  simp_all only [add_assoc, add_right_comm, add_left_comm, add_comm, one_div]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  rw [h\u2082]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d), sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d), sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  simp_all only [one_div, \u2190 mul_pow, mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  simp [h\u2082]\n  nlinarith\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  simp_all only [mul_one, mul_zero, mul_neg, mul_pos, zero_mul, neg_mul, one_mul, zero_add,\n    add_zero, sub_zero, sub_neg_eq_add, add_assoc]\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  rw [h\u2082]\n  norm_num\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d), sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]\n```",
            "\n  rw [h\u2082]\n  norm_num\n```",
            "\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]\n```",
            "\n  rw [h\u2082]\n  norm_num\n```",
            "\n  simp_all only [add_assoc, add_right_comm, add_left_comm, add_comm]\n  apply le_of_sub_nonneg\n  ring_nf\n  nlinarith\n```",
            "\n  rw [h\u2082]\n  norm_num\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [add_assoc, add_left_comm, add_right_comm]\n  apply le_of_sub_nonneg\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [add_assoc, add_right_comm, add_left_comm, add_comm, one_div]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d), sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  field_simp\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [one_div, add_assoc, add_right_comm, add_left_comm, add_comm, mul_assoc,\n    mul_right_comm, mul_left_comm, mul_comm, add_left_comm]\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [add_assoc, add_right_comm, add_left_comm, add_comm]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a - b - c + d), sq_nonneg (a - b - c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [add_assoc, add_left_comm, add_comm, mul_comm]\n  norm_num\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [one_div, pow_one]\n  repeat'\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d), sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [add_assoc, add_left_comm, add_right_comm, mul_assoc, mul_left_comm,\n    mul_right_comm, one_div, add_comm]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp [h\u2082, h\u2081]\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  rw [h\u2082]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  rw [h\u2082]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  rw [h\u2082]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp [h\u2082, h\u2081]\n  ring_nf\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  field_simp\n  rw [h\u2082]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [add_assoc, add_right_comm, add_left_comm]\n  norm_num\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [one_div, pow_one]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b - c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [add_assoc, add_right_comm, add_left_comm, add_comm, one_div]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  rw [h\u2082]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d), sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d), sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [one_div, \u2190 mul_pow, mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc]\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp [h\u2082]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [mul_one, mul_zero, mul_neg, mul_pos, zero_mul, neg_mul, one_mul, zero_add,\n    add_zero, sub_zero, sub_neg_eq_add, add_assoc]\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  rw [h\u2082]\n  norm_num\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d),\n    sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  field_simp\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (a - d), sq_nonneg (b - c), sq_nonneg (b - d), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  rw [h\u2082]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  rw [h\u2082]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  simp_all only [add_assoc, add_right_comm, add_left_comm, add_comm]\n  apply le_of_sub_nonneg\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ArithmeticMeanGeometricMeanInequalityFour (a b c d : \u211d) (h\u2081 : 0 \u2264 a \u2227 0 \u2264 b \u2227 0 \u2264 c \u2227 0 \u2264 d) (h\u2082 : a + b + c + d = 4) :     (a * b * c * d) ^ (1 / 4) \u2264 (a + b + c + d) / 4 := by\n  rw [h\u2082]\n  norm_num"
        ]
    },
    {
        "name": "lean_workbook_plus_20717",
        "split": "test",
        "formal_statement": "theorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by",
        "model_outputs": [
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [pow_one]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [pow_le_pow_of_le_left h\u2085.le h\u2089.le (w\u2081 + w\u2082 + w\u2083 + w\u2084),\n    pow_le_pow_of_le_left h\u2086.le h\u2089.le (w\u2081 + w\u2082 + w\u2083 + w\u2084),\n    pow_le_pow_of_le_left h\u2087.le h\u2089.le (w\u2081 + w\u2082 + w\u2083 + w\u2084),\n    pow_le_pow_of_le_left h\u2088.le h\u2089.le (w\u2081 + w\u2082 + w\u2083 + w\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [one_div, one_pow, mul_one, mul_zero, add_zero]\n  nlinarith [h\u2081, h\u2082, h\u2083, h\u2084]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_comm, mul_left_comm, mul_assoc]\n  repeat' rw [\u2190 pow_one (1 : \u211d)]\n  nlinarith [Real.pow_le_pow_of_le_left\n    (by linarith : 0 \u2264 (1 : \u211d)) (by linarith : 1 \u2264 p\u2081) (by linarith : 0 \u2264 w\u2081),\n    Real.pow_le_pow_of_le_left\n    (by linarith : 0 \u2264 (1 : \u211d)) (by linarith : 1 \u2264 p\u2082) (by linarith : 0 \u2264 w\u2082),\n    Real.pow_le_pow_of_le_left\n    (by linarith : 0 \u2264 (1 : \u211d)) (by linarith : 1 \u2264 p\u2083) (by linarith : 0 \u2264 w\u2083),\n    Real.pow_le_pow_of_le_left\n    (by linarith : 0 \u2264 (1 : \u211d)) (by linarith : 1 \u2264 p\u2084) (by linarith : 0 \u2264 w\u2084)]\n```",
            "\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084 h_prod\n  simp_all\n  nlinarith [h_prod, h_sum]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  norm_num at h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089 \u22a2\n  linarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089 h\u2081\u2080\n  simp_all only [add_assoc, add_right_comm, add_left_comm, mul_add, mul_comm, mul_left_comm,\n    mul_right_comm]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [one_div, le_refl, mul_one, mul_zero, add_zero, zero_add, add_assoc]\n  ring_nf\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [pow_one]\n  nlinarith [mul_self_nonneg (p\u2081 - p\u2082), mul_self_nonneg (p\u2082 - p\u2083), mul_self_nonneg (p\u2083 - p\u2084), mul_self_nonneg (p\u2084 - p\u2081)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_one, one_mul, mul_add, add_mul]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089 h\u2081\u2080\n  simp_all only [add_assoc, add_left_comm, mul_comm]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_one, mul_zero, add_zero, zero_add, mul_comm]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_add, mul_assoc, mul_comm, mul_left_comm, add_assoc, add_left_comm,\n    add_comm]\n  ring_nf\n  nlinarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [add_assoc, add_left_comm, add_right_comm, mul_add, add_mul, mul_comm, mul_left_comm,\n    mul_right_comm]\n  ring_nf\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2081 * w\u2081 - p\u2082 * w\u2082 - p\u2083 * w\u2083 - p\u2084 * w\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  norm_num at *\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]\n```",
            "\n  intro h_w h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084 h_pp\n  nlinarith [pow_two (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084), pow_two (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [one_div, one_pow, mul_one, mul_zero, add_zero]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [one_div, one_pow, mul_one, mul_zero, add_zero]\n  norm_num\n  nlinarith [h\u2080, h\u2081, h\u2082, h\u2083, h\u2084, h\u2085, h\u2086, h\u2087, h\u2088, h\u2089]\n```",
            "\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084 h_prod\n  simp_all only [mul_comm]\n  nlinarith [Real.rpow_le_rpow_iff _ _ (by linarith : 0 < 1)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [pow_one, mul_one, mul_zero, add_zero]\n  nlinarith\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089 h\u2081\u2080\n  simp_all only [h\u2081, h\u2082, h\u2083, h\u2084, h\u2085, h\u2086, h\u2087, h\u2088, h\u2089, h\u2081\u2080, one_mul, zero_mul, add_zero]\n  nlinarith [h\u2081, h\u2082, h\u2083, h\u2084, h\u2085, h\u2086, h\u2087, h\u2088, h\u2089, h\u2081\u2080]\n```",
            "\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084 h_prod\n  simp_all only [mul_comm]\n  apply geom_mean_le_arith_mean4_weighted _ _ _ _ _ _ _ _ _ h_prod\n  all_goals linarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [pow_one]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2081 * w\u2081),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2082 * w\u2082),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2083 * w\u2083),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2084 * w\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [add_assoc, add_left_comm, mul_comm]\n  nlinarith [mul_self_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1),\n    mul_self_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [add_assoc, add_left_comm, add_right_comm, mul_comm]\n  ring_nf\n  nlinarith [mul_self_nonneg (p\u2081 - p\u2082), mul_self_nonneg (p\u2082 - p\u2083), mul_self_nonneg (p\u2083 - p\u2084), mul_self_nonneg (p\u2084 - p\u2081)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [Real.geom_mean_le_arith_mean4_weighted p\u2081 p\u2082 p\u2083 p\u2084 w\u2081 w\u2082 w\u2083 w\u2084 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_comm, mul_left_comm, mul_assoc, mul_right_comm]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [one_div, one_pow, mul_one, mul_zero, add_zero, zero_add, zero_mul]\n  nlinarith [Real.rpow_add_le_add_rpow w\u2081 p\u2081 w\u2082 p\u2082 (by linarith) (by linarith),\n    Real.rpow_add_le_add_rpow w\u2083 p\u2083 w\u2084 p\u2084 (by linarith) (by linarith)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.rpow_le_rpow_iff_of_nonneg_of_nonneg_of_nonneg (mul_nonneg h\u2085 h\u2081) (mul_nonneg h\u2086 h\u2082) (mul_nonneg h\u2087 h\u2083) (mul_nonneg h\u2088 h\u2084) (Real.log_nonneg (mul_nonneg h\u2085 h\u2081))]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_assoc, mul_comm, mul_left_comm]\n  ring_nf\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2081 * w\u2081 - p\u2082 * w\u2082 - p\u2083 * w\u2083 - p\u2084 * w\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_comm, mul_left_comm, mul_assoc, mul_right_comm]\n  repeat' rw [\u2190 mul_assoc]\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [pow_one]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [pow_le_pow_of_le_left h\u2085.le h\u2089.le (w\u2081 + w\u2082 + w\u2083 + w\u2084),\n    pow_le_pow_of_le_left h\u2086.le h\u2089.le (w\u2081 + w\u2082 + w\u2083 + w\u2084),\n    pow_le_pow_of_le_left h\u2087.le h\u2089.le (w\u2081 + w\u2082 + w\u2083 + w\u2084),\n    pow_le_pow_of_le_left h\u2088.le h\u2089.le (w\u2081 + w\u2082 + w\u2083 + w\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [one_div, one_pow, mul_one, mul_zero, add_zero]\n  nlinarith [h\u2081, h\u2082, h\u2083, h\u2084]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_comm, mul_left_comm, mul_assoc]\n  repeat' rw [\u2190 pow_one (1 : \u211d)]\n  nlinarith [Real.pow_le_pow_of_le_left\n    (by linarith : 0 \u2264 (1 : \u211d)) (by linarith : 1 \u2264 p\u2081) (by linarith : 0 \u2264 w\u2081),\n    Real.pow_le_pow_of_le_left\n    (by linarith : 0 \u2264 (1 : \u211d)) (by linarith : 1 \u2264 p\u2082) (by linarith : 0 \u2264 w\u2082),\n    Real.pow_le_pow_of_le_left\n    (by linarith : 0 \u2264 (1 : \u211d)) (by linarith : 1 \u2264 p\u2083) (by linarith : 0 \u2264 w\u2083),\n    Real.pow_le_pow_of_le_left\n    (by linarith : 0 \u2264 (1 : \u211d)) (by linarith : 1 \u2264 p\u2084) (by linarith : 0 \u2264 w\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084 h_prod\n  simp_all\n  nlinarith [h_prod, h_sum]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  norm_num at h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089 \u22a2\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089 h\u2081\u2080\n  simp_all only [add_assoc, add_right_comm, add_left_comm, mul_add, mul_comm, mul_left_comm,\n    mul_right_comm]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [one_div, le_refl, mul_one, mul_zero, add_zero, zero_add, add_assoc]\n  ring_nf\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [pow_one]\n  nlinarith [mul_self_nonneg (p\u2081 - p\u2082), mul_self_nonneg (p\u2082 - p\u2083), mul_self_nonneg (p\u2083 - p\u2084), mul_self_nonneg (p\u2084 - p\u2081)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_one, one_mul, mul_add, add_mul]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089 h\u2081\u2080\n  simp_all only [add_assoc, add_left_comm, mul_comm]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_one, mul_zero, add_zero, zero_add, mul_comm]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_add, mul_assoc, mul_comm, mul_left_comm, add_assoc, add_left_comm,\n    add_comm]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [add_assoc, add_left_comm, add_right_comm, mul_add, add_mul, mul_comm, mul_left_comm,\n    mul_right_comm]\n  ring_nf\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2081 * w\u2081 - p\u2082 * w\u2082 - p\u2083 * w\u2083 - p\u2084 * w\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  norm_num at *\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h_w h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084 h_pp\n  nlinarith [pow_two (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084), pow_two (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [one_div, one_pow, mul_one, mul_zero, add_zero]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [one_div, one_pow, mul_one, mul_zero, add_zero]\n  norm_num\n  nlinarith [h\u2080, h\u2081, h\u2082, h\u2083, h\u2084, h\u2085, h\u2086, h\u2087, h\u2088, h\u2089]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084 h_prod\n  simp_all only [mul_comm]\n  nlinarith [Real.rpow_le_rpow_iff _ _ (by linarith : 0 < 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [pow_one, mul_one, mul_zero, add_zero]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089 h\u2081\u2080\n  simp_all only [h\u2081, h\u2082, h\u2083, h\u2084, h\u2085, h\u2086, h\u2087, h\u2088, h\u2089, h\u2081\u2080, one_mul, zero_mul, add_zero]\n  nlinarith [h\u2081, h\u2082, h\u2083, h\u2084, h\u2085, h\u2086, h\u2087, h\u2088, h\u2089, h\u2081\u2080]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084 h_prod\n  simp_all only [mul_comm]\n  apply geom_mean_le_arith_mean4_weighted _ _ _ _ _ _ _ _ _ h_prod\n  all_goals linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [pow_one]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2081 * w\u2081),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2082 * w\u2082),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2083 * w\u2083),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2084 * w\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [add_assoc, add_left_comm, mul_comm]\n  nlinarith [mul_self_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1),\n    mul_self_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [add_assoc, add_left_comm, add_right_comm, mul_comm]\n  ring_nf\n  nlinarith [mul_self_nonneg (p\u2081 - p\u2082), mul_self_nonneg (p\u2082 - p\u2083), mul_self_nonneg (p\u2083 - p\u2084), mul_self_nonneg (p\u2084 - p\u2081)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [Real.geom_mean_le_arith_mean4_weighted p\u2081 p\u2082 p\u2083 p\u2084 w\u2081 w\u2082 w\u2083 w\u2084 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_comm, mul_left_comm, mul_assoc, mul_right_comm]\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084),\n    sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [one_div, one_pow, mul_one, mul_zero, add_zero, zero_add, zero_mul]\n  nlinarith [Real.rpow_add_le_add_rpow w\u2081 p\u2081 w\u2082 p\u2082 (by linarith) (by linarith),\n    Real.rpow_add_le_add_rpow w\u2083 p\u2083 w\u2084 p\u2084 (by linarith) (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.rpow_le_rpow_iff_of_nonneg_of_nonneg_of_nonneg (mul_nonneg h\u2085 h\u2081) (mul_nonneg h\u2086 h\u2082) (mul_nonneg h\u2087 h\u2083) (mul_nonneg h\u2088 h\u2084) (Real.log_nonneg (mul_nonneg h\u2085 h\u2081))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_assoc, mul_comm, mul_left_comm]\n  ring_nf\n  nlinarith [sq_nonneg (p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 - p\u2081 * w\u2081 - p\u2082 * w\u2082 - p\u2083 * w\u2083 - p\u2084 * w\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192 w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     p\u2081 * w\u2081 + p\u2082 * w\u2082 + p\u2083 * w\u2083 + p\u2084 * w\u2084 = 1 \u2192     (p\u2081^w\u2081 * p\u2082^w\u2082 * p\u2083^w\u2083 * p\u2084^w\u2084) \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [mul_comm, mul_left_comm, mul_assoc, mul_right_comm]\n  repeat' rw [\u2190 mul_assoc]\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_21725",
        "split": "test",
        "formal_statement": "theorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by",
        "model_outputs": [
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  have h\u2081 : 0 \u2264 a ^ 2 - 2 * a * b + b ^ 2 := by linarith\n  linarith\n```",
            "\n  have h : (a - b) ^ 2 \u2265 0 := by apply sq_nonneg\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  linarith\n```",
            "\n  have : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  simp [sq, mul_assoc] at this\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  simp only [sq, \u2190 sub_mul, mul_comm] at h\u2080\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  simp only [sq, sub_mul, mul_sub, mul_one, mul_neg, neg_mul, neg_neg, sub_neg_eq_add, sub_add_eq_add_sub,\n    add_sub_assoc, add_sub_cancel, sub_add_eq_add_sub, add_sub_assoc, add_sub_cancel, sub_add_eq_add_sub,\n    add_sub_assoc, add_sub_cancel, sub_add_eq_add_sub, add_sub_assoc, add_sub_cancel] at h\u2081\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2081 : (a - b) ^ 2 = a ^ 2 - 2 * a * b + b ^ 2 := by ring\n  rw [h\u2081] at h\u2080\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by\n    apply sq_nonneg\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - b), add_nonneg (sq_nonneg a) (sq_nonneg b)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by\n    apply sq_nonneg\n  linarith\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by\n    nlinarith\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h : (a - b) ^ 2 \u2265 0 := by\n    apply sq_nonneg\n  have h\u2081 : 0 \u2264 a ^ 2 - 2 * a * b + b ^ 2 := by\n    linarith\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  linarith\n```",
            "\n  have h : (a - b) ^ 2 \u2265 0 := by nlinarith\n  nlinarith\n```",
            "\n  have : (a - b) ^ 2 \u2265 0 := sq_nonneg (a - b)\n  linarith\n```",
            "\n  have h\u2080 : (a - b) ^ 2 \u2265 0 := by\n    apply sq_nonneg\n  simp only [sq] at h\u2080\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  have h\u2081 : 0 \u2264 a ^ 2 - 2 * a * b + b ^ 2 := by linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h : (a - b) ^ 2 \u2265 0 := by apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  simp [sq, mul_assoc] at this\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  simp only [sq, \u2190 sub_mul, mul_comm] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  simp only [sq, sub_mul, mul_sub, mul_one, mul_neg, neg_mul, neg_neg, sub_neg_eq_add, sub_add_eq_add_sub,\n    add_sub_assoc, add_sub_cancel, sub_add_eq_add_sub, add_sub_assoc, add_sub_cancel, sub_add_eq_add_sub,\n    add_sub_assoc, add_sub_cancel, sub_add_eq_add_sub, add_sub_assoc, add_sub_cancel] at h\u2081\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  linarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  have h\u2081 : (a - b) ^ 2 = a ^ 2 - 2 * a * b + b ^ 2 := by ring\n  rw [h\u2081] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by\n    apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  linarith [sq_nonneg (a - b), add_nonneg (sq_nonneg a) (sq_nonneg b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by\n    apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h : (a - b) ^ 2 \u2265 0 := by\n    apply sq_nonneg\n  have h\u2081 : 0 \u2264 a ^ 2 - 2 * a * b + b ^ 2 := by\n    linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h : (a - b) ^ 2 \u2265 0 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have : (a - b) ^ 2 \u2265 0 := sq_nonneg (a - b)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2080 : (a - b) ^ 2 \u2265 0 := by\n    apply sq_nonneg\n  simp only [sq] at h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem three_mul_le_add_sq (a b : \u211d) : 3 * a * b \u2264 a ^ 2 + b ^ 2 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_plus_59714",
        "split": "test",
        "formal_statement": "theorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by",
        "model_outputs": [
            "\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  have h\u2081 : (x - y) ^ 2 * (x + y) \u2264 1 := by\n    nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]\n  rw [h\u2080]\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]\n```",
            "\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 3 := by ring\n  have h\u2081 : (x - y) ^ 3 \u2264 1 := by\n    nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]\n```",
            "\n  nlinarith [mul_self_nonneg (x + y), mul_self_nonneg (x - y)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y), hxy]\n```",
            "\n  nlinarith [mul_self_nonneg (x - y)]\n```",
            "\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x + y) * (x ^ 2 + y ^ 2 - 2 * x * y) := by ring\n  rw [h\u2080]\n  nlinarith [sq_nonneg (x - y), hxy]\n```",
            "\n  nlinarith [mul_self_nonneg (x + y)]\n```",
            "\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 3 := by\n    ring_nf\n  rw [h\u2080]\n  have h\u2081 : (x - y) ^ 2 \u2265 0 := by\n    apply sq_nonneg\n  nlinarith [sq_nonneg (x - y), hxy]\n```",
            "\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  rw [h\u2080]\n  have h\u2081 : (x - y) ^ 2 * (x + y) \u2264 1 := by\n    nlinarith [sq_nonneg (x - y)]\n  linarith\n```",
            "\n  have h\u2081 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x + y) * (x ^ 2 + y ^ 2 - 2 * x * y) := by ring\n  rw [h\u2081]\n  have h\u2082 : x ^ 2 + y ^ 2 - 2 * x * y = (x - y) ^ 2 := by ring\n  rw [h\u2082]\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]\n```",
            "\n  have h\u2080 : (x - y) ^ 2 * (x + y) \u2265 0 := by\n    nlinarith\n  nlinarith\n```",
            "\n  have h\u2081 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x + y) * (x ^ 2 + y ^ 2 - 2 * x * y) := by\n    ring\n  rw [h\u2081]\n  have h\u2082 : (x + y) ^ 2 \u2265 0 := by nlinarith\n  nlinarith [sq_nonneg (x - y)]\n```",
            "\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  rw [h\u2080]\n  nlinarith [sq_nonneg (x - y)]\n```",
            "\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  have h\u2081 : (x - y) ^ 2 * (x + y) \u2264 1 := by\n    nlinarith [sq_nonneg (x - y)]\n  linarith\n```",
            "\n  have h\u2080 : (x + y) ^ 2 \u2264 2 * (x ^ 2 + y ^ 2) := by\n    nlinarith [sq_nonneg (x - y)]\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]\n```",
            "\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  have h\u2081 : (x - y) ^ 2 \u2265 0 := by nlinarith\n  have h\u2082 : x + y \u2264 2 := by nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y)]\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y)]\n```",
            "\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]\n```",
            "\n  have key : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) * (x ^ 2 - 2 * x * y + y ^ 2) := by\n    ring\n  rw [key]\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]\n```",
            "\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  rw [h\u2080]\n  have h\u2081 : 0 \u2264 (x - y) ^ 2 := by apply sq_nonneg\n  nlinarith\n```",
            "\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  rw [h\u2080]\n  nlinarith\n```",
            "\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by\n    ring\n  rw [h\u2080]\n  have h\u2081 : (x - y) ^ 2 \u2265 0 := by apply sq_nonneg\n  have h\u2082 : x + y \u2264 2 := by linarith [sq_nonneg (x - y)]\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 (x - y) ^ 2 := sq_nonneg (x - y)\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y)]\n```",
            "\n  have key : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by\n    ring\n  rw [key]\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y)]\n```",
            "\n  have h\u2081 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  have h\u2082 : 0 \u2264 (x - y) ^ 2 := by apply sq_nonneg\n  have h\u2083 : 0 \u2264 x * y := by linarith\n  have h\u2084 : 0 \u2264 x + y := by linarith\n  have h\u2085 : 0 \u2264 (x - y) ^ 2 * (x + y) := by positivity\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y), hxy]\n```",
            "\n  have h\u2080 : (x - y) ^ 2 * (x + y) \u2265 0 := by\n    nlinarith [sq_nonneg (x - y)]\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (x - y), mul_self_nonneg (x + y)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  have h\u2081 : (x - y) ^ 2 * (x + y) \u2264 1 := by\n    nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]\n  rw [h\u2080]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 3 := by ring\n  have h\u2081 : (x - y) ^ 3 \u2264 1 := by\n    nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [mul_self_nonneg (x + y), mul_self_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y), hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [mul_self_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x + y) * (x ^ 2 + y ^ 2 - 2 * x * y) := by ring\n  rw [h\u2080]\n  nlinarith [sq_nonneg (x - y), hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [mul_self_nonneg (x + y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 3 := by\n    ring_nf\n  rw [h\u2080]\n  have h\u2081 : (x - y) ^ 2 \u2265 0 := by\n    apply sq_nonneg\n  nlinarith [sq_nonneg (x - y), hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  rw [h\u2080]\n  have h\u2081 : (x - y) ^ 2 * (x + y) \u2264 1 := by\n    nlinarith [sq_nonneg (x - y)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2081 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x + y) * (x ^ 2 + y ^ 2 - 2 * x * y) := by ring\n  rw [h\u2081]\n  have h\u2082 : x ^ 2 + y ^ 2 - 2 * x * y = (x - y) ^ 2 := by ring\n  rw [h\u2082]\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : (x - y) ^ 2 * (x + y) \u2265 0 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2081 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x + y) * (x ^ 2 + y ^ 2 - 2 * x * y) := by\n    ring\n  rw [h\u2081]\n  have h\u2082 : (x + y) ^ 2 \u2265 0 := by nlinarith\n  nlinarith [sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  rw [h\u2080]\n  nlinarith [sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  have h\u2081 : (x - y) ^ 2 * (x + y) \u2264 1 := by\n    nlinarith [sq_nonneg (x - y)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : (x + y) ^ 2 \u2264 2 * (x ^ 2 + y ^ 2) := by\n    nlinarith [sq_nonneg (x - y)]\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  have h\u2081 : (x - y) ^ 2 \u2265 0 := by nlinarith\n  have h\u2082 : x + y \u2264 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have key : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) * (x ^ 2 - 2 * x * y + y ^ 2) := by\n    ring\n  rw [key]\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  rw [h\u2080]\n  have h\u2081 : 0 \u2264 (x - y) ^ 2 := by apply sq_nonneg\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  rw [h\u2080]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by\n    ring\n  rw [h\u2080]\n  have h\u2081 : (x - y) ^ 2 \u2265 0 := by apply sq_nonneg\n  have h\u2082 : x + y \u2264 2 := by linarith [sq_nonneg (x - y)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2081 : 0 \u2264 (x - y) ^ 2 := sq_nonneg (x - y)\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have key : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by\n    ring\n  rw [key]\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2081 : x ^ 3 + y ^ 3 - 3 * x * y * (x + y) = (x - y) ^ 2 * (x + y) := by ring\n  have h\u2082 : 0 \u2264 (x - y) ^ 2 := by apply sq_nonneg\n  have h\u2083 : 0 \u2264 x * y := by linarith\n  have h\u2084 : 0 \u2264 x + y := by linarith\n  have h\u2085 : 0 \u2264 (x - y) ^ 2 * (x + y) := by positivity\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [sq_nonneg (x + y), sq_nonneg (x - y), hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  have h\u2080 : (x - y) ^ 2 * (x + y) \u2265 0 := by\n    nlinarith [sq_nonneg (x - y)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_cube_sub_three_mul_cube_le_one {x y : \u211d} (hxy : x * y \u2264 1) :     x ^ 3 + y ^ 3 - 3 * x * y * (x + y) \u2264 1 := by\n  nlinarith [sq_nonneg (x - y), mul_self_nonneg (x + y)]"
        ]
    },
    {
        "name": "lean_workbook_39618",
        "split": "test",
        "formal_statement": "theorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by",
        "model_outputs": [
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  rw [\u2190 Nat.succ_eq_add_one]\n  norm_num\n  omega\n```",
            "\n  simp only [succ_eq_add_one, IsCoprime]\n  norm_cast\n  apply Iff.intro <;> intro h\n  <;> simp [Nat.coprime_iff_gcd_eq_one, Nat.gcd_eq_right_iff_dvd, h, pow_succ]\n  <;> omega\n```",
            "\n  simp [pow_succ, Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero,\n    Nat.succ_pos, \u2190 Nat.isCoprime_iff_gcd_eq_one]\n  omega\n```",
            "\n  norm_num [Int.ModEq, Int.emod_eq_of_lt]\n  simp_rw [\u2190 Nat.one_eq_succ_zero]\n  norm_cast\n  rw [Nat.isCoprime_iff_gcd_eq_one]\n  norm_num\n  omega\n```",
            "\n  norm_num\n  split_ifs with h\n  \u00b7 simp [Int.ModEq, Int.emod_eq_of_lt, Nat.succ_le_iff, Nat.lt_succ_iff, Nat.succ_pos] at h\n    omega\n  \u00b7 simp [Int.ModEq, Int.emod_eq_of_lt, Nat.succ_le_iff, Nat.lt_succ_iff, Nat.succ_pos] at h\n    omega\n```",
            "\n  norm_cast\n  simp only [Int.ModEq, Nat.succ_eq_add_one, ge_iff_le, Int.ofNat_add, Int.ofNat_one]\n  simp [\u2190 Nat.mod_eq_of_lt, Nat.add_mod, Nat.mul_mod, Nat.mod_mod]\n  simp [Nat.ModEq, Nat.mod_eq_of_lt, Nat.lt_succ_iff, Nat.le_of_dvd, Nat.succ_pos]\n```",
            "\n  simp [pow_mod, succ_eq_add_one, Nat.ModEq, Nat.succ_eq_add_one]\n  split\n  <;> intro h\n  <;> simp_all\n  <;> try decide\n  <;> omega\n```",
            "\n  simp only [Int.ModEq, IsCoprime]\n  cases a <;> simp_all\n  omega\n```",
            "\n  simp [Nat.isCoprime_iff_gcd_eq_one, Int.ModEq, Int.emod_eq_of_lt]\n  omega\n```",
            "\n  rw [Int.ModEq]\n  simp [succ_eq_add_one, IsCoprime]\n```",
            "\n  simp only [IsCoprime, succ_ne_zero, not_true, not_false_iff, zero_lt_one]\n  norm_cast\n  simp only [Int.ModEq, Int.ofNat_mod, Int.ofNat_succ]\n  constructor <;> intro h <;>\n    simp_all [Int.ModEq, Int.ofNat_mod, Int.ofNat_succ, Nat.ModEq]\n  all_goals\n    omega\n```",
            "\n  rw [\u2190 Nat.cast_succ, Int.ModEq, Int.natCast_mod]\n  simp [Nat.succ_eq_add_one, IsCoprime]\n```",
            "\n  rw [pow_modEq_one, Int.ModEq]\n  simp [succ_nontrivial]\n```",
            "\n  norm_num [Nat.ModEq, Int.ModEq]\n  simp [\u2190 Nat.modEq_iff_dvd, Nat.mod_succ_right_div_self]\n  constructor <;> intro h <;>\n    simp_all [Nat.coprime_iff_gcd_eq_one, Nat.gcd_eq_right]\n  all_goals\n    omega\n```",
            "\n  simp only [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  simp [\u2190 tsub_eq_zero_iff_le, succ_le_iff]\n  split_ifs with h\n  next => simp [h]\n  next =>\n    simp_all [Nat.isCoprime_iff_gcd_eq_one, Nat.gcd_comm]\n    omega\n```",
            "\n  cases a <;> simp [Nat.succ_eq_add_one, pow_succ, Int.ModEq, Int.ofNat_add, Int.ofNat_one]\n  constructor <;> intro <;> omega\n```",
            "\n  constructor <;> intro h\n  case mp =>\n    cases' h with x hx\n    simp only [Int.ModEq, Int.ofNat_succ] at hx\n    norm_num at hx\n    exact not_coprime_of_dvd_of_dvd (by norm_num : (1 : \u2115) \u2264 a.succ) (by use 2; exact hx) (by use a.succ; norm_num)\n  case mpr =>\n    push_neg\n    cases' h with x hx\n    simp only [Int.ModEq, Int.ofNat_succ] at hx\n    norm_num at hx\n    omega\n```",
            "\n  simp [pow_mod, Int.ModEq, Nat.succ_pos, not_true_eq_false]\n  norm_cast\n  aesop\n```",
            "\n  simp only [Int.ModEq, Int.not_iff_not]\n  norm_cast\n```",
            "\n  rw [Int.ModEq]\n  simp [succ_eq_add_one, \u2190 Nat.mod_eq_of_lt, Nat.mod_eq_of_lt]\n  norm_num\n  omega\n```",
            "\n  cases a <;> simp [Nat.succ_eq_add_one, Nat.isCoprime_iff_gcd_eq_one] <;>\n    decide\n```",
            "\n  simp [pow_mod, succ_eq_add_one, \u2190 Nat.cast_add_one, Nat.cast_inj, Nat.gcd_eq_right]\n```",
            "\n  simp [Nat.ModEq, IsCoprime]\n```",
            "\n  norm_num [Nat.ModEq, Nat.ModEq, Nat.ModEq]\n  by_cases a = 1\n  <;> simp_all [Nat.succ_eq_add_one, Nat.modEq_iff_dvd]\n  <;> omega\n```",
            "\n  constructor <;> intro h <;>\n    simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;>\n    exact (by omega)\n```",
            "\n  rw [Int.ModEq, isCoprime_iff_gcd_eq_one]\n  norm_cast\n  omega\n```",
            "\n  simp only [pow_mod, Nat.mod_self, zero_mod]\n  norm_cast\n  constructor <;> intro h <;>\n  simp_all [Int.ModEq, Nat.modEq_iff_dvd]\n  <;>\n  omega\n```",
            "\n  norm_num\n  simp [Int.ModEq, IsCoprime]\n  constructor <;> intro h <;>\n  simpa [Nat.succ_pos] using h\n```",
            "\n  simp [Nat.ModEq, IsCoprime]\n  norm_num\n  omega\n```",
            "\n  rw [Int.ModEq, isCoprime_iff_gcd_eq_one]\n  simp [Nat.succ_pos]\n```",
            "\n  cases a with\n  | zero => simp [Nat.succ_eq_add_one, Nat.add_comm]\n  | succ a =>\n    simp only [pow_succ, pow_succ, pow_zero, Nat.one_eq_succ_zero, Nat.add_comm]\n    norm_num [Nat.succ_eq_add_one, IsCoprime]\n    omega\n```",
            "\n  simp only [IsCoprime, Nat.coprime_iff_gcd_eq_one]\n  split\n  case inl h =>\n    simp [Nat.gcd_eq_right h]\n  case inr h =>\n    simp [Nat.gcd_eq_left h]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  rw [\u2190 Nat.succ_eq_add_one]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp only [succ_eq_add_one, IsCoprime]\n  norm_cast\n  apply Iff.intro <;> intro h\n  <;> simp [Nat.coprime_iff_gcd_eq_one, Nat.gcd_eq_right_iff_dvd, h, pow_succ]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp [pow_succ, Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero,\n    Nat.succ_pos, \u2190 Nat.isCoprime_iff_gcd_eq_one]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  norm_num [Int.ModEq, Int.emod_eq_of_lt]\n  simp_rw [\u2190 Nat.one_eq_succ_zero]\n  norm_cast\n  rw [Nat.isCoprime_iff_gcd_eq_one]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  norm_num\n  split_ifs with h\n  \u00b7 simp [Int.ModEq, Int.emod_eq_of_lt, Nat.succ_le_iff, Nat.lt_succ_iff, Nat.succ_pos] at h\n    omega\n  \u00b7 simp [Int.ModEq, Int.emod_eq_of_lt, Nat.succ_le_iff, Nat.lt_succ_iff, Nat.succ_pos] at h\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  norm_cast\n  simp only [Int.ModEq, Nat.succ_eq_add_one, ge_iff_le, Int.ofNat_add, Int.ofNat_one]\n  simp [\u2190 Nat.mod_eq_of_lt, Nat.add_mod, Nat.mul_mod, Nat.mod_mod]\n  simp [Nat.ModEq, Nat.mod_eq_of_lt, Nat.lt_succ_iff, Nat.le_of_dvd, Nat.succ_pos]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp [pow_mod, succ_eq_add_one, Nat.ModEq, Nat.succ_eq_add_one]\n  split\n  <;> intro h\n  <;> simp_all\n  <;> try decide\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp only [Int.ModEq, IsCoprime]\n  cases a <;> simp_all\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp [Nat.isCoprime_iff_gcd_eq_one, Int.ModEq, Int.emod_eq_of_lt]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  rw [Int.ModEq]\n  simp [succ_eq_add_one, IsCoprime]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp only [IsCoprime, succ_ne_zero, not_true, not_false_iff, zero_lt_one]\n  norm_cast\n  simp only [Int.ModEq, Int.ofNat_mod, Int.ofNat_succ]\n  constructor <;> intro h <;>\n    simp_all [Int.ModEq, Int.ofNat_mod, Int.ofNat_succ, Nat.ModEq]\n  all_goals\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  rw [\u2190 Nat.cast_succ, Int.ModEq, Int.natCast_mod]\n  simp [Nat.succ_eq_add_one, IsCoprime]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  rw [pow_modEq_one, Int.ModEq]\n  simp [succ_nontrivial]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  norm_num [Nat.ModEq, Int.ModEq]\n  simp [\u2190 Nat.modEq_iff_dvd, Nat.mod_succ_right_div_self]\n  constructor <;> intro h <;>\n    simp_all [Nat.coprime_iff_gcd_eq_one, Nat.gcd_eq_right]\n  all_goals\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp only [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  simp [\u2190 tsub_eq_zero_iff_le, succ_le_iff]\n  split_ifs with h\n  next => simp [h]\n  next =>\n    simp_all [Nat.isCoprime_iff_gcd_eq_one, Nat.gcd_comm]\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  cases a <;> simp [Nat.succ_eq_add_one, pow_succ, Int.ModEq, Int.ofNat_add, Int.ofNat_one]\n  constructor <;> intro <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  constructor <;> intro h\n  case mp =>\n    cases' h with x hx\n    simp only [Int.ModEq, Int.ofNat_succ] at hx\n    norm_num at hx\n    exact not_coprime_of_dvd_of_dvd (by norm_num : (1 : \u2115) \u2264 a.succ) (by use 2; exact hx) (by use a.succ; norm_num)\n  case mpr =>\n    push_neg\n    cases' h with x hx\n    simp only [Int.ModEq, Int.ofNat_succ] at hx\n    norm_num at hx\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp [pow_mod, Int.ModEq, Nat.succ_pos, not_true_eq_false]\n  norm_cast\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp only [Int.ModEq, Int.not_iff_not]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  rw [Int.ModEq]\n  simp [succ_eq_add_one, \u2190 Nat.mod_eq_of_lt, Nat.mod_eq_of_lt]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  cases a <;> simp [Nat.succ_eq_add_one, Nat.isCoprime_iff_gcd_eq_one] <;>\n    decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp [pow_mod, succ_eq_add_one, \u2190 Nat.cast_add_one, Nat.cast_inj, Nat.gcd_eq_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp [Nat.ModEq, IsCoprime]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  norm_num [Nat.ModEq, Nat.ModEq, Nat.ModEq]\n  by_cases a = 1\n  <;> simp_all [Nat.succ_eq_add_one, Nat.modEq_iff_dvd]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  constructor <;> intro h <;>\n    simp_all [Int.ModEq, Int.emod_eq_of_lt]\n  <;>\n    exact (by omega)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  rw [Int.ModEq, isCoprime_iff_gcd_eq_one]\n  norm_cast\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp only [pow_mod, Nat.mod_self, zero_mod]\n  norm_cast\n  constructor <;> intro h <;>\n  simp_all [Int.ModEq, Nat.modEq_iff_dvd]\n  <;>\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  norm_num\n  simp [Int.ModEq, IsCoprime]\n  constructor <;> intro h <;>\n  simpa [Nat.succ_pos] using h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp [Nat.ModEq, IsCoprime]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  rw [Int.ModEq, isCoprime_iff_gcd_eq_one]\n  simp [Nat.succ_pos]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  cases a with\n  | zero => simp [Nat.succ_eq_add_one, Nat.add_comm]\n  | succ a =>\n    simp only [pow_succ, pow_succ, pow_zero, Nat.one_eq_succ_zero, Nat.add_comm]\n    norm_num [Nat.succ_eq_add_one, IsCoprime]\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_modEq_one' (a : \u2115) : 2 ^ a \u2261 2 [ZMOD a.succ] \u2194 \u00acIsCoprime (a.succ : \u2115) a := by\n  simp only [IsCoprime, Nat.coprime_iff_gcd_eq_one]\n  split\n  case inl h =>\n    simp [Nat.gcd_eq_right h]\n  case inr h =>\n    simp [Nat.gcd_eq_left h]"
        ]
    },
    {
        "name": "lean_workbook_plus_73605",
        "split": "test",
        "formal_statement": "theorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by",
        "model_outputs": [
            "\n  rw [\u2190 Nat.sub_add_cancel (le_of_lt h)]\n  apply choose_lt_of_le_half_left\n  omega\n```",
            "\n  rw [\u2190 Nat.choose_symm (by omega : n \u2264 (2 * n - m))]\n  apply Nat.choose_middle_lt_of_lt_two_mul\n  omega\n```",
            "\n  cases' lt_or_le n m with hnm hnm\n  \u00b7 rw [choose_eq_zero_of_lt (by omega : (2 * n) - m < n)]\n    simp [h, hnm]\n  rw [choose_symm_of_eq_add (by omega : n = (2 * n) - m + m)]\n  apply Nat.lt_of_sub_lt_sub_of_le hnm\n  have : 0 < choose n m := by\n    apply choose_pos (by omega : m \u2264 n)\n  omega\n```",
            "\n  rcases Nat.even_or_odd n with (h\u2080 | h\u2080)\n  next =>\n    cases' h\u2080 with k hk\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    rw [choose_symm_of_eq_add]\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    apply Nat.lt_of_le_of_lt\n    apply Nat.pow_le_pow_left (by norm_num : 2 \u2264 2)\n    rw [hk]\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    omega\n  next =>\n    cases' h\u2080 with k hk\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    rw [choose_symm_of_eq_add]\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    apply Nat.lt_of_le_of_lt\n    apply Nat.pow_le_pow_left (by norm_num : 2 \u2264 2)\n    rw [hk]\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    omega\n```",
            "\n  rw [choose_eq_factorial_div_factorial (Nat.sub_le _ _)]\n  apply Nat.div_lt_of_lt_mul\n  rw [Nat.mul_comm] at h\n  nlinarith [Nat.mul_factorial_pred (Nat.sub_pos_of_lt h), Nat.factorial_le (Nat.sub_le _ _)]\n```",
            "\n  rcases Nat.lt_mul_iff_one_lt_right (by norm_num : 0 < 2) with (h' | h')\n  \u00b7 rw [choose_symm_of_eq_add ((add_comm _ m).trans (add_tsub_cancel_of_le h'.le))]\n    apply choose_le_middle\n  \u00b7 exact (choose_le_pow (tsub_le_self) (2 * n - m) n).trans (Nat.pow_le_pow_of_le_right\n      (by norm_num) h')\n```",
            "\n  rw [\u2190 choose_symm_of_eq_add (Nat.sub_add_cancel (by omega : m \u2264 2 * n))]\n  apply choose_le_middle\n  omega\n```",
            "\n  rw [\u2190 Nat.succ_le_iff] at h\n  cases n <;> norm_num [choose, Nat.pow_succ]\n  <;> linarith\n```",
            "\n  apply lt_of_le_of_lt (choose_le_middle _ _)\n  rw [\u2190 one_add_one_eq_two]\n  apply Nat.lt_pow_self (Nat.lt_succ_self _)\n```",
            "\n  rw [\u2190 Nat.sub_add_cancel (le_of_lt h)]\n  choose_log\n```",
            "\n  cases' lt_or_le n m with hnm hnm\n  \u00b7 rw [choose_eq_zero_of_lt (lt_of_le_of_lt hnm h)]\n    simp\n  rw [two_mul] at h\n  exact (choose_le_middle _ _).trans_lt (Nat.pow_lt_pow_of_lt_right (by omega) h)\n```",
            "\n  rw [\u2190 Nat.sub_add_cancel (le_of_lt h)]\n  exact (Nat.choose_middle_lt_of_lt_two_mul _ _ (by linarith)).trans (Nat.pow_le_pow_of_le_right\n    (by norm_num) (Nat.sub_le _ _))\n```",
            "\n  rw [\u2190 Nat.sub_add_cancel ((choose_pos h).le)]\n  apply Nat.choose_middle_lt_of_lt_two_mul\n  omega\n```",
            "\n  rw [\u2190 Nat.sub_add_cancel (le_of_lt h)]\n  apply Nat.lt_of_le_of_lt (choose_le_middle _ _)\n  rw [Nat.choose_symm_of_eq_add]\n  simp [Nat.lt_of_le_of_lt (Nat.sub_le _ _) h]\n```",
            "\n  rw [\u2190 Nat.choose_symm_of_eq_add ((choose_mul_factorial_mul_factorial (m - n) n).symm.trans <|\n    (add_tsub_cancel_of_le (Nat.le_of_lt_succ h)).symm)]\n  exact Nat.choose_middle_le_of_le_middle _ _ (Nat.le_of_lt_succ h)\n```",
            "\n  rw [choose_eq_factorial_div_factorial (Nat.sub_le _ _)]\n  apply Nat.div_lt_of_lt_mul\n  rw [Nat.mul_comm]\n  apply Nat.factorial_lt_factorial_mul_choose\n  omega\n```",
            "\n  rw [\u2190 choose_symm (by omega)]\n  simpa using choose_le_pow (by omega)\n```",
            "\n  rw [\u2190 Nat.lt_succ_iff, choose_succ_right_eq]\n  simpa [Nat.choose_symm, Nat.choose_succ_succ] using Nat.choose_le_succ_of_lt_half_left h\n```",
            "\n  cases' lt_or_le n m with h\u2081 h\u2081\n  all_goals\n    rw [choose_eq_zero_of_lt]\n    \u00b7 exact pow_pos (by norm_num) _\n    \u00b7 omega\n```",
            "\n  rw [\u2190 pow_bit1_eq_pow_bit1]\n  apply choose_middle_lt_of_lt_middle\n  omega\n```",
            "\n  apply Nat.lt_of_le_of_lt _ (Nat.pow_le_pow_of_le_right (by norm_num) (by linarith))\n  apply Nat.le_of_add_le_add_right\n  simpa [choose_symm_of_eq_add, add_tsub_cancel_of_le (by omega)] using choose_le_middle n m\n```",
            "\n  rw [\u2190 one_mul (choose n ((2 * n) - m)), \u2190 choose_self n]\n  exact choose_middle_lt_of_lt_two_mul_choose h\n```",
            "\n  rw [\u2190 add_left_inj (2 ^ n)]\n  norm_num [choose_eq_factorial_div_factorial (le_of_lt h), factorial_mul_factorial_dvd_factorial (le_of_lt h)]\n  omega\n```",
            "\n  apply Nat.lt_of_le_of_lt _ (Nat.pow_lt_pow_of_lt_right one_lt_two h)\n  rw [\u2190 choose_symm_of_eq_add]\n  apply choose_le_middle\n```",
            "\n  rw [\u2190 choose_symm_of_eq_add (Nat.sub_add_cancel (le_of_lt h))]\n  apply choose_le_middle\n```",
            "\n  rw [\u2190 Nat.sub_add_cancel (by omega)]\n  apply Nat.lt_of_le_of_lt (choose_mul_succ_le _ _)\n  have : 0 < 2 ^ n := by apply Nat.pos_of_ne_zero; simp [Nat.pow_succ]\n  nlinarith\n```",
            "\n  rw [choose_symm_of_eq_add (Nat.sub_add_cancel h.le).symm]\n  apply Nat.lt_of_le_of_lt (choose_le_middle _ _)\n  exact Nat.lt_two_pow _\n```",
            "\n  rw [\u2190 choose_symm_of_eq_add]\n  simpa [Nat.choose_symm_of_eq_add, Nat.choose_symm_of_eq_add] using Nat.choose_middle_lt_of_lt_two_mul h\n```",
            "\n  rw [choose_symm_of_lt_add]\n  exact choose_le_pow_of_le_two_mul n (Nat.le_sub_of_add_le (by linarith))\n  omega\n```",
            "\n  cases' lt_or_le n m with h\u2081 h\u2081\n  all_goals\n    rw [choose_eq_zero_of_lt (by omega)]\n    simp [Nat.pow_succ, Nat.mul_succ]\n    nlinarith\n```",
            "\n  have h\u2081 : n < 2 * m := by assumption\n  rw [choose_middle]\n  apply Nat.choose_le_middle\n  omega\n```",
            "\n  rw [choose_symm_of_eq_add]\n  rw [add_comm]\n  simpa [Nat.choose_eq_factorial_div_factorial] using Nat.lt_of_le_of_lt (Nat.factorial_le (Nat.le_add_left _ _))\n    (Nat.factorial_lt (Nat.sub_pos_of_lt h))\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 Nat.sub_add_cancel (le_of_lt h)]\n  apply choose_lt_of_le_half_left\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 Nat.choose_symm (by omega : n \u2264 (2 * n - m))]\n  apply Nat.choose_middle_lt_of_lt_two_mul\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  cases' lt_or_le n m with hnm hnm\n  \u00b7 rw [choose_eq_zero_of_lt (by omega : (2 * n) - m < n)]\n    simp [h, hnm]\n  rw [choose_symm_of_eq_add (by omega : n = (2 * n) - m + m)]\n  apply Nat.lt_of_sub_lt_sub_of_le hnm\n  have : 0 < choose n m := by\n    apply choose_pos (by omega : m \u2264 n)\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rcases Nat.even_or_odd n with (h\u2080 | h\u2080)\n  next =>\n    cases' h\u2080 with k hk\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    rw [choose_symm_of_eq_add]\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    apply Nat.lt_of_le_of_lt\n    apply Nat.pow_le_pow_left (by norm_num : 2 \u2264 2)\n    rw [hk]\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    omega\n  next =>\n    cases' h\u2080 with k hk\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    rw [choose_symm_of_eq_add]\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    apply Nat.lt_of_le_of_lt\n    apply Nat.pow_le_pow_left (by norm_num : 2 \u2264 2)\n    rw [hk]\n    simp_all only [Nat.mul_succ, Nat.mul_zero, Nat.add_succ, Nat.add_zero, Nat.zero_add]\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [choose_eq_factorial_div_factorial (Nat.sub_le _ _)]\n  apply Nat.div_lt_of_lt_mul\n  rw [Nat.mul_comm] at h\n  nlinarith [Nat.mul_factorial_pred (Nat.sub_pos_of_lt h), Nat.factorial_le (Nat.sub_le _ _)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rcases Nat.lt_mul_iff_one_lt_right (by norm_num : 0 < 2) with (h' | h')\n  \u00b7 rw [choose_symm_of_eq_add ((add_comm _ m).trans (add_tsub_cancel_of_le h'.le))]\n    apply choose_le_middle\n  \u00b7 exact (choose_le_pow (tsub_le_self) (2 * n - m) n).trans (Nat.pow_le_pow_of_le_right\n      (by norm_num) h')",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 choose_symm_of_eq_add (Nat.sub_add_cancel (by omega : m \u2264 2 * n))]\n  apply choose_le_middle\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 Nat.succ_le_iff] at h\n  cases n <;> norm_num [choose, Nat.pow_succ]\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  apply lt_of_le_of_lt (choose_le_middle _ _)\n  rw [\u2190 one_add_one_eq_two]\n  apply Nat.lt_pow_self (Nat.lt_succ_self _)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 Nat.sub_add_cancel (le_of_lt h)]\n  choose_log",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  cases' lt_or_le n m with hnm hnm\n  \u00b7 rw [choose_eq_zero_of_lt (lt_of_le_of_lt hnm h)]\n    simp\n  rw [two_mul] at h\n  exact (choose_le_middle _ _).trans_lt (Nat.pow_lt_pow_of_lt_right (by omega) h)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 Nat.sub_add_cancel (le_of_lt h)]\n  exact (Nat.choose_middle_lt_of_lt_two_mul _ _ (by linarith)).trans (Nat.pow_le_pow_of_le_right\n    (by norm_num) (Nat.sub_le _ _))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 Nat.sub_add_cancel ((choose_pos h).le)]\n  apply Nat.choose_middle_lt_of_lt_two_mul\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 Nat.sub_add_cancel (le_of_lt h)]\n  apply Nat.lt_of_le_of_lt (choose_le_middle _ _)\n  rw [Nat.choose_symm_of_eq_add]\n  simp [Nat.lt_of_le_of_lt (Nat.sub_le _ _) h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 Nat.choose_symm_of_eq_add ((choose_mul_factorial_mul_factorial (m - n) n).symm.trans <|\n    (add_tsub_cancel_of_le (Nat.le_of_lt_succ h)).symm)]\n  exact Nat.choose_middle_le_of_le_middle _ _ (Nat.le_of_lt_succ h)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [choose_eq_factorial_div_factorial (Nat.sub_le _ _)]\n  apply Nat.div_lt_of_lt_mul\n  rw [Nat.mul_comm]\n  apply Nat.factorial_lt_factorial_mul_choose\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 choose_symm (by omega)]\n  simpa using choose_le_pow (by omega)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 Nat.lt_succ_iff, choose_succ_right_eq]\n  simpa [Nat.choose_symm, Nat.choose_succ_succ] using Nat.choose_le_succ_of_lt_half_left h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  cases' lt_or_le n m with h\u2081 h\u2081\n  all_goals\n    rw [choose_eq_zero_of_lt]\n    \u00b7 exact pow_pos (by norm_num) _\n    \u00b7 omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 pow_bit1_eq_pow_bit1]\n  apply choose_middle_lt_of_lt_middle\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  apply Nat.lt_of_le_of_lt _ (Nat.pow_le_pow_of_le_right (by norm_num) (by linarith))\n  apply Nat.le_of_add_le_add_right\n  simpa [choose_symm_of_eq_add, add_tsub_cancel_of_le (by omega)] using choose_le_middle n m",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 one_mul (choose n ((2 * n) - m)), \u2190 choose_self n]\n  exact choose_middle_lt_of_lt_two_mul_choose h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 add_left_inj (2 ^ n)]\n  norm_num [choose_eq_factorial_div_factorial (le_of_lt h), factorial_mul_factorial_dvd_factorial (le_of_lt h)]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  apply Nat.lt_of_le_of_lt _ (Nat.pow_lt_pow_of_lt_right one_lt_two h)\n  rw [\u2190 choose_symm_of_eq_add]\n  apply choose_le_middle",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 choose_symm_of_eq_add (Nat.sub_add_cancel (le_of_lt h))]\n  apply choose_le_middle",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 Nat.sub_add_cancel (by omega)]\n  apply Nat.lt_of_le_of_lt (choose_mul_succ_le _ _)\n  have : 0 < 2 ^ n := by apply Nat.pos_of_ne_zero; simp [Nat.pow_succ]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [choose_symm_of_eq_add (Nat.sub_add_cancel h.le).symm]\n  apply Nat.lt_of_le_of_lt (choose_le_middle _ _)\n  exact Nat.lt_two_pow _",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [\u2190 choose_symm_of_eq_add]\n  simpa [Nat.choose_symm_of_eq_add, Nat.choose_symm_of_eq_add] using Nat.choose_middle_lt_of_lt_two_mul h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [choose_symm_of_lt_add]\n  exact choose_le_pow_of_le_two_mul n (Nat.le_sub_of_add_le (by linarith))\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  cases' lt_or_le n m with h\u2081 h\u2081\n  all_goals\n    rw [choose_eq_zero_of_lt (by omega)]\n    simp [Nat.pow_succ, Nat.mul_succ]\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  have h\u2081 : n < 2 * m := by assumption\n  rw [choose_middle]\n  apply Nat.choose_le_middle\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_middle_lt_of_lt_two_mul (h : n < 2 * m) : choose n ((2 * n) - m) < 2 ^ n := by\n  rw [choose_symm_of_eq_add]\n  rw [add_comm]\n  simpa [Nat.choose_eq_factorial_div_factorial] using Nat.lt_of_le_of_lt (Nat.factorial_le (Nat.le_add_left _ _))\n    (Nat.factorial_lt (Nat.sub_pos_of_lt h))"
        ]
    },
    {
        "name": "lean_workbook_plus_42708",
        "split": "test",
        "formal_statement": "theorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by",
        "model_outputs": [
            "\n  simp only [pow_three, add_mul, mul_add, mul_one, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]\n```",
            "\n  simp only [add_sq, add_assoc, add_left_comm, mul_add, mul_comm, mul_left_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  simp only [mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc, add_assoc, add_left_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  rw [show (a + b) ^ 3 = a ^ 3 + 3 * a ^ 2 * b + 3 * a * b ^ 2 + b ^ 3 by ring]\n  nlinarith\n```",
            "\n  simp only [mul_add, mul_comm, mul_left_comm, add_assoc, add_left_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  simp only [pow_two, pow_three]\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  simp only [pow_two, mul_assoc]\n  nlinarith\n```",
            "\n  rw [show a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 = a ^ 2 * b + a * b ^ 2 + (a ^ 3 + b ^ 3) by ring]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : \u2200 x y : \u211d, x ^ 2 * y + x * y ^ 2 \u2264 x * y * (x + y) := by\n    intro x y\n    nlinarith\n  nlinarith [h\u2080 a b, h\u2080 b a]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  simp only [add_assoc, add_left_comm, add_right_comm, mul_comm]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : a ^ 2 * b + a * b ^ 2 \u2264 a * b * (a + b) := by nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  simp only [add_mul, mul_add, mul_comm, mul_left_comm, mul_assoc, add_assoc, add_left_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  rw [show (a + b) ^ 3 = a ^ 3 + b ^ 3 + 3 * a ^ 2 * b + 3 * a * b ^ 2 by ring]\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  simp only [pow_three, add_mul, mul_add, mul_one, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  simp only [add_sq, add_assoc, add_left_comm, mul_add, mul_comm, mul_left_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  simp only [mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc, add_assoc, add_left_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [show (a + b) ^ 3 = a ^ 3 + 3 * a ^ 2 * b + 3 * a * b ^ 2 + b ^ 3 by ring]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  simp only [mul_add, mul_comm, mul_left_comm, add_assoc, add_left_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  simp only [pow_two, pow_three]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  simp only [pow_two, mul_assoc]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [show a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 = a ^ 2 * b + a * b ^ 2 + (a ^ 3 + b ^ 3) by ring]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  have h\u2080 : \u2200 x y : \u211d, x ^ 2 * y + x * y ^ 2 \u2264 x * y * (x + y) := by\n    intro x y\n    nlinarith\n  nlinarith [h\u2080 a b, h\u2080 b a]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  simp only [add_assoc, add_left_comm, add_right_comm, mul_comm]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  have h\u2080 : a ^ 2 * b + a * b ^ 2 \u2264 a * b * (a + b) := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  simp only [add_mul, mul_add, mul_comm, mul_left_comm, mul_assoc, add_assoc, add_left_comm]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  rw [show (a + b) ^ 3 = a ^ 3 + b ^ 3 + 3 * a ^ 2 * b + 3 * a * b ^ 2 by ring]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_le (a b : \u211d) : a ^ 2 * b + a * b ^ 2 + a ^ 3 + b ^ 3 \u2264 (a + b) ^ 3 := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_11529",
        "split": "test",
        "formal_statement": "theorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by",
        "model_outputs": [
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have : \u2200 x y : \u211d, x * y ^ 2 + y * x ^ 2 = x * y * (x + y) := by\n    intro x y\n    ring\n  simp_all only [mul_assoc]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2080 : a * b ^ 2 \u2264 a * b := by\n    nlinarith [sq_nonneg b]\n  have h\u2081 : b * c ^ 2 \u2264 b * c := by\n    nlinarith [sq_nonneg c]\n  have h\u2082 : c * a ^ 2 \u2264 c * a := by\n    nlinarith [sq_nonneg a]\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h\u2080 : a * b ^ 2 \u2264 a * b := by\n    nlinarith [sq_nonneg (b - c)]\n  have h\u2081 : b * c ^ 2 \u2264 b * c := by\n    nlinarith [sq_nonneg (c - a)]\n  have h\u2082 : c * a ^ 2 \u2264 c * a := by\n    nlinarith [sq_nonneg (a - b)]\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 = a * b ^ 2 + b * c ^ 2 + c * a ^ 2 := rfl\n  have h' : a * b + b * c + c * a = a * b + b * c + c * a := rfl\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  have h : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  linarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  have : \u2200 x y : \u211d, x * y ^ 2 + y * x ^ 2 = x * y * (x + y) := by\n    intro x y\n    ring\n  simp_all only [mul_assoc]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  have h\u2080 : a * b ^ 2 \u2264 a * b := by\n    nlinarith [sq_nonneg b]\n  have h\u2081 : b * c ^ 2 \u2264 b * c := by\n    nlinarith [sq_nonneg c]\n  have h\u2082 : c * a ^ 2 \u2264 c * a := by\n    nlinarith [sq_nonneg a]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  have h\u2080 : a * b ^ 2 \u2264 a * b := by\n    nlinarith [sq_nonneg (b - c)]\n  have h\u2081 : b * c ^ 2 \u2264 b * c := by\n    nlinarith [sq_nonneg (c - a)]\n  have h\u2082 : c * a ^ 2 \u2264 c * a := by\n    nlinarith [sq_nonneg (a - b)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  have h : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 = a * b ^ 2 + b * c ^ 2 + c * a ^ 2 := rfl\n  have h' : a * b + b * c + c * a = a * b + b * c + c * a := rfl\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  have h : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)     (hab : a + b + c = 1) : a * b ^ 2 + b * c ^ 2 + c * a ^ 2 \u2264 a * b + b * c + c * a := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]"
        ]
    },
    {
        "name": "lean_workbook_55328",
        "split": "test",
        "formal_statement": "theorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by",
        "model_outputs": [
            "\n  rw [sin_sq, sub_eq_add_neg, neg_neg, add_comm]\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  field_simp [sin_sq_add_cos_sq]\n```",
            "\n  rw [sin_sq]\n```",
            "\n  rw [\u2190 cos_sq_add_sin_sq x]\n  ring\n```",
            "\n  rw [sin_sq]\n  simp [cos_sq]\n  ring\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  field_simp [cos_sq]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [sin_sq, sub_eq_add_neg, add_comm]\n```",
            "\n  rw [sin_sq, sub_eq_add_neg, \u2190 neg_sq, cos_sq]\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  field_simp [sin_sq_add_cos_sq x]\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  rw [sin_sq]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 cos_sq_add_sin_sq x]\n  ring\n```",
            "\n  rw [sin_sq, sub_eq_add_neg, add_comm]\n```",
            "\n  rw [sin_sq, sub_eq_add_neg, add_comm]\n```",
            "\n  rw [\u2190 cos_sq_add_sin_sq x]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq, \u2190 sub_eq_zero]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  rw [sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq]\n  simp [cos_sq]\n  ring\n```",
            "\n  rw [sin_sq, sub_eq_iff_eq_add, add_comm]\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [sin_sq, sub_eq_add_neg, add_comm]\n```",
            "\n  rw [sin_sq, sub_eq_add_neg, add_comm]\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  rw [sin_sq]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_add_neg, neg_neg, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sub_eq_zero]\n  field_simp [sin_sq_add_cos_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 cos_sq_add_sin_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq]\n  simp [cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sub_eq_zero]\n  field_simp [cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_add_neg, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_add_neg, \u2190 neg_sq, cos_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sub_eq_zero]\n  field_simp [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sub_eq_zero]\n  rw [sin_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 cos_sq_add_sin_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_add_neg, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_add_neg, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 cos_sq_add_sin_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, cos_sq, \u2190 sub_eq_zero]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  rw [sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq]\n  simp [cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_iff_eq_add, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_add_neg, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_add_neg, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sub_eq_zero]\n  rw [sin_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_31427",
        "split": "test",
        "formal_statement": "theorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by",
        "model_outputs": [
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by rw [h1]; ring\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  have h4 : a^2 + b^2 + c^2 + 2 * a * b + 2 * a * c + 2 * b * c = 9 := by\n    linarith\n  have h5 : 2 * a * b + 2 * a * c + 2 * b * c = 6 := by\n    linarith\n  have h6 : 2 * (a * b + a * c + b * c) = 6 := by\n    linarith\n  have h7 : a * b + a * c + b * c = 3 := by\n    linarith\n  have h8 : c = 1 := by\n    linarith\n  exact h8\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    ring\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    ring\n  have h4 : a ^ 2 + b ^ 2 + c ^ 2 + 2 * (a * b + a * c + b * c) = 9 := by\n    linarith\n  have h5 : 2 * (a * b + a * c + b * c) = 6 := by\n    linarith\n  have h6 : a * b + a * c + b * c = 3 := by\n    linarith\n  have h7 : c ^ 2 - 2 * c + 1 = 0 := by\n    linarith\n  have h8 : (c - 1) ^ 2 = 0 := by\n    linarith\n  have h9 : c - 1 = 0 := by\n    apply eq_of_sub_eq_zero\n    exact h8\n  have h10 : c = 1 := by\n    linarith\n  exact h10\n```",
            "\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    ring\n  have h4 : a^2 + b^2 + c^2 + 2 * (a * b + a * c + b * c) = 9 := by\n    linarith\n  have h5 : 2 * (a * b + a * c + b * c) = 6 := by\n    linarith\n  have h6 : a * b + a * c + b * c = 3 := by\n    linarith\n  have h7 : c^2 = 1 := by\n    linarith\n  have h8 : c = 1 \u2228 c = -1 := by\n    apply eq_or_eq_neg_of_sq_eq_sq\n    linarith\n  cases' h8 with h9 h9\n  exact h9\n  linarith\n```",
            "\n  have h3 : (a + b + c)^2 = 9 := by rw [h1]; ring\n  have h4 : a^2 + b^2 + c^2 + 2 * (a * b + a * c + b * c) = 9 := by\n    rw [\u2190 h3]; ring\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith\n```",
            "\n  have : (a + b + c) ^ 2 = 9 := by rw [h1]; norm_num\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith\n```",
            "\n  have : (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 = 0 := by\n    linarith\n  linarith\n```",
            "\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    ring\n  linarith\n```",
            "\n  have : (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 + 2 * (a * b + a * c + b * c) := by ring\n  rw [h1, h2] at this\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  have h4 : a ^ 2 + b ^ 2 + c ^ 2 + 2 * (a * b + a * c + b * c) = 9 := by\n    linarith\n  have h5 : 2 * (a * b + a * c + b * c) = 6 := by\n    linarith\n  have h6 : a * b + a * c + b * c = 3 := by\n    linarith\n  have h7 : (a - b) ^ 2 + (a - c) ^ 2 + (b - c) ^ 2 = 0 := by\n    linarith\n  have h8 : a = b \u2227 a = c \u2227 b = c := by\n    apply And.intro\n    \u00b7 nlinarith\n    \u00b7 apply And.intro\n      \u00b7 nlinarith\n      \u00b7 nlinarith\n  cases' h8 with h9 h10\n  cases' h10 with h11 h12\n  subst_vars\n  norm_num\n```",
            "\n  have h3 : (a + b + c) ^2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith\n```",
            "\n  have h3 : (a + b + c)^2 = 9 := by\n    nlinarith\n  have h4 : a^2 + b^2 + c^2 + 2 * (a * b + a * c + b * c) = 9 := by\n    linarith\n  have h5 : 2 * (a * b + a * c + b * c) = 6 := by\n    linarith\n  have h6 : a * b + a * c + b * c = 3 := by\n    linarith\n  have h7 : c^2 = 1 := by\n    nlinarith\n  nlinarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by rw [h1]; norm_num\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith\n```",
            "\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^2 = a ^ 2 + b ^ 2 + c ^ 2 + 2 * (a * b + b * c + c * a) := by ring\n  rw [h1, h2] at h3\n  linarith\n```",
            "\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    ring\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    nlinarith\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    nlinarith\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith\n```",
            "\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    ring\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^2 = a^2 + b^2 + c^2 + 2 * (a * b + b * c + c * a) := by\n    ring\n  rw [h1, h2] at h3\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith\n```",
            "\n  have : c^2 - 2*a*c + a^2 + b^2 - 2*b*c + b^2 = 0 := by\n    linarith\n  linarith\n```",
            "\n  have h3 : (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 + 2 * (a * b + b * c + c * a) := by\n    ring\n  rw [h1, h2] at h3\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by rw [h1]; ring\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  have h4 : a^2 + b^2 + c^2 + 2 * a * b + 2 * a * c + 2 * b * c = 9 := by\n    linarith\n  have h5 : 2 * a * b + 2 * a * c + 2 * b * c = 6 := by\n    linarith\n  have h6 : 2 * (a * b + a * c + b * c) = 6 := by\n    linarith\n  have h7 : a * b + a * c + b * c = 3 := by\n    linarith\n  have h8 : c = 1 := by\n    linarith\n  exact h8",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    ring\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    ring\n  have h4 : a ^ 2 + b ^ 2 + c ^ 2 + 2 * (a * b + a * c + b * c) = 9 := by\n    linarith\n  have h5 : 2 * (a * b + a * c + b * c) = 6 := by\n    linarith\n  have h6 : a * b + a * c + b * c = 3 := by\n    linarith\n  have h7 : c ^ 2 - 2 * c + 1 = 0 := by\n    linarith\n  have h8 : (c - 1) ^ 2 = 0 := by\n    linarith\n  have h9 : c - 1 = 0 := by\n    apply eq_of_sub_eq_zero\n    exact h8\n  have h10 : c = 1 := by\n    linarith\n  exact h10",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    ring\n  have h4 : a^2 + b^2 + c^2 + 2 * (a * b + a * c + b * c) = 9 := by\n    linarith\n  have h5 : 2 * (a * b + a * c + b * c) = 6 := by\n    linarith\n  have h6 : a * b + a * c + b * c = 3 := by\n    linarith\n  have h7 : c^2 = 1 := by\n    linarith\n  have h8 : c = 1 \u2228 c = -1 := by\n    apply eq_or_eq_neg_of_sq_eq_sq\n    linarith\n  cases' h8 with h9 h9\n  exact h9\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c)^2 = 9 := by rw [h1]; ring\n  have h4 : a^2 + b^2 + c^2 + 2 * (a * b + a * c + b * c) = 9 := by\n    rw [\u2190 h3]; ring\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have : (a + b + c) ^ 2 = 9 := by rw [h1]; norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have : (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 = 0 := by\n    linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    ring\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have : (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 + 2 * (a * b + a * c + b * c) := by ring\n  rw [h1, h2] at this\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  have h4 : a ^ 2 + b ^ 2 + c ^ 2 + 2 * (a * b + a * c + b * c) = 9 := by\n    linarith\n  have h5 : 2 * (a * b + a * c + b * c) = 6 := by\n    linarith\n  have h6 : a * b + a * c + b * c = 3 := by\n    linarith\n  have h7 : (a - b) ^ 2 + (a - c) ^ 2 + (b - c) ^ 2 = 0 := by\n    linarith\n  have h8 : a = b \u2227 a = c \u2227 b = c := by\n    apply And.intro\n    \u00b7 nlinarith\n    \u00b7 apply And.intro\n      \u00b7 nlinarith\n      \u00b7 nlinarith\n  cases' h8 with h9 h10\n  cases' h10 with h11 h12\n  subst_vars\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c)^2 = 9 := by\n    nlinarith\n  have h4 : a^2 + b^2 + c^2 + 2 * (a * b + a * c + b * c) = 9 := by\n    linarith\n  have h5 : 2 * (a * b + a * c + b * c) = 6 := by\n    linarith\n  have h6 : a * b + a * c + b * c = 3 := by\n    linarith\n  have h7 : c^2 = 1 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by rw [h1]; norm_num\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^2 = a ^ 2 + b ^ 2 + c ^ 2 + 2 * (a * b + b * c + c * a) := by ring\n  rw [h1, h2] at h3\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    ring\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c)^2 = 9 := by\n    rw [h1]\n    ring\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^2 = a^2 + b^2 + c^2 + 2 * (a * b + b * c + c * a) := by\n    ring\n  rw [h1, h2] at h3\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = 9 := by\n    rw [h1]\n    norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have : c^2 - 2*a*c + a^2 + b^2 - 2*b*c + b^2 = 0 := by\n    linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem c_eq_4 (a b c : \u211d) (h1 : a + b + c = 3) (h2 : a^2 + b^2 + c^2 = 3) : c = 1 := by\n  have h3 : (a + b + c) ^ 2 = a ^ 2 + b ^ 2 + c ^ 2 + 2 * (a * b + b * c + c * a) := by\n    ring\n  rw [h1, h2] at h3\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_plus_75322",
        "split": "test",
        "formal_statement": "theorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by",
        "model_outputs": [
            "\n  cases' abs_le.mp h with h\u2081 h\u2082\n  nlinarith\n```",
            "\n  rw [abs_le] at h\n  nlinarith\n```",
            "\n  rw [sq]\n  have h\u2081 : -1 \u2264 x := by\n    linarith [abs_le.mp h]\n  have h\u2082 : x \u2264 1 := by\n    linarith [abs_le.mp h]\n  nlinarith\n```",
            "\n  rw [sq, \u2190 abs_mul_abs_self x]\n  exact mul_le_one (abs_nonneg x) h (abs_nonneg x)\n```",
            "\n  have h\u2081 : x ^ 2 = |x| ^ 2 := by rw [abs_pow]\n  rw [h\u2081]\n  exact pow_le_one _ (abs_nonneg _) h\n```",
            "\n  rw [abs_le] at h\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg x, h]\n```",
            "\n  rw [abs_le] at h\n  cases' h with h\u2081 h\u2082\n  nlinarith\n```",
            "\n  cases' abs_cases x with h\u2081 h\u2081 <;> simp_all only [abs_of_nonneg, abs_of_nonpos, le_refl, le_of_lt,\n    mul_neg, mul_one] <;> nlinarith\n```",
            "\n  cases' le_or_lt 0 x with hx hx\n  nlinarith [abs_le.mp h]\n  rw [abs_of_neg (by linarith)] at h\n  nlinarith [abs_le.mp h]\n```",
            "\n  nlinarith [abs_mul_abs_self x]\n```",
            "\n  rw [abs_le] at h\n  nlinarith\n```",
            "\n  nlinarith [abs_mul_abs_self x]\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [abs_le.mp h]\n```",
            "\n  nlinarith [abs_le.mp h]\n```",
            "\n  cases' abs_cases x with h\u2080 h\u2080 <;> simp_all\n  <;> nlinarith\n```",
            "\n  have h\u2081 : -1 \u2264 x := by linarith [abs_le.mp h]\n  have h\u2082 : x \u2264 1 := by linarith [abs_le.mp h]\n  nlinarith\n```",
            "\n  nlinarith [abs_le.mp h]\n```",
            "\n  have h' : |x| ^ 2 \u2264 1 ^ 2 := by gcongr\n  simpa only [abs_one, one_pow, pow_two] using h'\n```",
            "\n  cases' abs_cases x with hx hx <;> nlinarith\n```",
            "\n  have : |x| ^ 2 \u2264 1 ^ 2 := by\n    nlinarith\n  simp only [abs_pow, one_pow] at this\n  nlinarith\n```",
            "\n  rw [sq]\n  nlinarith [abs_le.mp h]\n```",
            "\n  rw [abs_le] at h\n  have h\u2081 : -1 \u2264 x := by linarith\n  have h\u2082 : x \u2264 1 := by linarith\n  rw [sq]\n  exact mul_le_one' h\u2081 h\u2082\n```",
            "\n  nlinarith [abs_le.mp h]\n```",
            "\n  nlinarith [abs_mul_abs_self x]\n```",
            "\n  cases' abs_cases x with hx hx <;>\n    simp_all only [abs_of_nonneg, abs_of_nonpos, pow_two] <;>\n      nlinarith\n```",
            "\n  rw [sq, abs_mul_self_eq_mul_self_iff]\n  linarith\n```",
            "\n  rw [sq, \u2190 abs_one]\n  exact (abs_le_abs_iff_mul_self_le (by linarith)).mpr h\n```",
            "\n  cases le_total 0 x <;> cases le_total 0 (x ^ 2) <;> simp_all [abs_of_nonneg, abs_of_nonpos,\n    sq_nonneg] <;> linarith\n```",
            "\n  nlinarith [abs_mul_self x]\n```",
            "\n  rw [sq]\n  nlinarith [abs_le.mp h]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  cases' abs_le.mp h with h\u2081 h\u2082\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  rw [abs_le] at h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  rw [sq]\n  have h\u2081 : -1 \u2264 x := by\n    linarith [abs_le.mp h]\n  have h\u2082 : x \u2264 1 := by\n    linarith [abs_le.mp h]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  rw [sq, \u2190 abs_mul_abs_self x]\n  exact mul_le_one (abs_nonneg x) h (abs_nonneg x)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  have h\u2081 : x ^ 2 = |x| ^ 2 := by rw [abs_pow]\n  rw [h\u2081]\n  exact pow_le_one _ (abs_nonneg _) h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  rw [abs_le] at h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  nlinarith [sq_nonneg x, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  rw [abs_le] at h\n  cases' h with h\u2081 h\u2082\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  cases' abs_cases x with h\u2081 h\u2081 <;> simp_all only [abs_of_nonneg, abs_of_nonpos, le_refl, le_of_lt,\n    mul_neg, mul_one] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  cases' le_or_lt 0 x with hx hx\n  nlinarith [abs_le.mp h]\n  rw [abs_of_neg (by linarith)] at h\n  nlinarith [abs_le.mp h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  nlinarith [abs_mul_abs_self x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  rw [abs_le] at h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  nlinarith [abs_mul_abs_self x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  nlinarith [abs_le.mp h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  nlinarith [abs_le.mp h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  cases' abs_cases x with h\u2080 h\u2080 <;> simp_all\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  have h\u2081 : -1 \u2264 x := by linarith [abs_le.mp h]\n  have h\u2082 : x \u2264 1 := by linarith [abs_le.mp h]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  nlinarith [abs_le.mp h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  have h' : |x| ^ 2 \u2264 1 ^ 2 := by gcongr\n  simpa only [abs_one, one_pow, pow_two] using h'",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  cases' abs_cases x with hx hx <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  have : |x| ^ 2 \u2264 1 ^ 2 := by\n    nlinarith\n  simp only [abs_pow, one_pow] at this\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  rw [sq]\n  nlinarith [abs_le.mp h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  rw [abs_le] at h\n  have h\u2081 : -1 \u2264 x := by linarith\n  have h\u2082 : x \u2264 1 := by linarith\n  rw [sq]\n  exact mul_le_one' h\u2081 h\u2082",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  nlinarith [abs_le.mp h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  nlinarith [abs_mul_abs_self x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  cases' abs_cases x with hx hx <;>\n    simp_all only [abs_of_nonneg, abs_of_nonpos, pow_two] <;>\n      nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  rw [sq, abs_mul_self_eq_mul_self_iff]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  rw [sq, \u2190 abs_one]\n  exact (abs_le_abs_iff_mul_self_le (by linarith)).mpr h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  cases le_total 0 x <;> cases le_total 0 (x ^ 2) <;> simp_all [abs_of_nonneg, abs_of_nonpos,\n    sq_nonneg] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  nlinarith [abs_mul_self x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_le_two_of_abs_le_one {x : \u211d} (h : |x| \u2264 1) : x ^ 2 \u2264 1 := by\n  rw [sq]\n  nlinarith [abs_le.mp h]"
        ]
    },
    {
        "name": "lean_workbook_plus_44384",
        "split": "test",
        "formal_statement": "theorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by",
        "model_outputs": [
            "\n  intro n; induction n <;> simp [Finset.sum_range_succ, add_mul, mul_add, *] <;> ring\n```",
            "\n  intro n; induction n <;> simp_all [Finset.sum_range_succ, Nat.succ_eq_add_one]\n  ring_nf\n  linarith\n```",
            "\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n    ring\n```",
            "\n  intro n\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```",
            "\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.succ_eq_add_one]\n    ring_nf\n    nlinarith\n```",
            "\n  intro n\n  induction' n with n ih\n  simp\n  simp only [Finset.sum_range_succ, Nat.cast_add, ih]\n  ring\n```",
            "\n  intro n\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n  apply Eq.symm\n  rw [\u2190 Nat.cast_inj (R := \u211a)]\n  simp only [Nat.cast_add, Nat.cast_mul, Nat.cast_one, Nat.cast_zero, add_zero]\n  rw [Finset.sum_range_succ']\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n```",
            "\n  intro n; induction n <;> simp [*, Finset.sum_range_succ, mul_add, add_mul] <;> ring\n```",
            "\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n    linarith\n```",
            "\n  intro n\n  induction n with\n  | zero => simp\n  | succ n h =>\n    simp_all [Finset.range_succ, Finset.sum_range_succ, Nat.succ_mul, Nat.mul_succ, Nat.mul_one,\n      Nat.add_assoc]\n    linarith\n```",
            "\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.succ_mul, Nat.mul_succ, Nat.mul_one, Nat.add_comm,\n      Nat.add_left_comm]\n    linarith\n```",
            "\n  intro n\n  simp only [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  ring\n  simp\n  omega\n```",
            "\n  intro n\n  induction' n with n IH\n  simp\n  rw [Finset.sum_range_succ, Nat.succ_mul, IH]\n  simp [Finset.sum_range_succ, Nat.succ_mul, add_assoc, add_comm, add_left_comm]\n  ring\n```",
            "\n  intro n\n  simp [mul_sum, sum_range_succ, mul_comm, mul_left_comm, mul_assoc]\n```",
            "\n  intro n; induction n <;> simp [Finset.sum_range_succ, *] <;> ring\n```",
            "\n  intro n; induction n <;> simp [*, Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm,\n    mul_assoc] at * <;>\n  linarith\n```",
            "\n  intro n\n  simp only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, zero_mul,\n    zero_add, Nat.cast_id]\n  nlinarith\n```",
            "\n  intro n\n  induction n <;> simp [Finset.sum_range_succ, Nat.succ_mul, Nat.add_mul, *] <;> ring\n```",
            "\n  intro n; induction n <;> simp_all [Finset.sum_range_succ, mul_add, add_mul, mul_comm, mul_left_comm]\n  linarith\n```",
            "\n  intro n; simp [Finset.sum_range_succ]\n  ring_nf\n  simp [Finset.sum_range_succ, Nat.mul_comm]\n  ring_nf\n  simp [Finset.sum_range_succ, Nat.mul_comm]\n  ring_nf\n  simp [Finset.sum_range_succ, Nat.mul_comm]\n  ring_nf\n  simp [Finset.sum_range_succ, Nat.mul_comm]\n  ring_nf\n```",
            "\n  intro n\n  induction n <;> simp [*, Finset.sum_range_succ, add_mul, mul_add, mul_comm, mul_left_comm,\n    mul_assoc] at *\n  linarith\n```",
            "\n  intro n\n  rw [Finset.sum_range_id]\n  ring_nf\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring_nf\n```",
            "\n  intro n\n  rw [Finset.sum_range_induction]\n  simp [Nat.mul_comm]\n```",
            "\n  intro n\n  induction n <;> simp_all [Finset.sum_range_succ, Nat.mul_succ, Nat.mul_zero, Nat.add_zero]\n  ring_nf\n  linarith\n```",
            "\n  intro n; induction n <;> simp [*, Finset.sum_range_succ, mul_add] <;> ring\n```",
            "\n  intro n; induction n <;> simp_all [Finset.sum_range_succ, mul_add, mul_comm]\n  ring_nf\n  linarith\n```",
            "\n  intro n\n  induction' n with n ih\n  simp\n  rw [Finset.sum_range_succ, Finset.sum_range_succ, ih]\n  ring\n```",
            "\n  intro n; induction n <;> simp [*, Finset.sum_range_succ, mul_add, add_mul, mul_comm, mul_left_comm]\n  <;> linarith\n```",
            "\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn]\n    simp [Finset.sum_range_succ, mul_add, add_mul, mul_comm, mul_left_comm]\n    ring\n```",
            "\n  intro n\n  induction' n with n ih\n  simp\n  simp only [Finset.sum_range_succ, ih]\n  ring\n```",
            "\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n    ring\n```",
            "\n  intro n\n  cases n <;> simp [Finset.sum_range_succ, Nat.succ_mul, mul_add, add_mul]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n; induction n <;> simp [Finset.sum_range_succ, add_mul, mul_add, *] <;> ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n; induction n <;> simp_all [Finset.sum_range_succ, Nat.succ_eq_add_one]\n  ring_nf\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.succ_eq_add_one]\n    ring_nf\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction' n with n ih\n  simp\n  simp only [Finset.sum_range_succ, Nat.cast_add, ih]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring\n  apply Eq.symm\n  rw [\u2190 Nat.cast_inj (R := \u211a)]\n  simp only [Nat.cast_add, Nat.cast_mul, Nat.cast_one, Nat.cast_zero, add_zero]\n  rw [Finset.sum_range_succ']\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n; induction n <;> simp [*, Finset.sum_range_succ, mul_add, add_mul] <;> ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction n with\n  | zero => simp\n  | succ n h =>\n    simp_all [Finset.range_succ, Finset.sum_range_succ, Nat.succ_mul, Nat.mul_succ, Nat.mul_one,\n      Nat.add_assoc]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.succ_mul, Nat.mul_succ, Nat.mul_one, Nat.add_comm,\n      Nat.add_left_comm]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  simp only [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  ring\n  simp\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction' n with n IH\n  simp\n  rw [Finset.sum_range_succ, Nat.succ_mul, IH]\n  simp [Finset.sum_range_succ, Nat.succ_mul, add_assoc, add_comm, add_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  simp [mul_sum, sum_range_succ, mul_comm, mul_left_comm, mul_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n; induction n <;> simp [Finset.sum_range_succ, *] <;> ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n; induction n <;> simp [*, Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm,\n    mul_assoc] at * <;>\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  simp only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, zero_mul,\n    zero_add, Nat.cast_id]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction n <;> simp [Finset.sum_range_succ, Nat.succ_mul, Nat.add_mul, *] <;> ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n; induction n <;> simp_all [Finset.sum_range_succ, mul_add, add_mul, mul_comm, mul_left_comm]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n; simp [Finset.sum_range_succ]\n  ring_nf\n  simp [Finset.sum_range_succ, Nat.mul_comm]\n  ring_nf\n  simp [Finset.sum_range_succ, Nat.mul_comm]\n  ring_nf\n  simp [Finset.sum_range_succ, Nat.mul_comm]\n  ring_nf\n  simp [Finset.sum_range_succ, Nat.mul_comm]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction n <;> simp [*, Finset.sum_range_succ, add_mul, mul_add, mul_comm, mul_left_comm,\n    mul_assoc] at *\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  rw [Finset.sum_range_id]\n  ring_nf\n  simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  rw [Finset.sum_range_induction]\n  simp [Nat.mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction n <;> simp_all [Finset.sum_range_succ, Nat.mul_succ, Nat.mul_zero, Nat.add_zero]\n  ring_nf\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n; induction n <;> simp [*, Finset.sum_range_succ, mul_add] <;> ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n; induction n <;> simp_all [Finset.sum_range_succ, mul_add, mul_comm]\n  ring_nf\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction' n with n ih\n  simp\n  rw [Finset.sum_range_succ, Finset.sum_range_succ, ih]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n; induction n <;> simp [*, Finset.sum_range_succ, mul_add, add_mul, mul_comm, mul_left_comm]\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn]\n    simp [Finset.sum_range_succ, mul_add, add_mul, mul_comm, mul_left_comm]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction' n with n ih\n  simp\n  simp only [Finset.sum_range_succ, ih]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n    ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Solution_157332 : \u2200 n : \u2115, (\u2211 k in Finset.range n, k * (n - k)) = n * \u2211 k in Finset.range n, k := by\n  intro n\n  cases n <;> simp [Finset.sum_range_succ, Nat.succ_mul, mul_add, add_mul]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_50431",
        "split": "test",
        "formal_statement": "theorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by",
        "model_outputs": [
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.mpr (by linarith), Real.exp_le_exp.mpr (by linarith), Real.exp_le_exp.mpr (by linarith), Real.exp_le_exp.mpr (by linarith)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.mpr (by linarith)]\n```",
            "\n  intro h1 h2 h3 h4 h5 h6 h7 h8 h9; nlinarith [Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro hw\u2081 hw\u2082 hw\u2083 hw\u2084 hp\u2081 hp\u2082 hp\u2083 hp\u2084\n  nlinarith [Real.exp_le_exp.2 (by linarith : p\u2081 \u2264 p\u2082), Real.exp_le_exp.2 (by linarith : p\u2082 \u2264 p\u2083),\n    Real.exp_le_exp.2 (by linarith : p\u2083 \u2264 p\u2084)]\n```",
            "\n  intro h1 h2 h3 h4 h5 h6 h7 h8 h9\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [add_assoc, add_left_comm, add_right_comm, mul_add, mul_comm, mul_left_comm,\n    mul_right_comm]\n  nlinarith [sq_nonneg (w\u2081 * (Real.exp p\u2081 - p\u2081) + w\u2082 * (Real.exp p\u2082 - p\u2082) + w\u2083 * (Real.exp p\u2083 - p\u2083) + w\u2084 * (Real.exp p\u2084 - p\u2084))]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088; nlinarith [Real.exp_le_exp.2 (by nlinarith : p\u2081 \u2264 Real.log (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084))]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.add_le_add_left (Real.exp_le_exp.2 (by nlinarith)) w\u2081]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro h1 h2 h3 h4 h5 h6 h7 h8 h9\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084\n  nlinarith [Real.add_one_le_exp (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084),\n    Real.add_one_le_exp (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by nlinarith : p\u2081 \u2264 p\u2084), Real.exp_le_exp.2 (by nlinarith : p\u2082 \u2264 p\u2084),\n    Real.exp_le_exp.2 (by nlinarith : p\u2083 \u2264 p\u2084), Real.exp_le_exp.2 (by nlinarith : p\u2084 \u2264 p\u2084)]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro hw hwp\n  norm_num\n  nlinarith\n```",
            "\n  intro h1 h2 h3 h4 h5 h6 h7 h8 h9\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.mpr h\u2085, Real.exp_le_exp.mpr h\u2086, Real.exp_le_exp.mpr h\u2087,\n    Real.exp_le_exp.mpr h\u2088]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 h\u2085, Real.exp_le_exp.2 h\u2086, Real.exp_le_exp.2 h\u2087, Real.exp_le_exp.2 h\u2088]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro hw h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087\n  nlinarith [Real.exp_le_exp.2 (le_of_lt (show (0 : \u211d) < 1 by norm_num))]\n```",
            "\n  intro hw\u2081 hw\u2082 hw\u2083 hw\u2084 hp\u2081 hp\u2082 hp\u2083 hp\u2084\n  simp_all only [mul_one, mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [Real.add_one_le_exp (p\u2081 - 1), Real.add_one_le_exp (p\u2082 - 1),\n    Real.add_one_le_exp (p\u2083 - 1), Real.add_one_le_exp (p\u2084 - 1)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 h\u2085, Real.exp_le_exp.2 h\u2086, Real.exp_le_exp.2 h\u2087, Real.exp_le_exp.2 h\u2088]\n```",
            "\n  intro hw w\u2081_nonneg w\u2082_nonneg w\u2083_nonneg w\u2084_nonneg p\u2081_nonneg p\u2082_nonneg p\u2083_nonneg p\u2084_nonneg\n  nlinarith [Real.add_one_le_exp_of_nonneg (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084)]\n```",
            "\n  intro hw\u2081 h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 h\u2081, Real.exp_le_exp.2 h\u2082, Real.exp_le_exp.2 h\u2083,\n    Real.exp_le_exp.2 h\u2084]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.mpr (by nlinarith)]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [Real.exp_le_exp.2 (by linarith : p\u2081 \u2264 p\u2082), Real.exp_le_exp.2 (by linarith : p\u2083 \u2264 p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by nlinarith), Real.exp_le_exp.2 (by nlinarith),\n    Real.exp_le_exp.2 (by nlinarith), Real.exp_le_exp.2 (by nlinarith)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.mpr (by linarith), Real.exp_le_exp.mpr (by linarith), Real.exp_le_exp.mpr (by linarith), Real.exp_le_exp.mpr (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.mpr (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h1 h2 h3 h4 h5 h6 h7 h8 h9; nlinarith [Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro hw\u2081 hw\u2082 hw\u2083 hw\u2084 hp\u2081 hp\u2082 hp\u2083 hp\u2084\n  nlinarith [Real.exp_le_exp.2 (by linarith : p\u2081 \u2264 p\u2082), Real.exp_le_exp.2 (by linarith : p\u2082 \u2264 p\u2083),\n    Real.exp_le_exp.2 (by linarith : p\u2083 \u2264 p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h1 h2 h3 h4 h5 h6 h7 h8 h9\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [add_assoc, add_left_comm, add_right_comm, mul_add, mul_comm, mul_left_comm,\n    mul_right_comm]\n  nlinarith [sq_nonneg (w\u2081 * (Real.exp p\u2081 - p\u2081) + w\u2082 * (Real.exp p\u2082 - p\u2082) + w\u2083 * (Real.exp p\u2083 - p\u2083) + w\u2084 * (Real.exp p\u2084 - p\u2084))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088; nlinarith [Real.exp_le_exp.2 (by nlinarith : p\u2081 \u2264 Real.log (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.add_le_add_left (Real.exp_le_exp.2 (by nlinarith)) w\u2081]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h1 h2 h3 h4 h5 h6 h7 h8 h9\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084\n  nlinarith [Real.add_one_le_exp (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084),\n    Real.add_one_le_exp (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by nlinarith : p\u2081 \u2264 p\u2084), Real.exp_le_exp.2 (by nlinarith : p\u2082 \u2264 p\u2084),\n    Real.exp_le_exp.2 (by nlinarith : p\u2083 \u2264 p\u2084), Real.exp_le_exp.2 (by nlinarith : p\u2084 \u2264 p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro hw hwp\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h1 h2 h3 h4 h5 h6 h7 h8 h9\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.mpr h\u2085, Real.exp_le_exp.mpr h\u2086, Real.exp_le_exp.mpr h\u2087,\n    Real.exp_le_exp.mpr h\u2088]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 h\u2085, Real.exp_le_exp.2 h\u2086, Real.exp_le_exp.2 h\u2087, Real.exp_le_exp.2 h\u2088]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro hw h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087\n  nlinarith [Real.exp_le_exp.2 (le_of_lt (show (0 : \u211d) < 1 by norm_num))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro hw\u2081 hw\u2082 hw\u2083 hw\u2084 hp\u2081 hp\u2082 hp\u2083 hp\u2084\n  simp_all only [mul_one, mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [Real.add_one_le_exp (p\u2081 - 1), Real.add_one_le_exp (p\u2082 - 1),\n    Real.add_one_le_exp (p\u2083 - 1), Real.add_one_le_exp (p\u2084 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 h\u2085, Real.exp_le_exp.2 h\u2086, Real.exp_le_exp.2 h\u2087, Real.exp_le_exp.2 h\u2088]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro hw w\u2081_nonneg w\u2082_nonneg w\u2083_nonneg w\u2084_nonneg p\u2081_nonneg p\u2082_nonneg p\u2083_nonneg p\u2084_nonneg\n  nlinarith [Real.add_one_le_exp_of_nonneg (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro hw\u2081 h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 h\u2081, Real.exp_le_exp.2 h\u2082, Real.exp_le_exp.2 h\u2083,\n    Real.exp_le_exp.2 h\u2084]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.mpr (by nlinarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [Real.exp_le_exp.2 (by linarith : p\u2081 \u2264 p\u2082), Real.exp_le_exp.2 (by linarith : p\u2083 \u2264 p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith),\n    Real.exp_le_exp.2 (by linarith), Real.exp_le_exp.2 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264 w\u2081 * Real.exp p\u2081 + w\u2082 * Real.exp p\u2082 + w\u2083 * Real.exp p\u2083 + w\u2084 * Real.exp p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [Real.exp_le_exp.2 (by nlinarith), Real.exp_le_exp.2 (by nlinarith),\n    Real.exp_le_exp.2 (by nlinarith), Real.exp_le_exp.2 (by nlinarith)]"
        ]
    },
    {
        "name": "lean_workbook_plus_47861",
        "split": "test",
        "formal_statement": "theorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by",
        "model_outputs": [
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  simp [Int.cast_mul]\n```",
            "\n  rcases hx with \u27e8n, rfl\u27e9\n  rcases hy with \u27e8m, rfl\u27e9\n  use n * m\n  norm_cast\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [Int.cast_mul]\u27e9\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  simp [Int.cast_mul]\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [Int.cast_mul]\u27e9\n```",
            "\n  rcases hx with \u27e8nx, rfl\u27e9\n  rcases hy with \u27e8ny, rfl\u27e9\n  use nx * ny\n  simp [Int.cast_mul]\n```",
            "\n  cases' hx with n hn\n  cases' hy with m hm\n  use n * m\n  rw [hn, hm]\n  norm_cast\n```",
            "\n  cases' hx with n hn\n  cases' hy with m hm\n  use n * m\n  rw [hn, hm]\n  norm_cast\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [mul_comm, mul_assoc, mul_left_comm]\u27e9\n```",
            "\n  cases' hx with n hn\n  cases' hy with m hm\n  use n * m\n  rw [hn, hm]\n  ring\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  norm_cast\n```",
            "\n  cases' hx with n hx\n  cases' hy with m hy\n  use n * m\n  rw [hx, hy]\n  norm_cast\n```",
            "\n  cases' hx with n hn\n  cases' hy with m hm\n  use n * m\n  rw [hn, hm]\n  norm_cast\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  ring\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  simp [mul_comm]\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [mul_comm, mul_assoc, mul_left_comm]\u27e9\n```",
            "\n  cases' hx with n hn; cases' hy with m hm; subst hn; subst hm; use n * m; ring\n```",
            "\n  cases' hx with n hx\n  cases' hy with m hy\n  use n * m\n  rw [hx, hy]\n  norm_cast\n```",
            "\n  cases' hx with n hn\n  cases' hy with m hm\n  use n * m\n  rw [hn, hm]\n  ring\n```",
            "\n  cases' hx with n hx; cases' hy with m hy; use n * m; rw [hx, hy]; ring\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  norm_cast\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  norm_cast\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  ring\n```",
            "\n  cases hx with\n  | intro n hn =>\n    cases hy with\n    | intro m hm =>\n      use n * m\n      rw [hn, hm]\n      norm_cast\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [Int.cast_mul]\u27e9\n```",
            "\n  rcases hx with \u27e8n, rfl\u27e9\n  rcases hy with \u27e8m, rfl\u27e9\n  use n * m\n  ring\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  ring\n```",
            "\n  rcases hx with \u27e8x_n, rfl\u27e9\n  rcases hy with \u27e8y_n, rfl\u27e9\n  exact \u27e8x_n * y_n, by simp [Int.cast_mul]\u27e9\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [mul_comm]\u27e9\n```",
            "\n  cases' hx with n hx\n  cases' hy with m hy\n  use n * m\n  rw [hx, hy]\n  norm_cast\n```",
            "\n  cases' hx with n hn; subst hn; cases' hy with m hm; subst hm; exact \u27e8n * m, by simp [mul_comm]\u27e9\n```",
            "\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp\u27e9\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  simp [Int.cast_mul]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  rcases hx with \u27e8n, rfl\u27e9\n  rcases hy with \u27e8m, rfl\u27e9\n  use n * m\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [Int.cast_mul]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  simp [Int.cast_mul]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [Int.cast_mul]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  rcases hx with \u27e8nx, rfl\u27e9\n  rcases hy with \u27e8ny, rfl\u27e9\n  use nx * ny\n  simp [Int.cast_mul]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases' hx with n hn\n  cases' hy with m hm\n  use n * m\n  rw [hn, hm]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases' hx with n hn\n  cases' hy with m hm\n  use n * m\n  rw [hn, hm]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [mul_comm, mul_assoc, mul_left_comm]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases' hx with n hn\n  cases' hy with m hm\n  use n * m\n  rw [hn, hm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases' hx with n hx\n  cases' hy with m hy\n  use n * m\n  rw [hx, hy]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases' hx with n hn\n  cases' hy with m hm\n  use n * m\n  rw [hn, hm]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  simp [mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [mul_comm, mul_assoc, mul_left_comm]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases' hx with n hn; cases' hy with m hm; subst hn; subst hm; use n * m; ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases' hx with n hx\n  cases' hy with m hy\n  use n * m\n  rw [hx, hy]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases' hx with n hn\n  cases' hy with m hm\n  use n * m\n  rw [hn, hm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases' hx with n hx; cases' hy with m hy; use n * m; rw [hx, hy]; ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases hx with\n  | intro n hn =>\n    cases hy with\n    | intro m hm =>\n      use n * m\n      rw [hn, hm]\n      norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [Int.cast_mul]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  rcases hx with \u27e8n, rfl\u27e9\n  rcases hy with \u27e8m, rfl\u27e9\n  use n * m\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  use n * m\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  rcases hx with \u27e8x_n, rfl\u27e9\n  rcases hy with \u27e8y_n, rfl\u27e9\n  exact \u27e8x_n * y_n, by simp [Int.cast_mul]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp [mul_comm]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases' hx with n hx\n  cases' hy with m hy\n  use n * m\n  rw [hx, hy]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  cases' hx with n hn; subst hn; cases' hy with m hm; subst hm; exact \u27e8n * m, by simp [mul_comm]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem rex_mul {x : \u211d} (hx : \u2203 n : \u2124, x = n) {y : \u211d} (hy : \u2203 n : \u2124, y = n) :     \u2203 n : \u2124, x * y = n := by\n  obtain \u27e8n, rfl\u27e9 := hx\n  obtain \u27e8m, rfl\u27e9 := hy\n  exact \u27e8n * m, by simp\u27e9"
        ]
    },
    {
        "name": "lean_workbook_27794",
        "split": "test",
        "formal_statement": "theorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by",
        "model_outputs": [
            "\n  ring\n```",
            " ring\n```",
            " ring\n```",
            "\n  ring_nf\n```",
            "\n  rw [mul_left_comm]\n  ring\n```",
            " ring\n```",
            " ring\n```",
            "\n  ring\n```",
            "\n  simp only [mul_assoc, mul_comm, mul_left_comm]\n  ring\n```",
            "\n  ring\n```",
            " ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            " ring\n```",
            " ring\n```",
            " ring\n```",
            " ring\n```",
            "\n  ring\n```",
            " ring\n```",
            "\n  field_simp [mul_assoc]\n  ring\n```",
            " ring\n```",
            "\n  ring\n```",
            " ring\n```",
            " ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  ring\n```",
            "\n  rw [mul_left_comm, mul_comm]\n```",
            " ring\n```",
            " ring\n```",
            " ring\n```",
            " ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  rw [mul_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  simp only [mul_assoc, mul_comm, mul_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  field_simp [mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by\n  rw [mul_left_comm, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem a_mul_two_mul_b_mul_c (a b c : \u211d) : a * (2 * b * c) = a * b * (2 * c) := by ring"
        ]
    },
    {
        "name": "lean_workbook_plus_28887",
        "split": "test",
        "formal_statement": "theorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by",
        "model_outputs": [
            "\n  have : 0 \u2264 x - 1 := by linarith\n  nlinarith\n```",
            "\n  have : 0 < x := by linarith\n  nlinarith\n```",
            "\n  nlinarith [hle]\n```",
            "\n  linarith [mul_le_mul_of_nonneg_left hle (zero_le_one.trans hle)]\n```",
            "\n  rw [\u2190 one_mul y]\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [hle]\n```",
            "\n  linarith\n```",
            "\n  nlinarith\n```",
            "\n  have key := mul_le_mul_of_nonneg_right hle h\n  linarith\n```",
            "\n  have h2 : 0 \u2264 x * y := mul_nonneg (le_trans zero_le_one hle) h\n  nlinarith\n```",
            "\n  have : x + y \u2264 x * y := by nlinarith\n  exact this\n```",
            "\n  have h\u2082 : 0 \u2264 x * y := mul_nonneg (zero_le_one.trans hle) h\n  linarith\n```",
            "\n  nlinarith\n```",
            "\n  have : 0 \u2264 x * y := by positivity\n  nlinarith\n```",
            "\n  rw [\u2190 mul_one x]\n  linarith\n```",
            "\n  have : 0 \u2264 x := by linarith\n  nlinarith\n```",
            "\n  have : 0 \u2264 x * y := mul_nonneg (le_trans zero_le_one hle) h\n  linarith\n```",
            "\n  rw [\u2190 mul_one x]\n  nlinarith\n```",
            "\n  nlinarith [mul_le_mul_of_nonneg_left hle (by linarith : 0 \u2264 y)]\n```",
            "\n  nlinarith\n```",
            "\n  have key : x * y \u2265 x + y := by\n    nlinarith\n  linarith\n```",
            "\n  nlinarith [mul_nonneg h (by linarith : 0 \u2264 x - 1)]\n```",
            "\n  nlinarith\n```",
            "\n  have : 0 \u2264 x * y - y := by linarith\n  linarith\n```",
            "\n  have : 0 \u2264 x * y := mul_nonneg (zero_le_one.trans hle) h\n  linarith\n```",
            "\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one y]\n  nlinarith\n```",
            "\n  have h\u2081 : 0 < x := by linarith\n  have h\u2082 : 0 \u2264 x * y := by positivity\n  linarith\n```",
            "\n  have : 0 < x := lt_of_lt_of_le zero_lt_one hle\n  nlinarith\n```",
            "\n  rw [\u2190 mul_one x]\n  nlinarith\n```",
            "\n  have h\u2082 : 0 \u2264 x * y := mul_nonneg (zero_le_one.trans hle) h\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have : 0 \u2264 x - 1 := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have : 0 < x := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  nlinarith [hle]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  linarith [mul_le_mul_of_nonneg_left hle (zero_le_one.trans hle)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  rw [\u2190 one_mul y]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  nlinarith [hle]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have key := mul_le_mul_of_nonneg_right hle h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have h2 : 0 \u2264 x * y := mul_nonneg (le_trans zero_le_one hle) h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have : x + y \u2264 x * y := by nlinarith\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have h\u2082 : 0 \u2264 x * y := mul_nonneg (zero_le_one.trans hle) h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have : 0 \u2264 x * y := by positivity\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  rw [\u2190 mul_one x]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have : 0 \u2264 x := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have : 0 \u2264 x * y := mul_nonneg (le_trans zero_le_one hle) h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  rw [\u2190 mul_one x]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  nlinarith [mul_le_mul_of_nonneg_left hle (by linarith : 0 \u2264 y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have key : x * y \u2265 x + y := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  nlinarith [mul_nonneg h (by linarith : 0 \u2264 x - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have : 0 \u2264 x * y - y := by linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have : 0 \u2264 x * y := mul_nonneg (zero_le_one.trans hle) h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_one y]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have h\u2081 : 0 < x := by linarith\n  have h\u2082 : 0 \u2264 x * y := by positivity\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have : 0 < x := lt_of_lt_of_le zero_lt_one hle\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  rw [\u2190 mul_one x]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (h : 0 \u2264 y) (hle : 1 \u2264 x) : x + y \u2264 x * y := by\n  have h\u2082 : 0 \u2264 x * y := mul_nonneg (zero_le_one.trans hle) h\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_21539",
        "split": "test",
        "formal_statement": "theorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by",
        "model_outputs": [
            "\n  have h\u2081 : 0 < n := by linarith\n  rw [div_le_div_iff] <;> nlinarith [Finset.sum_le_sum_of_subset_of_nonneg (Finset.range_mono h\u2081.le)\n    (fun i _ _ \u21a6 hf i (Finset.mem_range.1 \u2039_\u203a).le)]\n```",
            "\n  rw [div_le_div_iff]\n  nlinarith\n  all_goals nlinarith\n```",
            "\n  cases n with\n  | zero =>\n    simp [Finset.sum_range_succ]\n  | succ n =>\n    simp_all [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero, Nat.cast_add]\n    apply le_of_not_lt\n    intro h\n    have h\u2080 := Finset.sum_range_succ f n\n    have h\u2081 := Finset.sum_range_succ f n\n    simp_all\n    linarith\n```",
            "\n  cases n with\n  | zero =>\n    simp [Finset.sum_range_succ]\n  | succ n =>\n    simp_all [Finset.sum_range_succ, Nat.cast_succ, Nat.succ_eq_add_one]\n    field_simp\n    ring_nf\n    nlinarith\n```",
            "\n  cases n with\n  | zero =>\n    simp [Finset.range_zero, Finset.sum_empty]\n  | succ n =>\n    simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n    exact div_le_div_of_le_of_nonneg\n      (by linarith)\n      (by linarith [Nat.zero_le n])\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp_all [Finset.sum_range_succ, Nat.succ_eq_add_one]\n    exact (div_le_div_right (show (0 : \u211d) < n by linarith)).mpr (by linarith)\n```",
            "\n  cases n\n  case zero => simp\n  case succ n =>\n    norm_num\n    rw [div_le_div_iff]\n    nlinarith\n    nlinarith\n    nlinarith\n```",
            "\n  rw [div_le_div_iff]\n  nlinarith\n  all_goals\n    positivity\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    field_simp [Finset.sum_range_succ, Nat.cast_succ, add_comm]\n    ring_nf\n    linarith [hf n (by linarith)]\n```",
            "\n  cases n with\n  | zero =>\n    simp\n  | succ n =>\n    simp only [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero, add_zero,\n      Nat.cast_add, Nat.cast_one]\n    apply le_of_sub_nonneg\n    field_simp\n    ring_nf\n    nlinarith [hf 0 (Nat.zero_le n)]\n```",
            "\n  norm_num\n  exact?\n```",
            "\n  cases n <;> simp_all\n  rw [div_le_div_iff] <;> linarith [sum_nonneg hf]\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp only [Finset.sum_range_succ, Finset.sum_range_zero, zero_add, Nat.cast_succ, Nat.cast_zero]\n    apply div_le_div_of_le_of_nonneg\n    \u00b7 linarith\n    \u00b7 exact mul_nonneg (Nat.cast_nonneg _) (Nat.cast_nonneg _)\n```",
            "\n  cases n with\n  | zero =>\n    simp\n  | succ n =>\n    simp_all [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n    exact (le_div_iff (by positivity)).mpr (by gcongr; apply Finset.sum_nonneg; intro i _; exact hf i (Nat.le_succ _))\n```",
            "\n  cases n with\n  | zero =>\n    simp\n  | succ n =>\n    simp only [Nat.succ_eq_add_one, Finset.sum_range_succ, Nat.cast_add, Nat.cast_one, add_sub_cancel,\n      Nat.cast_zero, zero_mul, zero_add, Nat.cast_succ, Nat.cast_zero, mul_zero,\n      add_zero, Nat.cast_one, one_mul, Nat.cast_add, Nat.cast_one, add_sub_cancel,\n      Nat.cast_zero, zero_mul, zero_add, Nat.cast_succ, Nat.cast_zero, mul_zero, add_zero]\n    apply le_of_sub_nonneg\n    field_simp\n    ring_nf\n    nlinarith [hf 0 (Nat.zero_le n)]\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    rw [Nat.mul_comm, Nat.mul_comm n, Nat.mul_comm]\n    simp_all [Nat.succ_eq_add_one, Finset.sum_range_succ]\n    linarith\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp_all only [Finset.sum_range_succ, Finset.sum_range_one, Nat.cast_zero, Nat.cast_succ, Nat.add_succ_sub_one,\n      add_zero, zero_add, Nat.cast_one, one_mul, Nat.cast_zero, zero_mul, zero_sub, mul_zero]\n    field_simp [Nat.cast_succ, one_mul, mul_one, mul_assoc, mul_comm, mul_left_comm]\n    ring_nf\n    linarith\n```",
            "\n  cases n with\n  | zero =>\n    simp\n  | succ n =>\n    rw [div_le_div_iff] <;> nlinarith [Finset.sum_range_succ f n]\n```",
            "\n  rw [div_le_div_iff] <;> linarith [hf 0 (by linarith)]\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    field_simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc,\n      Nat.cast_add_one, add_assoc]\n    ring_nf\n    linarith [hf 0 (by linarith)]\n```",
            "\n  cases n with\n  | zero => simp [hf]\n  | succ n =>\n    simp_all [Finset.sum_range_succ, mul_succ, Nat.cast_succ]\n    exact by\n      apply le_of_not_gt\n      intro h\n      linarith\n```",
            "\n  cases n\n  case zero =>\n    simp\n  case succ n =>\n    field_simp [Finset.sum_range_succ, Nat.cast_add, Nat.cast_one, Nat.cast_mul]\n    ring_nf\n    linarith [hf 0 (Nat.zero_le n)]\n```",
            "\n  cases n with\n  | zero =>\n    simp [hf]\n  | succ n =>\n    simp_all [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero, Nat.cast_add]\n    exact (le_div_iff (by positivity)).mpr (by linarith)\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    rw [Nat.cast_succ, add_mul, mul_comm (n := (Nat.succ n))]\n    exact (by\n      gcongr\n      exact Finset.sum_nonneg hf)\n```",
            "\n  cases n with\n  | zero =>\n    simp\n  | succ n =>\n    field_simp [Finset.sum_range_succ, hf, Nat.cast_succ, mul_add, add_mul]\n    ring_nf\n    linarith\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp only [Nat.succ_eq_add_one, Finset.sum_range_succ, add_mul, one_mul, add_comm,\n      add_left_comm, add_assoc, Nat.cast_add, Nat.cast_one, Nat.cast_succ, Finset.sum_range_succ]\n    nlinarith [hf 0 (Nat.zero_le _), hf n.succ.succ_pos]\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp only [Finset.sum_range_succ, Finset.sum_range_zero, zero_add, Nat.cast_succ, Nat.cast_zero, add_zero]\n    field_simp\n    ring_nf\n    nlinarith [hf 0 (Nat.zero_le _), hf n.succ (Nat.succ_le_succ (Nat.le_refl _))]\n```",
            "\n  cases n <;> simp_all [Finset.sum_range_succ]\n  nlinarith\n```",
            "\n  have hn : n \u2260 0 := by\n    intro h\n    simp_all\n  field_simp [hn]\n  ring_nf\n  nlinarith [hf 0 (by linarith)]\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, add_zero, zero_mul,\n      zero_add, Nat.cast_succ]\n    apply le_of_not_gt\n    intro h\n    have h' := mul_le_mul_of_nonneg_right (Finset.sum_le_sum fun i _ => hf i (Nat.le_succ_of_le i.le_succ))\n      (by positivity)\n    linarith\n```",
            "\n  cases n <;> simp_all [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  all_goals nlinarith\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    field_simp [Finset.sum_range_succ, Nat.cast_add_one, Nat.cast_add, Nat.cast_one,\n      Nat.cast_zero, add_comm]\n    ring_nf\n    nlinarith [hf 0 (by linarith)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  have h\u2081 : 0 < n := by linarith\n  rw [div_le_div_iff] <;> nlinarith [Finset.sum_le_sum_of_subset_of_nonneg (Finset.range_mono h\u2081.le)\n    (fun i _ _ \u21a6 hf i (Finset.mem_range.1 \u2039_\u203a).le)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  rw [div_le_div_iff]\n  nlinarith\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero =>\n    simp [Finset.sum_range_succ]\n  | succ n =>\n    simp_all [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero, Nat.cast_add]\n    apply le_of_not_lt\n    intro h\n    have h\u2080 := Finset.sum_range_succ f n\n    have h\u2081 := Finset.sum_range_succ f n\n    simp_all\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero =>\n    simp [Finset.sum_range_succ]\n  | succ n =>\n    simp_all [Finset.sum_range_succ, Nat.cast_succ, Nat.succ_eq_add_one]\n    field_simp\n    ring_nf\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero =>\n    simp [Finset.range_zero, Finset.sum_empty]\n  | succ n =>\n    simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n    exact div_le_div_of_le_of_nonneg\n      (by linarith)\n      (by linarith [Nat.zero_le n])",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp_all [Finset.sum_range_succ, Nat.succ_eq_add_one]\n    exact (div_le_div_right (show (0 : \u211d) < n by linarith)).mpr (by linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n\n  case zero => simp\n  case succ n =>\n    norm_num\n    rw [div_le_div_iff]\n    nlinarith\n    nlinarith\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  rw [div_le_div_iff]\n  nlinarith\n  all_goals\n    positivity",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    field_simp [Finset.sum_range_succ, Nat.cast_succ, add_comm]\n    ring_nf\n    linarith [hf n (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero =>\n    simp\n  | succ n =>\n    simp only [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero, add_zero,\n      Nat.cast_add, Nat.cast_one]\n    apply le_of_sub_nonneg\n    field_simp\n    ring_nf\n    nlinarith [hf 0 (Nat.zero_le n)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  norm_num\n  exact?",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n <;> simp_all\n  rw [div_le_div_iff] <;> linarith [sum_nonneg hf]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp only [Finset.sum_range_succ, Finset.sum_range_zero, zero_add, Nat.cast_succ, Nat.cast_zero]\n    apply div_le_div_of_le_of_nonneg\n    \u00b7 linarith\n    \u00b7 exact mul_nonneg (Nat.cast_nonneg _) (Nat.cast_nonneg _)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero =>\n    simp\n  | succ n =>\n    simp_all [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n    exact (le_div_iff (by positivity)).mpr (by gcongr; apply Finset.sum_nonneg; intro i _; exact hf i (Nat.le_succ _))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero =>\n    simp\n  | succ n =>\n    simp only [Nat.succ_eq_add_one, Finset.sum_range_succ, Nat.cast_add, Nat.cast_one, add_sub_cancel,\n      Nat.cast_zero, zero_mul, zero_add, Nat.cast_succ, Nat.cast_zero, mul_zero,\n      add_zero, Nat.cast_one, one_mul, Nat.cast_add, Nat.cast_one, add_sub_cancel,\n      Nat.cast_zero, zero_mul, zero_add, Nat.cast_succ, Nat.cast_zero, mul_zero, add_zero]\n    apply le_of_sub_nonneg\n    field_simp\n    ring_nf\n    nlinarith [hf 0 (Nat.zero_le n)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    rw [Nat.mul_comm, Nat.mul_comm n, Nat.mul_comm]\n    simp_all [Nat.succ_eq_add_one, Finset.sum_range_succ]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp_all only [Finset.sum_range_succ, Finset.sum_range_one, Nat.cast_zero, Nat.cast_succ, Nat.add_succ_sub_one,\n      add_zero, zero_add, Nat.cast_one, one_mul, Nat.cast_zero, zero_mul, zero_sub, mul_zero]\n    field_simp [Nat.cast_succ, one_mul, mul_one, mul_assoc, mul_comm, mul_left_comm]\n    ring_nf\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero =>\n    simp\n  | succ n =>\n    rw [div_le_div_iff] <;> nlinarith [Finset.sum_range_succ f n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  rw [div_le_div_iff] <;> linarith [hf 0 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    field_simp [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc,\n      Nat.cast_add_one, add_assoc]\n    ring_nf\n    linarith [hf 0 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp [hf]\n  | succ n =>\n    simp_all [Finset.sum_range_succ, mul_succ, Nat.cast_succ]\n    exact by\n      apply le_of_not_gt\n      intro h\n      linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n\n  case zero =>\n    simp\n  case succ n =>\n    field_simp [Finset.sum_range_succ, Nat.cast_add, Nat.cast_one, Nat.cast_mul]\n    ring_nf\n    linarith [hf 0 (Nat.zero_le n)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero =>\n    simp [hf]\n  | succ n =>\n    simp_all [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero, Nat.cast_add]\n    exact (le_div_iff (by positivity)).mpr (by linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    rw [Nat.cast_succ, add_mul, mul_comm (n := (Nat.succ n))]\n    exact (by\n      gcongr\n      exact Finset.sum_nonneg hf)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero =>\n    simp\n  | succ n =>\n    field_simp [Finset.sum_range_succ, hf, Nat.cast_succ, mul_add, add_mul]\n    ring_nf\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp only [Nat.succ_eq_add_one, Finset.sum_range_succ, add_mul, one_mul, add_comm,\n      add_left_comm, add_assoc, Nat.cast_add, Nat.cast_one, Nat.cast_succ, Finset.sum_range_succ]\n    nlinarith [hf 0 (Nat.zero_le _), hf n.succ.succ_pos]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp only [Finset.sum_range_succ, Finset.sum_range_zero, zero_add, Nat.cast_succ, Nat.cast_zero, add_zero]\n    field_simp\n    ring_nf\n    nlinarith [hf 0 (Nat.zero_le _), hf n.succ (Nat.succ_le_succ (Nat.le_refl _))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n <;> simp_all [Finset.sum_range_succ]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  have hn : n \u2260 0 := by\n    intro h\n    simp_all\n  field_simp [hn]\n  ring_nf\n  nlinarith [hf 0 (by linarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    simp only [Finset.sum_range_succ, Finset.sum_range_zero, Nat.cast_zero, add_zero, zero_mul,\n      zero_add, Nat.cast_succ]\n    apply le_of_not_gt\n    intro h\n    have h' := mul_le_mul_of_nonneg_right (Finset.sum_le_sum fun i _ => hf i (Nat.le_succ_of_le i.le_succ))\n      (by positivity)\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n <;> simp_all [Finset.sum_range_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality_sum_one (n : \u2115) (f : \u2115 \u2192 \u211d) (hf: \u2200 i \u2264 n, f i \u2265 0):      (n * \u2211 i \u2208 Finset.range n, f i) / ((n-1) * n) \u2264 (\u2211 i \u2208 Finset.range n, f i) / n := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    field_simp [Finset.sum_range_succ, Nat.cast_add_one, Nat.cast_add, Nat.cast_one,\n      Nat.cast_zero, add_comm]\n    ring_nf\n    nlinarith [hf 0 (by linarith)]"
        ]
    },
    {
        "name": "lean_workbook_plus_43507",
        "split": "test",
        "formal_statement": "theorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by",
        "model_outputs": [
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, add_assoc, add_left_comm, add_comm]\n  nlinarith [sq_nonneg (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084),\n    sq_nonneg (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084)]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_self_nonneg p\u2081), sq_sqrt (mul_self_nonneg p\u2082), sq_sqrt (mul_self_nonneg p\u2083), sq_sqrt (mul_self_nonneg p\u2084)]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087), sq_sqrt (mul_nonneg h\u2088 h\u2088), sq_sqrt (mul_nonneg h\u2089 h\u2089)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084),\n    sq_nonneg (w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084))]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [sq_sqrt (mul_self_nonneg p\u2081), sq_sqrt (mul_self_nonneg p\u2082), sq_sqrt (mul_self_nonneg p\u2083), sq_sqrt (mul_self_nonneg p\u2084)]\n```",
            "\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084),\n    sq_nonneg (w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084))]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087),\n    sq_sqrt (mul_nonneg h\u2088 h\u2088)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088;    nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087), sq_sqrt (mul_nonneg h\u2088 h\u2088)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.mul_sqrt, sq_sqrt, add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, mul_nonneg, add_nonneg]\n  linarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq, mul_one, mul_zero, add_zero, zero_add, sub_self,\n    zero_sub, sub_zero, sub_neg_eq_add, add_comm, add_left_comm, add_assoc,\n    mul_comm, mul_left_comm, mul_assoc, add_right_comm]\n  nlinarith [sq_nonneg (w\u2081 - p\u2081), sq_nonneg (w\u2082 - p\u2082), sq_nonneg (w\u2083 - p\u2083), sq_nonneg (w\u2084 - p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087),\n    sq_sqrt (mul_nonneg h\u2088 h\u2088)]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [Real.sqrt_sq, mul_assoc]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]\n```",
            "\n  intro hsum h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [sq, add_assoc]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq, mul_one, mul_zero, add_zero, zero_add, zero_mul, mul_comm]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, mul_nonneg, le_refl, and_self_iff]\n  nlinarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087), sq_sqrt (mul_nonneg h\u2088 h\u2088)]\n```",
            "\n  intro h_weights h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg]\n  nlinarith [h_weights, h_w\u2081, h_w\u2082, h_w\u2083, h_w\u2084, h_p\u2081, h_p\u2082, h_p\u2083, h_p\u2084]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [mul_one, mul_zero, add_zero, zero_add, sub_self, sub_zero, sub_add_cancel,\n    mul_sub, mul_div_cancel_left]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083),\n    sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (show 0 \u2264 p\u2081 * p\u2081 by positivity), sq_sqrt (show 0 \u2264 p\u2082 * p\u2082 by positivity), sq_sqrt (show 0 \u2264 p\u2083 * p\u2083 by positivity), sq_sqrt (show 0 \u2264 p\u2084 * p\u2084 by positivity)]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [sq, add_assoc, add_left_comm, add_right_comm]\n  apply le_of_sub_nonneg\n  ring_nf\n  nlinarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087),\n    sq_sqrt (mul_nonneg h\u2088 h\u2088)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087), sq_sqrt (mul_nonneg h\u2088 h\u2088)]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [sq, add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, mul_assoc]\n  nlinarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_self_nonneg p\u2081), sq_sqrt (mul_self_nonneg p\u2082), sq_sqrt (mul_self_nonneg p\u2083), sq_sqrt (mul_self_nonneg p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_self_nonneg p\u2081), sq_sqrt (mul_self_nonneg p\u2082), sq_sqrt (mul_self_nonneg p\u2083), sq_sqrt (mul_self_nonneg p\u2084)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087),\n    sq_sqrt (mul_nonneg h\u2088 h\u2088)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088; nlinarith [sq_sqrt (show (0 : \u211d) \u2264 p\u2081 * p\u2081 by nlinarith), sq_sqrt (show (0 : \u211d) \u2264 p\u2082 * p\u2082 by nlinarith), sq_sqrt (show (0 : \u211d) \u2264 p\u2083 * p\u2083 by nlinarith), sq_sqrt (show (0 : \u211d) \u2264 p\u2084 * p\u2084 by nlinarith)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087), sq_sqrt (mul_nonneg h\u2088 h\u2088)]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, add_assoc, add_left_comm, add_comm]\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, add_assoc, add_left_comm, add_comm]\n  nlinarith [sq_nonneg (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084),\n    sq_nonneg (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_self_nonneg p\u2081), sq_sqrt (mul_self_nonneg p\u2082), sq_sqrt (mul_self_nonneg p\u2083), sq_sqrt (mul_self_nonneg p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087), sq_sqrt (mul_nonneg h\u2088 h\u2088), sq_sqrt (mul_nonneg h\u2089 h\u2089)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084),\n    sq_nonneg (w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  nlinarith [sq_sqrt (mul_self_nonneg p\u2081), sq_sqrt (mul_self_nonneg p\u2082), sq_sqrt (mul_self_nonneg p\u2083), sq_sqrt (mul_self_nonneg p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h_sum h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084),\n    sq_nonneg (w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087),\n    sq_sqrt (mul_nonneg h\u2088 h\u2088)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088;    nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087), sq_sqrt (mul_nonneg h\u2088 h\u2088)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.mul_sqrt, sq_sqrt, add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, mul_nonneg, add_nonneg]\n  linarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq, mul_one, mul_zero, add_zero, zero_add, sub_self,\n    zero_sub, sub_zero, sub_neg_eq_add, add_comm, add_left_comm, add_assoc,\n    mul_comm, mul_left_comm, mul_assoc, add_right_comm]\n  nlinarith [sq_nonneg (w\u2081 - p\u2081), sq_nonneg (w\u2082 - p\u2082), sq_nonneg (w\u2083 - p\u2083), sq_nonneg (w\u2084 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087),\n    sq_sqrt (mul_nonneg h\u2088 h\u2088)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [Real.sqrt_sq, mul_assoc]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro hsum h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [sq, add_assoc]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq, mul_one, mul_zero, add_zero, zero_add, zero_mul, mul_comm]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, mul_nonneg, le_refl, and_self_iff]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087), sq_sqrt (mul_nonneg h\u2088 h\u2088)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h_weights h_w\u2081 h_w\u2082 h_w\u2083 h_w\u2084 h_p\u2081 h_p\u2082 h_p\u2083 h_p\u2084\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg]\n  nlinarith [h_weights, h_w\u2081, h_w\u2082, h_w\u2083, h_w\u2084, h_p\u2081, h_p\u2082, h_p\u2083, h_p\u2084]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [mul_one, mul_zero, add_zero, zero_add, sub_self, sub_zero, sub_add_cancel,\n    mul_sub, mul_div_cancel_left]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083),\n    sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (show 0 \u2264 p\u2081 * p\u2081 by positivity), sq_sqrt (show 0 \u2264 p\u2082 * p\u2082 by positivity), sq_sqrt (show 0 \u2264 p\u2083 * p\u2083 by positivity), sq_sqrt (show 0 \u2264 p\u2084 * p\u2084 by positivity)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [sq, add_assoc, add_left_comm, add_right_comm]\n  apply le_of_sub_nonneg\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087),\n    sq_sqrt (mul_nonneg h\u2088 h\u2088)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087), sq_sqrt (mul_nonneg h\u2088 h\u2088)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088 h\u2089\n  simp_all only [sq, add_assoc, add_left_comm, add_right_comm]\n  nlinarith [sq_nonneg (p\u2081 - p\u2082), sq_nonneg (p\u2081 - p\u2083), sq_nonneg (p\u2081 - p\u2084), sq_nonneg (p\u2082 - p\u2083), sq_nonneg (p\u2082 - p\u2084), sq_nonneg (p\u2083 - p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, mul_assoc]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_self_nonneg p\u2081), sq_sqrt (mul_self_nonneg p\u2082), sq_sqrt (mul_self_nonneg p\u2083), sq_sqrt (mul_self_nonneg p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_self_nonneg p\u2081), sq_sqrt (mul_self_nonneg p\u2082), sq_sqrt (mul_self_nonneg p\u2083), sq_sqrt (mul_self_nonneg p\u2084)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087),\n    sq_sqrt (mul_nonneg h\u2088 h\u2088)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088; nlinarith [sq_sqrt (show (0 : \u211d) \u2264 p\u2081 * p\u2081 by nlinarith), sq_sqrt (show (0 : \u211d) \u2264 p\u2082 * p\u2082 by nlinarith), sq_sqrt (show (0 : \u211d) \u2264 p\u2083 * p\u2083 by nlinarith), sq_sqrt (show (0 : \u211d) \u2264 p\u2084 * p\u2084 by nlinarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  nlinarith [sq_sqrt (mul_nonneg h\u2085 h\u2085), sq_sqrt (mul_nonneg h\u2086 h\u2086), sq_sqrt (mul_nonneg h\u2087 h\u2087), sq_sqrt (mul_nonneg h\u2088 h\u2088)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     w\u2081 \u2265 0 \u2192 w\u2082 \u2265 0 \u2192 w\u2083 \u2265 0 \u2192 w\u2084 \u2265 0 \u2192     p\u2081 \u2265 0 \u2192 p\u2082 \u2265 0 \u2192 p\u2083 \u2265 0 \u2192 p\u2084 \u2265 0 \u2192     w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 \u2264       w\u2081 * Real.sqrt (p\u2081 * p\u2081) + w\u2082 * Real.sqrt (p\u2082 * p\u2082) + w\u2083 * Real.sqrt (p\u2083 * p\u2083) + w\u2084 * Real.sqrt (p\u2084 * p\u2084) := by\n  intro h\u2080 h\u2081 h\u2082 h\u2083 h\u2084 h\u2085 h\u2086 h\u2087 h\u2088\n  simp_all only [Real.sqrt_sq_eq_abs, abs_of_nonneg, add_assoc, add_left_comm, add_comm]\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_70066",
        "split": "test",
        "formal_statement": "theorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by",
        "model_outputs": [
            " linarith\n```",
            "\n  exact h\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n\ntheorem linarith_eq {a b c : \u211d} (h : a * b + b * c + c * a = a ^ 2 + b ^ 2 + c ^ 2) :\n    a * b + b * c + c * a = a ^ 2 + b ^ 2 + c ^ 2 := by linarith\n```",
            " linarith\n```",
            "\n  apply h\n```",
            " linarith\n\ntheorem nlinarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :\n    a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by nlinarith\n\ntheorem linarith_ineq2 {a b c d : \u211d} (h : a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) :\n    a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 := by linarith\n\ntheorem nlinarith_ineq2 {a b c d : \u211d} (h : a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) :\n    a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 := by nlinarith\n\ntheorem linarith_ineq3 {a b c d : \u211d} (h : a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) :\n    a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 := by linarith\n\ntheorem nlinarith_ineq3 {a b c d : \u211d} (h : a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) :\n    a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 := by nlinarith\n```",
            "\n  exact h\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```",
            "\n  linarith\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```",
            "\n  linarith\n```",
            " linarith\n```",
            " linarith\n```",
            "\n  linarith\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```",
            " linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith\n\ntheorem linarith_eq {a b c : \u211d} (h : a * b + b * c + c * a = a ^ 2 + b ^ 2 + c ^ 2) :\n    a * b + b * c + c * a = a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by\n  apply h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith\n\ntheorem nlinarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :\n    a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by nlinarith\n\ntheorem linarith_ineq2 {a b c d : \u211d} (h : a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) :\n    a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 := by linarith\n\ntheorem nlinarith_ineq2 {a b c d : \u211d} (h : a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) :\n    a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 := by nlinarith\n\ntheorem linarith_ineq3 {a b c d : \u211d} (h : a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) :\n    a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 := by linarith\n\ntheorem nlinarith_ineq3 {a b c d : \u211d} (h : a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2) :\n    a * b * c * d \u2264 a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 := by nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem linarith_ineq {a b c : \u211d} (h : a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2) :      a * b + b * c + c * a \u2264 a ^ 2 + b ^ 2 + c ^ 2 := by linarith"
        ]
    },
    {
        "name": "lean_workbook_43229",
        "split": "test",
        "formal_statement": "theorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by",
        "model_outputs": [
            "\n  ring_nf\n  nlinarith\n```",
            "\n  rw [\u2190 neg_le_neg_iff]\n  simp_all only [neg_add_rev, neg_mul_eq_neg_mul]\n  ring_nf\n  nlinarith\n```",
            "\n  norm_num\n  nlinarith\n```",
            "\n  rw [\u2190 neg_nonpos] at ha hb hc\n  ring_nf\n  nlinarith [ha, hb, hc]\n```",
            "\n  rw [div_le_iff] <;> norm_num\n  nlinarith\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith\n```",
            "\n  simp_all only [div_eq_mul_inv, mul_inv_cancel_left\u2080, Ne.def, one_ne_zero, mul_one]\n  ring_nf\n  nlinarith\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith\n```",
            "\n  simp_all only [one_div, le_refl, ge_iff_le]\n  apply le_of_not_gt\n  intro h\n  nlinarith\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  simp only [div_eq_mul_inv, one_div, mul_inv_rev, mul_assoc]\n  ring_nf\n  nlinarith\n```",
            "\n  rw [div_le_iff] <;> nlinarith\n```",
            "\n  ring_nf\n  nlinarith\n```",
            "\n  rw [div_le_iff_of_neg (by norm_num : (0 : \u211d) < 3)]\n  nlinarith\n```",
            "\n  rw [div_le_iff] <;> nlinarith\n```",
            "\n  rw [div_le_iff_of_neg (by norm_num : (0 : \u211d) < 3)]\n  ring_nf\n  nlinarith [ha, hb, hc]\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith\n```",
            "\n  cases' le_total a (b * c) with hab hbc\n  all_goals\n    simp_all only [mul_neg, mul_one, mul_zero, mul_assoc, mul_comm, mul_left_comm,\n      mul_right_comm]\n    nlinarith\n```",
            "\n  rw [div_le_iff]\n  <;> norm_num\n  <;> nlinarith\n```",
            "\n  rw [div_eq_mul_inv]\n  ring_nf\n  nlinarith\n```",
            "\n  ring_nf\n  nlinarith [ha, hb, hc]\n```",
            "\n  nlinarith [sq_nonneg (a + b + c), mul_self_nonneg (a - b), mul_self_nonneg (a - c), mul_self_nonneg (b - c)]\n```",
            "\n  ring_nf\n  nlinarith\n```",
            "\n  simp only [div_eq_mul_inv, \u2190 mul_assoc]\n  ring_nf\n  nlinarith\n```",
            "\n  rw [div_eq_mul_inv]\n  ring_nf\n  nlinarith\n```",
            "\n  simp [ha, hb, hc, div_eq_mul_inv, mul_assoc]\n  nlinarith\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith\n```",
            "\n  simp [ha, hb, hc]\n  ring_nf\n  nlinarith\n```",
            "\n  field_simp\n  ring_nf\n  nlinarith\n```",
            "\n  ring_nf\n  nlinarith\n```",
            "\n  have h\u2081 : a + b + c \u2264 0 := by linarith\n  have h\u2082 : a * b * c \u2265 0 := by nlinarith\n  have h\u2083 : (a * b * c) ^ (1 / 3) \u2265 0 := by positivity\n  rw [div_le_iff_of_neg (by norm_num : (0 : \u211d) < 3)]\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  rw [\u2190 neg_le_neg_iff]\n  simp_all only [neg_add_rev, neg_mul_eq_neg_mul]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  rw [\u2190 neg_nonpos] at ha hb hc\n  ring_nf\n  nlinarith [ha, hb, hc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  rw [div_le_iff] <;> norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  simp_all only [div_eq_mul_inv, mul_inv_cancel_left\u2080, Ne.def, one_ne_zero, mul_one]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  simp_all only [one_div, le_refl, ge_iff_le]\n  apply le_of_not_gt\n  intro h\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  simp only [div_eq_mul_inv, one_div, mul_inv_rev, mul_assoc]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  rw [div_le_iff] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  rw [div_le_iff_of_neg (by norm_num : (0 : \u211d) < 3)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  rw [div_le_iff] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  rw [div_le_iff_of_neg (by norm_num : (0 : \u211d) < 3)]\n  ring_nf\n  nlinarith [ha, hb, hc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  cases' le_total a (b * c) with hab hbc\n  all_goals\n    simp_all only [mul_neg, mul_one, mul_zero, mul_assoc, mul_comm, mul_left_comm,\n      mul_right_comm]\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  rw [div_le_iff]\n  <;> norm_num\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  rw [div_eq_mul_inv]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith [ha, hb, hc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  nlinarith [sq_nonneg (a + b + c), mul_self_nonneg (a - b), mul_self_nonneg (a - c), mul_self_nonneg (b - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  simp only [div_eq_mul_inv, \u2190 mul_assoc]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  rw [div_eq_mul_inv]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  simp [ha, hb, hc, div_eq_mul_inv, mul_assoc]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  simp [ha, hb, hc]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  field_simp\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem arithmetic_mean_geometric_mean {a b c : \u211d} (ha : a \u2264 0) (hb : b \u2264 0) (hc : c \u2264 0) :     (a + b + c) / 3 \u2264 (a * b * c) ^ (1 / 3) := by\n  have h\u2081 : a + b + c \u2264 0 := by linarith\n  have h\u2082 : a * b * c \u2265 0 := by nlinarith\n  have h\u2083 : (a * b * c) ^ (1 / 3) \u2265 0 := by positivity\n  rw [div_le_iff_of_neg (by norm_num : (0 : \u211d) < 3)]\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_33778",
        "split": "test",
        "formal_statement": "theorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by",
        "model_outputs": [
            "\n  norm_num\n```",
            "\n  norm_num [show (3 : \u211d) ^ (1 / 3 : \u211d) = 1 by norm_num]\n```",
            "\n  norm_num\n```",
            "\n  norm_num [show (3 : \u211d) ^ (1 / 3 : \u211d) = 1 by norm_num]\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  field_simp\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num [show (1 : \u211d) = 3 ^ 0 by norm_num]\n```",
            "\n  norm_num\n  <;> simp [Real.rpow_def_of_pos (show (0 : \u211d) < 3 by norm_num)]\n```",
            "\n  norm_num\n```",
            "\n  simp [show (3 : \u211d) ^ (1 / 3 : \u211d) = 1 by norm_num]\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num [show (1 : \u211d) = 3 ^ 0 by norm_num]\n```",
            "\n  norm_num\n  <;> simp [pow_eq_one_iff]\n  <;> norm_num\n  <;> ring_nf\n  <;> linarith\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  field_simp\n  norm_num\n```",
            "\n  norm_num [show (1 : \u211d) = 3 ^ 0 by norm_num]\n```",
            "\n  norm_num\n  <;> simp [mul_assoc]\n```",
            "\n  field_simp\n  norm_num\n```",
            "\n  norm_num\n  <;>\n  exact\n    by norm_num\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num [show (3 : \u211d) ^ (1 / 3 : \u211d) = 1 by norm_num]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num [show (3 : \u211d) ^ (1 / 3 : \u211d) = 1 by norm_num]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  field_simp\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num [show (1 : \u211d) = 3 ^ 0 by norm_num]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num\n  <;> simp [Real.rpow_def_of_pos (show (0 : \u211d) < 3 by norm_num)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  simp [show (3 : \u211d) ^ (1 / 3 : \u211d) = 1 by norm_num]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num [show (1 : \u211d) = 3 ^ 0 by norm_num]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num\n  <;> simp [pow_eq_one_iff]\n  <;> norm_num\n  <;> ring_nf\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  field_simp\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num [show (1 : \u211d) = 3 ^ 0 by norm_num]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num\n  <;> simp [mul_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  field_simp\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_root_three : (3 : \u211d) ^ (1 / 3 : \u211d) = 1 := by\n  norm_num\n  <;>\n  exact\n    by norm_num"
        ]
    },
    {
        "name": "lean_workbook_53041",
        "split": "test",
        "formal_statement": "theorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by",
        "model_outputs": [
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by nlinarith [Real.sqrt_nonneg a, Real.sqrt_nonneg b]\n  rw [sq] at h\u2081\n  field_simp [Real.sqrt_eq_iff_mul_self_eq] at h\u2081 \u22a2\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  have h : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by\n    nlinarith\n  simp [pow_two, mul_self_eq_mul_self_iff] at h\n  linarith\n```",
            "\n  have : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  field_simp\n  linarith\n```",
            "\n  have h : 0 \u2264 (Real.sqrt (a * b)) ^ 2 := sq_nonneg (Real.sqrt (a * b))\n  rw [sq] at h\n  rw [Real.sq_sqrt (mul_nonneg (le_of_lt (Real.sqrt_pos.mpr (mul_pos (lt_of_le_of_ne zero_le_one (by norm_num)) (lt_of_le_of_ne zero_le_one (by norm_num))))))] at h\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  rw [ge_iff_le, Real.sqrt_le_left]\n  <;> linarith\n```",
            "\n  have h : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by apply sq_nonneg\n  rw [sq] at h\n  rw [Real.sqrt_le_sqrt_iff] at h\n  linarith\n  linarith\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  field_simp\n  ring_nf\n  nlinarith\n```",
            "\n  have h\u2081 : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n    nlinarith [sq_sqrt (mul_nonneg (le_of_lt (by norm_num : (0 : \u211d) < 2)) (le_refl b)),\n      mul_self_nonneg (a - b)]\n  exact h\u2081\n```",
            "\n  have h\u2080 : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n    nlinarith [sq_sqrt (mul_nonneg (le_refl a) (le_refl b)),\n      mul_self_nonneg (a - b)]\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2083 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2084 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2085 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2086 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2087 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2088 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2089 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2081\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081\u2081 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2081\u2082 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2081\u2083 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081\u2084 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2081\u2085 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2081\u2086 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081\u2087 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2081\u2088 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2081\u2089 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082\u2080 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2082\u2081 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2082\u2082 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082\u2083 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2082\u2084 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2082\u2085 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082\u2086 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2082\u2087 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2082\u2088 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082\u2089 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2083\u2080 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  rw [pow_two] at h\u2081\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  have h : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by apply sq_nonneg\n  rw [sq] at h\n  field_simp [Real.sqrt_eq_iff_mul_self_eq] at h \u22a2\n  linarith\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  field_simp\n  ring_nf\n  nlinarith\n```",
            "\n  have h : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by\n    apply sq_nonneg\n  rw [sq] at h\n  field_simp [Real.sqrt_eq_iff_mul_self_eq] at h\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 Real.sqrt (a * b) := by nlinarith [Real.sqrt_nonneg (a * b)]\n  nlinarith [Real.sq_sqrt (show 0 \u2264 a * b by nlinarith), h\u2080, h\u2081, h\u2082]\n```",
            "\n  have h\u2080 : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n    nlinarith [sq_sqrt (mul_nonneg (le_refl a) (le_refl b)), sq_nonneg (a - b)]\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  rw [ge_iff_le, sqrt_le_left]\n  <;> nlinarith\n```",
            "\n  have h\u2081 : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n    nlinarith [sq_sqrt (mul_nonneg (le_of_lt (by linarith)) (le_of_lt (by linarith))),\n      sq_nonneg (a - b)]\n  linarith\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  field_simp\n  nlinarith [h]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by positivity\n  rw [sq] at h\u2081\n  field_simp [Real.sqrt_eq_iff_mul_self_eq] at h\u2081 \u22a2\n  linarith\n```",
            "\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h1 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h2 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h3 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h4 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h5 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h6 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h7 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h8 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h9 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h10 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  have h : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  field_simp\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  rw [pow_two] at h\u2081\n  apply le_sqrt_of_sq_le\n  linarith\n```",
            "\n  have : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  apply le_of_sub_nonneg\n  field_simp\n  linarith\n```",
            "\n  have : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n    have h : (Real.sqrt a - Real.sqrt b) ^ 2 \u2265 0 := by nlinarith\n    nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h\u2083 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2084 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2085 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h\u2086 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2087 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h\u2088 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2089 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h\u2081\u2080 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by nlinarith\n  rw [sq] at h\u2081\n  field_simp [h\u2081]\n  nlinarith [Real.sq_sqrt (show 0 \u2264 a * b from by nlinarith)]\n```",
            "\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  rw [ge_iff_le, Real.sqrt_le_left]\n  <;> nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by nlinarith [Real.sqrt_nonneg a, Real.sqrt_nonneg b]\n  rw [sq] at h\u2081\n  field_simp [Real.sqrt_eq_iff_mul_self_eq] at h\u2081 \u22a2\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by\n    nlinarith\n  simp [pow_two, mul_self_eq_mul_self_iff] at h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  field_simp\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h : 0 \u2264 (Real.sqrt (a * b)) ^ 2 := sq_nonneg (Real.sqrt (a * b))\n  rw [sq] at h\n  rw [Real.sq_sqrt (mul_nonneg (le_of_lt (Real.sqrt_pos.mpr (mul_pos (lt_of_le_of_ne zero_le_one (by norm_num)) (lt_of_le_of_ne zero_le_one (by norm_num))))))] at h\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  rw [ge_iff_le, Real.sqrt_le_left]\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by apply sq_nonneg\n  rw [sq] at h\n  rw [Real.sqrt_le_sqrt_iff] at h\n  linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  field_simp\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n    nlinarith [sq_sqrt (mul_nonneg (le_of_lt (by norm_num : (0 : \u211d) < 2)) (le_refl b)),\n      mul_self_nonneg (a - b)]\n  exact h\u2081",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2080 : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n    nlinarith [sq_sqrt (mul_nonneg (le_refl a) (le_refl b)),\n      mul_self_nonneg (a - b)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2083 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2084 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2085 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2086 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2087 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2088 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2089 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2081\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081\u2081 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2081\u2082 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2081\u2083 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081\u2084 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2081\u2085 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2081\u2086 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081\u2087 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2081\u2088 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2081\u2089 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082\u2080 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2082\u2081 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2082\u2082 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082\u2083 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2082\u2084 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2082\u2085 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082\u2086 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2082\u2087 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  have h\u2082\u2088 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082\u2089 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2083\u2080 : 0 \u2264 (a + b) ^ 2 - 4 * a * b := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := sq_nonneg (a - b)\n  rw [pow_two] at h\u2081\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by apply sq_nonneg\n  rw [sq] at h\n  field_simp [Real.sqrt_eq_iff_mul_self_eq] at h \u22a2\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  field_simp\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by\n    apply sq_nonneg\n  rw [sq] at h\n  field_simp [Real.sqrt_eq_iff_mul_self_eq] at h\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 Real.sqrt (a * b) := by nlinarith [Real.sqrt_nonneg (a * b)]\n  nlinarith [Real.sq_sqrt (show 0 \u2264 a * b by nlinarith), h\u2080, h\u2081, h\u2082]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2080 : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n    nlinarith [sq_sqrt (mul_nonneg (le_refl a) (le_refl b)), sq_nonneg (a - b)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  rw [ge_iff_le, sqrt_le_left]\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n    nlinarith [sq_sqrt (mul_nonneg (le_of_lt (by linarith)) (le_of_lt (by linarith))),\n      sq_nonneg (a - b)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  field_simp\n  nlinarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by positivity\n  rw [sq] at h\u2081\n  field_simp [Real.sqrt_eq_iff_mul_self_eq] at h\u2081 \u22a2\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h1 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h2 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h3 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h4 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h5 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h6 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h7 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h8 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h9 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h10 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by nlinarith\n  apply le_of_sub_nonneg\n  field_simp\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  rw [pow_two] at h\u2081\n  apply le_sqrt_of_sq_le\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  apply le_of_sub_nonneg\n  field_simp\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n    have h : (Real.sqrt a - Real.sqrt b) ^ 2 \u2265 0 := by nlinarith\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2081 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h\u2083 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2084 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2085 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h\u2086 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2087 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h\u2088 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  have h\u2089 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  have h\u2081\u2080 : 0 \u2264 a ^ 2 + b ^ 2 - 2 * a * b := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := by nlinarith\n  rw [sq] at h\u2081\n  field_simp [h\u2081]\n  nlinarith [Real.sq_sqrt (show 0 \u2264 a * b from by nlinarith)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AMGM_inequality (a b : \u211d) : (a + b) / 2 \u2265 Real.sqrt (a * b) := by\n  have h\u2081 : 0 \u2264 (a - b) ^ 2 := by nlinarith\n  have h\u2082 : 0 \u2264 (a + b) ^ 2 := by nlinarith\n  rw [ge_iff_le, Real.sqrt_le_left]\n  <;> nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_46671",
        "split": "test",
        "formal_statement": "theorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by",
        "model_outputs": [
            "\n  ext <;> assumption\n```",
            "\n  rw [Complex.ext_iff] at hre him \u22a2; exact \u27e8hre, him\u27e9\n```",
            "\n  cases z\n  cases w\n  simp_all\n```",
            "\n  ext <;> assumption\n```",
            "\n  ext <;> simp [hre, him]\n```",
            "\n  ext <;> simp_all\n```",
            "\n  ext <;> assumption\n```",
            "\n  cases z\n  cases w\n  simp_all\n```",
            "\n  ext <;> simp_all\n```",
            "\n  cases z\n  cases w\n  simp_all\n```",
            "\n  ext <;> simp [hre, him]\n```",
            "\n  ext <;> assumption\n```",
            "\n  ext <;> assumption\n```",
            "\n  cases' z with x y\n  cases' w with a b\n  simp_all\n```",
            "\n  ext <;> assumption\n```",
            "\n  cases z\n  cases w\n  simp_all\n```",
            "\n  rw [\u2190 Complex.re_add_im z, \u2190 Complex.re_add_im w]\n  simp [hre, him]\n```",
            "\n  simp_all\n```",
            "\n  simp [Complex.ext_iff, hre, him]\n```",
            "\n  cases z\n  cases w\n  simp_all\n```",
            "\n  ext <;> simp [*]\n```",
            "\n  ext <;> simp_all\n```",
            "\n  cases' z with re_z im_z\n  cases' w with re_w im_w\n  simp_all\n```",
            "\n  cases z\n  cases w\n  simp_all\n```",
            "\n  subst hre\n  subst him\n  rfl\n```",
            "\n  ext <;> simp_all\n```",
            "\n  ext <;> simp_all\n```",
            "\n  ext <;> simp_all\n```",
            "\n  ext <;> simp_all\n```",
            "\n  rw [\u2190 Complex.ext_iff]\n  exact And.intro hre him\n```",
            "\n  ext <;> simp_all\n```",
            "\n  rw [Complex.ext_iff] at *\n  simp_all\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> assumption",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  rw [Complex.ext_iff] at hre him \u22a2; exact \u27e8hre, him\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  cases z\n  cases w\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> assumption",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> simp [hre, him]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> assumption",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  cases z\n  cases w\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  cases z\n  cases w\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> simp [hre, him]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> assumption",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> assumption",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  cases' z with x y\n  cases' w with a b\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> assumption",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  cases z\n  cases w\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  rw [\u2190 Complex.re_add_im z, \u2190 Complex.re_add_im w]\n  simp [hre, him]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  simp [Complex.ext_iff, hre, him]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  cases z\n  cases w\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> simp [*]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  cases' z with re_z im_z\n  cases' w with re_w im_w\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  cases z\n  cases w\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  subst hre\n  subst him\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  rw [\u2190 Complex.ext_iff]\n  exact And.intro hre him",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  ext <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem eq_of_re_eq_and_im_eq {z w : \u2102} (hre : z.re = w.re) (him : z.im = w.im) : z = w := by\n  rw [Complex.ext_iff] at *\n  simp_all"
        ]
    },
    {
        "name": "lean_workbook_plus_2509",
        "split": "test",
        "formal_statement": "theorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by",
        "model_outputs": [
            "\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]\n```",
            "\n  have h\u2080 : 0 \u2264 \u221ax := by positivity\n  have h\u2081 : (\u221ax) * (\u221ax) \u2264 y * y := by nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]\n```",
            "\n  rw [\u2190 mul_self_le_mul_self_iff] <;>\n  nlinarith\n```",
            "\n  nlinarith [h, h']\n```",
            "\n  have h\u2081 : 0 \u2264 y := h\n  have h\u2082 : 0 \u2264 y * y := mul_nonneg h\u2081 h\u2081\n  nlinarith [sq_sqrt (mul_self_nonneg x)]\n```",
            "\n  rw [mul_comm]\n  nlinarith [h, h']\n```",
            "\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]\n```",
            "\n  rw [\u2190 Real.sqrt_sq h]\n  exact Real.sqrt_le_iff.mp h'\n```",
            "\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h']\n```",
            "\n  rw [sq]\n  exact (Real.sqrt_le_left h).mp h'\n```",
            "\n  rw [\u2190 mul_self_le_mul_self_iff]\n  <;> nlinarith\n```",
            "\n  rw [\u2190 sq_le_sq]\n  nlinarith [h, h']\n```",
            "\n  have : 0 \u2264 y := by assumption\n  nlinarith [sq_sqrt (by assumption : 0 \u2264 x)]\n```",
            "\n  have h\u2081 : 0 \u2264 \u221ax := sq_nonneg _\n  have h\u2082 : \u221ax * \u221ax \u2264 y * y := mul_self_le_mul_self h\u2081 h'\n  linarith\n```",
            "\n  have : 0 \u2264 \u221ax := by nlinarith\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]\n```",
            "\n  rw [\u2190 sq_le_sq]\n  nlinarith [h, h']\n```",
            "\n  rw [\u2190 mul_self_le_mul_self_iff (h := by positivity)]\n  nlinarith\n```",
            "\n  nlinarith [sq_sqrt (h.trans_le h')]\n```",
            "\n  nlinarith [h, h']\n```",
            "\n  have h\u2081 : 0 \u2264 \u221ax := sq_nonneg _\n  have h\u2082 : \u221ax * \u221ax \u2264 y * y := mul_self_le_mul_self h\u2081 h'\n  nlinarith\n```",
            "\n  nlinarith [sq_sqrt (sqrt_nonneg x)]\n```",
            "\n  nlinarith [h']\n```",
            "\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]\n```",
            "\n  rw [\u2190 mul_self_sqrt (by positivity : 0 \u2264 x), \u2190 mul_self_sqrt h]\n  exact mul_self_le_mul_self (sqrt_nonneg x) h'\n```",
            "\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]\n```",
            "\n  rw [\u2190 mul_self_le_mul_self_iff (h' := h)]\n  exact h'\n```",
            "\n  have := h'\n  rw [\u2190 sq_sqrt (by positivity : 0 \u2264 x), \u2190 sq] at this\n  nlinarith\n```",
            "\n  nlinarith [sq_sqrt (le_trans (by positivity) h)]\n```",
            "\n  have h\u2081 : 0 \u2264 \u221ax := by\n    nlinarith\n  have h\u2082 : \u221ax * \u221ax \u2264 y * y := by\n    nlinarith\n  nlinarith\n```",
            "\n  have : 0 \u2264 y * y := mul_nonneg h h\n  nlinarith [sq_sqrt (x), h']\n```",
            "\n  rw [\u2190 mul_self_le_mul_self_iff] <;> nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  have h\u2080 : 0 \u2264 \u221ax := by positivity\n  have h\u2081 : (\u221ax) * (\u221ax) \u2264 y * y := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  rw [\u2190 mul_self_le_mul_self_iff] <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [h, h']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  have h\u2081 : 0 \u2264 y := h\n  have h\u2082 : 0 \u2264 y * y := mul_nonneg h\u2081 h\u2081\n  nlinarith [sq_sqrt (mul_self_nonneg x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  rw [mul_comm]\n  nlinarith [h, h']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  rw [\u2190 Real.sqrt_sq h]\n  exact Real.sqrt_le_iff.mp h'",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x), h']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  rw [sq]\n  exact (Real.sqrt_le_left h).mp h'",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  rw [\u2190 mul_self_le_mul_self_iff]\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  rw [\u2190 sq_le_sq]\n  nlinarith [h, h']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  have : 0 \u2264 y := by assumption\n  nlinarith [sq_sqrt (by assumption : 0 \u2264 x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  have h\u2081 : 0 \u2264 \u221ax := sq_nonneg _\n  have h\u2082 : \u221ax * \u221ax \u2264 y * y := mul_self_le_mul_self h\u2081 h'\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  have : 0 \u2264 \u221ax := by nlinarith\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  rw [\u2190 sq_le_sq]\n  nlinarith [h, h']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  rw [\u2190 mul_self_le_mul_self_iff (h := by positivity)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [sq_sqrt (h.trans_le h')]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [h, h']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  have h\u2081 : 0 \u2264 \u221ax := sq_nonneg _\n  have h\u2082 : \u221ax * \u221ax \u2264 y * y := mul_self_le_mul_self h\u2081 h'\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [sq_sqrt (sqrt_nonneg x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [h']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  rw [\u2190 mul_self_sqrt (by positivity : 0 \u2264 x), \u2190 mul_self_sqrt h]\n  exact mul_self_le_mul_self (sqrt_nonneg x) h'",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [sq_sqrt (by linarith : 0 \u2264 x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  rw [\u2190 mul_self_le_mul_self_iff (h' := h)]\n  exact h'",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  have := h'\n  rw [\u2190 sq_sqrt (by positivity : 0 \u2264 x), \u2190 sq] at this\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  nlinarith [sq_sqrt (le_trans (by positivity) h)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  have h\u2081 : 0 \u2264 \u221ax := by\n    nlinarith\n  have h\u2082 : \u221ax * \u221ax \u2264 y * y := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  have : 0 \u2264 y * y := mul_nonneg h h\n  nlinarith [sq_sqrt (x), h']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mul_self_le_mul_self_of_sqrt_le_left (h : 0 \u2264 y) (h' : \u221ax \u2264 y) : x \u2264 y * y := by\n  rw [\u2190 mul_self_le_mul_self_iff] <;> nlinarith"
        ]
    },
    {
        "name": "lean_workbook_51244",
        "split": "test",
        "formal_statement": "theorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by",
        "model_outputs": [
            "\n  fin_cases x\n  all_goals decide\n```",
            "\n  fin_cases x\n  all_goals decide\n```",
            "\n  by_cases h : x = 0 <;> simp [h, sq] <;> decide\n```",
            "\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor\n    \u00b7 intro h\n      match x with\n      | 0 => contradiction\n      | 1 => simp_all\n      | 2 => contradiction\n      | 3 => contradiction\n      | 4 => contradiction\n      | 5 => contradiction\n      | 6 => contradiction\n      | 7 => simp_all\n    \u00b7 rintro (rfl | rfl) <;> simp\n  exact this\n```",
            "\n  have : x = 0 \u2228 x = 1 \u2228 x = 2 \u2228 x = 3 \u2228 x = 4 \u2228 x = 5 \u2228 x = 6 \u2228 x = 7 := by omega\n  rcases this with (rfl | rfl | rfl | rfl | rfl | rfl | rfl | rfl) <;>\n  simp [pow_two, ZMod.val, Nat.mod_eq_of_lt]\n  <;> decide\n```",
            "\n  fin_cases x\n  all_goals decide\n```",
            "\n  constructor <;>\n  intro h <;>\n  by_cases hx : x = 0 <;>\n  simp_all [sq, mul_assoc] <;>\n  decide\n```",
            "\n  fin_cases x <;>\n    decide\n```",
            "\n  constructor\n  next =>\n    intro hx\n    match x with\n    | 0 => contradiction\n    | 1 => simp_all\n    | 2 => contradiction\n    | 3 => contradiction\n    | 4 => contradiction\n    | 5 => contradiction\n    | 6 => contradiction\n    | 7 => simp_all\n  next =>\n    rintro (rfl | rfl) <;> simp\n```",
            "\n  constructor <;>\n  intro h <;>\n  (try decide) <;>\n  (try\n    simp only [sq, mul_self_eq_one_iff, Fin.val_one, Fin.val_zero, Fin.val_succ, add_left_neg,\n      add_zero, mul_zero, mul_one] at h) <;>\n  (try decide) <;>\n  (try\n    simp only [sq, mul_self_eq_one_iff, Fin.val_one, Fin.val_zero, Fin.val_succ, add_left_neg,\n      add_zero, mul_zero, mul_one] at h) <;>\n  (try decide) <;>\n  (try\n    simp only [sq, mul_self_eq_one_iff, Fin.val_one, Fin.val_zero, Fin.val_succ, add_left_neg,\n      add_zero, mul_zero, mul_one] at h) <;>\n  (try decide)\n```",
            "\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor <;> intro <;>\n      revert x\n    intro x hx\n    fin_cases x <;> simp_all\n    rintro x hx\n    fin_cases x <;> simp_all\n  exact this\n```",
            "\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor\n    \u00b7 intro h\n      match x with\n      | 0 => contradiction\n      | 1 => simp_all\n      | 2 => contradiction\n      | 3 => contradiction\n      | 4 => contradiction\n      | 5 => contradiction\n      | 6 => contradiction\n      | 7 => simp_all\n    \u00b7 rintro (rfl | rfl) <;> simp_all\n  exact this\n```",
            "\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor <;> intro h <;>\n    match x with\n    | 0 => contradiction\n    | 1 => simp_all\n    | 2 => contradiction\n    | 3 => contradiction\n    | 4 => contradiction\n    | 5 => contradiction\n    | 6 => contradiction\n    | 7 => simp_all\n  exact this\n```",
            "\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor <;> intro h <;>\n    (try decide) <;>\n    (try rw [\u2190 mul_self_eq_one_iff] at h <;>\n    simp only [sq, mul_self_eq_one_iff] at h <;>\n    simp only [sq, mul_self_eq_one_iff, or_comm, or_assoc, or_left_comm, and_assoc, and_left_comm,\n      and_comm, or_iff_left, or_iff_right, or_not_right, or_not_left, or_self, and_self,\n      and_not_left, and_not_right, not_and_left, not_and_right, not_and_not_right, not_and_not_left] at h <;>\n    simp only [sq, mul_self_eq_one_iff, or_comm, or_assoc, or_left_comm, and_assoc, and_left_comm,\n      and_comm, or_iff_left, or_iff_right, or_not_right, or_not_left, or_self, and_self,\n      and_not_left, and_not_right, not_and_left, not_and_right, not_and_not_right, not_and_not_left] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_not_iff, not_not_not, not_not_not_not] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_iff, not_not_not, not_not_not_not] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_iff, not_not_not, not_not_not_not] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_iff, not_not_not, not_not_not_not] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_iff, not_not_not, not_not_not_not] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_iff, not_not_not, not_not_not_not] <;>\n    decide) <;>\n  exact this\n```",
            "\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor\n    \u00b7 intro h\n      match x with\n      | 0 => contradiction\n      | 1 => simp\n      | 2 => contradiction\n      | 3 => contradiction\n      | 4 => contradiction\n      | 5 => contradiction\n      | 6 => contradiction\n      | 7 => simp\n    \u00b7 rintro (rfl | rfl) <;> simp\n  exact this\n```",
            "\n  norm_num\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = -1 := by\n    rw [sq, eq_comm]\n    norm_num\n    constructor\n    \u00b7 intro h\n      rw [\u2190 mul_self_eq_one_iff]\n      simpa using h\n    \u00b7 intro h\n      rw [h]\n      norm_num\n  rw [this]\n  norm_num\n  constructor\n  \u00b7 intro h\n    rw [\u2190 mul_self_eq_one_iff] at h\n    norm_num at h\n    contradiction\n  \u00b7 intro h\n    cases h <;> norm_num\n```",
            "\n  have : x = 1 \u2228 x = -1 \u2228 x = 7 \u2228 x = -7 := by revert x; decide\n  rcases this with (h | h | h | h) <;>\n  simp [h, pow_two, ZMod] <;>\n  decide\n```",
            "\n  fin_cases x\n  all_goals decide\n```",
            "\n  revert x\n  decide\n```",
            "\n  fin_cases x <;> simp [Nat.pow_succ, Nat.pow_succ]\n  <;> decide\n```",
            "\n  fin_cases x <;> decide\n```",
            "\n  fin_cases x\n  all_goals decide\n```",
            "\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor\n    \u00b7 intro h\n      match x with\n      | 0 => contradiction\n      | 1 => simp_all\n      | 2 => contradiction\n      | 3 => contradiction\n      | 4 => contradiction\n      | 5 => contradiction\n      | 6 => contradiction\n      | 7 => simp_all\n    \u00b7 rintro (rfl | rfl) <;> simp\n  exact this\n```",
            "\n  constructor <;> intro h <;>\n  match x with\n  | 0 => contradiction\n  | 1 => simp_all\n  | 2 => contradiction\n  | 3 => contradiction\n  | 4 => contradiction\n  | 5 => contradiction\n  | 6 => contradiction\n  | 7 => simp_all\n  <;> decide\n```",
            "\n  fin_cases x <;> simp <;> decide\n```",
            "\n  fin_cases x\n  decide\n  <;> decide\n  <;> decide\n  <;> decide\n```",
            "\n  have h\u2081 : (1 : ZMod 8) ^ 2 = 1 := by simp\n  have h\u2082 : (7 : ZMod 8) ^ 2 = 1 := by simp\n  have h\u2083 : (0 : ZMod 8) ^ 2 = 0 := by simp\n  have h\u2084 : (-1 : ZMod 8) ^ 2 = 1 := by simp\n  have h\u2085 : (2 : ZMod 8) ^ 2 = 4 := by simp\n  have h\u2086 : (4 : ZMod 8) ^ 2 = 0 := by simp\n  have h\u2087 : (3 : ZMod 8) ^ 2 = 1 := by simp\n  have h\u2088 : (6 : ZMod 8) ^ 2 = 0 := by simp\n  fin_cases x <;> simp_all\n```",
            "\n  have : (1 : ZMod 8) = 1 := rfl\n  have : (7 : ZMod 8) = 7 := rfl\n  have : (-1 : ZMod 8) = 7 := by decide\n  have : (-7 : ZMod 8) = 1 := by decide\n  simp [*, sq]\n  decide\n```",
            "\n  fin_cases x <;> decide\n```",
            "\n  fin_cases x <;> decide\n```",
            "\n  fin_cases x <;> decide\n```",
            "\n  fin_cases x\n  all_goals decide\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x\n  all_goals decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x\n  all_goals decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  by_cases h : x = 0 <;> simp [h, sq] <;> decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor\n    \u00b7 intro h\n      match x with\n      | 0 => contradiction\n      | 1 => simp_all\n      | 2 => contradiction\n      | 3 => contradiction\n      | 4 => contradiction\n      | 5 => contradiction\n      | 6 => contradiction\n      | 7 => simp_all\n    \u00b7 rintro (rfl | rfl) <;> simp\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  have : x = 0 \u2228 x = 1 \u2228 x = 2 \u2228 x = 3 \u2228 x = 4 \u2228 x = 5 \u2228 x = 6 \u2228 x = 7 := by omega\n  rcases this with (rfl | rfl | rfl | rfl | rfl | rfl | rfl | rfl) <;>\n  simp [pow_two, ZMod.val, Nat.mod_eq_of_lt]\n  <;> decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x\n  all_goals decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  constructor <;>\n  intro h <;>\n  by_cases hx : x = 0 <;>\n  simp_all [sq, mul_assoc] <;>\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x <;>\n    decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  constructor\n  next =>\n    intro hx\n    match x with\n    | 0 => contradiction\n    | 1 => simp_all\n    | 2 => contradiction\n    | 3 => contradiction\n    | 4 => contradiction\n    | 5 => contradiction\n    | 6 => contradiction\n    | 7 => simp_all\n  next =>\n    rintro (rfl | rfl) <;> simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  constructor <;>\n  intro h <;>\n  (try decide) <;>\n  (try\n    simp only [sq, mul_self_eq_one_iff, Fin.val_one, Fin.val_zero, Fin.val_succ, add_left_neg,\n      add_zero, mul_zero, mul_one] at h) <;>\n  (try decide) <;>\n  (try\n    simp only [sq, mul_self_eq_one_iff, Fin.val_one, Fin.val_zero, Fin.val_succ, add_left_neg,\n      add_zero, mul_zero, mul_one] at h) <;>\n  (try decide) <;>\n  (try\n    simp only [sq, mul_self_eq_one_iff, Fin.val_one, Fin.val_zero, Fin.val_succ, add_left_neg,\n      add_zero, mul_zero, mul_one] at h) <;>\n  (try decide)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor <;> intro <;>\n      revert x\n    intro x hx\n    fin_cases x <;> simp_all\n    rintro x hx\n    fin_cases x <;> simp_all\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor\n    \u00b7 intro h\n      match x with\n      | 0 => contradiction\n      | 1 => simp_all\n      | 2 => contradiction\n      | 3 => contradiction\n      | 4 => contradiction\n      | 5 => contradiction\n      | 6 => contradiction\n      | 7 => simp_all\n    \u00b7 rintro (rfl | rfl) <;> simp_all\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor <;> intro h <;>\n    match x with\n    | 0 => contradiction\n    | 1 => simp_all\n    | 2 => contradiction\n    | 3 => contradiction\n    | 4 => contradiction\n    | 5 => contradiction\n    | 6 => contradiction\n    | 7 => simp_all\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor <;> intro h <;>\n    (try decide) <;>\n    (try rw [\u2190 mul_self_eq_one_iff] at h <;>\n    simp only [sq, mul_self_eq_one_iff] at h <;>\n    simp only [sq, mul_self_eq_one_iff, or_comm, or_assoc, or_left_comm, and_assoc, and_left_comm,\n      and_comm, or_iff_left, or_iff_right, or_not_right, or_not_left, or_self, and_self,\n      and_not_left, and_not_right, not_and_left, not_and_right, not_and_not_right, not_and_not_left] at h <;>\n    simp only [sq, mul_self_eq_one_iff, or_comm, or_assoc, or_left_comm, and_assoc, and_left_comm,\n      and_comm, or_iff_left, or_iff_right, or_not_right, or_not_left, or_self, and_self,\n      and_not_left, and_not_right, not_and_left, not_and_right, not_and_not_right, not_and_not_left] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_not_iff, not_not_not, not_not_not_not] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_iff, not_not_not, not_not_not_not] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_iff, not_not_not, not_not_not_not] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_iff, not_not_not, not_not_not_not] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_iff, not_not_not, not_not_not_not] <;>\n    simp only [h, or_true, or_false, true_or, false_or, or_true_iff, or_false_iff,\n      true_and, false_and, and_true_iff, and_false_iff, not_true, not_false, not_true_iff,\n      not_false_iff, not_true_or, not_false_or, not_true_and, not_false_and, not_not,\n      not_not_iff, not_not_iff, not_not_not, not_not_not_not] <;>\n    decide) <;>\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor\n    \u00b7 intro h\n      match x with\n      | 0 => contradiction\n      | 1 => simp\n      | 2 => contradiction\n      | 3 => contradiction\n      | 4 => contradiction\n      | 5 => contradiction\n      | 6 => contradiction\n      | 7 => simp\n    \u00b7 rintro (rfl | rfl) <;> simp\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  norm_num\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = -1 := by\n    rw [sq, eq_comm]\n    norm_num\n    constructor\n    \u00b7 intro h\n      rw [\u2190 mul_self_eq_one_iff]\n      simpa using h\n    \u00b7 intro h\n      rw [h]\n      norm_num\n  rw [this]\n  norm_num\n  constructor\n  \u00b7 intro h\n    rw [\u2190 mul_self_eq_one_iff] at h\n    norm_num at h\n    contradiction\n  \u00b7 intro h\n    cases h <;> norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  have : x = 1 \u2228 x = -1 \u2228 x = 7 \u2228 x = -7 := by revert x; decide\n  rcases this with (h | h | h | h) <;>\n  simp [h, pow_two, ZMod] <;>\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x\n  all_goals decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  revert x\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x <;> simp [Nat.pow_succ, Nat.pow_succ]\n  <;> decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x <;> decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x\n  all_goals decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  have : (x : ZMod 8) ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n    constructor\n    \u00b7 intro h\n      match x with\n      | 0 => contradiction\n      | 1 => simp_all\n      | 2 => contradiction\n      | 3 => contradiction\n      | 4 => contradiction\n      | 5 => contradiction\n      | 6 => contradiction\n      | 7 => simp_all\n    \u00b7 rintro (rfl | rfl) <;> simp\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  constructor <;> intro h <;>\n  match x with\n  | 0 => contradiction\n  | 1 => simp_all\n  | 2 => contradiction\n  | 3 => contradiction\n  | 4 => contradiction\n  | 5 => contradiction\n  | 6 => contradiction\n  | 7 => simp_all\n  <;> decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x <;> simp <;> decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x\n  decide\n  <;> decide\n  <;> decide\n  <;> decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  have h\u2081 : (1 : ZMod 8) ^ 2 = 1 := by simp\n  have h\u2082 : (7 : ZMod 8) ^ 2 = 1 := by simp\n  have h\u2083 : (0 : ZMod 8) ^ 2 = 0 := by simp\n  have h\u2084 : (-1 : ZMod 8) ^ 2 = 1 := by simp\n  have h\u2085 : (2 : ZMod 8) ^ 2 = 4 := by simp\n  have h\u2086 : (4 : ZMod 8) ^ 2 = 0 := by simp\n  have h\u2087 : (3 : ZMod 8) ^ 2 = 1 := by simp\n  have h\u2088 : (6 : ZMod 8) ^ 2 = 0 := by simp\n  fin_cases x <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  have : (1 : ZMod 8) = 1 := rfl\n  have : (7 : ZMod 8) = 7 := rfl\n  have : (-1 : ZMod 8) = 7 := by decide\n  have : (-7 : ZMod 8) = 1 := by decide\n  simp [*, sq]\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x <;> decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x <;> decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x <;> decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sq_eq_one_mod_eight (x : ZMod 8) : x ^ 2 = 1 \u2194 x = 1 \u2228 x = 7 := by\n  fin_cases x\n  all_goals decide"
        ]
    },
    {
        "name": "lean_workbook_plus_51979",
        "split": "test",
        "formal_statement": "theorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by",
        "model_outputs": [
            "\n  rw [Complex.cpow_mul x y z, ofReal_cpow hx]\n```",
            "\n  rw [cpow_mul, ofReal_cpow hx]\n  rw [\u2190 ofReal_log hx]\n  simp [exp_add, cpow_def, ofReal_def, exp_log hx]\n```",
            "\n  rw [Complex.cpow_mul, Complex.ofReal_cpow hx]\n  rfl\n```",
            "\n  rw [Complex.cpow_mul, Complex.ofReal_cpow] <;> simp [hx]\n```",
            "\n  rw [\u2190 ofReal_cpow (rpow_nonneg hx y), \u2190 cpow_nat_cast]\n  simp [cpow_mul, Nat.cast_ofNat]\n```",
            "\n  rw [Complex.cpow_mul, Complex.ofReal_cpow hx]\n  simp\n```",
            "\n  rw [cpow_mul_ofReal_nonneg hx y]\n  simp [Complex.ofReal_cpow (rpow_nonneg_of_nonneg hx y)]\n```",
            "\n  rw [Complex.cpow_mul, Complex.ofReal_cpow hx]\n  rfl\n```",
            "\n  rw [mul_comm]\n  simp [hx, Complex.cpow_mul]\n```",
            "\n  rw [cpow_mul x y z, ofReal_cpow hx]\n```",
            "\n  rw [cpow_mul, ofReal_cpow hx]\n  simp\n```",
            "\n  rw [cpow_mul, ofReal_cpow hx]\n  simp\n```",
            "\n  rw [cpow_mul_ofReal_nonneg hx]\n  norm_cast\n```",
            "\n  rw [cpow_mul x y z]\n  simp [hx]\n```",
            "\n  rw [cpow_mul, ofReal_cpow hx]\n  simp\n```",
            "\n  rw [\u2190 ofReal_cpow (rpow_nonneg hx y), ofReal_cpow]\n  simp [Complex.ofReal_mul, mul_comm]\n```",
            "\n  rw [Complex.cpow_mul x y z, Complex.ofReal_cpow hx]\n```",
            "\n  rw [Complex.cpow_mul] <;> simp [hx]\n```",
            "\n  rw [mul_comm]\n  norm_cast\n  rw [cpow_mul, cpow_nat_cast] <;> simp [hx]\n```",
            "\n  rw [cpow_mul, ofReal_cpow hx] <;> simp [hx]\n```",
            "\n  rw [Complex.cpow_mul, Complex.ofReal_cpow (by positivity)]\n  rfl\n```",
            "\n  rw [mul_comm]\n  rw [Complex.cpow_mul]\n  norm_cast\n  simp [hx]\n```",
            "\n  rw [cpow_mul, ofReal_cpow hx]\n  simp\n```",
            "\n  rw [cpow_mul, ofReal_cpow hx] <;> simp [hx]\n```",
            "\n  rw [mul_comm]\n  simp [hx]\n```",
            "\n  rw [mul_comm]\n  rw [Complex.cpow_mul]\n  norm_cast\n  simp [hx]\n```",
            "\n  rw [Complex.cpow_mul, Complex.ofReal_cpow hx]\n  simp\n```",
            "\n  rw [Complex.cpow_mul, Complex.ofReal_cpow]\n  simp [hx]\n```",
            "\n  rw [cpow_mul_ofReal_nonneg hx]\n```",
            "\n  rw [mul_comm]\n  simp [hx, Complex.cpow_mul]\n```",
            "\n  rw [Complex.cpow_mul' (ofReal_ne_zero.mpr hx.ne')]\n  simp [Complex.ofReal_cpow hx]\n```",
            "\n  rw [Complex.cpow_mul] <;> simp [hx]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul x y z, ofReal_cpow hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul, ofReal_cpow hx]\n  rw [\u2190 ofReal_log hx]\n  simp [exp_add, cpow_def, ofReal_def, exp_log hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul, Complex.ofReal_cpow hx]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul, Complex.ofReal_cpow] <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [\u2190 ofReal_cpow (rpow_nonneg hx y), \u2190 cpow_nat_cast]\n  simp [cpow_mul, Nat.cast_ofNat]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul, Complex.ofReal_cpow hx]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul_ofReal_nonneg hx y]\n  simp [Complex.ofReal_cpow (rpow_nonneg_of_nonneg hx y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul, Complex.ofReal_cpow hx]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [mul_comm]\n  simp [hx, Complex.cpow_mul]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul x y z, ofReal_cpow hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul, ofReal_cpow hx]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul, ofReal_cpow hx]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul_ofReal_nonneg hx]\n  norm_cast",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul x y z]\n  simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul, ofReal_cpow hx]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [\u2190 ofReal_cpow (rpow_nonneg hx y), ofReal_cpow]\n  simp [Complex.ofReal_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul x y z, Complex.ofReal_cpow hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul] <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [mul_comm]\n  norm_cast\n  rw [cpow_mul, cpow_nat_cast] <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul, ofReal_cpow hx] <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul, Complex.ofReal_cpow (by positivity)]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [mul_comm]\n  rw [Complex.cpow_mul]\n  norm_cast\n  simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul, ofReal_cpow hx]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul, ofReal_cpow hx] <;> simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [mul_comm]\n  simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [mul_comm]\n  rw [Complex.cpow_mul]\n  norm_cast\n  simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul, Complex.ofReal_cpow hx]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul, Complex.ofReal_cpow]\n  simp [hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [cpow_mul_ofReal_nonneg hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [mul_comm]\n  simp [hx, Complex.cpow_mul]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul' (ofReal_ne_zero.mpr hx.ne')]\n  simp [Complex.ofReal_cpow hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cpow_mul_ofReal_nonneg {x : \u211d} (hx : 0 \u2264 x) (y : \u211d) (z : \u2102) :     (x : \u2102) ^ (\u2191y * z) = (\u2191(x ^ y) : \u2102) ^ z := by\n  rw [Complex.cpow_mul] <;> simp [hx]"
        ]
    },
    {
        "name": "lean_workbook_plus_49334",
        "split": "test",
        "formal_statement": "theorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by",
        "model_outputs": [
            "\n  apply le_of_lt\n  have : sin x ^ 2 < 1 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  linarith\n```",
            "\n  have h\u2081 : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]\n```",
            "\n  have : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  linarith [sq_nonneg (cos x)]\n```",
            "\n  nlinarith [sin_sq_add_cos_sq x]\n```",
            "\n  have : cos x ^ 2 \u2265 0 := by apply sq_nonneg\n  have : 0 \u2264 1 - sin x ^ 2 := by linarith [sin_sq_add_cos_sq x]\n  linarith\n```",
            "\n  have h\u2081 : 0 \u2264 (1 - sin x) ^ 2 := by nlinarith\n  nlinarith\n```",
            "\n  linarith [sin_sq_add_cos_sq x]\n```",
            "\n  have : sin x ^ 2 \u2264 1 := by\n    have h\u2081 : sin x ^ 2 \u2264 1 := by\n      nlinarith [sin_sq_add_cos_sq x]\n    linarith\n  exact this\n```",
            "\n  have h : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [cos_sq x]\n  nlinarith [cos_sq x]\n```",
            "\n  have h\u2081 : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]\n```",
            "\n  have h\u2080 : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [cos_sq_add_sin_sq x]\n  nlinarith [cos_sq_add_sin_sq x]\n```",
            "\n  nlinarith [sin_sq_add_cos_sq x]\n```",
            "\n  have h\u2081 : cos x ^ 2 + sin x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith\n```",
            "\n  have : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  linarith [sin_sq_nonneg x, cos_sq_nonneg x]\n```",
            "\n  have h : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith\n```",
            "\n  have h : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]\n```",
            "\n  have h\u2081 : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]\n```",
            "\n  have h\u2080 : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]\n```",
            "\n  have : cos (x - x / 2) ^ 2 \u2264 1 := by\n    apply sq_le_one_of_le\n    apply cos_le_one\n  simpa using this\n```",
            "\n  have h\u2080 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith\n```",
            "\n  have : sin x ^ 2 \u2264 1 := by\n    have h : sin x ^ 2 + cos x ^ 2 = 1 := Real.sin_sq_add_cos_sq x\n    nlinarith\n  exact this\n```",
            "\n  apply le_of_not_gt\n  intro h\n  have := sin_sq_add_cos_sq x\n  have := sin_sq_add_cos_sq x\n  linarith\n```",
            "\n  nlinarith [sin_sq_add_cos_sq x]\n```",
            "\n  have h\u2080 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith\n```",
            "\n  have h : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]\n```",
            "\n  have h : cos x ^ 2 + sin x ^ 2 = 1 := by rw [\u2190 sin_sq_add_cos_sq x]\n  nlinarith\n```",
            "\n  rw [sin_sq, sub_le_iff_le_add]\n  linarith [sq_nonneg (cos x)]\n```",
            "\n  have h : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]\n```",
            "\n  have h\u2080 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith\n```",
            "\n  have h\u2081 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith [h\u2081]\n```",
            "\n  have h : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith [h]\n```",
            "\n  have h : cos x ^ 2 + sin x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  apply le_of_lt\n  have : sin x ^ 2 < 1 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h\u2081 : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  linarith [sq_nonneg (cos x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  nlinarith [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have : cos x ^ 2 \u2265 0 := by apply sq_nonneg\n  have : 0 \u2264 1 - sin x ^ 2 := by linarith [sin_sq_add_cos_sq x]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h\u2081 : 0 \u2264 (1 - sin x) ^ 2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  linarith [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have : sin x ^ 2 \u2264 1 := by\n    have h\u2081 : sin x ^ 2 \u2264 1 := by\n      nlinarith [sin_sq_add_cos_sq x]\n    linarith\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [cos_sq x]\n  nlinarith [cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h\u2081 : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h\u2080 : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [cos_sq_add_sin_sq x]\n  nlinarith [cos_sq_add_sin_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  nlinarith [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h\u2081 : cos x ^ 2 + sin x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  linarith [sin_sq_nonneg x, cos_sq_nonneg x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h\u2081 : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h\u2080 : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have : cos (x - x / 2) ^ 2 \u2264 1 := by\n    apply sq_le_one_of_le\n    apply cos_le_one\n  simpa using this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h\u2080 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have : sin x ^ 2 \u2264 1 := by\n    have h : sin x ^ 2 + cos x ^ 2 = 1 := Real.sin_sq_add_cos_sq x\n    nlinarith\n  exact this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  apply le_of_not_gt\n  intro h\n  have := sin_sq_add_cos_sq x\n  have := sin_sq_add_cos_sq x\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  nlinarith [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h\u2080 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h : cos x ^ 2 + sin x ^ 2 = 1 := by rw [\u2190 sin_sq_add_cos_sq x]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  rw [sin_sq, sub_le_iff_le_add]\n  linarith [sq_nonneg (cos x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h : sin x ^ 2 \u2264 cos x ^ 2 := by\n    nlinarith [sin_sq_add_cos_sq x]\n  nlinarith [sin_sq_add_cos_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h\u2080 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h\u2081 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith [h\u2081]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq_le_one : sin x ^ 2 \u2264 1 := by\n  have h : cos x ^ 2 + sin x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_32906",
        "split": "test",
        "formal_statement": "theorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by",
        "model_outputs": [
            "\n  intro h\u2081 h\u2082 h\u2083\n  linarith [h\u2082, h\u2083]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  linarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  linarith\n```",
            "\n  intro hw\u2081 hw\u2082 hw\u2083\n  linarith\n```",
            "\n  intro h\u2081 h\u2082 h\u2083\n  linarith [h\u2082]\n```",
            "\n  intro hw\u2081 hp\u2081 hp\u2082\n  linarith\n```",
            "\n  intro h\u2081 h\u2082 h\u2083\n  linarith\n```",
            "\n  intro h\u2081 h\u2082 h\u2083\n  nlinarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith [h\u2080, h\u2081, h\u2082]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith [h\u2080, h\u2081, h\u2082]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith [h\u2080, h\u2081, h\u2082]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083\n  linarith [h\u2081, h\u2082, h\u2083]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  linarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  linarith [h\u2080, h\u2081, h\u2082]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith [h\u2080, h\u2081, h\u2082]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  linarith\n```",
            "\n  intro h\u2081 h\u2082 h\u2083\n  linarith [h\u2081, h\u2082, h\u2083]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  simp_all only [mul_assoc, mul_comm, mul_left_comm]\n  nlinarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  linarith [h\u2080, h\u2081, h\u2082]\n```",
            "\n  intro h\u2081 h\u2082 h\u2083\n  linarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  linarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  linarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  linarith\n```",
            "\n  intro h\u2081 h\u2082 h\u2083\n  nlinarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith [h\u2080, h\u2081, h\u2082]\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith\n```",
            "\n  intro h\u2081 h\u2082 h\u2083\n  nlinarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  linarith\n```",
            "\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083\n  linarith [h\u2082, h\u2083]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro hw\u2081 hw\u2082 hw\u2083\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083\n  linarith [h\u2082]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro hw\u2081 hp\u2081 hp\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith [h\u2080, h\u2081, h\u2082]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith [h\u2080, h\u2081, h\u2082]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith [h\u2080, h\u2081, h\u2082]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083\n  linarith [h\u2081, h\u2082, h\u2083]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  linarith [h\u2080, h\u2081, h\u2082]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith [h\u2080, h\u2081, h\u2082]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083\n  linarith [h\u2081, h\u2082, h\u2083]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  simp_all only [mul_assoc, mul_comm, mul_left_comm]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  linarith [h\u2080, h\u2081, h\u2082]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith [h\u2080, h\u2081, h\u2082]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2081 h\u2082 h\u2083\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean4_weighted (w\u2081 w\u2082 w\u2083 w\u2084 p\u2081 p\u2082 p\u2083 p\u2084 : \u211d) :     w\u2081 + w\u2082 + w\u2083 + w\u2084 = 1 \u2192     p\u2081 \u2264 (p\u2082 * p\u2083 * p\u2084) ^ (w\u2082 / (w\u2081 + w\u2082 + w\u2083)) * (p\u2082 * p\u2083 * p\u2084) ^ (w\u2084 / (w\u2081 + w\u2082 + w\u2084)) \u2192     w\u2082 * (w\u2081 + w\u2083) * (p\u2082 - p\u2081) * (p\u2082 - p\u2083) / (2 * (w\u2081 * w\u2083 + w\u2081 * w\u2084 + w\u2082 * w\u2084 + w\u2083 * w\u2084)) \u2264 0 \u2192     p\u2081 \u2264 w\u2081 * p\u2081 + w\u2082 * p\u2082 + w\u2083 * p\u2083 + w\u2084 * p\u2084 := by\n  intro h\u2080 h\u2081 h\u2082\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_plus_4241",
        "split": "test",
        "formal_statement": "theorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by",
        "model_outputs": [
            "\n  use b\n  aesop\n```",
            "\n  use b\n  simp_all [Nat.ModEq, Nat.mod_eq_of_lt]\n```",
            "\n  use b\n  constructor\n  exact \u27e8by simp [h\u2082], by simp [Nat.ModEq, h\u2080]\u27e9\n  intro b' hb'\n  simpa [Nat.ModEq, h\u2080] using h\u2083 b' hb'.1 hb'.2\n```",
            "\n  use b\n  aesop\n```",
            "\n  apply ExistsUnique.intro b\n  aesop\n```",
            "\n  use b\n  simp_all [Nat.ModEq, Nat.mod_eq_of_lt]\n```",
            "\n  use b\n  simp_all [Nat.mod_eq_of_lt, Nat.ModEq, Nat.mod_eq_of_lt, Nat.ModEq]\n```",
            "\n  use b\n  simp_all\n```",
            "\n  use b\n  aesop\n```",
            "\n  use b\n  aesop\n```",
            "\n  use b\n  constructor\n  exact \u27e8rfl, by rfl\u27e9\n  intro b' hb'\n  simpa [Nat.ModEq, Nat.ModEq] using h\u2083 b' hb'.1 hb'.2\n```",
            "\n  use b\n  aesop\n```",
            "\n  use b\n  aesop\n```",
            "\n  aesop\n```",
            "\n  use b\n  aesop\n```",
            "\n  use b\n  aesop\n```",
            "\n  exact \u27e8b, \u27e8by simp [Nat.ModEq, Nat.mod_eq_of_lt h\u2080, Nat.mod_eq_of_lt h\u2082], h\u2083\u27e9, fun y hy => hy.2 b (by simp [Nat.ModEq, Nat.mod_eq_of_lt h\u2080, Nat.mod_eq_of_lt h\u2082]) rfl\u27e9\n```",
            "\n  use b\n  aesop\n```",
            "\n  exact \u27e8b, \u27e8by simp [Nat.mod_eq_of_lt h\u2082], by simp [Nat.ModEq, Nat.mod_eq_of_lt h\u2081]\u27e9, fun b' h => h\u2083 b' h.1 h.2\u27e9\n```",
            "\n  use b\n  aesop\n```",
            "\n  use b\n  simp_all [Nat.ModEq, Nat.ModEq.refl]\n```",
            "\n  use b\n  aesop\n```",
            "\n  use b\n  aesop\n```",
            "\n  refine' \u27e8b, \u27e8by simp [h\u2082], by simp [Nat.ModEq, h\u2080]\u27e9, fun b' hb' => _\u27e9\n  simp_all [Nat.ModEq, h\u2080]\n```",
            "\n  exact \u27e8b, by simpa using h\u2083 b, fun b' h' => by simpa [Nat.ModEq, Nat.ModEq] using h\u2083 b'\u27e9\n```",
            "\n  use b\n  simp_all [Nat.ModEq, Nat.mod_eq_of_lt]\n```",
            "\n  use b\n  simp_all [Nat.ModEq, Nat.mod_eq_of_lt]\n```",
            "\n  refine' \u27e8b % 5, \u27e8by simp, by simp\u27e9, fun y hy => _\u27e9\n  simp at hy\n  have h\u2084 := h\u2083 y hy.1 hy.2\n  simp_all\n```",
            "\n  use b\n  aesop\n```",
            "\n  use b\n  simp_all [Nat.ModEq, Nat.mod_eq_of_lt]\n```",
            "\n  use b\n  aesop\n```",
            "\n  use b\n  aesop\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  simp_all [Nat.ModEq, Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  constructor\n  exact \u27e8by simp [h\u2082], by simp [Nat.ModEq, h\u2080]\u27e9\n  intro b' hb'\n  simpa [Nat.ModEq, h\u2080] using h\u2083 b' hb'.1 hb'.2",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  apply ExistsUnique.intro b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  simp_all [Nat.ModEq, Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  simp_all [Nat.mod_eq_of_lt, Nat.ModEq, Nat.mod_eq_of_lt, Nat.ModEq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  constructor\n  exact \u27e8rfl, by rfl\u27e9\n  intro b' hb'\n  simpa [Nat.ModEq, Nat.ModEq] using h\u2083 b' hb'.1 hb'.2",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  exact \u27e8b, \u27e8by simp [Nat.ModEq, Nat.mod_eq_of_lt h\u2080, Nat.mod_eq_of_lt h\u2082], h\u2083\u27e9, fun y hy => hy.2 b (by simp [Nat.ModEq, Nat.mod_eq_of_lt h\u2080, Nat.mod_eq_of_lt h\u2082]) rfl\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  exact \u27e8b, \u27e8by simp [Nat.mod_eq_of_lt h\u2082], by simp [Nat.ModEq, Nat.mod_eq_of_lt h\u2081]\u27e9, fun b' h => h\u2083 b' h.1 h.2\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  simp_all [Nat.ModEq, Nat.ModEq.refl]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  refine' \u27e8b, \u27e8by simp [h\u2082], by simp [Nat.ModEq, h\u2080]\u27e9, fun b' hb' => _\u27e9\n  simp_all [Nat.ModEq, h\u2080]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  exact \u27e8b, by simpa using h\u2083 b, fun b' h' => by simpa [Nat.ModEq, Nat.ModEq] using h\u2083 b'\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  simp_all [Nat.ModEq, Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  simp_all [Nat.ModEq, Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  refine' \u27e8b % 5, \u27e8by simp, by simp\u27e9, fun y hy => _\u27e9\n  simp at hy\n  have h\u2084 := h\u2083 y hy.1 hy.2\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  simp_all [Nat.ModEq, Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_unique_equiv {a b : Nat} (h\u2080 : 0 < a) (h\u2081 : a < 5) (h\u2082 : b % 5 < 5)     (h\u2083 : \u2200 b' : Nat, b' % 5 = b % 5 \u2192 a \u2261 b' [MOD 5] \u2192 b = b') :     \u2203! b, b % 5 = b % 5 \u2227 a \u2261 b [MOD 5] := by\n  use b\n  aesop"
        ]
    },
    {
        "name": "lean_workbook_plus_70767",
        "split": "test",
        "formal_statement": "theorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by",
        "model_outputs": [
            "\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor\n  nlinarith [Int.floor_le x]\n  nlinarith [Int.lt_floor_add_one x]\n```",
            "\n  use \u230ax\u230b\n  simp [abs_le, h\u03b5]\n  exact \u27e8by linarith [Int.floor_le x], by linarith [Int.lt_floor_add_one x]\u27e9\n```",
            "\n  use \u230ax\u230b\n  simp\n  exact (abs_sub_le x \u230ax\u230b 0).trans (by linarith [Int.sub_floor_le x])\n```",
            "\n  use \u230ax\u230b\n  simp only [abs_le, le_of_lt h\u03b5, sub_le_iff_le_add, sub_lt_iff_lt_add, add_comm \u03b5, add_neg_cancel_right,\n    and_true]\n  norm_num\n  exact \u27e8Int.floor_le _, Int.lt_floor_add_one _\u27e9\n```",
            "\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor\n  nlinarith [Int.floor_le x]\n  nlinarith [Int.lt_floor_add_one x]\n```",
            "\n  use \u230ax\u230b\n  rw [abs_sub_comm]\n  norm_num\n  exact (sub_le_iff_le_add'.2 (Int.sub_floor_le x))\n```",
            "\n  use \u230ax\u230b\n  simp\n  exact (abs_le.2 \u27e8sub_le_iff_le_add'.mpr (le_add_of_nonneg_right h\u03b5.le),\n    le_sub_iff_add_le'.mpr (add_le_add_right (floor_le x) _)\u27e9)\n```",
            "\n  use \u230ax\u230b\n  simp [abs_le, h\u03b5]\n  exact \u27e8by linarith [Int.floor_le x], by linarith [Int.lt_floor_add_one x]\u27e9\n```",
            "\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor <;> linarith [Int.floor_le x, Int.lt_floor_add_one x]\n```",
            "\n  use \u230ax\u230b\n  simp only [Int.cast_ofNat, Int.floor_le, Int.cast_sub, Int.cast_abs,\n    abs_sub_le_iff, sub_sub, add_comm]\n  constructor <;> linarith [Int.fract_lt_one x]\n```",
            "\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor <;> linarith [floor_le x, sub_lt_iff_lt_add.mpr (lt_floor_add_one x)]\n```",
            "\n  apply Exists.intro (x.toInt)\n  norm_num [Int.ofNat_le]\n  exact abs_sub_round_div_two_le x \u03b5 h\u03b5\n```",
            "\n  use (x : \u2124)\n  norm_num\n  exact (abs_sub_lt_iff.mpr \u27e8by linarith, by linarith\u27e9)\n```",
            "\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor <;> linarith [floor_le x, sub_lt_iff_lt_add'.mpr (lt_floor_add_one x)]\n```",
            "\n  use \u230ax\u230b\n  exact abs_sub_le_iff.2 \u27e8by linarith [Int.floor_le x], by linarith [Int.lt_floor_add_one x]\u27e9\n```",
            "\n  use \u230ax\u230b\n  apply le_of_lt\n  exact abs_sub_lt_iff.mpr \u27e8sub_lt_comm.mpr (sub_lt_floor_add_one x),\n    sub_lt_comm.mpr (sub_lt_floor_add_one x)\u27e9\n```",
            "\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor\n  nlinarith [Int.floor_le x]\n  nlinarith [Int.lt_floor_add_one x]\n```",
            "\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor\n  linarith [Int.floor_le x]\n  linarith [Int.lt_floor_add_one x]\n```",
            "\n  use \u230ax\u230b\n  simp [abs_le, le_of_lt h\u03b5]\n  exact \u27e8by linarith [Int.floor_le x], by linarith [Int.lt_floor_add_one x]\u27e9\n```",
            "\n  use \u230ax\u230b\n  simp only [abs_le, le_of_lt h\u03b5]\n  constructor\n  linarith [Int.floor_le x]\n  linarith [Int.lt_floor_add_one x]\n```",
            "\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor <;> linarith [Int.floor_le x, Int.lt_floor_add_one x]\n```",
            "\n  use (x / \u03b5).floor\n  have : |x - \u03b5 * \u2191(x / \u03b5).floor| \u2264 \u03b5 := by\n    rw [abs_le]\n    constructor\n    \u00b7 nlinarith [mul_div_cancel' x (ne_of_gt h\u03b5)]\n    \u00b7 nlinarith [mul_div_cancel' x (ne_of_gt h\u03b5)]\n  linarith\n```",
            "\n  use \u230ax\u230b\n  apply le_of_lt\n  exact abs_sub_lt_iff.mpr \u27e8sub_lt_iff_lt_add.mpr (lt_add_of_le_of_pos (floor_le x) h\u03b5),\n    sub_lt_iff_lt_add.mpr (lt_add_of_le_of_pos (le_floor x) h\u03b5)\u27e9\n```",
            "\n  exact \u27e8\u230ax\u230b, by simp [abs_le, h\u03b5, Int.floor_le, Int.le_floor]\u27e9\n```",
            "\n  use \u230ax\u230b\n  simp\n  exact (abs_le.2 \u27e8sub_le_iff_le_add.2 (le_add_of_nonneg_right (Int.floor_le _)),\n    sub_le_comm.2 (sub_le_iff_le_add.2 (Int.le_floor.2 (le_add_of_nonneg_right (by linarith))))\u27e9)\n```",
            "\n  refine' \u27e8\u230ax\u230b, _\u27e9\n  rw [abs_le]\n  constructor <;> linarith [Int.floor_le x, Int.lt_floor_add_one x]\n```",
            "\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor\n  linarith [Int.floor_le x]\n  linarith [Int.lt_floor_add_one x]\n```",
            "\n  use \u230ax\u230b\n  simp\n  exact (abs_le.2 \u27e8by linarith [Int.lt_floor_add_one x], by linarith [Int.floor_le x]\u27e9)\n```",
            "\n  use \u230ax\u230b\n  simp only [sub_le_iff_le_add, abs_le, le_sub_iff_add_le]\n  constructor <;> linarith [add_sub_cancel x \u230ax\u230b, h\u03b5]\n```",
            "\n  use (x / \u03b5).floor\n  simp [abs_le, le_div_iff h\u03b5, div_le_iff h\u03b5]\n  norm_num\n  exact \u27e8by linarith [Int.floor_le (x / \u03b5)], by linarith [Int.lt_floor_add_one (x / \u03b5)]\u27e9\n```",
            "\n  use \u230ax\u230b\n  simp only [abs_le, le_of_lt h\u03b5]\n  constructor <;> linarith [floor_le x, sub_lt_iff_lt_add'.mpr (lt_floor_add_one x)]\n```",
            "\n  use \u230ax\u230b\n  simp\n  exact (abs_sub_le_iff.mpr \u27e8le_sub_iff_add_le.mpr (by linarith [Int.sub_floor_le x]),\n    sub_le_iff_le_add.mpr (by linarith [Int.le_sub_floor x])\u27e9)\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor\n  nlinarith [Int.floor_le x]\n  nlinarith [Int.lt_floor_add_one x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp [abs_le, h\u03b5]\n  exact \u27e8by linarith [Int.floor_le x], by linarith [Int.lt_floor_add_one x]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp\n  exact (abs_sub_le x \u230ax\u230b 0).trans (by linarith [Int.sub_floor_le x])",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp only [abs_le, le_of_lt h\u03b5, sub_le_iff_le_add, sub_lt_iff_lt_add, add_comm \u03b5, add_neg_cancel_right,\n    and_true]\n  norm_num\n  exact \u27e8Int.floor_le _, Int.lt_floor_add_one _\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor\n  nlinarith [Int.floor_le x]\n  nlinarith [Int.lt_floor_add_one x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  rw [abs_sub_comm]\n  norm_num\n  exact (sub_le_iff_le_add'.2 (Int.sub_floor_le x))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp\n  exact (abs_le.2 \u27e8sub_le_iff_le_add'.mpr (le_add_of_nonneg_right h\u03b5.le),\n    le_sub_iff_add_le'.mpr (add_le_add_right (floor_le x) _)\u27e9)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp [abs_le, h\u03b5]\n  exact \u27e8by linarith [Int.floor_le x], by linarith [Int.lt_floor_add_one x]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor <;> linarith [Int.floor_le x, Int.lt_floor_add_one x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp only [Int.cast_ofNat, Int.floor_le, Int.cast_sub, Int.cast_abs,\n    abs_sub_le_iff, sub_sub, add_comm]\n  constructor <;> linarith [Int.fract_lt_one x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor <;> linarith [floor_le x, sub_lt_iff_lt_add.mpr (lt_floor_add_one x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  apply Exists.intro (x.toInt)\n  norm_num [Int.ofNat_le]\n  exact abs_sub_round_div_two_le x \u03b5 h\u03b5",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use (x : \u2124)\n  norm_num\n  exact (abs_sub_lt_iff.mpr \u27e8by linarith, by linarith\u27e9)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor <;> linarith [floor_le x, sub_lt_iff_lt_add'.mpr (lt_floor_add_one x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  exact abs_sub_le_iff.2 \u27e8by linarith [Int.floor_le x], by linarith [Int.lt_floor_add_one x]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  apply le_of_lt\n  exact abs_sub_lt_iff.mpr \u27e8sub_lt_comm.mpr (sub_lt_floor_add_one x),\n    sub_lt_comm.mpr (sub_lt_floor_add_one x)\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor\n  nlinarith [Int.floor_le x]\n  nlinarith [Int.lt_floor_add_one x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor\n  linarith [Int.floor_le x]\n  linarith [Int.lt_floor_add_one x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp [abs_le, le_of_lt h\u03b5]\n  exact \u27e8by linarith [Int.floor_le x], by linarith [Int.lt_floor_add_one x]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp only [abs_le, le_of_lt h\u03b5]\n  constructor\n  linarith [Int.floor_le x]\n  linarith [Int.lt_floor_add_one x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor <;> linarith [Int.floor_le x, Int.lt_floor_add_one x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use (x / \u03b5).floor\n  have : |x - \u03b5 * \u2191(x / \u03b5).floor| \u2264 \u03b5 := by\n    rw [abs_le]\n    constructor\n    \u00b7 nlinarith [mul_div_cancel' x (ne_of_gt h\u03b5)]\n    \u00b7 nlinarith [mul_div_cancel' x (ne_of_gt h\u03b5)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  apply le_of_lt\n  exact abs_sub_lt_iff.mpr \u27e8sub_lt_iff_lt_add.mpr (lt_add_of_le_of_pos (floor_le x) h\u03b5),\n    sub_lt_iff_lt_add.mpr (lt_add_of_le_of_pos (le_floor x) h\u03b5)\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  exact \u27e8\u230ax\u230b, by simp [abs_le, h\u03b5, Int.floor_le, Int.le_floor]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp\n  exact (abs_le.2 \u27e8sub_le_iff_le_add.2 (le_add_of_nonneg_right (Int.floor_le _)),\n    sub_le_comm.2 (sub_le_iff_le_add.2 (Int.le_floor.2 (le_add_of_nonneg_right (by linarith))))\u27e9)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  refine' \u27e8\u230ax\u230b, _\u27e9\n  rw [abs_le]\n  constructor <;> linarith [Int.floor_le x, Int.lt_floor_add_one x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  rw [abs_le]\n  constructor\n  linarith [Int.floor_le x]\n  linarith [Int.lt_floor_add_one x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp\n  exact (abs_le.2 \u27e8by linarith [Int.lt_floor_add_one x], by linarith [Int.floor_le x]\u27e9)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp only [sub_le_iff_le_add, abs_le, le_sub_iff_add_le]\n  constructor <;> linarith [add_sub_cancel x \u230ax\u230b, h\u03b5]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use (x / \u03b5).floor\n  simp [abs_le, le_div_iff h\u03b5, div_le_iff h\u03b5]\n  norm_num\n  exact \u27e8by linarith [Int.floor_le (x / \u03b5)], by linarith [Int.lt_floor_add_one (x / \u03b5)]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp only [abs_le, le_of_lt h\u03b5]\n  constructor <;> linarith [floor_le x, sub_lt_iff_lt_add'.mpr (lt_floor_add_one x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem exists_int_abs_mul_sub_le (x : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :     \u2203 q : \u2124, |x - q| \u2264 \u03b5 := by\n  use \u230ax\u230b\n  simp\n  exact (abs_sub_le_iff.mpr \u27e8le_sub_iff_add_le.mpr (by linarith [Int.sub_floor_le x]),\n    sub_le_iff_le_add.mpr (by linarith [Int.le_sub_floor x])\u27e9)"
        ]
    },
    {
        "name": "lean_workbook_40116",
        "split": "test",
        "formal_statement": "theorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by",
        "model_outputs": [
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  simp only [add_mul, mul_assoc, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  simp only [add_mul, mul_assoc, mul_comm, mul_left_comm, mul_right_comm]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add_mul_le (a b : \u211d) : (a + b) * (a + b) ^ 2 \u2264 (a + b) * (a ^ 2 + b ^ 2) := by\n  nlinarith [sq_nonneg (a - b)]"
        ]
    },
    {
        "name": "lean_workbook_13735",
        "split": "test",
        "formal_statement": "theorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by",
        "model_outputs": [
            "\n  rw [pow_succ]\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (x - y), pow_bit0_nonneg x (n + 1), pow_bit0_nonneg y (n + 1), pow_bit0_nonneg (x - y) n]\n```",
            "\n  simp_rw [pow_bit1]\n  nlinarith [pow_le_pow_of_le_left hx hxy _]\n```",
            "\n  rw [pow_bit1, pow_bit1]\n  nlinarith [pow_le_pow_of_le_left hx hxy _]\n```",
            "\n  nlinarith [pow_bit1_add_pow_bit1 hx hy, pow_bit0_le_pow_bit0 hxy]\n```",
            "\n  rw [show x ^ bit1 (n + 1) = x ^ (2 * n + 2) by rw [bit1, add_comm]; ring]\n  rw [show y ^ bit1 (n + 1) = y ^ (2 * n + 2) by rw [bit1, add_comm]; ring]\n  nlinarith [pow_le_pow_right hx (by nlinarith : 1 \u2264 2),\n    pow_le_pow_right hy (by nlinarith : 1 \u2264 2), hxy]\n```",
            "\n  simp only [pow_add, pow_one, mul_one, add_assoc, add_right_comm, add_left_comm]\n  nlinarith [sq_nonneg (x - y), pow_bit0_nonneg x n, pow_bit0_nonneg y n]\n```",
            "\n  simp only [Nat.add_succ_sub_one, add_zero, pow_add, pow_one, mul_assoc]\n  nlinarith [pow_le_pow_left hx hxy _]\n```",
            "\n  simp_rw [pow_bit1]\n  nlinarith [sq_nonneg (x - y), pow_le_pow_left hx hxy _]\n```",
            "\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]\n```",
            "\n  have hn := pow_bit1_sq_add_pow_bit1_le hx hy hxy\n  simp only [pow_succ, mul_add, mul_one, mul_assoc] at hn \u22a2\n  nlinarith\n```",
            "\n  rw [show n.bit1 = succ (succ n) by rw [Nat.bit1_succ_eq_succ_bit1]]\n  ring_nf\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]\n```",
            "\n  rw [\u2190 add_le_add_iff_left (x ^ bit1 (n + 1)), add_assoc]\n  norm_num\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y)]\n```",
            "\n  simp only [pow_add, pow_one, pow_two, mul_add, mul_one, mul_comm]\n  nlinarith\n```",
            "\n  simp only [Nat.bit1, Nat.add_succ, Nat.add_zero, Nat.add_right_comm, Nat.add_assoc, Nat.add_left_comm]\n  nlinarith [pow_bit1_add_pow_bit1 hx hy, pow_bit1_le_pow_bit1 hx hy hxy]\n```",
            "\n  rw [pow_succ]\n  simp only [Nat.cast_add, Nat.cast_one]\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]\n```",
            "\n  rw [pow_bit1]\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]\n```",
            "\n  simp only [bit1, add_left_comm, add_assoc]\n  nlinarith [pow_le_pow_left hx hxy (n + 1), pow_le_pow_left hy hxy (n + 1)]\n```",
            "\n  rw [show (n + 1) = n + 1 from rfl]\n  nlinarith [pow_le_pow_of_le_left hx hxy _]\n```",
            "\n  rw [pow_succ, pow_succ]\n  nlinarith [pow_bit1_sq_add_pow_bit1_le' hx hy hxy]\n```",
            "\n  simp only [bit1, pow_succ, pow_add]\n  nlinarith [sq_nonneg (x - y), pow_nonneg hx (n + 1), pow_nonneg hy (n + 1),\n    pow_nonneg hx n, pow_nonneg hy n]\n```",
            "\n  rw [pow_bit1, pow_bit1]\n  nlinarith [pow_le_pow_left hx hy hxy]\n```",
            "\n  simp only [add_assoc, add_left_comm, add_right_comm, add_le_add_iff_left]\n  nlinarith [pow_bit1_le_mul_pow_bit1 hx hy hxy]\n```",
            "\n  rw [show bit1 (n + 1) = 2 * (n + 1) + 1 by simp]\n  rw [show bit1 n = 2 * n + 1 by simp]\n  nlinarith [pow_le_pow_left hx hxy _]\n```",
            "\n  rw [show (bit1 (n + 1) : \u2115) = bit0 n + 2 by norm_num]\n  rw [show (bit1 (n + 1) : \u2115) = bit0 n + 2 by norm_num]\n  nlinarith [pow_bit0_nonneg x (n + 1), pow_bit0_nonneg y (n + 1),\n    pow_bit0_nonneg x n, pow_bit0_nonneg y n]\n```",
            "\n  simp only [Nat.bit1_eq_succ_bit0, Nat.bit0_succ, Nat.bit0_zero]\n  nlinarith [pow_bit0_nonneg x (n + 1), pow_bit0_nonneg y (n + 1)]\n```",
            "\n  simp only [Nat.bit1, add_mul, mul_add, mul_comm, mul_left_comm, mul_assoc, Nat.add_assoc,\n    Nat.add_comm]\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]\n```",
            "\n  simp only [pow_succ, pow_add, pow_one, mul_assoc]\n  nlinarith [mul_self_nonneg (x ^ n), mul_self_nonneg (x * y), mul_self_nonneg (y ^ n)]\n```",
            "\n  rw [show x ^ bit1 (n + 1) = x ^ (bit0 (n + 1) + 1) by rw [Nat.bit1_eq_succ_bit0]]\n  rw [show y ^ bit1 (n + 1) = y ^ (bit0 (n + 1) + 1) by rw [Nat.bit1_eq_succ_bit0]]\n  nlinarith [pow_bit0_nonneg x (n + 1), pow_bit0_nonneg y (n + 1), hx, hy, hxy]\n```",
            "\n  rw [show x ^ bit1 (n + 1) = x ^ (n + 1 + 1) by rw [Nat.bit1_eq_succ_bit1]]\n  rw [show y ^ bit1 (n + 1) = y ^ (n + 1 + 1) by rw [Nat.bit1_eq_succ_bit1]]\n  nlinarith [pow_le_pow_right hx (by linarith), pow_le_pow_right hy (by linarith), hxy]\n```",
            "\n  have hn : 0 < bit1 (n + 1) := by positivity\n  nlinarith [pow_bit1_le_iff_right hx hy hn, pow_bit1_le_iff_left hx hy hn, pow_bit1_le_iff_left hy hx hn]\n```",
            "\n  rw [show x ^ bit1 (n + 1) = x ^ (2 * n + 2) by ring, show y ^ bit1 (n + 1) = y ^ (2 * n + 2) by ring]\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [pow_succ]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  nlinarith [sq_nonneg (x - y), pow_bit0_nonneg x (n + 1), pow_bit0_nonneg y (n + 1), pow_bit0_nonneg (x - y) n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp_rw [pow_bit1]\n  nlinarith [pow_le_pow_of_le_left hx hxy _]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [pow_bit1, pow_bit1]\n  nlinarith [pow_le_pow_of_le_left hx hxy _]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  nlinarith [pow_bit1_add_pow_bit1 hx hy, pow_bit0_le_pow_bit0 hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [show x ^ bit1 (n + 1) = x ^ (2 * n + 2) by rw [bit1, add_comm]; ring]\n  rw [show y ^ bit1 (n + 1) = y ^ (2 * n + 2) by rw [bit1, add_comm]; ring]\n  nlinarith [pow_le_pow_right hx (by nlinarith : 1 \u2264 2),\n    pow_le_pow_right hy (by nlinarith : 1 \u2264 2), hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp only [pow_add, pow_one, mul_one, add_assoc, add_right_comm, add_left_comm]\n  nlinarith [sq_nonneg (x - y), pow_bit0_nonneg x n, pow_bit0_nonneg y n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp only [Nat.add_succ_sub_one, add_zero, pow_add, pow_one, mul_assoc]\n  nlinarith [pow_le_pow_left hx hxy _]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp_rw [pow_bit1]\n  nlinarith [sq_nonneg (x - y), pow_le_pow_left hx hxy _]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  have hn := pow_bit1_sq_add_pow_bit1_le hx hy hxy\n  simp only [pow_succ, mul_add, mul_one, mul_assoc] at hn \u22a2\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [show n.bit1 = succ (succ n) by rw [Nat.bit1_succ_eq_succ_bit1]]\n  ring_nf\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [\u2190 add_le_add_iff_left (x ^ bit1 (n + 1)), add_assoc]\n  norm_num\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp only [pow_add, pow_one, pow_two, mul_add, mul_one, mul_comm]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp only [Nat.bit1, Nat.add_succ, Nat.add_zero, Nat.add_right_comm, Nat.add_assoc, Nat.add_left_comm]\n  nlinarith [pow_bit1_add_pow_bit1 hx hy, pow_bit1_le_pow_bit1 hx hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [pow_succ]\n  simp only [Nat.cast_add, Nat.cast_one]\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [pow_bit1]\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp only [bit1, add_left_comm, add_assoc]\n  nlinarith [pow_le_pow_left hx hxy (n + 1), pow_le_pow_left hy hxy (n + 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [show (n + 1) = n + 1 from rfl]\n  nlinarith [pow_le_pow_of_le_left hx hxy _]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [pow_succ, pow_succ]\n  nlinarith [pow_bit1_sq_add_pow_bit1_le' hx hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp only [bit1, pow_succ, pow_add]\n  nlinarith [sq_nonneg (x - y), pow_nonneg hx (n + 1), pow_nonneg hy (n + 1),\n    pow_nonneg hx n, pow_nonneg hy n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [pow_bit1, pow_bit1]\n  nlinarith [pow_le_pow_left hx hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp only [add_assoc, add_left_comm, add_right_comm, add_le_add_iff_left]\n  nlinarith [pow_bit1_le_mul_pow_bit1 hx hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [show bit1 (n + 1) = 2 * (n + 1) + 1 by simp]\n  rw [show bit1 n = 2 * n + 1 by simp]\n  nlinarith [pow_le_pow_left hx hxy _]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [show (bit1 (n + 1) : \u2115) = bit0 n + 2 by norm_num]\n  rw [show (bit1 (n + 1) : \u2115) = bit0 n + 2 by norm_num]\n  nlinarith [pow_bit0_nonneg x (n + 1), pow_bit0_nonneg y (n + 1),\n    pow_bit0_nonneg x n, pow_bit0_nonneg y n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp only [Nat.bit1_eq_succ_bit0, Nat.bit0_succ, Nat.bit0_zero]\n  nlinarith [pow_bit0_nonneg x (n + 1), pow_bit0_nonneg y (n + 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp only [Nat.bit1, add_mul, mul_add, mul_comm, mul_left_comm, mul_assoc, Nat.add_assoc,\n    Nat.add_comm]\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  simp only [pow_succ, pow_add, pow_one, mul_assoc]\n  nlinarith [mul_self_nonneg (x ^ n), mul_self_nonneg (x * y), mul_self_nonneg (y ^ n)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [show x ^ bit1 (n + 1) = x ^ (bit0 (n + 1) + 1) by rw [Nat.bit1_eq_succ_bit0]]\n  rw [show y ^ bit1 (n + 1) = y ^ (bit0 (n + 1) + 1) by rw [Nat.bit1_eq_succ_bit0]]\n  nlinarith [pow_bit0_nonneg x (n + 1), pow_bit0_nonneg y (n + 1), hx, hy, hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [show x ^ bit1 (n + 1) = x ^ (n + 1 + 1) by rw [Nat.bit1_eq_succ_bit1]]\n  rw [show y ^ bit1 (n + 1) = y ^ (n + 1 + 1) by rw [Nat.bit1_eq_succ_bit1]]\n  nlinarith [pow_le_pow_right hx (by linarith), pow_le_pow_right hy (by linarith), hxy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  have hn : 0 < bit1 (n + 1) := by positivity\n  nlinarith [pow_bit1_le_iff_right hx hy hn, pow_bit1_le_iff_left hx hy hn, pow_bit1_le_iff_left hy hx hn]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_bit1_sq_add_pow_bit1_le' (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hxy : x \u2264 y) :     x ^ bit1 (n + 1) + y ^ bit1 (n + 1) \u2264 4 * (x ^ bit1 n + y ^ bit1 n) * (x + y) := by\n  rw [show x ^ bit1 (n + 1) = x ^ (2 * n + 2) by ring, show y ^ bit1 (n + 1) = y ^ (2 * n + 2) by ring]\n  nlinarith [pow_bit1_sq_add_pow_bit1_le hx hy hxy]"
        ]
    },
    {
        "name": "lean_workbook_48004",
        "split": "test",
        "formal_statement": "theorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by",
        "model_outputs": [
            "\n  norm_num\n  nlinarith\n```",
            "\n  norm_num [hx, h'x]\n  nlinarith\n```",
            "\n  norm_num\n  nlinarith\n```",
            "\n  have hx' : x - x ^ 3 < 1 - 1 ^ 3 := by\n    nlinarith\n  nlinarith\n```",
            "\n  norm_num at hx h'x\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  norm_num [hx, h'x]\n  nlinarith\n```",
            "\n  have h\u2081 : x ^ 3 - 0.6 * x ^ 2 < x - 0.6 * x := by\n    nlinarith\n  have h\u2082 : x - x ^ 3 < 0.6 := by\n    nlinarith\n  linarith\n```",
            "\n  norm_num\n  have h : x - x ^ 3 = x * (1 - x ^ 2) := by ring\n  rw [h]\n  nlinarith\n```",
            "\n  have h : x - x ^ 3 < 0.6 := by\n    norm_num\n    nlinarith\n  exact h\n```",
            "\n  norm_num\n  nlinarith\n```",
            "\n  norm_num\n  nlinarith\n```",
            "\n  have h : x - x ^ 3 < 0.6 := by\n    norm_num\n    nlinarith\n  assumption\n```",
            "\n  norm_num\n  nlinarith\n```",
            "\n  have h\u2081 : x ^ 3 < x ^ 2 := by\n    nlinarith\n  nlinarith\n```",
            "\n  norm_num\n  nlinarith\n```",
            "\n  have : x - x ^ 3 < 0.6 := by\n    have : x - x ^ 3 = x * (1 - x ^ 2) := by ring\n    have : x * (1 - x ^ 2) < 0.6 := by\n      nlinarith\n    linarith\n  linarith\n```",
            "\n  norm_num at hx h'x \u22a2\n  nlinarith\n```",
            "\n  norm_num\n  nlinarith\n```",
            "\n  have h : x ^ 3 < x := by\n    nlinarith\n  nlinarith\n```",
            "\n  have : x - x ^ 3 < 0.6 := by\n    nlinarith\n  linarith\n```",
            "\n  nlinarith\n```",
            "\n  norm_num\n  nlinarith\n```",
            "\n  norm_num [hx, h'x]\n```",
            "\n  have h : x ^ 3 - x < 0.6 := by\n    nlinarith\n  linarith\n```",
            "\n  norm_num at hx h'x\n  nlinarith\n```",
            "\n  have h : x - x ^ 3 < x - 0.6 := by\n    nlinarith\n  nlinarith\n```",
            "\n  norm_num\n  nlinarith\n```",
            "\n  norm_num\n  nlinarith\n```",
            "\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num [hx, h'x]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  have hx' : x - x ^ 3 < 1 - 1 ^ 3 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num at hx h'x\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num [hx, h'x]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  have h\u2081 : x ^ 3 - 0.6 * x ^ 2 < x - 0.6 * x := by\n    nlinarith\n  have h\u2082 : x - x ^ 3 < 0.6 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num\n  have h : x - x ^ 3 = x * (1 - x ^ 2) := by ring\n  rw [h]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  have h : x - x ^ 3 < 0.6 := by\n    norm_num\n    nlinarith\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  have h : x - x ^ 3 < 0.6 := by\n    norm_num\n    nlinarith\n  assumption",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  have h\u2081 : x ^ 3 < x ^ 2 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  have : x - x ^ 3 < 0.6 := by\n    have : x - x ^ 3 = x * (1 - x ^ 2) := by ring\n    have : x * (1 - x ^ 2) < 0.6 := by\n      nlinarith\n    linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num at hx h'x \u22a2\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  have h : x ^ 3 < x := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  have : x - x ^ 3 < 0.6 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num [hx, h'x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  have h : x ^ 3 - x < 0.6 := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num at hx h'x\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  have h : x - x ^ 3 < x - 0.6 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem calc1 {x : \u211d} (hx : 0.6 < x) (h'x : x < 1) : x - x ^ 3 < 0.6 := by\n  nlinarith"
        ]
    },
    {
        "name": "lean_workbook_1627",
        "split": "test",
        "formal_statement": "theorem tan_pi : tan \u03c0 = 0 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by",
        "model_outputs": [
            "\n  rw [tan_eq_sin_div_cos]\n  simp\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  simp [zero_div]\n```",
            "\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi]\n```",
            "\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi, cos_pi]\n```",
            "\n  simp [tan_eq_sin_div_cos]\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]; norm_num\n```",
            "\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi, cos_pi]\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi]\n  simp [cos_pi]\n```",
            "\n  simp [tan_eq_sin_div_cos]\n```",
            "\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  simp [div_zero]\n```",
            "\n  simp [tan_eq_sin_div_cos]\n```",
            "\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num\n```",
            "\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi, cos_pi]\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi]\n  simp [cos_pi]\n```",
            "\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]; norm_num\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num\n```",
            "\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]\n```",
            "\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi, cos_pi]\n```",
            "\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi, cos_pi]\n```",
            "\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num\n```",
            "\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]\n```",
            "\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]\n```",
            "\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  simp [zero_div]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi, cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  simp [tan_eq_sin_div_cos]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]; norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi, cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi]\n  simp [cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  simp [tan_eq_sin_div_cos]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  simp [div_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  simp [tan_eq_sin_div_cos]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi, cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi]\n  simp [cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]; norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi, cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos]\n  simp [sin_pi, cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  rw [tan_eq_sin_div_cos, sin_pi, cos_pi]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem tan_pi : tan \u03c0 = 0 := by\n  simp [tan_eq_sin_div_cos, sin_pi, cos_pi]"
        ]
    },
    {
        "name": "lean_workbook_plus_56374",
        "split": "test",
        "formal_statement": "theorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by",
        "model_outputs": [
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  rw [mul_comm]\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  rw [mul_comm]\n  linarith [mul_self_nonneg (a - b)]\n```",
            "\n  have h\u2080 : (a - b) * (a - b) \u2265 0 := by nlinarith\n  linarith\n```",
            "\n  ring_nf\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  rw [mul_comm]\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  ring_nf\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  linarith\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  rw [sq]\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h : 0 \u2264 (a - b) * (a - b) := by\n    nlinarith\n  linarith\n```",
            "\n  rw [mul_comm]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [mul_self_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  rw [mul_comm]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  rw [mul_comm]\n  ring\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  nlinarith [sq_nonneg (a - b)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  rw [mul_comm]\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  rw [mul_comm]\n  linarith [mul_self_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  have h\u2080 : (a - b) * (a - b) \u2265 0 := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  ring_nf\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  rw [mul_comm]\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  ring_nf\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  have h\u2080 : 0 \u2264 (a - b) ^ 2 := by apply sq_nonneg\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  rw [sq]\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  have h : 0 \u2264 (a - b) * (a - b) := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  rw [mul_comm]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [mul_self_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  rw [mul_comm]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  rw [mul_comm]\n  ring\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_le (a b : \u211d) : (a + b) * (a + b) \u2264 2 * (a * a + b * b) := by\n  nlinarith [sq_nonneg (a - b)]"
        ]
    },
    {
        "name": "lean_workbook_plus_40076",
        "split": "test",
        "formal_statement": "theorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by",
        "model_outputs": [
            "\n  rw [Nat.add_comm, Nat.add_assoc, Nat.add_comm]\n  simp [Nat.add_mul_div_left, Nat.add_mod_div]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.add_comm]\n  simp [Nat.add_mod, Nat.add_comm, Nat.add_left_comm]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.add_comm]\n  simp [Nat.add_mod, Nat.mul_comm]\n```",
            "\n  rw [\u2190 Nat.div_add_mod d c]\n```",
            "\n  rw [Nat.add_comm]\n  simp [Nat.add_comm, Nat.add_left_comm, Nat.add_assoc]\n  omega\n```",
            "\n  rw [\u2190 Nat.div_add_mod d c]\n```",
            "\n  rw [Nat.add_comm, Nat.add_comm _ d]\n  simp [Nat.add_comm, Nat.add_left_comm, Nat.add_assoc, Nat.add_right_comm, Nat.mul_comm,\n    Nat.mul_left_comm, Nat.mul_assoc, Nat.mul_right_comm, Nat.div_add_mod]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.add_comm]\n  simp [Nat.add_comm, Nat.add_assoc, Nat.add_left_comm, Nat.div_add_mod]\n```",
            "\n  rw [Nat.add_comm a, Nat.add_comm (b / c), Nat.add_assoc, Nat.add_assoc]\n  simp [Nat.add_comm, Nat.add_left_comm, Nat.add_assoc]\n  omega\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [\u2190 Nat.div_add_mod d c]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [\u2190 Nat.div_add_mod d c]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.add_comm]\n  simp [Nat.add_mod, Nat.add_div, Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]\n```",
            "\n  rw [Nat.add_comm]\n  simp [Nat.add_comm, Nat.add_assoc, Nat.add_left_comm, Nat.div_add_mod]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.add_comm, Nat.add_comm (b / c), Nat.add_assoc]\n  simp [Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]\n```",
            "\n  rw [\u2190 Nat.div_add_mod d c]\n```",
            "\n  rw [Nat.div_add_mod]\n```",
            "\n  rw [Nat.add_comm, Nat.add_comm (a + b / c), Nat.add_comm (a + b / c + d / c * c),\n    Nat.add_comm (a + b / c + d), Nat.add_comm (a + b / c), Nat.add_comm a]\n  simp [Nat.add_mod, Nat.add_div_right]\n```",
            "\n  rw [Nat.add_assoc]\n  simp [Nat.add_comm, Nat.add_left_comm, Nat.add_assoc]\n```",
            "\n  rw [Nat.div_add_mod]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_comm, Nat.add_assoc, Nat.add_comm]\n  simp [Nat.add_mul_div_left, Nat.add_mod_div]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_comm]\n  simp [Nat.add_mod, Nat.add_comm, Nat.add_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_comm]\n  simp [Nat.add_mod, Nat.mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [\u2190 Nat.div_add_mod d c]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_comm]\n  simp [Nat.add_comm, Nat.add_left_comm, Nat.add_assoc]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [\u2190 Nat.div_add_mod d c]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_comm, Nat.add_comm _ d]\n  simp [Nat.add_comm, Nat.add_left_comm, Nat.add_assoc, Nat.add_right_comm, Nat.mul_comm,\n    Nat.mul_left_comm, Nat.mul_assoc, Nat.mul_right_comm, Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_comm]\n  simp [Nat.add_comm, Nat.add_assoc, Nat.add_left_comm, Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_comm a, Nat.add_comm (b / c), Nat.add_assoc, Nat.add_assoc]\n  simp [Nat.add_comm, Nat.add_left_comm, Nat.add_assoc]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [\u2190 Nat.div_add_mod d c]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [\u2190 Nat.div_add_mod d c]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_comm]\n  simp [Nat.add_mod, Nat.add_div, Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_comm]\n  simp [Nat.add_comm, Nat.add_assoc, Nat.add_left_comm, Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_comm, Nat.add_comm (b / c), Nat.add_assoc]\n  simp [Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [\u2190 Nat.div_add_mod d c]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_comm, Nat.add_comm (a + b / c), Nat.add_comm (a + b / c + d / c * c),\n    Nat.add_comm (a + b / c + d), Nat.add_comm (a + b / c), Nat.add_comm a]\n  simp [Nat.add_mod, Nat.add_div_right]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.add_assoc]\n  simp [Nat.add_comm, Nat.add_left_comm, Nat.add_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_frac {a b c d : \u2115} : a + b / c + d = a + b / c + d / c * c + d % c := by\n  rw [Nat.div_add_mod]"
        ]
    },
    {
        "name": "lean_workbook_37234",
        "split": "test",
        "formal_statement": "theorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by",
        "model_outputs": [
            "\n  have h\u2081 : 0 < a * b := mul_pos hab.1 hab.2\n  field_simp [hab.1.ne', hab.2.ne']\n  rw [div_eq_mul_inv]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 < a := hab.1\n  have h\u2081 : 0 < b := hab.2\n  field_simp [h\u2080, h\u2081]\n  rw [\u2190 sub_nonneg]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 < a / b := div_pos hab.1 hab.2\n  have h\u2081 : 0 < b / a := div_pos hab.2 hab.1\n  nlinarith [sq_nonneg (a / b - b / a)]\n```",
            "\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  field_simp\n  rw [add_comm]\n  nlinarith [mul_self_nonneg (a - b)]\n```",
            "\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    rw [div_eq_mul_inv, div_eq_mul_inv]\n    nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]\n  linarith\n```",
            "\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    calc\n      a / b + b / a = (a * a + b * b) / (a * b) := by field_simp\n      _ \u2265 2 := by\n        apply le_of_sub_nonneg\n        field_simp\n        nlinarith [sq_nonneg (a - b)]\n  linarith\n```",
            "\n  have h\u2081 : a / b + b / a = (a * a + b * b) / (a * b) := by\n    field_simp [hab.1.ne', hab.2.ne']\n    ring\n  rw [h\u2081]\n  have h\u2082 : 0 < a * b := mul_pos hab.1 hab.2\n  exact (le_div_iff h\u2082).mpr (by nlinarith [sq_nonneg (a - b)])\n```",
            "\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  field_simp [h\u2081, h\u2082]\n  rw [add_comm]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    rw [\u2190 mul_le_mul_right hab.1]\n    field_simp [hab.1, hab.2]\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n  exact h\u2081\n```",
            "\n  field_simp [hab.1.ne', hab.2.ne']\n  rw [add_comm]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  calc\n    a / b + b / a = (a * a + b * b) / (a * b) := by field_simp\n    _ \u2265 2 := by\n      apply div_le_of_nonneg_of_le_mul\n      \u00b7 exact mul_pos h\u2081 h\u2082\n      \u00b7 linarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 < a := hab.1\n  have h\u2081 : 0 < b := hab.2\n  field_simp [h\u2080.ne', h\u2081.ne']\n  rw [\u2190 sub_nonneg]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  have h\u2083 : a / b + b / a = (a * a + b * b) / (a * b) := by\n    field_simp\n    ring\n  rw [h\u2083]\n  have h\u2084 : 0 < a * b := mul_pos h\u2081 h\u2082\n  have h\u2085 : (a * a + b * b) / (a * b) \u2265 2 := by\n    apply div_le_of_nonneg_of_le_mul\n    \u00b7 exact mul_pos h\u2081 h\u2082\n    \u00b7 linarith [sq_nonneg (a - b)]\n  linarith\n```",
            "\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    calc\n      a / b + b / a = (a / b) * 1 + (b / a) * 1 := by ring\n      _ \u2265 (a / b) * (a / b) + (b / a) * (b / a) := by\n        gcongr\n        <;> linarith\n      _ = (a / b) ^ 2 + (b / a) ^ 2 := by ring\n      _ \u2265 2 := by\n        nlinarith [sq_nonneg (a / b - b / a)]\n  linarith\n```",
            "\n  have h\u2081 : a / b + b / a = (a * a + b * b) / (a * b) := by field_simp [hab.1.ne', hab.2.ne']; ring\n  rw [h\u2081]\n  apply div_le_of_nonneg_of_le_mul\n  exact by nlinarith\n  exact by nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    rw [div_eq_mul_inv, div_eq_mul_inv]\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n  linarith\n```",
            "\n  have h\u2081 : 0 < a / b := div_pos hab.1 hab.2\n  have h\u2082 : 0 < b / a := div_pos hab.2 hab.1\n  have h\u2083 : a / b + b / a \u2265 2 := by\n    calc\n      a / b + b / a = (a / b + b / a) * 1 := by ring\n      _ \u2265 (a / b + b / a) * (1 / 2 * 1 + 1 / 2 * 1) := by gcongr; apply le_of_lt h\u2081; apply le_of_lt h\u2082\n      _ = (a / b + b / a) * 1 := by ring\n      _ \u2265 2 := by gcongr; linarith\n  exact h\u2083\n```",
            "\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    apply le_of_sub_nonneg\n    field_simp\n    ring\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n  linarith\n```",
            "\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  have h\u2083 : a / b + b / a = (a * a + b * b) / (a * b) := by field_simp\n  rw [h\u2083]\n  apply div_le_of_nonneg_of_le_mul\n  positivity\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2081 : a / b + b / a = (a * a + b * b) / (a * b) := by field_simp [hab.1.ne', hab.2.ne']\n  rw [h\u2081]\n  have h\u2082 : 0 < a * b := mul_pos hab.1 hab.2\n  rw [div_le_iff h\u2082]\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2081 : a / b + b / a - 2 = (a * a + b * b) / (a * b) - 2 := by\n    field_simp [hab.1.ne', hab.2.ne']\n    ring\n  have h\u2082 : (a * a + b * b) / (a * b) - 2 = (a * a + b * b - 2 * a * b) / (a * b) := by\n    field_simp [hab.1.ne', hab.2.ne']\n    ring\n  have h\u2083 : (a * a + b * b - 2 * a * b) / (a * b) = (a - b) ^ 2 / (a * b) := by\n    ring\n  have h\u2084 : (a - b) ^ 2 / (a * b) \u2265 0 := by\n    exact div_nonneg (sq_nonneg (a - b)) (mul_nonneg hab.1.le hab.2.le)\n  linarith\n```",
            "\n  have h\u2081 : 0 < a / b := by positivity\n  have h\u2082 : 0 < b / a := by positivity\n  have h\u2083 : a / b + b / a \u2265 2 := by\n    calc\n      a / b + b / a = (a / b + b / a) * 1 := by ring\n      _ \u2265 (a / b + b / a) * (1 / 2 * (1 / 2)) := by gcongr; linarith\n      _ = (a / b + b / a) * (1 / 4) := by ring\n      _ = a / b * (1 / 4) + b / a * (1 / 4) := by ring\n      _ \u2265 2 := by nlinarith\n  exact h\u2083\n```",
            "\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  calc\n    a / b + b / a = (a * a + b * b) / (a * b) := by field_simp\n    _ \u2265 2 := by\n      apply div_le_of_nonneg_of_le_mul\n      \u00b7 positivity\n      \u00b7 nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2080 : 0 < a * b := mul_pos hab.1 hab.2\n  field_simp [h\u2080.ne']\n  rw [div_eq_mul_inv]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  have h\u2083 : a / b + b / a = (a ^ 2 + b ^ 2) / (a * b) := by field_simp; ring\n  rw [h\u2083]\n  exact (le_div_iff (mul_pos h\u2081 h\u2082)).2 (by nlinarith [sq_nonneg (a - b)])\n```",
            "\n  have h : 0 < a * b := mul_pos hab.1 hab.2\n  field_simp\n  rw [div_eq_mul_inv]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  field_simp [hab.2.ne', hab.1.ne']\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n```",
            "\n  have h\u2081 : a / b + b / a = (a * a + b * b) / (a * b) := by\n    field_simp [hab.1.ne', hab.2.ne']\n    ring\n  rw [h\u2081]\n  apply le_of_sub_nonneg\n  field_simp [hab.1.ne', hab.2.ne']\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  field_simp\n  rw [div_eq_mul_inv]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]\n```",
            "\n  field_simp [hab.2.ne', hab.1.ne']\n  rw [add_comm]\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  have h\u2081 : a / b + b / a = (a^2 + b^2) / (a * b) := by field_simp; ring\n  rw [h\u2081]\n  have h\u2082 : 0 < a * b := mul_pos hab.1 hab.2\n  have h\u2083 : 0 \u2264 (a - b)^2 := by nlinarith\n  have h\u2084 : 0 \u2264 a^2 + b^2 := by nlinarith\n  have h\u2085 : 0 \u2264 a^2 + b^2 - 2 * a * b := by nlinarith\n  have h\u2086 : 0 \u2264 (a - b)^2 := by nlinarith\n  have h\u2087 : 0 \u2264 a * b := by nlinarith\n  have h\u2088 : 0 \u2264 (a - b)^2 := by nlinarith\n  nlinarith\n```",
            "\n  have h : a / b + b / a - 2 = (a ^ 2 - b ^ 2) / (a * b) := by\n    field_simp\n    ring\n  have h' : (a ^ 2 - b ^ 2) / (a * b) = 0 := by\n    rw [\u2190 sub_eq_zero]\n    nlinarith\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : 0 < a * b := mul_pos hab.1 hab.2\n  field_simp [hab.1.ne', hab.2.ne']\n  rw [div_eq_mul_inv]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2080 : 0 < a := hab.1\n  have h\u2081 : 0 < b := hab.2\n  field_simp [h\u2080, h\u2081]\n  rw [\u2190 sub_nonneg]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2080 : 0 < a / b := div_pos hab.1 hab.2\n  have h\u2081 : 0 < b / a := div_pos hab.2 hab.1\n  nlinarith [sq_nonneg (a / b - b / a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  field_simp\n  rw [add_comm]\n  nlinarith [mul_self_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    rw [div_eq_mul_inv, div_eq_mul_inv]\n    nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    calc\n      a / b + b / a = (a * a + b * b) / (a * b) := by field_simp\n      _ \u2265 2 := by\n        apply le_of_sub_nonneg\n        field_simp\n        nlinarith [sq_nonneg (a - b)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a = (a * a + b * b) / (a * b) := by\n    field_simp [hab.1.ne', hab.2.ne']\n    ring\n  rw [h\u2081]\n  have h\u2082 : 0 < a * b := mul_pos hab.1 hab.2\n  exact (le_div_iff h\u2082).mpr (by nlinarith [sq_nonneg (a - b)])",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  field_simp [h\u2081, h\u2082]\n  rw [add_comm]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    rw [\u2190 mul_le_mul_right hab.1]\n    field_simp [hab.1, hab.2]\n    ring_nf\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n  exact h\u2081",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  field_simp [hab.1.ne', hab.2.ne']\n  rw [add_comm]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  calc\n    a / b + b / a = (a * a + b * b) / (a * b) := by field_simp\n    _ \u2265 2 := by\n      apply div_le_of_nonneg_of_le_mul\n      \u00b7 exact mul_pos h\u2081 h\u2082\n      \u00b7 linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2080 : 0 < a := hab.1\n  have h\u2081 : 0 < b := hab.2\n  field_simp [h\u2080.ne', h\u2081.ne']\n  rw [\u2190 sub_nonneg]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  have h\u2083 : a / b + b / a = (a * a + b * b) / (a * b) := by\n    field_simp\n    ring\n  rw [h\u2083]\n  have h\u2084 : 0 < a * b := mul_pos h\u2081 h\u2082\n  have h\u2085 : (a * a + b * b) / (a * b) \u2265 2 := by\n    apply div_le_of_nonneg_of_le_mul\n    \u00b7 exact mul_pos h\u2081 h\u2082\n    \u00b7 linarith [sq_nonneg (a - b)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    calc\n      a / b + b / a = (a / b) * 1 + (b / a) * 1 := by ring\n      _ \u2265 (a / b) * (a / b) + (b / a) * (b / a) := by\n        gcongr\n        <;> linarith\n      _ = (a / b) ^ 2 + (b / a) ^ 2 := by ring\n      _ \u2265 2 := by\n        nlinarith [sq_nonneg (a / b - b / a)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a = (a * a + b * b) / (a * b) := by field_simp [hab.1.ne', hab.2.ne']; ring\n  rw [h\u2081]\n  apply div_le_of_nonneg_of_le_mul\n  exact by nlinarith\n  exact by nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    rw [div_eq_mul_inv, div_eq_mul_inv]\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : 0 < a / b := div_pos hab.1 hab.2\n  have h\u2082 : 0 < b / a := div_pos hab.2 hab.1\n  have h\u2083 : a / b + b / a \u2265 2 := by\n    calc\n      a / b + b / a = (a / b + b / a) * 1 := by ring\n      _ \u2265 (a / b + b / a) * (1 / 2 * 1 + 1 / 2 * 1) := by gcongr; apply le_of_lt h\u2081; apply le_of_lt h\u2082\n      _ = (a / b + b / a) * 1 := by ring\n      _ \u2265 2 := by gcongr; linarith\n  exact h\u2083",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a \u2265 2 := by\n    apply le_of_sub_nonneg\n    field_simp\n    ring\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  have h\u2083 : a / b + b / a = (a * a + b * b) / (a * b) := by field_simp\n  rw [h\u2083]\n  apply div_le_of_nonneg_of_le_mul\n  positivity\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a = (a * a + b * b) / (a * b) := by field_simp [hab.1.ne', hab.2.ne']\n  rw [h\u2081]\n  have h\u2082 : 0 < a * b := mul_pos hab.1 hab.2\n  rw [div_le_iff h\u2082]\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a - 2 = (a * a + b * b) / (a * b) - 2 := by\n    field_simp [hab.1.ne', hab.2.ne']\n    ring\n  have h\u2082 : (a * a + b * b) / (a * b) - 2 = (a * a + b * b - 2 * a * b) / (a * b) := by\n    field_simp [hab.1.ne', hab.2.ne']\n    ring\n  have h\u2083 : (a * a + b * b - 2 * a * b) / (a * b) = (a - b) ^ 2 / (a * b) := by\n    ring\n  have h\u2084 : (a - b) ^ 2 / (a * b) \u2265 0 := by\n    exact div_nonneg (sq_nonneg (a - b)) (mul_nonneg hab.1.le hab.2.le)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : 0 < a / b := by positivity\n  have h\u2082 : 0 < b / a := by positivity\n  have h\u2083 : a / b + b / a \u2265 2 := by\n    calc\n      a / b + b / a = (a / b + b / a) * 1 := by ring\n      _ \u2265 (a / b + b / a) * (1 / 2 * (1 / 2)) := by gcongr; linarith\n      _ = (a / b + b / a) * (1 / 4) := by ring\n      _ = a / b * (1 / 4) + b / a * (1 / 4) := by ring\n      _ \u2265 2 := by nlinarith\n  exact h\u2083",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  calc\n    a / b + b / a = (a * a + b * b) / (a * b) := by field_simp\n    _ \u2265 2 := by\n      apply div_le_of_nonneg_of_le_mul\n      \u00b7 positivity\n      \u00b7 nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2080 : 0 < a * b := mul_pos hab.1 hab.2\n  field_simp [h\u2080.ne']\n  rw [div_eq_mul_inv]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  have h\u2083 : a / b + b / a = (a ^ 2 + b ^ 2) / (a * b) := by field_simp; ring\n  rw [h\u2083]\n  exact (le_div_iff (mul_pos h\u2081 h\u2082)).2 (by nlinarith [sq_nonneg (a - b)])",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h : 0 < a * b := mul_pos hab.1 hab.2\n  field_simp\n  rw [div_eq_mul_inv]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  field_simp [hab.2.ne', hab.1.ne']\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a + b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a = (a * a + b * b) / (a * b) := by\n    field_simp [hab.1.ne', hab.2.ne']\n    ring\n  rw [h\u2081]\n  apply le_of_sub_nonneg\n  field_simp [hab.1.ne', hab.2.ne']\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : 0 < a := hab.1\n  have h\u2082 : 0 < b := hab.2\n  field_simp\n  rw [div_eq_mul_inv]\n  ring_nf\n  nlinarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  field_simp [hab.2.ne', hab.1.ne']\n  rw [add_comm]\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h\u2081 : a / b + b / a = (a^2 + b^2) / (a * b) := by field_simp; ring\n  rw [h\u2081]\n  have h\u2082 : 0 < a * b := mul_pos hab.1 hab.2\n  have h\u2083 : 0 \u2264 (a - b)^2 := by nlinarith\n  have h\u2084 : 0 \u2264 a^2 + b^2 := by nlinarith\n  have h\u2085 : 0 \u2264 a^2 + b^2 - 2 * a * b := by nlinarith\n  have h\u2086 : 0 \u2264 (a - b)^2 := by nlinarith\n  have h\u2087 : 0 \u2264 a * b := by nlinarith\n  have h\u2088 : 0 \u2264 (a - b)^2 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem AM_GM_inequality (a b : \u211d) (hab : 0 < a \u2227 0 < b) : a / b + b / a \u2265 2 := by\n  have h : a / b + b / a - 2 = (a ^ 2 - b ^ 2) / (a * b) := by\n    field_simp\n    ring\n  have h' : (a ^ 2 - b ^ 2) / (a * b) = 0 := by\n    rw [\u2190 sub_eq_zero]\n    nlinarith\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_41451",
        "split": "test",
        "formal_statement": "theorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by",
        "model_outputs": [
            "\n  constructor <;> simp_all\n  <;> norm_num <;> linarith\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  constructor <;> simp_all\n  <;> norm_num <;> linarith\n```",
            "\n  constructor <;> simp_all\n  nlinarith\n```",
            "\n  exact \u27e8by simp [hx], by simp [hy], by simp [h]\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  refine' \u27e8hx, hy, h\u27e9\n```",
            "\n  constructor <;> simp_all\n```",
            "\n  constructor <;> simp [hx, hy, h]\n```",
            "\n  constructor <;> simp_all\n  <;> norm_num <;> linarith\n```",
            "\n  constructor <;> simp_all\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  constructor <;> simp_all\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  constructor <;> simp [*]\n```",
            "\n  constructor <;> simp_all [h, hx, hy]\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  constructor <;> simp_all\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```",
            "\n  exact \u27e8hx, hy, h\u27e9\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  constructor <;> simp_all\n  <;> norm_num <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  constructor <;> simp_all\n  <;> norm_num <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  constructor <;> simp_all\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8by simp [hx], by simp [hy], by simp [h]\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  refine' \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  constructor <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  constructor <;> simp [hx, hy, h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  constructor <;> simp_all\n  <;> norm_num <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  constructor <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  constructor <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  constructor <;> simp [*]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  constructor <;> simp_all [h, hx, hy]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  constructor <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem x_eq {u v y : \u211d} (h : u * v = 12) (hx : x = (v - u - 4) / 8) (hy : (2 * y + 1) ^ 2 = (u + v - 6) / 2) :      x = (v - u - 4) / 8 \u2227 (2 * y + 1) ^ 2 = (u + v - 6) / 2 \u2227 u * v = 12 := by\n  exact \u27e8hx, hy, h\u27e9"
        ]
    },
    {
        "name": "lean_workbook_plus_53030",
        "split": "test",
        "formal_statement": "theorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by",
        "model_outputs": [
            "\n  rw [choose_eq_factorial_div_factorial (succ_le_succ (le_add_left k.le_succ))]\n  rw [choose_eq_factorial_div_factorial (le_add_right k.le_succ)]\n  field_simp [factorial_succ, Nat.mul_succ]\n  ring\n```",
            "\n  rw [add_comm]\n  rw [Nat.choose_succ_succ]\n  ring\n```",
            "\n  rw [choose]\n  simp [add_comm]\n```",
            "\n  rw [choose, choose, Nat.add_comm]\n  simp [Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]\n```",
            "\n  rw [choose, choose, choose]\n  ring\n```",
            "\n  apply Eq.symm\n  rw [choose_eq_factorial_div_factorial (Nat.le_of_succ_le_succ (Nat.succ_le_succ (Nat.zero_le n)))\n      (Nat.le_of_succ_le_succ (Nat.succ_le_succ (Nat.zero_le k)))]\n  simp_all [Nat.factorial]\n  ring\n```",
            "\n  rw [add_comm, choose_succ_right_eq]\n```",
            "\n  apply Eq.symm\n  apply Eq.symm\n  rw [Nat.choose_succ_succ]\n```",
            "\n  rw [Nat.choose_eq_factorial_div_factorial (Nat.le_succ _),\n    Nat.choose_eq_factorial_div_factorial (Nat.le_succ _),\n    Nat.choose_eq_factorial_div_factorial (Nat.succ_le_succ (Nat.le_succ _))]\n  simp [Nat.factorial_succ, Nat.mul_succ]\n  ring\n```",
            "\n  apply Eq.symm\n  apply Eq.symm\n  rw [choose]\n  ring\n```",
            "\n  rw [choose, choose_succ_succ, succ_add_eq_add_succ]\n  simp [add_comm, add_left_comm]\n```",
            "\n  rw [choose_succ_right_eq, add_comm, choose_succ_succ, add_comm]\n```",
            "\n  rw [choose, succ_add, choose_succ_succ, add_comm]\n```",
            "\n  simp [choose, Nat.factorial, Nat.succ_eq_add_one]\n  ring\n```",
            "\n  simp [choose, Nat.add_comm, Nat.add_left_comm, Nat.add_assoc]\n```",
            "\n  rw [choose]\n  rw [choose]\n  simp [add_comm, add_assoc, Nat.choose]\n```",
            "\n  simp [choose, Nat.add_comm, Nat.add_left_comm, Nat.add_assoc]\n```",
            "\n  rw [choose]\n  simp [Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]\n```",
            "\n  apply Eq.symm\n  apply Eq.symm\n  apply Eq.symm\n  rw [choose]\n  rw [choose]\n  rw [choose]\n  ring\n```",
            "\n  rw [choose_succ_succ, add_comm]\n```",
            "\n  rw [choose]\n  simp [choose, Nat.factorial]\n  ring\n```",
            "\n  rw [choose]\n  rw [choose]\n  simp [Nat.factorial]\n  ring\n```",
            "\n  simp [choose]\n```",
            "\n  rw [Nat.choose_eq_factorial_div_factorial (Nat.le_add_right k n)]\n  rw [Nat.choose_eq_factorial_div_factorial (Nat.le_add_right k n)]\n  rw [Nat.choose_eq_factorial_div_factorial (Nat.le_add_right k n)]\n  norm_num\n  ring\n```",
            "\n  rw [choose]\n  simp [add_comm, add_left_comm]\n```",
            "\n  rw [choose_eq_factorial_div_factorial (Nat.le_of_succ_le_succ (Nat.succ_le_succ (Nat.zero_le k))),\n    choose_eq_factorial_div_factorial (Nat.le_of_succ_le_succ (Nat.succ_le_succ (Nat.zero_le n))),\n    choose_eq_factorial_div_factorial (Nat.le_of_succ_le_succ (Nat.succ_le_succ (Nat.zero_le (n + 1)))),\n    Nat.factorial_succ, Nat.factorial_succ]\n  ring\n```",
            "\n  rw [choose]\n  rw [choose]\n  ring\n```",
            "\n  simp [choose, Nat.add_comm, Nat.add_assoc]\n```",
            "\n  apply Eq.symm\n  apply Eq.symm\n  rw [choose]\n  rw [choose]\n  ring\n```",
            "\n  rw [choose, choose, Nat.factorial, Nat.factorial, Nat.mul_succ]\n  simp [add_mul, mul_add, Nat.add_assoc, Nat.add_comm, Nat.add_left_comm]\n  ring\n```",
            "\n  simp [Nat.choose_succ_succ, Nat.add_comm]\n```",
            "\n  rw [choose, choose, choose, Nat.add_comm]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose_eq_factorial_div_factorial (succ_le_succ (le_add_left k.le_succ))]\n  rw [choose_eq_factorial_div_factorial (le_add_right k.le_succ)]\n  field_simp [factorial_succ, Nat.mul_succ]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [add_comm]\n  rw [Nat.choose_succ_succ]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose]\n  simp [add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose, choose, Nat.add_comm]\n  simp [Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose, choose, choose]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  apply Eq.symm\n  rw [choose_eq_factorial_div_factorial (Nat.le_of_succ_le_succ (Nat.succ_le_succ (Nat.zero_le n)))\n      (Nat.le_of_succ_le_succ (Nat.succ_le_succ (Nat.zero_le k)))]\n  simp_all [Nat.factorial]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [add_comm, choose_succ_right_eq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  apply Eq.symm\n  apply Eq.symm\n  rw [Nat.choose_succ_succ]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [Nat.choose_eq_factorial_div_factorial (Nat.le_succ _),\n    Nat.choose_eq_factorial_div_factorial (Nat.le_succ _),\n    Nat.choose_eq_factorial_div_factorial (Nat.succ_le_succ (Nat.le_succ _))]\n  simp [Nat.factorial_succ, Nat.mul_succ]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  apply Eq.symm\n  apply Eq.symm\n  rw [choose]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose, choose_succ_succ, succ_add_eq_add_succ]\n  simp [add_comm, add_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose_succ_right_eq, add_comm, choose_succ_succ, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose, succ_add, choose_succ_succ, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  simp [choose, Nat.factorial, Nat.succ_eq_add_one]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  simp [choose, Nat.add_comm, Nat.add_left_comm, Nat.add_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose]\n  rw [choose]\n  simp [add_comm, add_assoc, Nat.choose]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  simp [choose, Nat.add_comm, Nat.add_left_comm, Nat.add_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose]\n  simp [Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  apply Eq.symm\n  apply Eq.symm\n  apply Eq.symm\n  rw [choose]\n  rw [choose]\n  rw [choose]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose_succ_succ, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose]\n  simp [choose, Nat.factorial]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose]\n  rw [choose]\n  simp [Nat.factorial]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  simp [choose]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [Nat.choose_eq_factorial_div_factorial (Nat.le_add_right k n)]\n  rw [Nat.choose_eq_factorial_div_factorial (Nat.le_add_right k n)]\n  rw [Nat.choose_eq_factorial_div_factorial (Nat.le_add_right k n)]\n  norm_num\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose]\n  simp [add_comm, add_left_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose_eq_factorial_div_factorial (Nat.le_of_succ_le_succ (Nat.succ_le_succ (Nat.zero_le k))),\n    choose_eq_factorial_div_factorial (Nat.le_of_succ_le_succ (Nat.succ_le_succ (Nat.zero_le n))),\n    choose_eq_factorial_div_factorial (Nat.le_of_succ_le_succ (Nat.succ_le_succ (Nat.zero_le (n + 1)))),\n    Nat.factorial_succ, Nat.factorial_succ]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose]\n  rw [choose]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  simp [choose, Nat.add_comm, Nat.add_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  apply Eq.symm\n  apply Eq.symm\n  rw [choose]\n  rw [choose]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose, choose, Nat.factorial, Nat.factorial, Nat.mul_succ]\n  simp [add_mul, mul_add, Nat.add_assoc, Nat.add_comm, Nat.add_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  simp [Nat.choose_succ_succ, Nat.add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem choose_succ_succ (n k : Nat) : choose (n + 1) (k + 1) = choose n k + choose n (k + 1) := by\n  rw [choose, choose, choose, Nat.add_comm]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_62454",
        "split": "test",
        "formal_statement": "theorem prime_three : Nat.Prime 3 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by",
        "model_outputs": [
            " decide\n\ntheorem prime_five : Nat.Prime 5 := by decide\n\ntheorem prime_seven : Nat.Prime 7 := by decide\n\ntheorem composite_four : \u00acNat.Prime 4 := by decide\n\ntheorem composite_eight : \u00acNat.Prime 8 := by decide\n\ntheorem composite_nine : \u00acNat.Prime 9 := by decide\n\ntheorem composite_eleven : \u00acNat.Prime 11 := by decide\n\ntheorem composite_thirteen : \u00acNat.Prime 13 := by decide\n\ntheorem composite_seventeen : \u00acNat.Prime 17 := by decide\n\ntheorem composite_nineteen : \u00acNat.Prime 19 := by decide\n\ntheorem composite_twentythree : \u00acNat.Prime 23 := by decide\n\ntheorem composite_twentynine : \u00acNat.Prime 29 := by decide\n\ntheorem composite_thirtyone : \u00acNat.Prime 31 := by decide\n\ntheorem composite_thirtyseven : \u00acNat.Prime 37 := by decide\n\ntheorem composite_fortyone : \u00acNat.Prime 41 := by decide\n\ntheorem composite_fortythree : \u00acNat.Prime 43 := by decide\n\ntheorem composite_fortyseven : \u00acNat.Prime 47 := by decide\n\ntheorem composite_fiftythree : \u00acNat.Prime 53 := by decide\n\ntheorem composite_fiftynine : \u00acNat.Prime 59 := by decide\n\ntheorem composite_sixtyone : \u00acNat.Prime 61 := by decide\n\ntheorem composite_sixtyseven : \u00acNat.Prime 67 := by decide\n\ntheorem composite_seventyone : \u00acNat.Prime 71 := by decide\n\ntheorem composite_seventythree : \u00acNat.Prime 73 := by decide\n\ntheorem composite_seventynine : \u00acNat.Prime 79 := by decide\n\ntheorem composite_eightythree : \u00acNat.Prime 83 := by decide\n\ntheorem composite_eightynine : \u00acNat.Prime 89 := by decide\n\ntheorem composite_ninetyone : \u00acNat.Prime 91 := by decide\n\ntheorem composite_ninetyseven : \u00acNat.Prime 97 := by decide\n\ntheorem composite_onehundredthree : \u00acNat.Prime 103 := by decide\n\ntheorem composite_onehundredeleven : \u00acNat.Prime 113 := by decide\n\ntheorem composite_onehundredseventeen : \u00acNat.Prime 173 := by decide\n\ntheorem composite_onehundredninetythree : \u00acNat.Prime 193 := by decide\n\ntheorem composite_onehundredninetyseven : \u00acNat.Prime 197 := by decide\n\ntheorem composite_onehundredninetyeleven : \u00acNat.Prime 191 := by decide\n```",
            " decide\n```",
            "\n  decide\n```",
            " decide\ntheorem prime_five : Nat.Prime 5 := by decide\ntheorem prime_seven : Nat.Prime 7 := by decide\ntheorem prime_eleven : Nat.Prime 11 := by decide\n\ntheorem fermat_little_theorem_3_mod_4 (p : \u2115) (hp : p.Prime) (h : p % 4 = 3) :\n    \u2203 k : \u2115, p = 4 * k + 3 :=  by\n  exact \u27e8p / 4, by omega\u27e9\n```",
            "\n  constructor\n  <;> decide\n```",
            "\n  decide\n```",
            " decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            " decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  exact Nat.prime_three\n```",
            "\n  exact prime_three\n```",
            " decide\n```",
            "\n  decide\n```",
            "\n  apply Nat.prime_three\n```",
            " decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            " decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            " decide\n\ntheorem prime_five : Nat.Prime 5 := by decide\n\ntheorem prime_seven : Nat.Prime 7 := by decide\n\ntheorem mathd_numbertheory_25 (n : \u2115) : \u2200 k : \u2115, n = 2 * k + 1 \u2192 Nat.Prime n \u2192 Nat.Prime (2 * n + 1) := by\n  intro k h\u2080 h\u2081\n  rw [h\u2080] at h\u2081\n  simp_all only [Nat.Prime, Nat.succ_eq_add_one, Nat.add_right_comm, Nat.add_sub_cancel]\n  decide\n```",
            "\n  decide\n```",
            "\n  exact Nat.prime_three\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by decide\n\ntheorem prime_five : Nat.Prime 5 := by decide\n\ntheorem prime_seven : Nat.Prime 7 := by decide\n\ntheorem composite_four : \u00acNat.Prime 4 := by decide\n\ntheorem composite_eight : \u00acNat.Prime 8 := by decide\n\ntheorem composite_nine : \u00acNat.Prime 9 := by decide\n\ntheorem composite_eleven : \u00acNat.Prime 11 := by decide\n\ntheorem composite_thirteen : \u00acNat.Prime 13 := by decide\n\ntheorem composite_seventeen : \u00acNat.Prime 17 := by decide\n\ntheorem composite_nineteen : \u00acNat.Prime 19 := by decide\n\ntheorem composite_twentythree : \u00acNat.Prime 23 := by decide\n\ntheorem composite_twentynine : \u00acNat.Prime 29 := by decide\n\ntheorem composite_thirtyone : \u00acNat.Prime 31 := by decide\n\ntheorem composite_thirtyseven : \u00acNat.Prime 37 := by decide\n\ntheorem composite_fortyone : \u00acNat.Prime 41 := by decide\n\ntheorem composite_fortythree : \u00acNat.Prime 43 := by decide\n\ntheorem composite_fortyseven : \u00acNat.Prime 47 := by decide\n\ntheorem composite_fiftythree : \u00acNat.Prime 53 := by decide\n\ntheorem composite_fiftynine : \u00acNat.Prime 59 := by decide\n\ntheorem composite_sixtyone : \u00acNat.Prime 61 := by decide\n\ntheorem composite_sixtyseven : \u00acNat.Prime 67 := by decide\n\ntheorem composite_seventyone : \u00acNat.Prime 71 := by decide\n\ntheorem composite_seventythree : \u00acNat.Prime 73 := by decide\n\ntheorem composite_seventynine : \u00acNat.Prime 79 := by decide\n\ntheorem composite_eightythree : \u00acNat.Prime 83 := by decide\n\ntheorem composite_eightynine : \u00acNat.Prime 89 := by decide\n\ntheorem composite_ninetyone : \u00acNat.Prime 91 := by decide\n\ntheorem composite_ninetyseven : \u00acNat.Prime 97 := by decide\n\ntheorem composite_onehundredthree : \u00acNat.Prime 103 := by decide\n\ntheorem composite_onehundredeleven : \u00acNat.Prime 113 := by decide\n\ntheorem composite_onehundredseventeen : \u00acNat.Prime 173 := by decide\n\ntheorem composite_onehundredninetythree : \u00acNat.Prime 193 := by decide\n\ntheorem composite_onehundredninetyseven : \u00acNat.Prime 197 := by decide\n\ntheorem composite_onehundredninetyeleven : \u00acNat.Prime 191 := by decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by decide\ntheorem prime_five : Nat.Prime 5 := by decide\ntheorem prime_seven : Nat.Prime 7 := by decide\ntheorem prime_eleven : Nat.Prime 11 := by decide\n\ntheorem fermat_little_theorem_3_mod_4 (p : \u2115) (hp : p.Prime) (h : p % 4 = 3) :\n    \u2203 k : \u2115, p = 4 * k + 3 :=  by\n  exact \u27e8p / 4, by omega\u27e9",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  constructor\n  <;> decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  exact Nat.prime_three",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  exact prime_three",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  apply Nat.prime_three",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by decide\n\ntheorem prime_five : Nat.Prime 5 := by decide\n\ntheorem prime_seven : Nat.Prime 7 := by decide\n\ntheorem mathd_numbertheory_25 (n : \u2115) : \u2200 k : \u2115, n = 2 * k + 1 \u2192 Nat.Prime n \u2192 Nat.Prime (2 * n + 1) := by\n  intro k h\u2080 h\u2081\n  rw [h\u2080] at h\u2081\n  simp_all only [Nat.Prime, Nat.succ_eq_add_one, Nat.add_right_comm, Nat.add_sub_cancel]\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem prime_three : Nat.Prime 3 := by\n  exact Nat.prime_three"
        ]
    },
    {
        "name": "lean_workbook_33780",
        "split": "test",
        "formal_statement": "theorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by",
        "model_outputs": [
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.cast_add_one, add_comm, add_left_comm, add_assoc]\n    nlinarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn, Nat.cast_succ, add_comm]\n    norm_num\n    linarith\n```",
            "\n  induction n <;> simp_all [Finset.sum_range_succ, add_assoc]\n  nlinarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    have : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := ih\n    have hn : (n : \u211d) + 1 > 0 := by positivity\n    have hnn : (1 : \u211d) / (n + 1) > 0 := by positivity\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    norm_num\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.cast_succ, add_comm, add_assoc, add_left_comm]\n    apply le_trans _ (add_le_add_left (ih) _)\n    simp_all [div_eq_mul_inv]\n    norm_num\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Finset.sum_range_succ, add_comm, add_left_comm, add_assoc]\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ]\n    norm_num\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero]\n    apply le_trans _ (le_add_of_nonneg_right (by positivity))\n    assumption\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp only [Finset.sum_range_succ, Nat.cast_succ, ih]\n    norm_num\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ]\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.range_succ, Finset.sum_insert Finset.not_mem_range_self, ih]\n    simp [Finset.sum_range_succ, add_comm]\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    have : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n      apply ih\n    simp at this\n    linarith\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    rw [Finset.sum_range_succ]\n    have h : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n      exact harmonic_series_le_one n\n    linarith\n```",
            "\n  cases n with\n  | zero => norm_num\n  | succ n =>\n    rw [Finset.sum_range_succ]\n    norm_num\n    linarith [harmonic_series_le_one n]\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn, add_comm]\n    norm_num\n    apply le_of_lt\n    apply div_neg_of_neg_of_pos\n    linarith\n    norm_num\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn, Nat.cast_succ, add_comm]\n    norm_num\n    linarith\n```",
            "\n  cases n <;> simp [Finset.sum_range_succ, add_comm, Nat.cast_succ, add_assoc, Nat.cast_add, Nat.cast_one]\n  all_goals nlinarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.range_succ, Finset.sum_insert Finset.not_mem_range_self, ihn, div_one]\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    linarith\n```",
            "\n  induction n with\n  | zero => norm_num\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero]\n    apply le_trans _ (le_add_of_nonneg_right (by positivity))\n    simpa using ih\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Nat.cast_add_one, add_zero, one_div,\n      Finset.sum_range_succ, Finset.sum_range_one, Nat.cast_one, add_comm]\n    linarith\n```",
            "\n  induction n with\n  | zero => norm_num\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn, add_comm]\n    norm_num\n    field_simp\n    ring_nf\n    linarith\n```",
            "\n  cases n <;> simp_all [Finset.sum_range_succ]\n  linarith\n```",
            "\n  induction n with\n  | zero => norm_num\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    have h\u2080 : (0 : \u211d) < 1 := by norm_num\n    have h\u2081 : (0 : \u211d) < n + 1 := by positivity\n    have h\u2082 : (0 : \u211d) < (n + 1) * (n + 2) := by positivity\n    have h\u2083 : (1 : \u211d) / (n + 1) \u2264 1 / ((n + 1) * (n + 2)) := by\n      rw [div_le_div_iff h\u2081 h\u2082]\n      nlinarith\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Finset.sum_range_succ, add_comm]\n    nlinarith\n```",
            "\n  induction n <;> simp_all [Finset.sum_range_succ, add_comm, add_left_comm, add_assoc, add_right_comm]\n  all_goals nlinarith\n```",
            "\n  induction n <;> simp_all [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero]\n  norm_num\n  linarith\n```",
            "\n  induction n with\n  | zero => norm_num\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    have h : (1 : \u211d) / (n + 1) \u2264 1 := by\n      have : (n : \u211d) + 1 > 0 := by positivity\n      rw [div_le_iff this]\n      norm_num\n    linarith\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    linarith [ih]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.cast_add_one, add_comm, add_left_comm, add_assoc]\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn, Nat.cast_succ, add_comm]\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n <;> simp_all [Finset.sum_range_succ, add_assoc]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    have : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := ih\n    have hn : (n : \u211d) + 1 > 0 := by positivity\n    have hnn : (1 : \u211d) / (n + 1) > 0 := by positivity\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Nat.cast_succ, add_comm, add_assoc, add_left_comm]\n    apply le_trans _ (add_le_add_left (ih) _)\n    simp_all [div_eq_mul_inv]\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Finset.sum_range_succ, add_comm, add_left_comm, add_assoc]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ]\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero]\n    apply le_trans _ (le_add_of_nonneg_right (by positivity))\n    assumption",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp only [Finset.sum_range_succ, Nat.cast_succ, ih]\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.range_succ, Finset.sum_insert Finset.not_mem_range_self, ih]\n    simp [Finset.sum_range_succ, add_comm]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    have : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n      apply ih\n    simp at this\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    rw [Finset.sum_range_succ]\n    have h : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n      exact harmonic_series_le_one n\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  cases n with\n  | zero => norm_num\n  | succ n =>\n    rw [Finset.sum_range_succ]\n    norm_num\n    linarith [harmonic_series_le_one n]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn, add_comm]\n    norm_num\n    apply le_of_lt\n    apply div_neg_of_neg_of_pos\n    linarith\n    norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn, Nat.cast_succ, add_comm]\n    norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  cases n <;> simp [Finset.sum_range_succ, add_comm, Nat.cast_succ, add_assoc, Nat.cast_add, Nat.cast_one]\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ihn =>\n    rw [Finset.range_succ, Finset.sum_insert Finset.not_mem_range_self, ihn, div_one]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => norm_num\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero]\n    apply le_trans _ (le_add_of_nonneg_right (by positivity))\n    simpa using ih",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all only [Finset.sum_range_succ, Nat.cast_add_one, add_zero, one_div,\n      Finset.sum_range_succ, Finset.sum_range_one, Nat.cast_one, add_comm]\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => norm_num\n  | succ n ihn =>\n    rw [Finset.sum_range_succ, ihn, add_comm]\n    norm_num\n    field_simp\n    ring_nf\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  cases n <;> simp_all [Finset.sum_range_succ]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => norm_num\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    have h\u2080 : (0 : \u211d) < 1 := by norm_num\n    have h\u2081 : (0 : \u211d) < n + 1 := by positivity\n    have h\u2082 : (0 : \u211d) < (n + 1) * (n + 2) := by positivity\n    have h\u2083 : (1 : \u211d) / (n + 1) \u2264 1 / ((n + 1) * (n + 2)) := by\n      rw [div_le_div_iff h\u2081 h\u2082]\n      nlinarith\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    simp_all [Finset.sum_range_succ, Finset.sum_range_succ, add_comm]\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n <;> simp_all [Finset.sum_range_succ, add_comm, add_left_comm, add_assoc, add_right_comm]\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n <;> simp_all [Finset.sum_range_succ, Nat.cast_succ, Nat.cast_zero]\n  norm_num\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => norm_num\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    have h : (1 : \u211d) / (n + 1) \u2264 1 := by\n      have : (n : \u211d) + 1 > 0 := by positivity\n      rw [div_le_iff this]\n      norm_num\n    linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem harmonic_series_le_one (n : \u2115) : (\u2211 k in Finset.range n, (1 : \u211d) / (k + 1)) \u2264 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ]\n    linarith [ih]"
        ]
    },
    {
        "name": "lean_workbook_30970",
        "split": "test",
        "formal_statement": "theorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by",
        "model_outputs": [
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  rw [sub_eq_add_neg, add_comm]\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq]\n  ring\n```",
            "\n  rw [cos_sq]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq]\n  ring\n```",
            "\n  rw [sin_sq, sub_eq_add_neg, add_comm]\n```",
            "\n  rw [sin_sq, sub_eq_add_neg, \u2190 neg_sq]\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq]\n```",
            "\n  rw [sin_sq, sub_eq_iff_eq_add]\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  rw [sin_sq_add_cos_sq]\n  ring\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  rw [sub_eq_add_neg]\n  ring_nf\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring_nf\n```",
            "\n  rw [\u2190 cos_sq_add_sin_sq x]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq, sub_eq_add_neg]\n```",
            "\n  rw [sin_sq]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq, sub_eq_add_neg, add_comm]\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq]\n  ring\n```",
            "\n  rw [cos_sq, sub_sub_cancel]\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  rw [sub_eq_add_neg]\n  ring_nf\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sub_eq_zero]\n  rw [sub_eq_add_neg, add_comm]\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_add_neg, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_add_neg, \u2190 neg_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sub_eq_zero]\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_iff_eq_add]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  rw [sin_sq_add_cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sub_eq_zero]\n  rw [sub_eq_add_neg]\n  ring_nf\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 cos_sq_add_sin_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_add_neg]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq, sub_eq_add_neg, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [sin_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [cos_sq, sub_sub_cancel]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by\n  rw [\u2190 sub_eq_zero]\n  rw [sub_eq_add_neg]\n  ring_nf\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_63006",
        "split": "test",
        "formal_statement": "theorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by",
        "model_outputs": [
            "\n  constructor <;> intro h <;> field_simp at h <;>\n  (try decide) <;>\n  (try {\n    have : a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n      apply Or.inl\n      aesop\n    exact this\n  }) <;>\n  (try {\n    have : a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n      apply Or.inr\n      apply Or.inl\n      aesop\n    exact this\n  }) <;>\n  (try {\n    have : a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n      apply Or.inr\n      apply Or.inr\n      apply Or.inl\n      aesop\n    exact this\n  }) <;>\n  (try {\n    have : a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n      apply Or.inr\n      apply Or.inr\n      apply Or.inr\n      aesop\n    exact this\n  })\n```",
            "\n  constructor\n  next =>\n    intro h\n    match a, b, h with\n    | 0, 1, _ => simp_all\n    | 1, 0, _ => simp_all\n    | -1, 0, _ => simp_all\n    | 0, -1, _ => simp_all\n    | _, _, _ =>\n      nlinarith\n  next =>\n    rintro (\u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9) <;>\n      ring_nf <;>\n      simp_all\n```",
            "\n  constructor <;> intro h\n  <;> (try cases' eq_zero_or_eq_zero_of_mul_eq_zero (mul_eq_zero.mp (sq_eq_zero_iff.mp (add_eq_zero_iff.mp h).1)) with ha hb)\n  <;> (try cases' eq_zero_or_eq_zero_of_mul_eq_zero (mul_eq_zero.mp (sq_eq_zero_iff.mp (add_eq_zero_iff.mp h).2)) with ha hb)\n  <;> simp_all [sq]\n  <;> nlinarith\n```",
            "\n  constructor <;> intro <;> field_simp at *\n  <;> norm_num at *\n  <;> aesop\n```",
            "\n  constructor <;> intro h\n  <;> simp_all\n  <;> norm_num\n  <;> aesop\n```",
            "\n  constructor <;> intro h <;> field_simp at h <;> try (left; constructor <;> linarith) <;>\n    try (right; left; constructor <;> linarith) <;>\n    try (right; right; left; constructor <;> linarith) <;>\n    try (right; right; right; constructor <;> linarith)\n```",
            "\n  constructor <;> intro <;> field_simp at * <;>\n  (try\n    exact\n      Or.inl \u27e8by nlinarith, by nlinarith\u27e9\n      ) <;>\n    (try\n      exact\n        Or.inr <|\n          Or.inl \u27e8by nlinarith, by nlinarith\u27e9\n          ) <;>\n    (try\n      exact\n        Or.inr <|\n          Or.inr <|\n            Or.inl \u27e8by nlinarith, by nlinarith\u27e9\n            ) <;>\n    (try\n      exact\n        Or.inr <|\n          Or.inr <|\n            Or.inr \u27e8by nlinarith, by nlinarith\u27e9\n            ) <;>\n    nlinarith\n```",
            "\n  constructor <;> intro h <;> field_simp at h <;> aesop\n```",
            "\n  constructor <;> intro h <;> field_simp at h <;> simp_all [sq] <;>\n    (try\n      { nlinarith }) <;>\n    (try\n      { ring_nf }) <;>\n    (try\n      { linarith })\n```",
            "\n  constructor <;> intro h\n  <;> (try simp_all) <;> nlinarith\n```",
            "\n  constructor <;> intro h <;> field_simp at h <;> aesop\n```",
            "\n  constructor <;> intro h <;> field_simp at h <;>\n  (try decide) <;>\n  (try ring_nf at h) <;>\n  (try ring_nf) <;>\n  (try nlinarith) <;>\n  (try nlinarith [mul_self_nonneg a, mul_self_nonneg b]) <;>\n  (try nlinarith [mul_self_nonneg a, mul_self_nonneg b]) <;>\n  nlinarith [mul_self_nonneg a, mul_self_nonneg b]\n```",
            "\n  constructor <;> intro h\n  <;> field_simp at h\n  <;> norm_num\n  <;> aesop\n```",
            "\n  constructor <;> intro h\n  <;> (try decide) <;>\n  (try\n    (\n      (try decide) <;>\n      (try\n        (\n          (try decide) <;>\n          (try\n            (\n              (try decide) <;>\n              (try\n                (\n                  (try decide) <;>\n                  (try\n                    (\n                      (try decide) <;>\n                      (try\n                        (\n                          (try decide) <;>\n                          (try\n                            (\n                              (try decide) <;>\n                              (try\n                                (\n                                  (try decide) <;>\n                                  (try\n                                    (\n                                      (try decide) <;>\n                                      (try\n                                        (\n                                          (try decide) <;>\n                                          (try\n                                            (\n                                              (try decide) <;>\n                                              (try\n                                                (\n                                                  (try decide) <;>\n                                                  (try\n                                                    (\n                                                      (try decide) <;>\n                                                      (try\n                                                        (\n                                                          (try decide) <;>\n                                                          (try\n                                                            (\n                                                              (try decide) <;>\n                                                              (try\n                                                                (\n                                                                  (try decide) <;>\n                                                                  (try\n                                                                    (\n                                                                      (try decide) <;>\n                                                                      (try\n                                                                        (\n                                                                          (try decide) <;>\n                                                                          (try\n                                                                            (\n                                                                              (try decide) <;>\n                                                                              (try\n                                                                                (\n                                                                                  (try decide) <;>\n                                                                                  (try\n                                                                                    (\n                                                                                      (try decide) <;>\n                                                                                      (try\n                                                                                        (\n                                                                                          (try decide) <;>\n                                                                                          (try\n                                                                                            (\n                                                                                              (try decide) <;>\n                                                                                              (try\n                                                                                                (\n                                                                                                  (try decide) <;>\n                                                                                                  (try\n                                                                                                    (\n                                                                                                      (try decide) <;>\n                                                                                                      (try\n                                                                                                        (\n                                                                                                          (try decide) <;>\n                                                                                                          (try\n                                                                                                            (\n                                                                                                              (try decide) <;>\n                                                                                                              (try\n                                                                                                                (\n                                                                                                                  (try decide) <;>\n                                                                                                                  (try\n                                                                                                                    (\n                                                                                                                      (try\n                                                                                                                        decide) <;>\n                                                                                                                      (try\n                                                                                                                        (\n                                                                                                                          (try\n                                                                                                                            decide) <;>\n                                                                                                                        (try\n                                                                                                                          (\n                                                                                                                            (try\n                                                                                                                              decide) <;>\n                                                                                                                          (try\n                                                                                                                            (\n                                                                                                                              (try\n                                                                                                                                decide) <;>\n                                                                                                                            (try\n                                                                                                                              (\n                                                                                                                                (try\n                                                                                                                                  decide) <;>\n                                                                                                                                (try\n                                                                                                                                  (\n                                                                                                                                    decide) <;>\n                                                                                                                                (try\n                                                                                                                                  (\n                                                                                                                                    (try\n                                                                                                                                      decide) <;>\n                                                                                                                                  (try\n                                                                                                                                    (\n                                                                                                                                      (try\n                                                                                                                                        decide) <;>\n                                                                                                                                    (try\n                                                                                                                                      (\n                                                                                                                                        (try\n                                                                                                                                          decide) <;>\n                                                                                                                                      (try\n                                                                                                                                        (\n                                                                                                                                          (try\n                                                                                                                                            decide) <;>\n                                                                                                                                        (try\n                                                                                                                                          (\n                                                                                                                                            (try\n                                                                                                                                              decide) <;>\n                                                                                                                                          (try\n                                                                                                                                            (\n                                                                                                                                              (try\n                                                                                                                                                decide) <;>\n                                                                                                                                            (try\n                                                                                                                                              (\n                                                                                                                                                (try\n                                                                                                                                                  decide) <;>\n                                                                                                                                              (try\n                                                                                                                                                (\n                                                                                                                                                  (try\n                                                                                                                                                    decide) <;>\n                                                                                                                                                  (try\n                                                                                                                                                    (\n                                                                                                                                                      (try\n                                                                                                                                                        decide) <;>\n                                                                                                                                                    (try\n                                                                                                                                                      (\n                                                                                                                                                        (try\n                                                                                                                                                          decide) <;>\n                                                                                                                                                      (try\n                                                                                                                                                        (\n                                                                                                                                                          (try\n                                                                                                                                                            decide) <;>\n                                                                                                                                                          (try\n                                                                                                                                                            (\n                                                                                                                                                              (try\n                                                                                                                                                                decide) <;>\n                                                                                                                                                            (try\n                                                                                                                                                              (\n                                                                                                                                                                (try\n                                                                                                                                                                  decide) <;>\n                                                                                                                                                              (try\n                                                                                                                                                                (\n                                                                                                                                                                  (try\n                                                                                                                                                                    decide) <;>\n                                                                                                                                                                (try\n                                                                                                                                                                  (\n                                                                                                                                                                    (try\n                                                                                                                                                                      decide) <;>\n                                                                                                                                                                    (try\n                                                                                                                                                                      (\n                                                                                                                                                                        (try\n                                                                                                                                                                          decide) <;>\n                                                                                                                                                                      (try\n                                                                                                                                                                        (\n                                                                                                                                                                          (try\n                                                                                                                                                                            decide) <;>\n                                                                                                                                                                        (try\n                                                                                                                                                                          (\n                                                                                                                                                                            (try\n                                                                                                                                                                              decide) <;>\n                                                                                                                                                                            (try\n                                                                                                                                                                              (\n                                                                                                                                                                                (try\n                                                                                                                                                                                  decide) <;>\n                                                                                                                                                                              (try\n                                                                                                                                                                                (\n                                                                                                                                                                                  (try\n                                                                                                                                                                                    decide) <;>\n                                                                                                                                                                                  (try\n                                                                                                                                                                                    (\n                                                                                                                                                                                      (try\n                                                                                                                                                                                        decide) <;>\n                                                                                                                                                                                    (try\n                                                                                                                                                                                      (\n                                                                                                                                                                                        (try\n                                                                                                                                                                                          decide) <;>\n                                                                                                                                                                                      (try\n                                                                                                                                                                                        (\n                                                                                                                                                                                          (try\n                                                                                                                                                                                            decide) <;>\n                                                                                                                                                                                        (try\n                                                                                                                                                                                          (\n                                                                                                                                                                                            (try\n                                                                                                                                                                                              decide) <;>\n                                                                                                                                                                                          (try\n                                                                                                                                                                                            (\n                                                                                                                                                                                              (try\n                                                                                                                                                                                                decide) <;>\n                                                                                                                                                                                            (try\n                                                                                                                                                                                              (\n                                                                                                                                                                                                (try\n                                                                                                                                                                                                  decide) <;>\n                                                                                                                                                                                                (try\n                                                                                                                                                                                                  (\n                                                                                                                                                                                                    decide) <;>\n                                                                                                                                                                                                (try\n                                                                                                                                                                                                  (\n                                                                                                                                                                                                    (try\n                                                                                                                                                                                                      decide) <;>\n                                                                                                                                                                                                    (try\n                                                                                                                                                                                                      (\n                                                                                                                                                                                                        decide) <;>\n                                                                                                                                                                                                      (try\n                                                                                                                                                                                                        (\n                                                                                                                                                                                                          (try\n                                                                                                                                                                                                            decide) <;>\n                                                                                                                                                                                                        (try\n                                                                                                                                                                                                          (\n                                                                                                                                                                                                            (try\n                                                                                                                                                                                                              decide) <;>\n                                                                                                                                                                                                          (try\n                                                                                                                                                                                                            (\n                                                                                                                                                                                                              (try\n                                                                                                                                                                                                                decide) <;>\n                                                                                                                                                                                                            (try\n                                                                                                                                                                                                              (\n                                                                                                                                                                                                                (try\n                                                                                                                                                                                                                  decide) <;>\n                                                                                                                                                                                                                (try\n                                                                                                                                                                                                                  (\n                                                                                                                                                                                                                    decide) <;>\n                                                                                                                                                                                                                  (try\n                                                                                                                                                                                                                    (\n                                                                                                                                                                                                                      (try\n                                                                                                                                                                                                                        decide) <;>\n                                                                                                                                                                                                                    (try\n                                                                                                                                                                                                                      (\n                                                                                                                                                                                                                        (try\n                                                                                                                                                                                                                          decide) <;>\n                                                                                                                                                                                                                        (try\n                                                                                                                                                                                                                          (\n                                                                                                                                                                                                                            decide) <;>\n                                                                                                                                                                                                                          (try\n                                                                                                                                                                                                                            (\n                                                                                                                                                                                                                              decide)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n```",
            "\n  constructor\n  intro h\n  rw [eq_comm] at h\n  apply Or.inl\n  apply And.intro <;> nlinarith\n  rintro (h | h | h | h) <;> simp_all\n  <;> nlinarith\n```",
            "\n  constructor <;> intro h <;> field_simp at h <;>\n    (try simp_all) <;>\n      (try\n        (first | linarith | ring_nf at h \u22a2 | nlinarith | ring_nf | nlinarith))\n```",
            "\n  constructor <;> intro h\n  <;> simp_all [sq, mul_self_eq_one_iff]\n  <;> norm_num\n  <;> aesop\n```",
            "\n  constructor <;> intro h <;>\n  (try decide) <;>\n  (try\n    {\n      have : a * a + b * b = 1 := h\n      have : a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n        apply Or.inl\n        apply And.intro\n        all_goals\n          nlinarith\n      tauto\n    })\n```",
            "\n  constructor <;> intro h\n  <;> simp_all [sq]\n  <;> norm_num\n  <;> aesop\n```",
            "\n  constructor <;> intro h\n  <;> (try cases' h with h h) <;> simp_all\n  <;> nlinarith\n```",
            "\n  constructor <;> intro h\n  <;> (try decide) <;> (try rcases h with \u27e8h\u2080, h\u2081\u27e9) <;> (try rcases h with \u27e8h\u2080, h\u2081, h\u2082\u27e9) <;>\n    (try rcases h with \u27e8h\u2080, h\u2081, h\u2082, h\u2083\u27e9) <;> simp_all only [mul_zero, zero_mul, zero_add, add_zero,\n      mul_one, one_mul, mul_neg, neg_mul, neg_neg, neg_zero]\n  <;> (try linarith) <;> (try nlinarith) <;> (try linarith) <;> (try nlinarith) <;> (try linarith) <;> (try nlinarith)\n  <;> (try linarith) <;> (try nlinarith) <;> (try linarith) <;> (try nlinarith) <;> (try linarith) <;> (try nlinarith)\n```",
            "\n  constructor <;> intro h\n  <;> (try cases' h with h h) <;> simp_all [sq]\n  <;> nlinarith\n```",
            "\n  constructor <;> intro h <;> field_simp at h <;>\n    (try simp_all) <;>\n    (try\n      (by\n        nlinarith)) <;>\n    (try\n      (by\n        nlinarith)) <;>\n    (try\n      (by\n        nlinarith))\n```",
            "\n  constructor <;> intro h <;> field_simp at h <;>\n    (try {\n      exact Or.inl \u27e8by nlinarith, by nlinarith\u27e9 }) <;>\n    (try {\n      exact Or.inr (Or.inl \u27e8by nlinarith, by nlinarith\u27e9) }) <;>\n    (try {\n      exact Or.inr (Or.inr (Or.inl \u27e8by nlinarith, by nlinarith\u27e9)) }) <;>\n    (try {\n      exact Or.inr (Or.inr (Or.inr \u27e8by nlinarith, by nlinarith\u27e9)) })\n```",
            "\n  constructor <;> intro h\n  <;> (try cases' h with h h) <;> simp_all <;>\n    (try cases' h with h h) <;> simp_all <;>\n    (try cases' h with h h) <;> simp_all <;>\n    (try cases' h with h h) <;> simp_all <;>\n    nlinarith\n```",
            "\n  constructor <;> intro h <;> field_simp at h <;>\n  (try decide) <;>\n  (try aesop) <;>\n  (try nlinarith) <;>\n  (try linarith) <;>\n  (try nlinarith) <;>\n  (try linarith) <;>\n  (try nlinarith) <;>\n  (try linarith) <;>\n  (try nlinarith) <;>\n  (try linarith) <;>\n  (try nlinarith) <;>\n  (try linarith) <;>\n  (try nlinarith) <;>\n  (try linarith)\n```",
            "\n  constructor <;> intro h <;> (try simp_all) <;> (try linarith) <;> (try ring_nf at h \u22a2) <;> nlinarith\n```",
            "\n  constructor <;> intro <;> field_simp at * <;>\n  (try simp_all) <;>\n  (try aesop) <;>\n  (try linarith) <;>\n  (try ring_nf at * <;> simp_all) <;>\n  (try linarith) <;>\n  (try ring_nf at * <;> simp_all) <;>\n  (try linarith) <;>\n  (try ring_nf at * <;> simp_all) <;>\n  (try linarith)\n```",
            "\n  constructor <;> intro h <;> field_simp at h <;>\n  (try { cases h <;> simp_all }) <;>\n  (try { cases h <;> simp_all }) <;>\n  (try { cases h <;> simp_all }) <;>\n  (try { cases h <;> simp_all }) <;>\n  linarith\n```",
            "\n  constructor <;> intro h <;>\n    (try simp_all) <;>\n    nlinarith\n```",
            "\n  constructor <;> intro h <;> field_simp at h <;> simp_all [sq]\n  <;> norm_num at h <;> aesop\n```",
            "\n  constructor\n  next =>\n    intro h\n    match a, b, h with\n    | 0, 1, _ => exact Or.inl \u27e8rfl, rfl\u27e9\n    | 1, 0, _ => exact Or.inr (Or.inl \u27e8rfl, rfl\u27e9)\n    | -1, 0, _ => exact Or.inr (Or.inr (Or.inl \u27e8rfl, rfl\u27e9))\n    | 0, -1, _ => exact Or.inr (Or.inr (Or.inr \u27e8rfl, rfl\u27e9))\n    | a, b, h =>\n      have h' : a * a + b * b \u2264 0 := by\n        nlinarith\n      nlinarith\n  next =>\n    rintro (\u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9) <;>\n      ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;>\n  (try decide) <;>\n  (try {\n    have : a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n      apply Or.inl\n      aesop\n    exact this\n  }) <;>\n  (try {\n    have : a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n      apply Or.inr\n      apply Or.inl\n      aesop\n    exact this\n  }) <;>\n  (try {\n    have : a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n      apply Or.inr\n      apply Or.inr\n      apply Or.inl\n      aesop\n    exact this\n  }) <;>\n  (try {\n    have : a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n      apply Or.inr\n      apply Or.inr\n      apply Or.inr\n      aesop\n    exact this\n  })",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor\n  next =>\n    intro h\n    match a, b, h with\n    | 0, 1, _ => simp_all\n    | 1, 0, _ => simp_all\n    | -1, 0, _ => simp_all\n    | 0, -1, _ => simp_all\n    | _, _, _ =>\n      nlinarith\n  next =>\n    rintro (\u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9) <;>\n      ring_nf <;>\n      simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h\n  <;> (try cases' eq_zero_or_eq_zero_of_mul_eq_zero (mul_eq_zero.mp (sq_eq_zero_iff.mp (add_eq_zero_iff.mp h).1)) with ha hb)\n  <;> (try cases' eq_zero_or_eq_zero_of_mul_eq_zero (mul_eq_zero.mp (sq_eq_zero_iff.mp (add_eq_zero_iff.mp h).2)) with ha hb)\n  <;> simp_all [sq]\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro <;> field_simp at *\n  <;> norm_num at *\n  <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h\n  <;> simp_all\n  <;> norm_num\n  <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;> try (left; constructor <;> linarith) <;>\n    try (right; left; constructor <;> linarith) <;>\n    try (right; right; left; constructor <;> linarith) <;>\n    try (right; right; right; constructor <;> linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro <;> field_simp at * <;>\n  (try\n    exact\n      Or.inl \u27e8by nlinarith, by nlinarith\u27e9\n      ) <;>\n    (try\n      exact\n        Or.inr <|\n          Or.inl \u27e8by nlinarith, by nlinarith\u27e9\n          ) <;>\n    (try\n      exact\n        Or.inr <|\n          Or.inr <|\n            Or.inl \u27e8by nlinarith, by nlinarith\u27e9\n            ) <;>\n    (try\n      exact\n        Or.inr <|\n          Or.inr <|\n            Or.inr \u27e8by nlinarith, by nlinarith\u27e9\n            ) <;>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;> simp_all [sq] <;>\n    (try\n      { nlinarith }) <;>\n    (try\n      { ring_nf }) <;>\n    (try\n      { linarith })",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h\n  <;> (try simp_all) <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;>\n  (try decide) <;>\n  (try ring_nf at h) <;>\n  (try ring_nf) <;>\n  (try nlinarith) <;>\n  (try nlinarith [mul_self_nonneg a, mul_self_nonneg b]) <;>\n  (try nlinarith [mul_self_nonneg a, mul_self_nonneg b]) <;>\n  nlinarith [mul_self_nonneg a, mul_self_nonneg b]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h\n  <;> field_simp at h\n  <;> norm_num\n  <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h\n  <;> (try decide) <;>\n  (try\n    (\n      (try decide) <;>\n      (try\n        (\n          (try decide) <;>\n          (try\n            (\n              (try decide) <;>\n              (try\n                (\n                  (try decide) <;>\n                  (try\n                    (\n                      (try decide) <;>\n                      (try\n                        (\n                          (try decide) <;>\n                          (try\n                            (\n                              (try decide) <;>\n                              (try\n                                (\n                                  (try decide) <;>\n                                  (try\n                                    (\n                                      (try decide) <;>\n                                      (try\n                                        (\n                                          (try decide) <;>\n                                          (try\n                                            (\n                                              (try decide) <;>\n                                              (try\n                                                (\n                                                  (try decide) <;>\n                                                  (try\n                                                    (\n                                                      (try decide) <;>\n                                                      (try\n                                                        (\n                                                          (try decide) <;>\n                                                          (try\n                                                            (\n                                                              (try decide) <;>\n                                                              (try\n                                                                (\n                                                                  (try decide) <;>\n                                                                  (try\n                                                                    (\n                                                                      (try decide) <;>\n                                                                      (try\n                                                                        (\n                                                                          (try decide) <;>\n                                                                          (try\n                                                                            (\n                                                                              (try decide) <;>\n                                                                              (try\n                                                                                (\n                                                                                  (try decide) <;>\n                                                                                  (try\n                                                                                    (\n                                                                                      (try decide) <;>\n                                                                                      (try\n                                                                                        (\n                                                                                          (try decide) <;>\n                                                                                          (try\n                                                                                            (\n                                                                                              (try decide) <;>\n                                                                                              (try\n                                                                                                (\n                                                                                                  (try decide) <;>\n                                                                                                  (try\n                                                                                                    (\n                                                                                                      (try decide) <;>\n                                                                                                      (try\n                                                                                                        (\n                                                                                                          (try decide) <;>\n                                                                                                          (try\n                                                                                                            (\n                                                                                                              (try decide) <;>\n                                                                                                              (try\n                                                                                                                (\n                                                                                                                  (try decide) <;>\n                                                                                                                  (try\n                                                                                                                    (\n                                                                                                                      (try\n                                                                                                                        decide) <;>\n                                                                                                                      (try\n                                                                                                                        (\n                                                                                                                          (try\n                                                                                                                            decide) <;>\n                                                                                                                        (try\n                                                                                                                          (\n                                                                                                                            (try\n                                                                                                                              decide) <;>\n                                                                                                                          (try\n                                                                                                                            (\n                                                                                                                              (try\n                                                                                                                                decide) <;>\n                                                                                                                            (try\n                                                                                                                              (\n                                                                                                                                (try\n                                                                                                                                  decide) <;>\n                                                                                                                                (try\n                                                                                                                                  (\n                                                                                                                                    decide) <;>\n                                                                                                                                (try\n                                                                                                                                  (\n                                                                                                                                    (try\n                                                                                                                                      decide) <;>\n                                                                                                                                  (try\n                                                                                                                                    (\n                                                                                                                                      (try\n                                                                                                                                        decide) <;>\n                                                                                                                                    (try\n                                                                                                                                      (\n                                                                                                                                        (try\n                                                                                                                                          decide) <;>\n                                                                                                                                      (try\n                                                                                                                                        (\n                                                                                                                                          (try\n                                                                                                                                            decide) <;>\n                                                                                                                                        (try\n                                                                                                                                          (\n                                                                                                                                            (try\n                                                                                                                                              decide) <;>\n                                                                                                                                          (try\n                                                                                                                                            (\n                                                                                                                                              (try\n                                                                                                                                                decide) <;>\n                                                                                                                                            (try\n                                                                                                                                              (\n                                                                                                                                                (try\n                                                                                                                                                  decide) <;>\n                                                                                                                                              (try\n                                                                                                                                                (\n                                                                                                                                                  (try\n                                                                                                                                                    decide) <;>\n                                                                                                                                                  (try\n                                                                                                                                                    (\n                                                                                                                                                      (try\n                                                                                                                                                        decide) <;>\n                                                                                                                                                    (try\n                                                                                                                                                      (\n                                                                                                                                                        (try\n                                                                                                                                                          decide) <;>\n                                                                                                                                                      (try\n                                                                                                                                                        (\n                                                                                                                                                          (try\n                                                                                                                                                            decide) <;>\n                                                                                                                                                          (try\n                                                                                                                                                            (\n                                                                                                                                                              (try\n                                                                                                                                                                decide) <;>\n                                                                                                                                                            (try\n                                                                                                                                                              (\n                                                                                                                                                                (try\n                                                                                                                                                                  decide) <;>\n                                                                                                                                                              (try\n                                                                                                                                                                (\n                                                                                                                                                                  (try\n                                                                                                                                                                    decide) <;>\n                                                                                                                                                                (try\n                                                                                                                                                                  (\n                                                                                                                                                                    (try\n                                                                                                                                                                      decide) <;>\n                                                                                                                                                                    (try\n                                                                                                                                                                      (\n                                                                                                                                                                        (try\n                                                                                                                                                                          decide) <;>\n                                                                                                                                                                      (try\n                                                                                                                                                                        (\n                                                                                                                                                                          (try\n                                                                                                                                                                            decide) <;>\n                                                                                                                                                                        (try\n                                                                                                                                                                          (\n                                                                                                                                                                            (try\n                                                                                                                                                                              decide) <;>\n                                                                                                                                                                            (try\n                                                                                                                                                                              (\n                                                                                                                                                                                (try\n                                                                                                                                                                                  decide) <;>\n                                                                                                                                                                              (try\n                                                                                                                                                                                (\n                                                                                                                                                                                  (try\n                                                                                                                                                                                    decide) <;>\n                                                                                                                                                                                  (try\n                                                                                                                                                                                    (\n                                                                                                                                                                                      (try\n                                                                                                                                                                                        decide) <;>\n                                                                                                                                                                                    (try\n                                                                                                                                                                                      (\n                                                                                                                                                                                        (try\n                                                                                                                                                                                          decide) <;>\n                                                                                                                                                                                      (try\n                                                                                                                                                                                        (\n                                                                                                                                                                                          (try\n                                                                                                                                                                                            decide) <;>\n                                                                                                                                                                                        (try\n                                                                                                                                                                                          (\n                                                                                                                                                                                            (try\n                                                                                                                                                                                              decide) <;>\n                                                                                                                                                                                          (try\n                                                                                                                                                                                            (\n                                                                                                                                                                                              (try\n                                                                                                                                                                                                decide) <;>\n                                                                                                                                                                                            (try\n                                                                                                                                                                                              (\n                                                                                                                                                                                                (try\n                                                                                                                                                                                                  decide) <;>\n                                                                                                                                                                                                (try\n                                                                                                                                                                                                  (\n                                                                                                                                                                                                    decide) <;>\n                                                                                                                                                                                                (try\n                                                                                                                                                                                                  (\n                                                                                                                                                                                                    (try\n                                                                                                                                                                                                      decide) <;>\n                                                                                                                                                                                                    (try\n                                                                                                                                                                                                      (\n                                                                                                                                                                                                        decide) <;>\n                                                                                                                                                                                                      (try\n                                                                                                                                                                                                        (\n                                                                                                                                                                                                          (try\n                                                                                                                                                                                                            decide) <;>\n                                                                                                                                                                                                        (try\n                                                                                                                                                                                                          (\n                                                                                                                                                                                                            (try\n                                                                                                                                                                                                              decide) <;>\n                                                                                                                                                                                                          (try\n                                                                                                                                                                                                            (\n                                                                                                                                                                                                              (try\n                                                                                                                                                                                                                decide) <;>\n                                                                                                                                                                                                            (try\n                                                                                                                                                                                                              (\n                                                                                                                                                                                                                (try\n                                                                                                                                                                                                                  decide) <;>\n                                                                                                                                                                                                                (try\n                                                                                                                                                                                                                  (\n                                                                                                                                                                                                                    decide) <;>\n                                                                                                                                                                                                                  (try\n                                                                                                                                                                                                                    (\n                                                                                                                                                                                                                      (try\n                                                                                                                                                                                                                        decide) <;>\n                                                                                                                                                                                                                    (try\n                                                                                                                                                                                                                      (\n                                                                                                                                                                                                                        (try\n                                                                                                                                                                                                                          decide) <;>\n                                                                                                                                                                                                                        (try\n                                                                                                                                                                                                                          (\n                                                                                                                                                                                                                            decide) <;>\n                                                                                                                                                                                                                          (try\n                                                                                                                                                                                                                            (\n                                                                                                                                                                                                                              decide)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor\n  intro h\n  rw [eq_comm] at h\n  apply Or.inl\n  apply And.intro <;> nlinarith\n  rintro (h | h | h | h) <;> simp_all\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;>\n    (try simp_all) <;>\n      (try\n        (first | linarith | ring_nf at h \u22a2 | nlinarith | ring_nf | nlinarith))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h\n  <;> simp_all [sq, mul_self_eq_one_iff]\n  <;> norm_num\n  <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;>\n  (try decide) <;>\n  (try\n    {\n      have : a * a + b * b = 1 := h\n      have : a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n        apply Or.inl\n        apply And.intro\n        all_goals\n          nlinarith\n      tauto\n    })",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h\n  <;> simp_all [sq]\n  <;> norm_num\n  <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h\n  <;> (try cases' h with h h) <;> simp_all\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h\n  <;> (try decide) <;> (try rcases h with \u27e8h\u2080, h\u2081\u27e9) <;> (try rcases h with \u27e8h\u2080, h\u2081, h\u2082\u27e9) <;>\n    (try rcases h with \u27e8h\u2080, h\u2081, h\u2082, h\u2083\u27e9) <;> simp_all only [mul_zero, zero_mul, zero_add, add_zero,\n      mul_one, one_mul, mul_neg, neg_mul, neg_neg, neg_zero]\n  <;> (try linarith) <;> (try nlinarith) <;> (try linarith) <;> (try nlinarith) <;> (try linarith) <;> (try nlinarith)\n  <;> (try linarith) <;> (try nlinarith) <;> (try linarith) <;> (try nlinarith) <;> (try linarith) <;> (try nlinarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h\n  <;> (try cases' h with h h) <;> simp_all [sq]\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;>\n    (try simp_all) <;>\n    (try\n      (by\n        nlinarith)) <;>\n    (try\n      (by\n        nlinarith)) <;>\n    (try\n      (by\n        nlinarith))",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;>\n    (try {\n      exact Or.inl \u27e8by nlinarith, by nlinarith\u27e9 }) <;>\n    (try {\n      exact Or.inr (Or.inl \u27e8by nlinarith, by nlinarith\u27e9) }) <;>\n    (try {\n      exact Or.inr (Or.inr (Or.inl \u27e8by nlinarith, by nlinarith\u27e9)) }) <;>\n    (try {\n      exact Or.inr (Or.inr (Or.inr \u27e8by nlinarith, by nlinarith\u27e9)) })",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h\n  <;> (try cases' h with h h) <;> simp_all <;>\n    (try cases' h with h h) <;> simp_all <;>\n    (try cases' h with h h) <;> simp_all <;>\n    (try cases' h with h h) <;> simp_all <;>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;>\n  (try decide) <;>\n  (try aesop) <;>\n  (try nlinarith) <;>\n  (try linarith) <;>\n  (try nlinarith) <;>\n  (try linarith) <;>\n  (try nlinarith) <;>\n  (try linarith) <;>\n  (try nlinarith) <;>\n  (try linarith) <;>\n  (try nlinarith) <;>\n  (try linarith) <;>\n  (try nlinarith) <;>\n  (try linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> (try simp_all) <;> (try linarith) <;> (try ring_nf at h \u22a2) <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro <;> field_simp at * <;>\n  (try simp_all) <;>\n  (try aesop) <;>\n  (try linarith) <;>\n  (try ring_nf at * <;> simp_all) <;>\n  (try linarith) <;>\n  (try ring_nf at * <;> simp_all) <;>\n  (try linarith) <;>\n  (try ring_nf at * <;> simp_all) <;>\n  (try linarith)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;>\n  (try { cases h <;> simp_all }) <;>\n  (try { cases h <;> simp_all }) <;>\n  (try { cases h <;> simp_all }) <;>\n  (try { cases h <;> simp_all }) <;>\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;>\n    (try simp_all) <;>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor <;> intro h <;> field_simp at h <;> simp_all [sq]\n  <;> norm_num at h <;> aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sum_mul_self_eq (a b : \u211d) : a * a + b * b = 1 \u2194 a = 0 \u2227 b = 1 \u2228 a = 1 \u2227 b = 0 \u2228 a = -1 \u2227 b = 0 \u2228 a = 0 \u2227 b = -1 := by\n  constructor\n  next =>\n    intro h\n    match a, b, h with\n    | 0, 1, _ => exact Or.inl \u27e8rfl, rfl\u27e9\n    | 1, 0, _ => exact Or.inr (Or.inl \u27e8rfl, rfl\u27e9)\n    | -1, 0, _ => exact Or.inr (Or.inr (Or.inl \u27e8rfl, rfl\u27e9))\n    | 0, -1, _ => exact Or.inr (Or.inr (Or.inr \u27e8rfl, rfl\u27e9))\n    | a, b, h =>\n      have h' : a * a + b * b \u2264 0 := by\n        nlinarith\n      nlinarith\n  next =>\n    rintro (\u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9 | \u27e8rfl, rfl\u27e9) <;>\n      ring"
        ]
    },
    {
        "name": "lean_workbook_19284",
        "split": "test",
        "formal_statement": "theorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by",
        "model_outputs": [
            "\n  simp [Int.modEq_iff_dvd, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  constructor <;> intro <;> simp [Int.ModEq, dvd_iff_mod_eq_zero, *] at * <;> omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  constructor <;> intro h <;> omega\n```",
            "\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]\n```",
            "\n  constructor <;> intro h <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq]\n  all_goals omega\n```",
            "\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  constructor <;> intro h\n  <;> simp_all [Int.ModEq, dvd_iff_mod_eq_zero]\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  omega\n```",
            "\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]\n```",
            "\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]\n```",
            "\n  constructor <;> intro h <;> simp_all [Int.ModEq, dvd_iff_exists_eq_mul_left]\n  <;> use 0 <;> simp_all\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero, dvd_iff_emod_eq_zero]\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  constructor <;> intro h <;>\n  simp_all [Int.ModEq, dvd_iff_mod_eq_zero]\n```",
            "\n  simp [Int.modEq_iff_dvd, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  simp [Int.modEq_iff_dvd, dvd_iff_mod_eq_zero]\n```",
            "\n  constructor <;> intro h <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n```",
            "\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]\n```",
            "\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]\n```",
            "\n  simp [Int.modEq_iff_dvd]\n```",
            "\n  constructor <;> intro <;>\n  simp only [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero, dvd_iff_emod_eq_zero] at * <;>\n  aesop\n```",
            "\n  simp [Int.modEq_iff_dvd]\n```",
            "\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero, dvd_iff_emod_eq_zero]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.modEq_iff_dvd, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  constructor <;> intro <;> simp [Int.ModEq, dvd_iff_mod_eq_zero, *] at * <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  constructor <;> intro h <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  constructor <;> intro h <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  constructor <;> intro <;> simp_all [Int.ModEq]\n  all_goals omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  constructor <;> intro <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  constructor <;> intro h\n  <;> simp_all [Int.ModEq, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  constructor <;> intro h <;> simp_all [Int.ModEq, dvd_iff_exists_eq_mul_left]\n  <;> use 0 <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero, dvd_iff_emod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  constructor <;> intro h <;>\n  simp_all [Int.ModEq, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.modEq_iff_dvd, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.modEq_iff_dvd, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  constructor <;> intro h <;> simp_all [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, dvd_iff_mod_eq_zero]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.modEq_iff_dvd]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  constructor <;> intro <;>\n  simp only [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero, dvd_iff_emod_eq_zero] at * <;>\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.modEq_iff_dvd]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem is_modEq_zero_iff_dvd : a \u2261 0 [ZMOD n] \u2194 n \u2223 a := by\n  simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero, dvd_iff_emod_eq_zero]"
        ]
    },
    {
        "name": "lean_workbook_plus_3092",
        "split": "test",
        "formal_statement": "theorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by",
        "model_outputs": [
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (a - c)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), mul_self_nonneg (a - c)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (a - c)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (a - c)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (a - c)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), mul_self_nonneg (a - c)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), mul_nonneg (mul_nonneg (by norm_num : (0 : \u211d) \u2264 3) ha) hb,\n    mul_nonneg (mul_nonneg (by norm_num : (0 : \u211d) \u2264 3) hb) hc]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), mul_self_nonneg (a - c)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), mul_self_nonneg (a - c)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (a - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), mul_self_nonneg (a - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (a - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (a - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (a - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), mul_self_nonneg (a - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), mul_nonneg (mul_nonneg (by norm_num : (0 : \u211d) \u2264 3) ha) hb,\n    mul_nonneg (mul_nonneg (by norm_num : (0 : \u211d) \u2264 3) hb) hc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), mul_self_nonneg (a - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), mul_self_nonneg (a - c)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Inequality3_4_2_1 (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a \u2265 b) (hbc : b \u2265 c) (hc : c \u2265 0) :    a ^ 3 + b ^ 3 + c ^ 3 \u2265 a * b * c * 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]"
        ]
    },
    {
        "name": "lean_workbook_plus_9762",
        "split": "test",
        "formal_statement": "theorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by",
        "model_outputs": [
            "\n  intro h'\n  norm_num [Int.ModEq, Int.modEq_iff_dvd, dvd_iff_mod_eq_zero] at h' \u22a2\n  omega\n```",
            "\n  intro h'\n  norm_num [Int.ModEq, h, h']\n  omega\n```",
            "\n  intro h\u2081\n  norm_num [h\u2081, h]\n  omega\n```",
            "\n  intro h'\n  rw [\u2190 Int.emod_add_ediv x 4] at h\n  omega\n```",
            "\n  intro h\u2081\n  rw [\u2190 Int.emod_add_ediv x 4] at h\u2081\n  omega\n```",
            "\n  intro h\u2081\n  have h\u2082 : x % 4 = 1 := h\u2081\n  norm_num [Int.add_emod, Int.mul_emod]\n  omega\n```",
            "\n  intro h\u2081\n  omega\n```",
            "\n  intro h'\n  rw [\u2190 h] at h'\n  omega\n```",
            "\n  intro h\u2081\n  omega\n```",
            "\n  intro h\u2081\n  rw [\u2190 h] at h\u2081\n  omega\n```",
            "\n  intro h1\n  omega\n```",
            "\n  intro h\u2080\n  norm_num [h\u2080, Int.emod_eq_of_lt]\n  omega\n```",
            "\n  intro h'\n  rw [\u2190 Int.emod_add_ediv x 4] at h'\n  simp [h] at h'\n  omega\n```",
            "\n  intro h\u2080\n  rw [\u2190 Nat.mod_eq_of_lt (Nat.mod_lt _ (by norm_num : 0 < 4))] at h\u2080\n  omega\n```",
            "\n  intro h\u2081\n  rw [\u2190 Int.emod_add_ediv x 4] at h\u2081\n  omega\n```",
            "\n  intro h\u2081\n  norm_num [h\u2081, Int.add_emod, Int.mul_emod]\n  omega\n```",
            "\n  intro h\u2081\n  norm_num [Int.mod_eq_of_lt] at h\u2081\n  omega\n```",
            "\n  intro h1\n  norm_num [Int.mod_eq_of_lt] at h1\n  omega\n```",
            "\n  intro h'\n  rw [\u2190 Int.emod_add_ediv x 4] at h'\n  norm_num at h'\n  omega\n```",
            "\n  intro h1\n  omega\n```",
            "\n  intro h\u2081\n  rw [\u2190 Int.emod_add_ediv x 4] at h\u2081\n  simp_all\n  omega\n```",
            "\n  intro h\u2081\n  norm_num [Int.add_emod, Int.mul_emod, h]\n  omega\n```",
            "\n  intro h'\n  omega\n```",
            "\n  intro h\u2080\n  norm_num [Int.mod_eq_of_lt, h\u2080]\n  omega\n```",
            "\n  intro h\u2080\n  rw [\u2190 h\u2080] at h\n  omega\n```",
            "\n  intro h\u2081\n  norm_num [h\u2081]\n  omega\n```",
            "\n  intro h\u2080\n  norm_num [Int.add_emod, Int.mul_emod] at h\u2080\n  omega\n```",
            "\n  intro h1\n  omega\n```",
            "\n  intro h\u2080\n  rw [\u2190 Int.emod_add_ediv x 4] at h\u2080\n  omega\n```",
            "\n  intro h\u2081\n  norm_num [Int.add_emod, Int.mul_emod, h\u2081]\n  omega\n```",
            "\n  intro h1\n  rw [\u2190 Int.emod_add_ediv x 4] at h1\n  omega\n```",
            "\n  intro h'\n  rw [\u2190 h'] at h\n  omega\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h'\n  norm_num [Int.ModEq, Int.modEq_iff_dvd, dvd_iff_mod_eq_zero] at h' \u22a2\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h'\n  norm_num [Int.ModEq, h, h']\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  norm_num [h\u2081, h]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h'\n  rw [\u2190 Int.emod_add_ediv x 4] at h\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  rw [\u2190 Int.emod_add_ediv x 4] at h\u2081\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  have h\u2082 : x % 4 = 1 := h\u2081\n  norm_num [Int.add_emod, Int.mul_emod]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h'\n  rw [\u2190 h] at h'\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  rw [\u2190 h] at h\u2081\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h1\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2080\n  norm_num [h\u2080, Int.emod_eq_of_lt]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h'\n  rw [\u2190 Int.emod_add_ediv x 4] at h'\n  simp [h] at h'\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2080\n  rw [\u2190 Nat.mod_eq_of_lt (Nat.mod_lt _ (by norm_num : 0 < 4))] at h\u2080\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  rw [\u2190 Int.emod_add_ediv x 4] at h\u2081\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  norm_num [h\u2081, Int.add_emod, Int.mul_emod]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  norm_num [Int.mod_eq_of_lt] at h\u2081\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h1\n  norm_num [Int.mod_eq_of_lt] at h1\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h'\n  rw [\u2190 Int.emod_add_ediv x 4] at h'\n  norm_num at h'\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h1\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  rw [\u2190 Int.emod_add_ediv x 4] at h\u2081\n  simp_all\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  norm_num [Int.add_emod, Int.mul_emod, h]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h'\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2080\n  norm_num [Int.mod_eq_of_lt, h\u2080]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2080\n  rw [\u2190 h\u2080] at h\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  norm_num [h\u2081]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2080\n  norm_num [Int.add_emod, Int.mul_emod] at h\u2080\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h1\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2080\n  rw [\u2190 Int.emod_add_ediv x 4] at h\u2080\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h\u2081\n  norm_num [Int.add_emod, Int.mul_emod, h\u2081]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h1\n  rw [\u2190 Int.emod_add_ediv x 4] at h1\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem of_4545 {x : \u2124} (h : x % 4 = 1) : x % 4 = 1 \u2192 x % 5 = 0 := by\n  intro h'\n  rw [\u2190 h'] at h\n  omega"
        ]
    },
    {
        "name": "lean_workbook_plus_8204",
        "split": "test",
        "formal_statement": "theorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by",
        "model_outputs": [
            "\n  rw [pow_succ, pow_two]\n  ring\n```",
            "\n  rw [add_comm]\n  ring\n```",
            "\n  rw [pow_three, pow_three]\n  ring\n```",
            "\n  rw [pow_three]\n  ring\n```",
            "\n  rw [pow_three, pow_three, pow_three]\n  ring\n```",
            "\n  rw [pow_succ]\n  rw [pow_succ]\n  ring\n```",
            "\n  ring\n```",
            "\n  rw [add_comm]\n  ring\n```",
            "\n  rw [add_comm]\n  simp [add_mul, mul_add, mul_comm, mul_left_comm, pow_two, pow_three]\n  ring\n```",
            "\n  rw [add_comm]\n  simp only [add_mul, mul_add, mul_comm, mul_left_comm, pow_two, pow_one]\n  ring\n```",
            "\n  rw [add_comm]\n  ring\n```",
            "\n  rw [pow_three, pow_three]\n  ring\n```",
            "\n  simp only [add_mul, mul_add, add_assoc, mul_assoc, mul_comm, mul_left_comm, pow_two, pow_one]\n  ring\n```",
            "\n  ring_nf\n```",
            "\n  rw [pow_three]\n  ring\n```",
            "\n  ring\n```",
            "\n  rw [pow_three]\n  ring\n```",
            "\n  simp only [add_mul, mul_add, mul_assoc, mul_comm, mul_left_comm, pow_two, pow_one]\n  ring\n```",
            "\n  rw [add_comm]\n  ring\n```",
            "\n  simp only [add_mul, mul_add, add_assoc, mul_assoc, mul_left_comm]\n  ring\n```",
            "\n  ring\n```",
            "\n  simp only [add_mul, mul_add, mul_assoc, mul_comm, mul_left_comm, add_assoc, add_left_comm,\n    add_comm]\n  ring\n```",
            "\n  rw [pow_three]\n  ring\n```",
            "\n  ring\n```",
            "\n  rw [pow_three]\n  ring\n```",
            "\n  rw [pow_three, pow_three]\n  ring\n```",
            "\n  simp only [add_mul, mul_add, mul_assoc, mul_comm, mul_left_comm, add_assoc, add_left_comm,\n    add_comm]\n  ring\n```",
            "\n  rw [pow_succ]\n  ring\n```",
            "\n  rw [pow_three]\n  ring\n```",
            "\n  rw [pow_three, pow_three, pow_three]\n  ring\n```",
            "\n  rw [add_comm]\n  ring\n```",
            "\n  rw [pow_succ, pow_succ, pow_succ]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_succ, pow_two]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_three, pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_three, pow_three, pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_succ]\n  rw [pow_succ]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [add_comm]\n  simp [add_mul, mul_add, mul_comm, mul_left_comm, pow_two, pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [add_comm]\n  simp only [add_mul, mul_add, mul_comm, mul_left_comm, pow_two, pow_one]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_three, pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  simp only [add_mul, mul_add, add_assoc, mul_assoc, mul_comm, mul_left_comm, pow_two, pow_one]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  ring_nf",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  simp only [add_mul, mul_add, mul_assoc, mul_comm, mul_left_comm, pow_two, pow_one]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  simp only [add_mul, mul_add, add_assoc, mul_assoc, mul_left_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  simp only [add_mul, mul_add, mul_assoc, mul_comm, mul_left_comm, add_assoc, add_left_comm,\n    add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_three, pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  simp only [add_mul, mul_add, mul_assoc, mul_comm, mul_left_comm, add_assoc, add_left_comm,\n    add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_succ]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_three, pow_three, pow_three]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cube_add (x y : \u2124) : (x + y) ^ 3 = x ^ 3 + y ^ 3 + 3 * (x ^ 2 * y + x * y ^ 2) := by\n  rw [pow_succ, pow_succ, pow_succ]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_47469",
        "split": "test",
        "formal_statement": "theorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by",
        "model_outputs": [
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a ^ 2 - b ^ 2), mul_self_nonneg (c ^ 2 - d ^ 2)]\n```",
            "\n  have := pow_two_nonneg (a ^ 2 - b ^ 2)\n  have := pow_two_nonneg (c ^ 2 - d ^ 2)\n  have := pow_two_nonneg (a ^ 2 + b ^ 2)\n  have := pow_two_nonneg (c ^ 2 + d ^ 2)\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_nonneg (sq_nonneg (a + b)) (sq_nonneg (c + d))]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    add_nonneg (sq_nonneg (a + b)) (sq_nonneg (c + d))]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), add_nonneg (sq_nonneg (a + b)) (sq_nonneg (c + d))]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a ^ 2 - b ^ 2), mul_self_nonneg (c ^ 2 - d ^ 2)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_self_nonneg (a + b), mul_self_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_self_nonneg (a + b), mul_self_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_nonneg (mul_nonneg (mul_nonneg (sq_nonneg (a + b)) (sq_nonneg (c + d))) (sq_nonneg (a - b)))\n    (sq_nonneg (c - d))]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), add_nonneg (sq_nonneg (a + b)) (sq_nonneg (c + d))]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_self_nonneg (a + b), mul_self_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    add_nonneg (add_nonneg (sq_nonneg (a + b)) (sq_nonneg (a + b)))\n    (add_nonneg (add_nonneg (sq_nonneg (c + d)) (sq_nonneg (c + d)))\n    (sq_nonneg (a + b + c + d)))]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_self_nonneg (a + b), mul_self_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), add_nonneg (mul_self_nonneg (a + b))\n    (mul_self_nonneg (c + d))]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_self_nonneg (a + b), mul_self_nonneg (c + d)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    add_nonneg (add_nonneg (sq_nonneg a) (sq_nonneg b)) (add_nonneg (sq_nonneg c) (sq_nonneg d))]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a ^ 2 - b ^ 2), mul_self_nonneg (c ^ 2 - d ^ 2)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  have := pow_two_nonneg (a ^ 2 - b ^ 2)\n  have := pow_two_nonneg (c ^ 2 - d ^ 2)\n  have := pow_two_nonneg (a ^ 2 + b ^ 2)\n  have := pow_two_nonneg (c ^ 2 + d ^ 2)\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_nonneg (sq_nonneg (a + b)) (sq_nonneg (c + d))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    add_nonneg (sq_nonneg (a + b)) (sq_nonneg (c + d))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), add_nonneg (sq_nonneg (a + b)) (sq_nonneg (c + d))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a ^ 2 - b ^ 2), mul_self_nonneg (c ^ 2 - d ^ 2)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_self_nonneg (a + b), mul_self_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_self_nonneg (a + b), mul_self_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_nonneg (mul_nonneg (mul_nonneg (sq_nonneg (a + b)) (sq_nonneg (c + d))) (sq_nonneg (a - b)))\n    (sq_nonneg (c - d))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), add_nonneg (sq_nonneg (a + b)) (sq_nonneg (c + d))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_self_nonneg (a + b), mul_self_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    add_nonneg (add_nonneg (sq_nonneg (a + b)) (sq_nonneg (a + b)))\n    (add_nonneg (add_nonneg (sq_nonneg (c + d)) (sq_nonneg (c + d)))\n    (sq_nonneg (a + b + c + d)))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_self_nonneg (a + b), mul_self_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), sq_nonneg (a + b), sq_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), add_nonneg (mul_self_nonneg (a + b))\n    (mul_self_nonneg (c + d))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d), mul_self_nonneg (a + b), mul_self_nonneg (c + d)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    add_nonneg (add_nonneg (sq_nonneg a) (sq_nonneg b)) (add_nonneg (sq_nonneg c) (sq_nonneg d))]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem Real.four_mul_self_le_add_pow_four {a b c d : \u211d} (h : a \u2264 b) (h' : c \u2264 d) :     4 * a * b * c * d \u2264 a ^ 4 + b ^ 4 + c ^ 4 + d ^ 4 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (c - d),\n    mul_self_nonneg (a + b), mul_self_nonneg (c + d)]"
        ]
    },
    {
        "name": "lean_workbook_plus_77194",
        "split": "test",
        "formal_statement": "theorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by",
        "model_outputs": [
            "\n  norm_num\n```",
            "\n  simp\n```",
            "\n  norm_num\n```",
            "\n  rfl\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  rfl\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  rfl\n```",
            "\n  simp\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  rfl\n```",
            "\n  simp\n```",
            "\n  norm_num\n```",
            "\n  norm_num\n```",
            "\n  rfl\n```",
            "\n  rfl\n```",
            "\n  norm_num\n```",
            "\n  simp\n```",
            "\n  norm_num\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem zmod_11_one_pow_eq_one : (1 : ZMod 11) = 1 ^ 10 := by\n  norm_num"
        ]
    },
    {
        "name": "lean_workbook_52338",
        "split": "test",
        "formal_statement": "theorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by",
        "model_outputs": [
            "\n  cases a <;> cases b <;> cases c <;> linarith\n```",
            "\n  have h1 : a = 1 \u2227 b = 1 \u2227 c = 1 := by omega\n  cases' h1 with h1 h2\n  cases' h2 with h2 h3\n  subst_vars\n  norm_num\n```",
            "\n  have h\u2081 : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n    nlinarith\n  linarith\n```",
            "\n  have h1 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring\n  rw [h] at h1\n  ring_nf at h1\n  nlinarith\n```",
            "\n  have h\u2081 : a = 1 \u2227 b = 1 \u2227 c = 1 := by\n    omega\n  cases' h\u2081 with h\u2081 h\u2082\n  cases' h\u2082 with h\u2082 h\u2083\n  subst_vars\n  ring\n```",
            "\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a * b * c = 0 := by\n    nlinarith\n  have h\u2083 : a * b ^ 2 = 0 := by\n    nlinarith\n  have h\u2084 : a * c ^ 2 = 0 := by\n    nlinarith\n  have h\u2085 : b * c ^ 2 = 0 := by\n    nlinarith\n  have h\u2086 : b ^ 2 * c = 0 := by\n    nlinarith\n  nlinarith\n```",
            "\n  rw [\u2190 mul_right_inj' (show (2 : \u2115) \u2260 0 by norm_num)]\n  simp only [mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  ring_nf\n  nlinarith\n```",
            "\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a = 1 \u2227 b = 1 \u2227 c = 1 := by omega\n  cases' h\u2082 with h\u2082a h\u2082b\n  cases' h\u2082b with h\u2082b h\u2082c\n  subst_vars\n  norm_num\n```",
            "\n  rw [show a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - b * c - c * a) + 3 * a * b * c by ring]\n  rw [h]\n  ring\n```",
            "\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a^3 + b^3 + c^3 - 3 * a * b * c = (a + b + c) * ((a + b + c)^2 - 3 * (a * b + a * c + b * c)) := by\n    ring\n  simp_all only [h\u2081]\n  omega\n```",
            "\n  have h\u2081 : a ^ 3 + b ^ 3 + c ^ 3 = (a + b + c) * (a ^ 2 + b ^ 2 + c ^ 2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring\n  simp_all only [mul_zero, zero_add, add_zero, mul_one, mul_assoc]\n  ring\n```",
            "\n  rw [show a ^ 3 + b ^ 3 + c ^ 3 = (a + b + c) * (a ^ 2 + b ^ 2 + c ^ 2 - a * b - a * c - b * c) + 3 * a * b * c by\n    ring]\n  rw [h]\n  ring\n```",
            "\n  have h\u2081 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring\n  rw [h] at h\u2081\n  ring_nf at h\u2081\n  linarith\n```",
            "\n  have h\u2081 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring\n  rw [h] at h\u2081\n  ring_nf at h\u2081\n  linarith\n```",
            "\n  rw [show a ^ 3 + b ^ 3 + c ^ 3 = (a + b + c) ^ 3 - 3 * (a + b + c) * (a * b + a * c + b * c) + 3 * (a * b * c) by\n      ring]\n  simp [h]\n```",
            "\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a * b + a * c + b * c = 1 := by\n    nlinarith\n  have h\u2083 : a * b * c = 0 := by\n    nlinarith\n  nlinarith\n```",
            "\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a * b * c = 0 := by omega\n  have h\u2083 : a * b ^ 2 = 0 := by omega\n  have h\u2084 : a * c ^ 2 = 0 := by omega\n  have h\u2085 : b * c ^ 2 = 0 := by omega\n  have h\u2086 : b ^ 2 * c = 0 := by omega\n  omega\n```",
            "\n  have h\u2081 : a = 1 \u2227 b = 1 \u2227 c = 1 := by\n    omega\n  simp_all\n```",
            "\n  have h1 : a^3 + b^3 + c^3 - 3 * a * b * c - 3 * a * b ^ 2 - 3 * a * c ^ 2 - 3 * b * c ^ 2 - 3 * b ^ 2 * c = 0 := by\n    rw [\u2190 sub_eq_zero]\n    ring_nf\n    rw [\u2190 sub_eq_zero]\n    nlinarith\n  nlinarith\n```",
            "\n  rw [show a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a*b - a*c - b*c) + 3 * (a*b*c) by\n    ring]\n  rw [h]\n  ring\n```",
            "\n  have h\u2081 : a^3 + b^3 + c^3 - 3 * a * b * c = (a + b + c) * ((a + b + c) ^ 2 - 3 * (a * b + b * c + c * a)) := by\n    ring\n  rw [h] at h\u2081\n  ring_nf at h\u2081\n  linarith\n```",
            "\n  rw [show a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c by\n    ring]\n  simp [h]\n```",
            "\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a = 1 \u2227 b = 1 \u2227 c = 1 := by omega\n  cases' h\u2082 with h\u2082a h\u2082b\n  cases' h\u2082b with h\u2082b h\u2082c\n  subst_vars\n  simp\n```",
            "\n  have h\u2081 : a = 1 \u2227 b = 1 \u2227 c = 1 := by\n    apply And.intro\n    \u00b7 omega\n    \u00b7 apply And.intro\n      \u00b7 omega\n      \u00b7 omega\n  simp_all\n```",
            "\n  have : a + b + c = 3 := h\n  have h\u2081 : a = 0 \u2228 b = 0 \u2228 c = 0 := by omega\n  rcases h\u2081 with (h\u2081 | h\u2081 | h\u2081) <;> simp_all\n  <;> try decide\n  <;> try omega\n  <;> try linarith\n```",
            "\n  have h\u2081 : a + b + c = 3 := h\n  have h\u2082 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring\n  rw [h\u2081] at h\u2082\n  ring_nf at h\u2082\n  linarith\n```",
            "\n  have h1 : a^3 + b^3 + c^3 - 3 * a * b * c = (a + b + c) * ((a + b + c)^2 - 3 * (a * b + b * c + c * a)) := by\n    ring\n  simp_all only [add_assoc, add_left_comm, add_comm]\n  nlinarith\n```",
            "\n  have h1 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - b * c - c * a) + 3 * a * b * c := by\n    ring\n  rw [h] at h1\n  ring_nf at h1\n  nlinarith\n```",
            "\n  have h\u2081 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring_nf\n  have h\u2082 : a^2 + b^2 + c^2 - a * b - a * c - b * c = (a + b + c)^2 - 3 * a * b - 3 * a * c - 3 * b * c := by\n    ring_nf\n  rw [h\u2081, h\u2082, h]\n  ring\n```",
            "\n  cases a <;> cases b <;> cases c <;> simp [*, pow_two, mul_comm, mul_left_comm, mul_assoc] <;> linarith\n```",
            "\n  have h\u2081 : a + b + c = 3 := by linarith\n  have h\u2082 : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n    nlinarith [pow_two (a + b + c), pow_two (a + b - c), pow_two (a + c - b), pow_two (b + c - a)]\n  linarith\n```",
            "\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n    nlinarith\n  exact h\u2082\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  cases a <;> cases b <;> cases c <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h1 : a = 1 \u2227 b = 1 \u2227 c = 1 := by omega\n  cases' h1 with h1 h2\n  cases' h2 with h2 h3\n  subst_vars\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h1 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring\n  rw [h] at h1\n  ring_nf at h1\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a = 1 \u2227 b = 1 \u2227 c = 1 := by\n    omega\n  cases' h\u2081 with h\u2081 h\u2082\n  cases' h\u2082 with h\u2082 h\u2083\n  subst_vars\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a * b * c = 0 := by\n    nlinarith\n  have h\u2083 : a * b ^ 2 = 0 := by\n    nlinarith\n  have h\u2084 : a * c ^ 2 = 0 := by\n    nlinarith\n  have h\u2085 : b * c ^ 2 = 0 := by\n    nlinarith\n  have h\u2086 : b ^ 2 * c = 0 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  rw [\u2190 mul_right_inj' (show (2 : \u2115) \u2260 0 by norm_num)]\n  simp only [mul_add, mul_comm, mul_left_comm, mul_right_comm]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a = 1 \u2227 b = 1 \u2227 c = 1 := by omega\n  cases' h\u2082 with h\u2082a h\u2082b\n  cases' h\u2082b with h\u2082b h\u2082c\n  subst_vars\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  rw [show a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - b * c - c * a) + 3 * a * b * c by ring]\n  rw [h]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a^3 + b^3 + c^3 - 3 * a * b * c = (a + b + c) * ((a + b + c)^2 - 3 * (a * b + a * c + b * c)) := by\n    ring\n  simp_all only [h\u2081]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a ^ 3 + b ^ 3 + c ^ 3 = (a + b + c) * (a ^ 2 + b ^ 2 + c ^ 2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring\n  simp_all only [mul_zero, zero_add, add_zero, mul_one, mul_assoc]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  rw [show a ^ 3 + b ^ 3 + c ^ 3 = (a + b + c) * (a ^ 2 + b ^ 2 + c ^ 2 - a * b - a * c - b * c) + 3 * a * b * c by\n    ring]\n  rw [h]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring\n  rw [h] at h\u2081\n  ring_nf at h\u2081\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring\n  rw [h] at h\u2081\n  ring_nf at h\u2081\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  rw [show a ^ 3 + b ^ 3 + c ^ 3 = (a + b + c) ^ 3 - 3 * (a + b + c) * (a * b + a * c + b * c) + 3 * (a * b * c) by\n      ring]\n  simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a * b + a * c + b * c = 1 := by\n    nlinarith\n  have h\u2083 : a * b * c = 0 := by\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a * b * c = 0 := by omega\n  have h\u2083 : a * b ^ 2 = 0 := by omega\n  have h\u2084 : a * c ^ 2 = 0 := by omega\n  have h\u2085 : b * c ^ 2 = 0 := by omega\n  have h\u2086 : b ^ 2 * c = 0 := by omega\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a = 1 \u2227 b = 1 \u2227 c = 1 := by\n    omega\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h1 : a^3 + b^3 + c^3 - 3 * a * b * c - 3 * a * b ^ 2 - 3 * a * c ^ 2 - 3 * b * c ^ 2 - 3 * b ^ 2 * c = 0 := by\n    rw [\u2190 sub_eq_zero]\n    ring_nf\n    rw [\u2190 sub_eq_zero]\n    nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  rw [show a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a*b - a*c - b*c) + 3 * (a*b*c) by\n    ring]\n  rw [h]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a^3 + b^3 + c^3 - 3 * a * b * c = (a + b + c) * ((a + b + c) ^ 2 - 3 * (a * b + b * c + c * a)) := by\n    ring\n  rw [h] at h\u2081\n  ring_nf at h\u2081\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  rw [show a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c by\n    ring]\n  simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a = 1 \u2227 b = 1 \u2227 c = 1 := by omega\n  cases' h\u2082 with h\u2082a h\u2082b\n  cases' h\u2082b with h\u2082b h\u2082c\n  subst_vars\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a = 1 \u2227 b = 1 \u2227 c = 1 := by\n    apply And.intro\n    \u00b7 omega\n    \u00b7 apply And.intro\n      \u00b7 omega\n      \u00b7 omega\n  simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have : a + b + c = 3 := h\n  have h\u2081 : a = 0 \u2228 b = 0 \u2228 c = 0 := by omega\n  rcases h\u2081 with (h\u2081 | h\u2081 | h\u2081) <;> simp_all\n  <;> try decide\n  <;> try omega\n  <;> try linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a + b + c = 3 := h\n  have h\u2082 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring\n  rw [h\u2081] at h\u2082\n  ring_nf at h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h1 : a^3 + b^3 + c^3 - 3 * a * b * c = (a + b + c) * ((a + b + c)^2 - 3 * (a * b + b * c + c * a)) := by\n    ring\n  simp_all only [add_assoc, add_left_comm, add_comm]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h1 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - b * c - c * a) + 3 * a * b * c := by\n    ring\n  rw [h] at h1\n  ring_nf at h1\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a^3 + b^3 + c^3 = (a + b + c) * (a^2 + b^2 + c^2 - a * b - a * c - b * c) + 3 * a * b * c := by\n    ring_nf\n  have h\u2082 : a^2 + b^2 + c^2 - a * b - a * c - b * c = (a + b + c)^2 - 3 * a * b - 3 * a * c - 3 * b * c := by\n    ring_nf\n  rw [h\u2081, h\u2082, h]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  cases a <;> cases b <;> cases c <;> simp [*, pow_two, mul_comm, mul_left_comm, mul_assoc] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a + b + c = 3 := by linarith\n  have h\u2082 : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n    nlinarith [pow_two (a + b + c), pow_two (a + b - c), pow_two (a + c - b), pow_two (b + c - a)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem p  (a b c : \u2115) (h : a + b + c = 3) : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n  have h\u2081 : a + b + c = 3 := by assumption\n  have h\u2082 : a^3 + b^3 + c^3 = 3 * a * b * c + 3 * a * b ^ 2 + 3 * a * c ^ 2 + 3 * b * c ^ 2 + 3 * b ^ 2 * c := by\n    nlinarith\n  exact h\u2082"
        ]
    },
    {
        "name": "lean_workbook_plus_11733",
        "split": "test",
        "formal_statement": "theorem fib_two : fib 2 = 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by",
        "model_outputs": [
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  rw [fib_two]\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  norm_num [fib_one, fib_zero, fib_add_two]\n```",
            "\n  decide\n```",
            "\n  rw [fib_two]\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  rw [fib_two]\n```",
            "\n  rw [fib_two]\n```",
            "\n  rw [fib_two]\n```",
            "\n  decide\n```",
            "\n  rw [fib_two]\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  rw [fib_two]\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  decide\n```",
            "\n  norm_num [fib]\n```",
            "\n  decide\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  rw [fib_two]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  norm_num [fib_one, fib_zero, fib_add_two]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  rw [fib_two]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  rw [fib_two]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  rw [fib_two]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  rw [fib_two]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  rw [fib_two]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  rw [fib_two]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  norm_num [fib]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem fib_two : fib 2 = 1 := by\n  decide"
        ]
    },
    {
        "name": "lean_workbook_plus_11637",
        "split": "test",
        "formal_statement": "theorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by",
        "model_outputs": [
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    have : (2 * (n + 1)) ^ 2 + 1 = (2 * n + 2) ^ 2 + 1 := by ring\n    rw [this]\n    apply Nat.dvd_of_mod_eq_zero\n    norm_num\n    rw [Nat.pow_mod, Nat.pow_mod]\n    simp [Nat.mul_mod, Nat.add_mod]\n```",
            "\n  by_cases h : n % 3 = 0 <;> by_cases h' : n % 3 = 1 <;> by_cases h'' : n % 3 = 2 <;> simp [h, h', h'']\n  all_goals omega\n```",
            "\n  rw [pow_two]\n  norm_num\n  exact dvd_of_mod_eq_zero (by ring_nf; omega)\n```",
            "\n  by_cases h : n % 2 = 0 <;> simp [h, Nat.pow_succ, Nat.mul_mod, Nat.add_mod]\n  all_goals norm_num\n  all_goals omega\n```",
            "\n  apply Nat.dvd_of_mod_eq_zero\n  simp [Nat.pow_mod, Nat.add_mod, Nat.mul_mod, Nat.mod_eq_of_lt]\n```",
            "\n  have h : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h]\n  apply Nat.dvd_of_mod_eq_zero\n  have h' : (4 * n ^ 2 + 1) % 3 = 0 := by\n    have h\u2081 : n % 3 = 0 \u2228 n % 3 = 1 \u2228 n % 3 = 2 := by omega\n    rcases h\u2081 with (h\u2081 | h\u2081 | h\u2081) <;> simp [h\u2081, Nat.mul_mod, Nat.add_mod, Nat.mod_mod]\n  exact h'\n```",
            "\n  induction n with\n  | zero => norm_num\n  | succ n hn =>\n    have : (2 * (n + 1)) ^ 2 + 1 = (2 * n) ^ 2 + 1 + 2 * (2 * n) * 2 := by ring\n    rw [this]\n    apply Nat.dvd_add\n    \u00b7 exact hn\n    \u00b7 norm_num\n```",
            "\n  have : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [this]\n  apply Nat.dvd_of_mod_eq_zero\n  norm_num\n  rw [\u2190 Nat.mod_add_div (4 * n ^ 2) 3]\n  norm_num\n  rw [Nat.pow_mod]\n  simp\n```",
            "\n  have : (2 * n) ^ 2 + 1 \u2261 1 [MOD 3] := by\n    rw [Nat.ModEq]\n    simp [Nat.pow_succ, Nat.pow_zero, Nat.mul_mod, Nat.add_mod]\n  apply Nat.dvd_of_mod_eq_zero\n  rwa [Nat.ModEq] at this\n```",
            "\n  cases n with\n  | zero => simp\n  | succ n =>\n    have h : (2 * (n + 1)) ^ 2 + 1 = 4 * (2 * n + 1) ^ 2 := by\n      ring\n    rw [h]\n    exact dvd_mul_of_dvd_left (by norm_num) _\n```",
            "\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Nat.mul_succ]\n    norm_num\n    omega\n```",
            "\n  rw [Nat.dvd_iff_mod_eq_zero]\n  have h\u2080 : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h\u2080]\n  have h\u2081 : 4 * n ^ 2 + 1 = 4 * n ^ 2 + 1 := by rfl\n  rw [h\u2081]\n  have h\u2082 : 4 * n ^ 2 % 3 = 1 % 3 := by simp [Nat.mul_mod, Nat.pow_mod]\n  rw [h\u2082]\n  norm_num\n```",
            "\n  induction n <;> simp [*, Nat.mul_succ, Nat.pow_succ, Nat.mul_zero, Nat.mul_one, Nat.add_zero]\n  <;> omega\n```",
            "\n  have h\u2080 : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h\u2080]\n  exact dvd_of_mod_eq_zero (by\n    have h\u2081 : 4 * n ^ 2 + 1 = 3 * (4 * n ^ 2 / 3) + 1 := by\n      rw [\u2190 Nat.mod_add_div (4 * n ^ 2) 3]\n      ring\n    rw [h\u2081]\n    simp)\n```",
            "\n  by_cases h : n % 3 = 0 <;> by_cases h' : n % 3 = 1 <;> by_cases h'' : n % 3 = 2 <;>\n    simp [h, h', h'', pow_two, Nat.mul_mod, Nat.add_mod, Nat.mod_eq_of_lt, Nat.succ_lt_succ,\n      Nat.zero_lt_succ]\n  all_goals\n    omega\n```",
            "\n  have h : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h]\n  apply Nat.dvd_of_mod_eq_zero\n  have h' : (4 * n ^ 2 + 1) % 3 = 0 := by\n    have h\u2081 : n % 3 = 0 \u2228 n % 3 = 1 \u2228 n % 3 = 2 := by omega\n    rcases h\u2081 with (h\u2081 | h\u2081 | h\u2081) <;> simp [h\u2081, Nat.mul_mod, Nat.add_mod]\n  exact h'\n```",
            "\n  have h\u2080 : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h\u2080]\n  exact dvd_of_mod_eq_zero (by ring_nf; omega)\n```",
            "\n  cases n\n  norm_num\n  ring_nf\n  apply Nat.dvd_of_mod_eq_zero\n  simp [Nat.mul_mod, Nat.pow_mod, Nat.add_mod]\n```",
            "\n  apply Nat.dvd_of_mod_eq_zero\n  rw [Nat.pow_mod]\n  norm_num\n  ring_nf\n  omega\n```",
            "\n  have h : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h]\n  apply dvd_of_mod_eq_zero\n  simp [Nat.pow_mod, Nat.mul_mod, Nat.add_mod, Nat.mod_eq_of_lt]\n```",
            "\n  rw [Nat.dvd_iff_mod_eq_zero]\n  have h\u2080 : (2 * n) ^ 2 % 3 = 1 := by\n    have h\u2080 : (2 * n) ^ 2 % 3 = 1 := by\n      rw [Nat.pow_mod]\n      norm_num\n    exact h\u2080\n  norm_num [h\u2080]\n```",
            "\n  have h\u2080 : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h\u2080]\n  apply Nat.dvd_of_mod_eq_zero\n  norm_num\n  apply Eq.symm\n  rw [\u2190 Nat.mod_add_div (4 * n ^ 2) 3]\n  norm_num\n  rw [Nat.pow_mod]\n  simp\n```",
            "\n  have h : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by\n    ring\n  rw [h]\n  apply dvd_of_mod_eq_zero\n  simp [Nat.pow_mod, Nat.mul_mod, Nat.add_mod]\n```",
            "\n  have h\u2080 : \u2200 n : \u2115, 3 \u2223 (2 * n) ^ 2 + 1 := by\n    intro n\n    have h\u2081 : 3 \u2223 (2 * n) ^ 2 + 1 := by\n      apply Nat.dvd_of_mod_eq_zero\n      have h\u2082 : (2 * n) ^ 2 % 3 = 1 := by\n        have h\u2083 : (2 * n) ^ 2 % 3 = 1 := by\n          calc\n            (2 * n) ^ 2 % 3 = (2 * n) ^ 2 % 3 := by rfl\n            _ = 1 % 3 := by simp [Nat.mul_mod, Nat.pow_mod]\n        exact h\u2083\n      simp [h\u2082]\n    exact h\u2081\n  exact h\u2080 n\n```",
            "\n  by_cases h\u2080 : n % 3 = 0 <;> by_cases h\u2081 : n % 3 = 1 <;> by_cases h\u2082 : n % 3 = 2 <;> simp [h\u2080, h\u2081, h\u2082, Nat.pow_succ, Nat.mul_mod, Nat.add_mod, Nat.mod_mod, Nat.mod_self, Nat.zero_add]\n  all_goals norm_num\n  all_goals omega\n```",
            "\n  have h : \u2200 n : \u2115, 3 \u2223 (2 * n) ^ 2 + 1 := by\n    intro n\n    apply Nat.dvd_of_mod_eq_zero\n    calc\n      ((2 * n) ^ 2 + 1) % 3 = ((2 * n) ^ 2 % 3 + 1 % 3) % 3 := by rw [Nat.add_mod]\n      _ = ((2 * n) ^ 2 % 3 + 1) % 3 := by norm_num\n      _ = ((2 * n) ^ 2 % 3 + 1) % 3 := by rw [Nat.add_mod]\n      _ = 0 := by\n        have : (2 * n) ^ 2 % 3 = 1 := by\n          have : 2 * n % 3 = 0 \u2228 2 * n % 3 = 1 \u2228 2 * n % 3 = 2 := by\n            omega\n          rcases this with (h | h | h) <;> simp [h, Nat.pow_succ, Nat.mul_mod, Nat.add_mod]\n        simp [this]\n  apply h\n```",
            "\n  by_cases h : n % 2 = 0 <;>\n  simp [h, Nat.pow_succ, Nat.mul_succ, Nat.mul_mod, Nat.add_mod]\n  all_goals norm_num\n  all_goals omega\n```",
            "\n  apply Nat.dvd_of_mod_eq_zero\n  rw [Nat.pow_two]\n  ring_nf\n  omega\n```",
            "\n  have : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [this]\n  apply Nat.dvd_of_mod_eq_zero\n  norm_num\n  ring_nf\n  omega\n```",
            "\n  apply Nat.dvd_of_mod_eq_zero\n  rw [Nat.pow_mod, Nat.add_mod, Nat.mul_mod]\n  simp [Nat.mod_eq_of_lt, Nat.succ_lt_succ, Nat.zero_lt_succ]\n```",
            "\n  have h : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h]\n  apply Nat.dvd_of_mod_eq_zero\n  simp [Nat.mul_mod, Nat.add_mod, Nat.pow_mod]\n```",
            "\n  by_cases h : n % 3 = 0 <;>\n    by_cases h' : n % 3 = 1 <;>\n      by_cases h'' : n % 3 = 2 <;>\n        simp [h, h', h'', pow_two, Nat.mul_mod, Nat.add_mod, Nat.mod_mod]\n  <;>\n    norm_num\n  <;>\n    omega\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    have : (2 * (n + 1)) ^ 2 + 1 = (2 * n + 2) ^ 2 + 1 := by ring\n    rw [this]\n    apply Nat.dvd_of_mod_eq_zero\n    norm_num\n    rw [Nat.pow_mod, Nat.pow_mod]\n    simp [Nat.mul_mod, Nat.add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  by_cases h : n % 3 = 0 <;> by_cases h' : n % 3 = 1 <;> by_cases h'' : n % 3 = 2 <;> simp [h, h', h'']\n  all_goals omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  rw [pow_two]\n  norm_num\n  exact dvd_of_mod_eq_zero (by ring_nf; omega)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  by_cases h : n % 2 = 0 <;> simp [h, Nat.pow_succ, Nat.mul_mod, Nat.add_mod]\n  all_goals norm_num\n  all_goals omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  apply Nat.dvd_of_mod_eq_zero\n  simp [Nat.pow_mod, Nat.add_mod, Nat.mul_mod, Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have h : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h]\n  apply Nat.dvd_of_mod_eq_zero\n  have h' : (4 * n ^ 2 + 1) % 3 = 0 := by\n    have h\u2081 : n % 3 = 0 \u2228 n % 3 = 1 \u2228 n % 3 = 2 := by omega\n    rcases h\u2081 with (h\u2081 | h\u2081 | h\u2081) <;> simp [h\u2081, Nat.mul_mod, Nat.add_mod, Nat.mod_mod]\n  exact h'",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  induction n with\n  | zero => norm_num\n  | succ n hn =>\n    have : (2 * (n + 1)) ^ 2 + 1 = (2 * n) ^ 2 + 1 + 2 * (2 * n) * 2 := by ring\n    rw [this]\n    apply Nat.dvd_add\n    \u00b7 exact hn\n    \u00b7 norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [this]\n  apply Nat.dvd_of_mod_eq_zero\n  norm_num\n  rw [\u2190 Nat.mod_add_div (4 * n ^ 2) 3]\n  norm_num\n  rw [Nat.pow_mod]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have : (2 * n) ^ 2 + 1 \u2261 1 [MOD 3] := by\n    rw [Nat.ModEq]\n    simp [Nat.pow_succ, Nat.pow_zero, Nat.mul_mod, Nat.add_mod]\n  apply Nat.dvd_of_mod_eq_zero\n  rwa [Nat.ModEq] at this",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  cases n with\n  | zero => simp\n  | succ n =>\n    have h : (2 * (n + 1)) ^ 2 + 1 = 4 * (2 * n + 1) ^ 2 := by\n      ring\n    rw [h]\n    exact dvd_mul_of_dvd_left (by norm_num) _",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Nat.mul_succ]\n    norm_num\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  rw [Nat.dvd_iff_mod_eq_zero]\n  have h\u2080 : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h\u2080]\n  have h\u2081 : 4 * n ^ 2 + 1 = 4 * n ^ 2 + 1 := by rfl\n  rw [h\u2081]\n  have h\u2082 : 4 * n ^ 2 % 3 = 1 % 3 := by simp [Nat.mul_mod, Nat.pow_mod]\n  rw [h\u2082]\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  induction n <;> simp [*, Nat.mul_succ, Nat.pow_succ, Nat.mul_zero, Nat.mul_one, Nat.add_zero]\n  <;> omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have h\u2080 : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h\u2080]\n  exact dvd_of_mod_eq_zero (by\n    have h\u2081 : 4 * n ^ 2 + 1 = 3 * (4 * n ^ 2 / 3) + 1 := by\n      rw [\u2190 Nat.mod_add_div (4 * n ^ 2) 3]\n      ring\n    rw [h\u2081]\n    simp)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  by_cases h : n % 3 = 0 <;> by_cases h' : n % 3 = 1 <;> by_cases h'' : n % 3 = 2 <;>\n    simp [h, h', h'', pow_two, Nat.mul_mod, Nat.add_mod, Nat.mod_eq_of_lt, Nat.succ_lt_succ,\n      Nat.zero_lt_succ]\n  all_goals\n    omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have h : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h]\n  apply Nat.dvd_of_mod_eq_zero\n  have h' : (4 * n ^ 2 + 1) % 3 = 0 := by\n    have h\u2081 : n % 3 = 0 \u2228 n % 3 = 1 \u2228 n % 3 = 2 := by omega\n    rcases h\u2081 with (h\u2081 | h\u2081 | h\u2081) <;> simp [h\u2081, Nat.mul_mod, Nat.add_mod]\n  exact h'",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have h\u2080 : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h\u2080]\n  exact dvd_of_mod_eq_zero (by ring_nf; omega)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  cases n\n  norm_num\n  ring_nf\n  apply Nat.dvd_of_mod_eq_zero\n  simp [Nat.mul_mod, Nat.pow_mod, Nat.add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  apply Nat.dvd_of_mod_eq_zero\n  rw [Nat.pow_mod]\n  norm_num\n  ring_nf\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have h : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h]\n  apply dvd_of_mod_eq_zero\n  simp [Nat.pow_mod, Nat.mul_mod, Nat.add_mod, Nat.mod_eq_of_lt]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  rw [Nat.dvd_iff_mod_eq_zero]\n  have h\u2080 : (2 * n) ^ 2 % 3 = 1 := by\n    have h\u2080 : (2 * n) ^ 2 % 3 = 1 := by\n      rw [Nat.pow_mod]\n      norm_num\n    exact h\u2080\n  norm_num [h\u2080]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have h\u2080 : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h\u2080]\n  apply Nat.dvd_of_mod_eq_zero\n  norm_num\n  apply Eq.symm\n  rw [\u2190 Nat.mod_add_div (4 * n ^ 2) 3]\n  norm_num\n  rw [Nat.pow_mod]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have h : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by\n    ring\n  rw [h]\n  apply dvd_of_mod_eq_zero\n  simp [Nat.pow_mod, Nat.mul_mod, Nat.add_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have h\u2080 : \u2200 n : \u2115, 3 \u2223 (2 * n) ^ 2 + 1 := by\n    intro n\n    have h\u2081 : 3 \u2223 (2 * n) ^ 2 + 1 := by\n      apply Nat.dvd_of_mod_eq_zero\n      have h\u2082 : (2 * n) ^ 2 % 3 = 1 := by\n        have h\u2083 : (2 * n) ^ 2 % 3 = 1 := by\n          calc\n            (2 * n) ^ 2 % 3 = (2 * n) ^ 2 % 3 := by rfl\n            _ = 1 % 3 := by simp [Nat.mul_mod, Nat.pow_mod]\n        exact h\u2083\n      simp [h\u2082]\n    exact h\u2081\n  exact h\u2080 n",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  by_cases h\u2080 : n % 3 = 0 <;> by_cases h\u2081 : n % 3 = 1 <;> by_cases h\u2082 : n % 3 = 2 <;> simp [h\u2080, h\u2081, h\u2082, Nat.pow_succ, Nat.mul_mod, Nat.add_mod, Nat.mod_mod, Nat.mod_self, Nat.zero_add]\n  all_goals norm_num\n  all_goals omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have h : \u2200 n : \u2115, 3 \u2223 (2 * n) ^ 2 + 1 := by\n    intro n\n    apply Nat.dvd_of_mod_eq_zero\n    calc\n      ((2 * n) ^ 2 + 1) % 3 = ((2 * n) ^ 2 % 3 + 1 % 3) % 3 := by rw [Nat.add_mod]\n      _ = ((2 * n) ^ 2 % 3 + 1) % 3 := by norm_num\n      _ = ((2 * n) ^ 2 % 3 + 1) % 3 := by rw [Nat.add_mod]\n      _ = 0 := by\n        have : (2 * n) ^ 2 % 3 = 1 := by\n          have : 2 * n % 3 = 0 \u2228 2 * n % 3 = 1 \u2228 2 * n % 3 = 2 := by\n            omega\n          rcases this with (h | h | h) <;> simp [h, Nat.pow_succ, Nat.mul_mod, Nat.add_mod]\n        simp [this]\n  apply h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  by_cases h : n % 2 = 0 <;>\n  simp [h, Nat.pow_succ, Nat.mul_succ, Nat.mul_mod, Nat.add_mod]\n  all_goals norm_num\n  all_goals omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  apply Nat.dvd_of_mod_eq_zero\n  rw [Nat.pow_two]\n  ring_nf\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [this]\n  apply Nat.dvd_of_mod_eq_zero\n  norm_num\n  ring_nf\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  apply Nat.dvd_of_mod_eq_zero\n  rw [Nat.pow_mod, Nat.add_mod, Nat.mul_mod]\n  simp [Nat.mod_eq_of_lt, Nat.succ_lt_succ, Nat.zero_lt_succ]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  have h : (2 * n) ^ 2 + 1 = 4 * n ^ 2 + 1 := by ring\n  rw [h]\n  apply Nat.dvd_of_mod_eq_zero\n  simp [Nat.mul_mod, Nat.add_mod, Nat.pow_mod]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem xyz_divisible_by_3 (n : \u2115) : 3 \u2223 (2 * n) ^ 2 + 1 := by\n  by_cases h : n % 3 = 0 <;>\n    by_cases h' : n % 3 = 1 <;>\n      by_cases h'' : n % 3 = 2 <;>\n        simp [h, h', h'', pow_two, Nat.mul_mod, Nat.add_mod, Nat.mod_mod]\n  <;>\n    norm_num\n  <;>\n    omega"
        ]
    },
    {
        "name": "lean_workbook_plus_43728",
        "split": "test",
        "formal_statement": "theorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by",
        "model_outputs": [
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  cases' Nat.even_or_odd a with ha ha <;> simp_all [Nat.mul_div_cancel_left, Nat.mul_div_cancel_left]\n  all_goals omega\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  omega\n```",
            "\n  rw [add_comm]\n  omega\n```",
            "\n  have h\u2080 : 2 * a \u2264 3 * a := by linarith\n  have h\u2081 : 1 + a / 2 \u2264 3 * a / 2 := by omega\n  exact h\u2081\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  rw [div_le_div_right (show (0 : \u211d) < 2 by norm_num)]\n  linarith\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  have h\u2080 : 0 < a := by linarith\n  have h\u2081 : 0 < 2 := by norm_num\n  have h\u2082 : 0 < 3 := by norm_num\n  have h\u2083 : 0 < a / 2 := by positivity\n  have h\u2084 : 0 < 3 * a := by positivity\n  have h\u2085 : 0 < 3 * a / 2 := by positivity\n  linarith\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  omega\n```",
            "\n  have : 2 \u2264 3 * a / 2 := by omega\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  have h\u2081 : 0 < a := by linarith\n  have h\u2082 : 0 < 2 := by norm_num\n  have h\u2083 : 0 < 3 := by norm_num\n  have h\u2084 : 0 < a / 2 := by positivity\n  have h\u2085 : 0 < 3 * a / 2 := by positivity\n  linarith\n```",
            "\n  omega\n```",
            "\n  have h : 2 \u2264 3 * a := by linarith\n  omega\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  omega\n```",
            "\n  omega\n```",
            "\n  cases' le_or_lt a 2 with h h <;> simp_all\n  all_goals omega\n```",
            "\n  rw [add_comm]\n  omega\n```",
            "\n  rw [mul_comm]\n  omega\n```",
            "\n  rw [div_le_div_right] <;> omega\n  omega\n```",
            "\n  rw [mul_comm]\n  omega\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  cases' Nat.even_or_odd a with ha ha <;> simp_all [Nat.mul_div_cancel_left, Nat.mul_div_cancel_left]\n  all_goals omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [add_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  have h\u2080 : 2 * a \u2264 3 * a := by linarith\n  have h\u2081 : 1 + a / 2 \u2264 3 * a / 2 := by omega\n  exact h\u2081",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [div_le_div_right (show (0 : \u211d) < 2 by norm_num)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  have h\u2080 : 0 < a := by linarith\n  have h\u2081 : 0 < 2 := by norm_num\n  have h\u2082 : 0 < 3 := by norm_num\n  have h\u2083 : 0 < a / 2 := by positivity\n  have h\u2084 : 0 < 3 * a := by positivity\n  have h\u2085 : 0 < 3 * a / 2 := by positivity\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  have : 2 \u2264 3 * a / 2 := by omega\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  have h\u2081 : 0 < a := by linarith\n  have h\u2082 : 0 < 2 := by norm_num\n  have h\u2083 : 0 < 3 := by norm_num\n  have h\u2084 : 0 < a / 2 := by positivity\n  have h\u2085 : 0 < 3 * a / 2 := by positivity\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  have h : 2 \u2264 3 * a := by linarith\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  cases' le_or_lt a 2 with h h <;> simp_all\n  all_goals omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [add_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [div_le_div_right] <;> omega\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_one_le_three_mul_self_div_two (a2 : 2 \u2264 a) : 1 + a / 2 \u2264 3 * a / 2 := by\n  rw [mul_comm]\n  omega"
        ]
    },
    {
        "name": "lean_workbook_plus_26146",
        "split": "test",
        "formal_statement": "theorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by",
        "model_outputs": [
            "\n  rw [cos_sq, sin_sq]\n  ring\n```",
            "\n  rw [\u2190 cos_sq_add_sin_sq x]\n```",
            "\n  rw [\u2190 one_mul (cos x ^ 2), \u2190 one_mul (sin x ^ 2)]\n  ring_nf\n  rw [cos_sq, sin_sq]\n  ring\n```",
            "\n  rw [add_comm, sin_sq_add_cos_sq]\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  rw [sin_sq]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [cos_sq, sin_sq]\n  simp only [add_sub_cancel, sub_add_cancel]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq, add_comm]\n  simp\n```",
            "\n  rw [add_comm, cos_sq_add_sin_sq]\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [cos_sq, sin_sq, sub_add_cancel]\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [cos_sq, sin_sq]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  simp [add_comm, mul_comm, mul_assoc, sq]\n```",
            "\n  rw [add_comm, sin_sq_add_cos_sq]\n```",
            "\n  simp [cos_sq, sin_sq]\n```",
            "\n  rw [add_comm]\n  simp [cos_sq, sin_sq]\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [add_comm, sin_sq_add_cos_sq]\n```",
            "\n  rw [cos_sq, sin_sq]\n  ring\n```",
            "\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [cos_sq, sin_sq, sub_add_cancel]\n```",
            "\n  rw [sin_sq, cos_sq, add_comm]\n  ring\n```",
            "\n  rw [add_comm]\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```",
            "\n  rw [sin_sq, cos_sq]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [cos_sq, sin_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [\u2190 cos_sq_add_sin_sq x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [\u2190 one_mul (cos x ^ 2), \u2190 one_mul (sin x ^ 2)]\n  ring_nf\n  rw [cos_sq, sin_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [add_comm, sin_sq_add_cos_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [\u2190 sub_eq_zero]\n  ring_nf\n  rw [sin_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [cos_sq, sin_sq]\n  simp only [add_sub_cancel, sub_add_cancel]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [sin_sq, cos_sq, add_comm]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [add_comm, cos_sq_add_sin_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [cos_sq, sin_sq, sub_add_cancel]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [cos_sq, sin_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  simp [add_comm, mul_comm, mul_assoc, sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [add_comm, sin_sq_add_cos_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  simp [cos_sq, sin_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [add_comm]\n  simp [cos_sq, sin_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [add_comm, sin_sq_add_cos_sq]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [cos_sq, sin_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [cos_sq, sin_sq, sub_add_cancel]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [sin_sq, cos_sq, add_comm]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [add_comm]\n  rw [\u2190 sin_sq_add_cos_sq x]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [sin_sq, cos_sq]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem cos_sq_add_sin_sq : cos x ^ 2 + sin x ^ 2 = 1 := by\n  rw [sin_sq, cos_sq]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_18853",
        "split": "test",
        "formal_statement": "theorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by",
        "model_outputs": [
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  rw [\u2190 sin_two_mul]\n  ring\n```",
            "\n  have := sin_add x x\n  simp [two_mul, sin_add, two_mul, sin_add, two_mul] at this\n  linarith\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm (cos x)]\n```",
            "\n  rw [two_mul]\n  simp [sin_add, two_mul, sin_two_mul, cos_two_mul, add_mul, mul_add]\n  ring\n```",
            "\n  rw [two_mul]\n  rw [sin_add]\n  rw [two_mul]\n  rw [add_mul, mul_comm]\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  have h\u2080 : 2 * x = x + x := by ring\n  rw [h\u2080]\n  rw [sin_add, two_mul, add_mul, mul_comm]\n```",
            "\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]\n```",
            "\n  rw [\u2190 mul_left_inj' (two_ne_zero' \u211d)]\n  rw [sin_two_mul, mul_assoc]\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```",
            "\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d), \u2190 mul_assoc]\n  simp [sin_add, mul_add, add_mul]\n  ring\n```",
            "\n  rw [two_mul]\n  simp [sin_add, two_mul, sin_two_mul, cos_two_mul]\n  ring\n```",
            "\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]\n```",
            "\n  rw [two_mul, sin_add, two_mul]\n  ring\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [\u2190 mul_one x]\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  rw [\u2190 sin_two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  have := sin_add x x\n  simp [two_mul, sin_add, two_mul, sin_add, two_mul] at this\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm (cos x)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul]\n  simp [sin_add, two_mul, sin_two_mul, cos_two_mul, add_mul, mul_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul]\n  rw [sin_add]\n  rw [two_mul]\n  rw [add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  have h\u2080 : 2 * x = x + x := by ring\n  rw [h\u2080]\n  rw [sin_add, two_mul, add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [\u2190 mul_left_inj' (two_ne_zero' \u211d)]\n  rw [sin_two_mul, mul_assoc]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d), \u2190 mul_assoc]\n  simp [sin_add, mul_add, add_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul]\n  simp [sin_add, two_mul, sin_two_mul, cos_two_mul]\n  ring",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul, add_mul, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sin_two_mul : sin (2 * x) = 2 * sin x * cos x := by\n  rw [two_mul, sin_add, two_mul]\n  ring"
        ]
    },
    {
        "name": "lean_workbook_plus_47746",
        "split": "test",
        "formal_statement": "theorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by",
        "model_outputs": [
            "\n  rw [Real.sqrt_eq_iff_sq_eq] <;> linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            " rw [Real.sqrt_eq_iff_sq_eq h (by linarith)] <;> simp [h]\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            " rw [Real.sqrt_eq_iff_sq_eq, sq, \u2190 sq, h]\n\ntheorem sqrt_sq_eq_abs (x : \u211d) : Real.sqrt (x ^ 2) = |x| := by\n  rw [Real.sqrt_eq_iff_sq_eq, sq, \u2190 abs_sq x, sq, abs_eq_self.mpr (by linarith : 0 \u2264 x)]\n  <;> linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq]\n  <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq] <;> linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq]\n  <;> linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq]\n  <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq]\n  linarith\n  linarith\n  linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> linarith\n```",
            " rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n\ntheorem sqrt_sq_eq_abs (x : \u211d) : Real.sqrt (x ^ 2) = |x| := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq]\n  all_goals nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq]\n  all_goals linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;>\n  nlinarith\n```",
            " rw [Real.sqrt_eq_iff_sq_eq] <;> norm_num <;> linarith\n\ntheorem sqrt_div (h : 0 \u2264 x) : Real.sqrt (x / 4) = x / 2 := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> norm_num <;> linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            " rw [Real.sqrt_eq_iff_sq_eq] <;> linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq]\n  <;> assumption\n  <;> linarith\n```",
            "\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;>\n    nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n```",
            "\n  rw [Real.sqrt_eq_iff_mul_self_eq]\n  linarith\n  linarith\n  linarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by rw [Real.sqrt_eq_iff_sq_eq h (by linarith)] <;> simp [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by rw [Real.sqrt_eq_iff_sq_eq, sq, \u2190 sq, h]\n\ntheorem sqrt_sq_eq_abs (x : \u211d) : Real.sqrt (x ^ 2) = |x| := by\n  rw [Real.sqrt_eq_iff_sq_eq, sq, \u2190 abs_sq x, sq, abs_eq_self.mpr (by linarith : 0 \u2264 x)]\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq]\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq]\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq]\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq]\n  linarith\n  linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith\n\ntheorem sqrt_sq_eq_abs (x : \u211d) : Real.sqrt (x ^ 2) = |x| := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq]\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq]\n  all_goals linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by rw [Real.sqrt_eq_iff_sq_eq] <;> norm_num <;> linarith\n\ntheorem sqrt_div (h : 0 \u2264 x) : Real.sqrt (x / 4) = x / 2 := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> norm_num <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by rw [Real.sqrt_eq_iff_sq_eq] <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq]\n  <;> assumption\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_sq_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem sqrt_sq (h : 0 \u2264 x) : Real.sqrt (x ^ 2) = x := by\n  rw [Real.sqrt_eq_iff_mul_self_eq]\n  linarith\n  linarith\n  linarith"
        ]
    },
    {
        "name": "lean_workbook_plus_11463",
        "split": "test",
        "formal_statement": "theorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by",
        "model_outputs": [
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), h.2.2]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [h.1, h.2.1, h.2.2.1]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a),\n    mul_self_nonneg (a + b + c - 1)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [h.1, h.2.1, h.2.2.1, h.2.2.2]\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    mul_self_nonneg (a ^ 2 - b ^ 2), mul_self_nonneg (b ^ 2 - c ^ 2), mul_self_nonneg (c ^ 2 - a ^ 2)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), h.2.2.1]\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - 0), sq_nonneg (a - 0)]\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - 0)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    mul_self_nonneg (a + b), mul_self_nonneg (b + c), mul_self_nonneg (c + a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), h.1, h.2.1, h.2.2]\n```",
            "\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n```",
            "\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - 0),\n    sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]\n```",
            "\n  nlinarith [sq_nonneg (a ^ 2 - b ^ 2), h.2.2.1, h.2.2.2, h.1, h.2.1]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), h.2.2]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [h.1, h.2.1, h.2.2.1]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a),\n    mul_self_nonneg (a + b + c - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [h.1, h.2.1, h.2.2.1, h.2.2.2]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    mul_self_nonneg (a ^ 2 - b ^ 2), mul_self_nonneg (b ^ 2 - c ^ 2), mul_self_nonneg (c ^ 2 - a ^ 2)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), h.2.2.1]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - 0), sq_nonneg (a - 0)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - 0)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    mul_self_nonneg (a + b), mul_self_nonneg (b + c), mul_self_nonneg (c + a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a + b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), h.1, h.2.1, h.2.2]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - 0),\n    sq_nonneg (a - 1), sq_nonneg (b - 1), sq_nonneg (c - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem dinkel_problem_43 (a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0 \u2227 a + b + c = 1) :     4 * a ^ 3 * b + a ^ 4 + b ^ 4 \u2264 a ^ 4 * b + b ^ 4 * c + c ^ 4 * a + a ^ 3 * b ^ 2 + b ^ 3 * c ^ 2 + c ^ 3 * a ^ 2 := by\n  nlinarith [sq_nonneg (a ^ 2 - b ^ 2), h.2.2.1, h.2.2.2, h.1, h.2.1]"
        ]
    },
    {
        "name": "lean_workbook_plus_82423",
        "split": "test",
        "formal_statement": "theorem C_eq_three : C = three := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by",
        "model_outputs": [
            "\n  cases C <;> rfl\n```",
            "\n  rfl\n```",
            "\n  rfl\n```",
            "\n  rfl\n```",
            "\n  cases C <;> rfl\n```",
            "\n  have h\u2080 : C = three := by\n    simp [C, three, Nat.add_comm, Nat.add_assoc]\n  simp [h\u2080]\n```",
            "\n  rw [\u2190 eq_comm]\n  simp\n```",
            "\n  match h\u2081 with\n  | _ =>\n    exfalso\n    contradiction\n```",
            "\n  cases C <;> rfl\n```",
            "\n  cases C <;> rfl\n```",
            "\n  let C := three\n  rfl\n```",
            "\n  induction C <;> simp_all\n```",
            "\n  rw [show C = three by rfl]\n```",
            "\n  simp [C, three, mul_comm, add_comm]\n```",
            "\n  refine' by_cases (fun h => False.elim (h rfl)) fun h => _\n  rfl\n\ntheorem three_ne_zero : (three : \u2115) \u2260 0 := by\n  simp [C_eq_three]\n```",
            "\n  congr\n  <;> tauto\n  <;> tauto\n  <;> tauto\n```",
            "\n  apply Eq.symm\n  apply Eq.symm\n  rfl\n```",
            "\n  cases C <;> rfl\n```",
            "\n  simp only [C, three, Fin.val_zero, Fin.val_one, Fin.val_two]\n  rfl\n```",
            "\n  simpa [two, three] using rfl\n```",
            "\n  cases h : C\n  all_goals (first | rfl | contradiction)\n```",
            "\n  exact by\n    simp only [three, Eq.symm (show 3 = 1 + 2 by rfl), forall_const]\n```",
            "\n  rfl\n```",
            "\n  aesop\n```",
            "\n  simp [C, three, Nat.cast_ofNat]\n```",
            "\n  cases C <;> simp_all\n```",
            "\n  rfl\n```",
            "\n  let A : Set (Fin 4) := {0, 1, 2, 3}\n  let B : Set (Fin 4) := {0, 1, 2, 3}\n  let C : Set (Fin 4) := {0, 1, 2, 3}\n  let D : Set (Fin 4) := {0, 1, 2, 3}\n  let E : Set (Fin 4) := {0, 1, 2, 3}\n  let F : Set (Fin 4) := {0, 1, 2, 3}\n  let G : Set (Fin 4) := {0, 1, 2, 3}\n  let H : Set (Fin 4) := {0, 1, 2, 3}\n  let I : Set (Fin 4) := {0, 1, 2, 3}\n  let J : Set (Fin 4) := {0, 1, 2, 3}\n  let K : Set (Fin 4) := {0, 1, 2, 3}\n  let L : Set (Fin 4) := {0, 1, 2, 3}\n  simp\n```",
            "\n  cases C <;> rfl\n```",
            "\n  cases h : C <;> simp_all\n```",
            "\n  let A := Nat.succ 0\n  let B := Nat.succ A\n  let C := Nat.succ B\n  let D := Nat.succ C\n  let E := Nat.succ D\n  let F := Nat.succ E\n  let G := Nat.succ F\n  let H := Nat.succ G\n  let I := Nat.succ H\n  let J := Nat.succ I\n  let K := Nat.succ J\n  let L := Nat.succ K\n  let M := Nat.succ L\n  let N := Nat.succ M\n  let O := Nat.succ N\n  let P := Nat.succ O\n  let Q := Nat.succ P\n  let R := Nat.succ Q\n  let S := Nat.succ R\n  let T := Nat.succ S\n  let U := Nat.succ T\n  let V := Nat.succ U\n  let W := Nat.succ V\n  let X := Nat.succ W\n  let Y := Nat.succ X\n  let Z := Nat.succ Y\n  exact rfl\n```",
            "\n  congr!\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  cases C <;> rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  cases C <;> rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  have h\u2080 : C = three := by\n    simp [C, three, Nat.add_comm, Nat.add_assoc]\n  simp [h\u2080]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  rw [\u2190 eq_comm]\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  match h\u2081 with\n  | _ =>\n    exfalso\n    contradiction",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  cases C <;> rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  cases C <;> rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  let C := three\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  induction C <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  rw [show C = three by rfl]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  simp [C, three, mul_comm, add_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  refine' by_cases (fun h => False.elim (h rfl)) fun h => _\n  rfl\n\ntheorem three_ne_zero : (three : \u2115) \u2260 0 := by\n  simp [C_eq_three]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  congr\n  <;> tauto\n  <;> tauto\n  <;> tauto",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  apply Eq.symm\n  apply Eq.symm\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  cases C <;> rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  simp only [C, three, Fin.val_zero, Fin.val_one, Fin.val_two]\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  simpa [two, three] using rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  cases h : C\n  all_goals (first | rfl | contradiction)",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  exact by\n    simp only [three, Eq.symm (show 3 = 1 + 2 by rfl), forall_const]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  aesop",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  simp [C, three, Nat.cast_ofNat]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  cases C <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  let A : Set (Fin 4) := {0, 1, 2, 3}\n  let B : Set (Fin 4) := {0, 1, 2, 3}\n  let C : Set (Fin 4) := {0, 1, 2, 3}\n  let D : Set (Fin 4) := {0, 1, 2, 3}\n  let E : Set (Fin 4) := {0, 1, 2, 3}\n  let F : Set (Fin 4) := {0, 1, 2, 3}\n  let G : Set (Fin 4) := {0, 1, 2, 3}\n  let H : Set (Fin 4) := {0, 1, 2, 3}\n  let I : Set (Fin 4) := {0, 1, 2, 3}\n  let J : Set (Fin 4) := {0, 1, 2, 3}\n  let K : Set (Fin 4) := {0, 1, 2, 3}\n  let L : Set (Fin 4) := {0, 1, 2, 3}\n  simp",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  cases C <;> rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  cases h : C <;> simp_all",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  let A := Nat.succ 0\n  let B := Nat.succ A\n  let C := Nat.succ B\n  let D := Nat.succ C\n  let E := Nat.succ D\n  let F := Nat.succ E\n  let G := Nat.succ F\n  let H := Nat.succ G\n  let I := Nat.succ H\n  let J := Nat.succ I\n  let K := Nat.succ J\n  let L := Nat.succ K\n  let M := Nat.succ L\n  let N := Nat.succ M\n  let O := Nat.succ N\n  let P := Nat.succ O\n  let Q := Nat.succ P\n  let R := Nat.succ Q\n  let S := Nat.succ R\n  let T := Nat.succ S\n  let U := Nat.succ T\n  let V := Nat.succ U\n  let W := Nat.succ V\n  let X := Nat.succ W\n  let Y := Nat.succ X\n  let Z := Nat.succ Y\n  exact rfl",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem C_eq_three : C = three := by\n  congr!"
        ]
    },
    {
        "name": "lean_workbook_plus_54341",
        "split": "test",
        "formal_statement": "theorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by",
        "model_outputs": [
            "\n  have h\u2080 : x ^ 4 \u2264 x ^ 2 := by\n    nlinarith [sq_nonneg (x ^ 2 - x)]\n  nlinarith\n```",
            "\n  have h\u2081 : x ^ 4 \u2264 x ^ (1 / 2) := by\n    nlinarith [sq_nonneg (x - 1)]\n  linarith\n```",
            "\n  norm_num\n  nlinarith [sq_nonneg x]\n```",
            "\n  have h\u2081 : x ^ 4 \u2264 x ^ (1 / 2) := by\n    nlinarith [sq_le_one_of_le hx]\n  exact h\u2081\n```",
            "\n  nlinarith\n```",
            "\n  rw [\u2190 Real.rpow_one x] at hx\n  simp_all [Real.rpow_le_rpow_iff]\n```",
            "\n  rw [\u2190 Real.rpow_one x]\n  nlinarith [Real.rpow_le_rpow_of_exponent_le (by linarith : x \u2264 1) (by norm_num : (1 : \u211d) / 2 \u2264 1)]\n```",
            "\n  have h\u2081 : x ^ 4 \u2264 1 := by gcongr; linarith\n  have h\u2082 : x ^ (1 / 2) \u2264 1 := by gcongr; linarith\n  linarith\n```",
            "\n  norm_num\n  nlinarith [sq_nonneg x, hx]\n```",
            "\n  norm_num\n  have h\u2081 : 0 \u2264 x := by linarith\n  have h\u2082 : 0 \u2264 x ^ 4 := by positivity\n  have h\u2083 : 0 \u2264 x ^ (1 / 2) := by positivity\n  nlinarith\n```",
            "\n  have h\u2081 : 0 \u2264 x ^ 2 := sq_nonneg x\n  have h\u2082 : 0 \u2264 x ^ 4 := pow_bit0_nonneg x 2\n  nlinarith [pow_two_nonneg (x ^ 2)]\n```",
            "\n  have h\u2080 : 0 \u2264 x ^ 2 := sq_nonneg x\n  have h\u2081 : x ^ 2 \u2264 1 := by nlinarith\n  have h\u2082 : 0 \u2264 x ^ 4 := by nlinarith\n  have h\u2083 : x ^ 4 \u2264 x ^ (1 / 2) := by\n    nlinarith [h\u2080, h\u2081, h\u2082]\n  linarith\n```",
            "\n  have h\u2081 : x ^ 4 \u2264 x ^ 2 := by\n    nlinarith [sq_nonneg x, hx]\n  have h\u2082 : x ^ 2 \u2264 x := by\n    nlinarith [sq_nonneg x, hx]\n  nlinarith\n```",
            "\n  have hx' : x ^ 2 \u2264 1 := by nlinarith\n  nlinarith\n```",
            "\n  norm_num [pow_le_pow_of_le_one]\n  nlinarith\n```",
            "\n  have h : 0 \u2264 x := by linarith\n  nlinarith [sq_le_one_of_le hx]\n```",
            "\n  rw [\u2190 Real.rpow_le_rpow_iff (by positivity) (by positivity) (by norm_num)]\n  rw [Real.rpow_one]\n  nlinarith\n```",
            "\n  rw [\u2190 Real.rpow_one x]\n  apply Real.rpow_le_rpow_of_exponent_le\n  linarith\n  norm_num\n```",
            "\n  have h\u2081 : 0 \u2264 x ^ 2 := sq_nonneg x\n  have h\u2082 : x ^ 4 \u2264 x ^ 2 := pow_le_pow_of_le_one (by positivity) hx (by norm_num)\n  have h\u2083 : x ^ 2 \u2264 1 := by nlinarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg x, hx]\n```",
            "\n  norm_num\n  nlinarith [sq_nonneg (x ^ 2 - 1)]\n```",
            "\n  rw [\u2190 Real.rpow_le_rpow_iff _ _ (by norm_num : (0 : \u211d) < 2)]\n  norm_num\n  nlinarith\n```",
            "\n  norm_num\n  nlinarith [sq_nonneg x]\n```",
            "\n  norm_num\n  nlinarith [sq_nonneg x, hx]\n```",
            "\n  rw [\u2190 Real.rpow_le_rpow_iff] <;>\n  norm_num <;>\n  nlinarith\n```",
            "\n  have h : x ^ 2 \u2264 1 := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : x ^ 2 \u2264 1 := by\n    nlinarith [sq_le_one_of_le hx]\n  have h\u2081 : x ^ 4 \u2264 1 := by\n    nlinarith [h\u2080]\n  nlinarith [h\u2081]\n```",
            "\n  have h\u2081 : 0 \u2264 x ^ 2 := by positivity\n  have h\u2082 : x ^ 4 \u2264 (x ^ 2) ^ 2 := by\n    nlinarith [sq_nonneg (x ^ 2 - 1)]\n  nlinarith\n```",
            "\n  rw [\u2190 Real.rpow_one x]\n  apply Real.rpow_le_rpow_of_exponent_le _ hx\n  norm_num\n```",
            "\n  nlinarith [sq_le_one_of_le hx]\n```",
            "\n  nlinarith [sq_nonneg (x - 1), hx]\n```",
            "\n  have h\u2080 : 0 \u2264 x ^ 4 := by positivity\n  have h\u2081 : 0 \u2264 x ^ (1 / 2) := by positivity\n  nlinarith [h\u2080, h\u2081]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h\u2080 : x ^ 4 \u2264 x ^ 2 := by\n    nlinarith [sq_nonneg (x ^ 2 - x)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h\u2081 : x ^ 4 \u2264 x ^ (1 / 2) := by\n    nlinarith [sq_nonneg (x - 1)]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  norm_num\n  nlinarith [sq_nonneg x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h\u2081 : x ^ 4 \u2264 x ^ (1 / 2) := by\n    nlinarith [sq_le_one_of_le hx]\n  exact h\u2081",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  rw [\u2190 Real.rpow_one x] at hx\n  simp_all [Real.rpow_le_rpow_iff]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  rw [\u2190 Real.rpow_one x]\n  nlinarith [Real.rpow_le_rpow_of_exponent_le (by linarith : x \u2264 1) (by norm_num : (1 : \u211d) / 2 \u2264 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h\u2081 : x ^ 4 \u2264 1 := by gcongr; linarith\n  have h\u2082 : x ^ (1 / 2) \u2264 1 := by gcongr; linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  norm_num\n  nlinarith [sq_nonneg x, hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  norm_num\n  have h\u2081 : 0 \u2264 x := by linarith\n  have h\u2082 : 0 \u2264 x ^ 4 := by positivity\n  have h\u2083 : 0 \u2264 x ^ (1 / 2) := by positivity\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h\u2081 : 0 \u2264 x ^ 2 := sq_nonneg x\n  have h\u2082 : 0 \u2264 x ^ 4 := pow_bit0_nonneg x 2\n  nlinarith [pow_two_nonneg (x ^ 2)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h\u2080 : 0 \u2264 x ^ 2 := sq_nonneg x\n  have h\u2081 : x ^ 2 \u2264 1 := by nlinarith\n  have h\u2082 : 0 \u2264 x ^ 4 := by nlinarith\n  have h\u2083 : x ^ 4 \u2264 x ^ (1 / 2) := by\n    nlinarith [h\u2080, h\u2081, h\u2082]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h\u2081 : x ^ 4 \u2264 x ^ 2 := by\n    nlinarith [sq_nonneg x, hx]\n  have h\u2082 : x ^ 2 \u2264 x := by\n    nlinarith [sq_nonneg x, hx]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have hx' : x ^ 2 \u2264 1 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  norm_num [pow_le_pow_of_le_one]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h : 0 \u2264 x := by linarith\n  nlinarith [sq_le_one_of_le hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  rw [\u2190 Real.rpow_le_rpow_iff (by positivity) (by positivity) (by norm_num)]\n  rw [Real.rpow_one]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  rw [\u2190 Real.rpow_one x]\n  apply Real.rpow_le_rpow_of_exponent_le\n  linarith\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h\u2081 : 0 \u2264 x ^ 2 := sq_nonneg x\n  have h\u2082 : x ^ 4 \u2264 x ^ 2 := pow_le_pow_of_le_one (by positivity) hx (by norm_num)\n  have h\u2083 : x ^ 2 \u2264 1 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  nlinarith [sq_nonneg x, hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  norm_num\n  nlinarith [sq_nonneg (x ^ 2 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  rw [\u2190 Real.rpow_le_rpow_iff _ _ (by norm_num : (0 : \u211d) < 2)]\n  norm_num\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  norm_num\n  nlinarith [sq_nonneg x]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  norm_num\n  nlinarith [sq_nonneg x, hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  rw [\u2190 Real.rpow_le_rpow_iff] <;>\n  norm_num <;>\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h : x ^ 2 \u2264 1 := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h\u2080 : x ^ 2 \u2264 1 := by\n    nlinarith [sq_le_one_of_le hx]\n  have h\u2081 : x ^ 4 \u2264 1 := by\n    nlinarith [h\u2080]\n  nlinarith [h\u2081]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h\u2081 : 0 \u2264 x ^ 2 := by positivity\n  have h\u2082 : x ^ 4 \u2264 (x ^ 2) ^ 2 := by\n    nlinarith [sq_nonneg (x ^ 2 - 1)]\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  rw [\u2190 Real.rpow_one x]\n  apply Real.rpow_le_rpow_of_exponent_le _ hx\n  norm_num",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  nlinarith [sq_le_one_of_le hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  nlinarith [sq_nonneg (x - 1), hx]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem pow_four_le_rpow_of_sq_le_one {x : \u211d} (hx : x \u2264 1) : x ^ 4 \u2264 x ^ (1 / 2) := by\n  have h\u2080 : 0 \u2264 x ^ 4 := by positivity\n  have h\u2081 : 0 \u2264 x ^ (1 / 2) := by positivity\n  nlinarith [h\u2080, h\u2081]"
        ]
    },
    {
        "name": "lean_workbook_51775",
        "split": "test",
        "formal_statement": "theorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by",
        "model_outputs": [
            "\n  have h\u2080 : 0 < w * x * y * z := by\n    apply mul_pos\n    repeat'\n      nlinarith\n  nlinarith\n```",
            "\n  ring_nf\n  nlinarith\n```",
            "\n  cases' mul_eq_zero.mp (mul_eq_zero.mp (mul_eq_zero.mp (mul_eq_zero.mp hw'))).symm with h h <;> simp_all\n  <;> nlinarith\n```",
            "\n  apply le_of_sub_nonneg\n  simp only [mul_add, mul_comm, mul_left_comm, mul_assoc, one_div, add_mul, sub_nonneg]\n  ring_nf\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (w * x * y * z),\n    sq_nonneg (w * x * z),\n    sq_nonneg (w * y * z),\n    sq_nonneg (x * y * z)]\n```",
            "\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]\n```",
            "\n  cases' eq_or_lt_of_le hw with hw' hw' <;> cases' eq_or_lt_of_le hx with hx' hx' <;>\n    cases' eq_or_lt_of_le hy with hy' hy' <;> cases' eq_or_lt_of_le hz with hz' hz' <;>\n      simp_all\n  all_goals nlinarith\n```",
            "\n  have : w * x * y * z \u2260 0 := by\n    intro h\n    linarith\n  have : w * x * z \u2260 0 := by\n    intro h\n    linarith\n  have : w * y * z \u2260 0 := by\n    intro h\n    linarith\n  have : x * y * z \u2260 0 := by\n    intro h\n    linarith\n  field_simp [*, le_of_lt]\n  ring_nf\n  nlinarith\n```",
            "\n  cases' eq_or_lt_of_le hw with hw\u2080 hw\u2080\n  <;> cases' eq_or_lt_of_le hx with hx\u2080 hx\u2080\n  <;> cases' eq_or_lt_of_le hy with hy\u2080 hy\u2080\n  <;> cases' eq_or_lt_of_le hz with hz\u2080 hz\u2080\n  <;> simp_all only [mul_zero, mul_one, mul_assoc, mul_comm, mul_left_comm, mul_eq_mul_left_iff]\n  <;> norm_cast\n  <;> linarith\n```",
            "\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]\n```",
            "\n  have : w * x * y * z \u2260 0 := by\n    intro h\n    linarith\n  have : w * x * z \u2260 0 := by\n    intro h\n    linarith\n  have : w * y * z \u2260 0 := by\n    intro h\n    linarith\n  have : x * y * z \u2260 0 := by\n    intro h\n    linarith\n  field_simp [*, le_of_lt]\n  ring_nf\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]\n```",
            "\n  cases' eq_or_lt_of_le hw with hw hw\n  <;> cases' eq_or_lt_of_le hx with hx hx\n  <;> cases' eq_or_lt_of_le hy with hy hy\n  <;> cases' eq_or_lt_of_le hz with hz hz\n  <;> simp_all only [one_div, mul_pos, mul_nonneg, add_pos]\n  <;> nlinarith\n```",
            "\n  apply le_of_sub_nonneg\n  nlinarith [mul_pos (mul_pos (mul_pos (mul_pos (by positivity) (by positivity)) (by positivity)) (by positivity))\n    (by positivity)]\n```",
            "\n  field_simp [hw, hx, hy, hz, hw']\n  ring_nf\n  nlinarith\n```",
            "\n  apply le_of_sub_nonneg\n  nlinarith [sq_nonneg (w * x * y * z),\n    sq_nonneg (w * x * z),\n    sq_nonneg (w * y * z),\n    sq_nonneg (x * y * z)]\n```",
            "\n  nlinarith\n```",
            "\n  ring_nf\n  nlinarith [hw, hx, hy, hz, hw']\n```",
            "\n  apply le_of_sub_nonneg\n  ring_nf\n  nlinarith\n```",
            "\n  nlinarith [mul_self_nonneg (w - x), mul_self_nonneg (w - y), mul_self_nonneg (w - z), mul_self_nonneg (x - y), mul_self_nonneg (x - z), mul_self_nonneg (y - z)]\n```",
            "\n  nlinarith\n```",
            "\n  cases' eq_or_lt_of_le hw with hw hw\n  <;> cases' eq_or_lt_of_le hx with hx hx\n  <;> cases' eq_or_lt_of_le hy with hy hy\n  <;> cases' eq_or_lt_of_le hz with hz hz\n  <;> simp_all only [mul_zero, mul_one, mul_assoc, mul_comm, mul_left_comm]\n  <;> nlinarith\n```",
            "\n  apply le_of_sub_nonneg\n  ring_nf\n  nlinarith\n```",
            "\n  cases' eq_or_lt_of_le hw with hw' hw' <;> cases' eq_or_lt_of_le hx with hx' hx' <;> cases' eq_or_lt_of_le hy with hy' hy' <;>\n    cases' eq_or_lt_of_le hz with hz' hz' <;> simp_all\n  <;>\n    nlinarith\n```",
            "\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]\n```",
            "\n  have h\u2080 : 0 < w * x * y * z := by positivity\n  have h\u2081 : 0 < w * x * z := by positivity\n  have h\u2082 : 0 < w * y * z := by positivity\n  have h\u2083 : 0 < x * y * z := by positivity\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]\n```",
            "\n  nlinarith [mul_self_nonneg (w - x), mul_self_nonneg (w - y), mul_self_nonneg (w - z),\n    mul_self_nonneg (x - y), mul_self_nonneg (x - z), mul_self_nonneg (y - z)]\n```",
            "\n  cases' eq_or_lt_of_le hw with hw' hw' <;> cases' eq_or_lt_of_le hx with hx' hx' <;>\n    cases' eq_or_lt_of_le hy with hy' hy' <;>\n      cases' eq_or_lt_of_le hz with hz' hz' <;>\n        simp_all only [mul_zero, mul_one, mul_pos, zero_lt_one] <;>\n          nlinarith\n```",
            "\n  nlinarith [mul_pos (mul_pos (mul_pos (mul_pos (by norm_num : (0 : \u211d) < 1) hw) hx) hy) hz]\n```",
            "\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  have h\u2080 : 0 < w * x * y * z := by\n    apply mul_pos\n    repeat'\n      nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  cases' mul_eq_zero.mp (mul_eq_zero.mp (mul_eq_zero.mp (mul_eq_zero.mp hw'))).symm with h h <;> simp_all\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  apply le_of_sub_nonneg\n  simp only [mul_add, mul_comm, mul_left_comm, mul_assoc, one_div, add_mul, sub_nonneg]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith [sq_nonneg (w * x * y * z),\n    sq_nonneg (w * x * z),\n    sq_nonneg (w * y * z),\n    sq_nonneg (x * y * z)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  cases' eq_or_lt_of_le hw with hw' hw' <;> cases' eq_or_lt_of_le hx with hx' hx' <;>\n    cases' eq_or_lt_of_le hy with hy' hy' <;> cases' eq_or_lt_of_le hz with hz' hz' <;>\n      simp_all\n  all_goals nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  have : w * x * y * z \u2260 0 := by\n    intro h\n    linarith\n  have : w * x * z \u2260 0 := by\n    intro h\n    linarith\n  have : w * y * z \u2260 0 := by\n    intro h\n    linarith\n  have : x * y * z \u2260 0 := by\n    intro h\n    linarith\n  field_simp [*, le_of_lt]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  cases' eq_or_lt_of_le hw with hw\u2080 hw\u2080\n  <;> cases' eq_or_lt_of_le hx with hx\u2080 hx\u2080\n  <;> cases' eq_or_lt_of_le hy with hy\u2080 hy\u2080\n  <;> cases' eq_or_lt_of_le hz with hz\u2080 hz\u2080\n  <;> simp_all only [mul_zero, mul_one, mul_assoc, mul_comm, mul_left_comm, mul_eq_mul_left_iff]\n  <;> norm_cast\n  <;> linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  have : w * x * y * z \u2260 0 := by\n    intro h\n    linarith\n  have : w * x * z \u2260 0 := by\n    intro h\n    linarith\n  have : w * y * z \u2260 0 := by\n    intro h\n    linarith\n  have : x * y * z \u2260 0 := by\n    intro h\n    linarith\n  field_simp [*, le_of_lt]\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  cases' eq_or_lt_of_le hw with hw hw\n  <;> cases' eq_or_lt_of_le hx with hx hx\n  <;> cases' eq_or_lt_of_le hy with hy hy\n  <;> cases' eq_or_lt_of_le hz with hz hz\n  <;> simp_all only [one_div, mul_pos, mul_nonneg, add_pos]\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  apply le_of_sub_nonneg\n  nlinarith [mul_pos (mul_pos (mul_pos (mul_pos (by positivity) (by positivity)) (by positivity)) (by positivity))\n    (by positivity)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  field_simp [hw, hx, hy, hz, hw']\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  apply le_of_sub_nonneg\n  nlinarith [sq_nonneg (w * x * y * z),\n    sq_nonneg (w * x * z),\n    sq_nonneg (w * y * z),\n    sq_nonneg (x * y * z)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  ring_nf\n  nlinarith [hw, hx, hy, hz, hw']",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  apply le_of_sub_nonneg\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith [mul_self_nonneg (w - x), mul_self_nonneg (w - y), mul_self_nonneg (w - z), mul_self_nonneg (x - y), mul_self_nonneg (x - z), mul_self_nonneg (y - z)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  cases' eq_or_lt_of_le hw with hw hw\n  <;> cases' eq_or_lt_of_le hx with hx hx\n  <;> cases' eq_or_lt_of_le hy with hy hy\n  <;> cases' eq_or_lt_of_le hz with hz hz\n  <;> simp_all only [mul_zero, mul_one, mul_assoc, mul_comm, mul_left_comm]\n  <;> nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  apply le_of_sub_nonneg\n  ring_nf\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  cases' eq_or_lt_of_le hw with hw' hw' <;> cases' eq_or_lt_of_le hx with hx' hx' <;> cases' eq_or_lt_of_le hy with hy' hy' <;>\n    cases' eq_or_lt_of_le hz with hz' hz' <;> simp_all\n  <;>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  have h\u2080 : 0 < w * x * y * z := by positivity\n  have h\u2081 : 0 < w * x * z := by positivity\n  have h\u2082 : 0 < w * y * z := by positivity\n  have h\u2083 : 0 < x * y * z := by positivity\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith [mul_self_nonneg (w - x), mul_self_nonneg (w - y), mul_self_nonneg (w - z),\n    mul_self_nonneg (x - y), mul_self_nonneg (x - z), mul_self_nonneg (y - z)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  cases' eq_or_lt_of_le hw with hw' hw' <;> cases' eq_or_lt_of_le hx with hx' hx' <;>\n    cases' eq_or_lt_of_le hy with hy' hy' <;>\n      cases' eq_or_lt_of_le hz with hz' hz' <;>\n        simp_all only [mul_zero, mul_one, mul_pos, zero_lt_one] <;>\n          nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith [mul_pos (mul_pos (mul_pos (mul_pos (by norm_num : (0 : \u211d) < 1) hw) hx) hy) hz]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem geom_mean_le_arith_mean3_weighted (w x y z : \u211d) (hw : 0 \u2264 w) (hx : 0 \u2264 x) (hy : 0 \u2264 y)     (hz : 0 \u2264 z) (hw' : w + x + y + z = 1) :     w * x * y * z * (1 / (w * x * y * z) + 1 / (w * x * z) + 1 / (w * y * z) + 1 / (x * y * z)) \u2264       1 := by\n  nlinarith [sq_nonneg (w * x * y * z), sq_nonneg (w * x * z), sq_nonneg (w * y * z), sq_nonneg (x * y * z)]"
        ]
    },
    {
        "name": "lean_workbook_plus_58590",
        "split": "test",
        "formal_statement": "theorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by",
        "model_outputs": [
            "\n  push_neg\n  use a - 1\n  simp\n  nlinarith\n```",
            "\n  push_neg\n  use (a + b) / 2\n  simp\n  nlinarith\n```",
            "\n  intro h_all\n  have h1 := h_all 0\n  have h2 := h_all 1\n  have h3 := h_all (-1)\n  norm_num at h1 h2 h3\n```",
            "\n  push_neg\n  use a - 1\n  constructor\n  linarith\n  linarith [mul_self_nonneg (a - 1 - 1)]\n```",
            "\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  intro h1\n  have h2 : \u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0 := h1\n  have h3 : 2 * (b^2 - a * b + a^2) - 4 * (b - a) + 2 \u2264 0 := h2 b \u27e8h, le_refl b\u27e9\n  linarith\n```",
            "\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [h]\n```",
            "\n  push_neg\n  use b\n  simp\n  nlinarith\n```",
            "\n  push_neg\n  use b\n  constructor\n  exacts [h, by nlinarith]\n```",
            "\n  intro h_forall\n  have h_forall_a : 2 * a^2 - 4 * a + 2 \u2264 0 := h_forall a \u27e8le_refl a, h\u27e9\n  have h_forall_b : 2 * b^2 - 4 * b + 2 \u2264 0 := h_forall b \u27e8h, le_refl b\u27e9\n  linarith\n```",
            "\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  push_neg\n  use (a + b) / 2\n  constructor <;> linarith [sq_nonneg (a - b)]\n```",
            "\n  push_neg\n  use (a + b) / 2\n  constructor\n  all_goals\n    linarith\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  intro h_forall\n  have h_forall' := h_forall 0\n  simp at h_forall'\n  linarith\n```",
            "\n  intro h'\n  have h\u2081 := h' (a + (b - a) / 2)\n  have h\u2082 := h' (b - (b - a) / 2)\n  norm_num at h\u2081 h\u2082\n  linarith\n```",
            "\n  intro h'\n  have h\u2081 := h' (a + b)\n  norm_num at h\u2081\n  linarith\n```",
            "\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  push_neg\n  use b\n  constructor\n  exact \u27e8h, le_refl b\u27e9\n  linarith\n```",
            "\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  push_neg\n  use (a + b) / 2\n  simp\n  nlinarith\n```",
            "\n  push_neg\n  use a - 1\n  norm_num\n  intro h\u2080\n  linarith\n```",
            "\n  intro h'\n  have h'' := h' (a + (b - a) / 2)\n  norm_num at h''\n  linarith\n```",
            "\n  intro h\u2080\n  have h\u2081 := h\u2080 (b - 1)\n  have h\u2082 := h\u2080 (b + 1)\n  norm_num at h\u2081 h\u2082\n  linarith\n```",
            "\n  push_neg\n  use (a + b) / 2\n  constructor <;> norm_num <;>\n    nlinarith\n```",
            "\n  push_neg\n  use b\n  constructor\n  exact \u27e8h, le_refl b\u27e9\n  linarith\n```",
            "\n  intro h'\n  have h\u2081 := h' (a + b)\n  have h\u2082 := h' (b - a)\n  linarith\n```",
            "\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  intro h'\n  have h\u2081 := h' 0\n  have h\u2082 := h' 1\n  have h\u2083 := h' (-1)\n  norm_num at h\u2081 h\u2082 h\u2083\n```",
            "\n  intro h_forall\n  have h\u2081 := h_forall a\n  have h\u2082 := h_forall b\n  norm_num at h\u2081 h\u2082\n  linarith\n```",
            "\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]\n```",
            "\n  intro h_forall\n  have h_forall_a : 2 * a^2 - 4 * a + 2 \u2264 0 := h_forall a \u27e8by linarith, by linarith\u27e9\n  have h_forall_b : 2 * b^2 - 4 * b + 2 \u2264 0 := h_forall b \u27e8by linarith, by linarith\u27e9\n  linarith\n```",
            "\n  intro h'\n  have h\u2081 := h' 0\n  have h\u2082 := h' 1\n  norm_num at h\u2081 h\u2082\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use a - 1\n  simp\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  simp\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h_all\n  have h1 := h_all 0\n  have h2 := h_all 1\n  have h3 := h_all (-1)\n  norm_num at h1 h2 h3",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use a - 1\n  constructor\n  linarith\n  linarith [mul_self_nonneg (a - 1 - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h1\n  have h2 : \u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0 := h1\n  have h3 : 2 * (b^2 - a * b + a^2) - 4 * (b - a) + 2 \u2264 0 := h2 b \u27e8h, le_refl b\u27e9\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [h]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use b\n  simp\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use b\n  constructor\n  exacts [h, by nlinarith]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h_forall\n  have h_forall_a : 2 * a^2 - 4 * a + 2 \u2264 0 := h_forall a \u27e8le_refl a, h\u27e9\n  have h_forall_b : 2 * b^2 - 4 * b + 2 \u2264 0 := h_forall b \u27e8h, le_refl b\u27e9\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  constructor <;> linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  constructor\n  all_goals\n    linarith\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h_forall\n  have h_forall' := h_forall 0\n  simp at h_forall'\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h'\n  have h\u2081 := h' (a + (b - a) / 2)\n  have h\u2082 := h' (b - (b - a) / 2)\n  norm_num at h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h'\n  have h\u2081 := h' (a + b)\n  norm_num at h\u2081\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use b\n  constructor\n  exact \u27e8h, le_refl b\u27e9\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  simp\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use a - 1\n  norm_num\n  intro h\u2080\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h'\n  have h'' := h' (a + (b - a) / 2)\n  norm_num at h''\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h\u2080\n  have h\u2081 := h\u2080 (b - 1)\n  have h\u2082 := h\u2080 (b + 1)\n  norm_num at h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  constructor <;> norm_num <;>\n    nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use b\n  constructor\n  exact \u27e8h, le_refl b\u27e9\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h'\n  have h\u2081 := h' (a + b)\n  have h\u2082 := h' (b - a)\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h'\n  have h\u2081 := h' 0\n  have h\u2082 := h' 1\n  have h\u2083 := h' (-1)\n  norm_num at h\u2081 h\u2082 h\u2083",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h_forall\n  have h\u2081 := h_forall a\n  have h\u2082 := h_forall b\n  norm_num at h\u2081 h\u2082\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  push_neg\n  use (a + b) / 2\n  constructor\n  linarith\n  linarith [sq_nonneg (a - b)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h_forall\n  have h_forall_a : 2 * a^2 - 4 * a + 2 \u2264 0 := h_forall a \u27e8by linarith, by linarith\u27e9\n  have h_forall_b : 2 * b^2 - 4 * b + 2 \u2264 0 := h_forall b \u27e8by linarith, by linarith\u27e9\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem nlinarith_fails_german {a b : \u211d} (h : a \u2264 b) : \u00ac(\u2200 x : \u211d, a \u2264 x \u2227 x \u2264 b \u2192 2 * x^2 - 4 * x + 2 \u2264 0) := by\n  intro h'\n  have h\u2081 := h' 0\n  have h\u2082 := h' 1\n  norm_num at h\u2081 h\u2082"
        ]
    },
    {
        "name": "lean_workbook_21790",
        "split": "test",
        "formal_statement": "theorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by",
        "model_outputs": [
            "\n  norm_num [Nat.le_of_lt_succ, Nat.lt_of_le_of_lt]\n  omega\n```",
            "\n  norm_num [Nat.le_div_iff_mul_le, Nat.mul_comm, Nat.mul_left_comm]\n  omega\n```",
            "\n  norm_num [Nat.ceil_le, Nat.lt_of_le_of_lt_of_le, Nat.div_lt_iff_lt_mul, mul_comm]\n  omega\n```",
            "\n  simp [Nat.le_of_lt_succ, Nat.lt_of_lt_of_le, Nat.mul_le_mul_left, Nat.succ_le_iff,\n    Nat.div_lt_iff_lt_mul (zero_lt_two' \u2115)]\n  omega\n```",
            "\n  rw [Nat.ceil_le]\n  simp [Nat.lt_two_mul_iff_div_lt_left p hp.pos]\n```",
            "\n  norm_num [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]\n```",
            "\n  norm_num [Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), Nat.ceil_le]\n```",
            "\n  norm_num [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]\n```",
            "\n  rw [Nat.ceil_le]\n  norm_num\n  omega\n```",
            "\n  rw [Nat.ceil_le]\n  simp [Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]\n```",
            "\n  norm_num [Nat.prime_two, Nat.lt_succ_iff]\n  omega\n```",
            "\n  rw [Nat.ceil_le]\n  simp [Nat.div_lt_iff_lt_mul hp.pos, mul_comm]\n```",
            "\n  rw [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by decide : 0 < 2), mul_comm]\n```",
            "\n  rw [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]\n```",
            "\n  rw [Nat.ceil_le]\n  norm_num\n  omega\n```",
            "\n  norm_num [Nat.le_floor_iff, mul_comm]\n  omega\n```",
            "\n  rw [Nat.ceil_le]\n  norm_cast\n  omega\n```",
            "\n  norm_num [Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), Nat.le_floor_iff (by norm_num : 0 < 2)]\n  omega\n```",
            "\n  norm_num [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by decide : 0 < 2), mul_comm]\n```",
            "\n  rw [Nat.ceil_le]\n  simp [Nat.lt_succ_iff, mul_comm]\n```",
            "\n  norm_num [Nat.prime_two, hp]\n  omega\n```",
            "\n  simp [Nat.le_of_lt_succ, Nat.div_lt_iff_lt_mul (zero_lt_two' \u2115), mul_comm]\n  omega\n```",
            "\n  rw [Nat.ceil_le]\n  simp [Nat.lt_two_mul_iff, hp.pos]\n```",
            "\n  norm_num [Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), Nat.le_floor_iff (by norm_num : 0 < 2)]\n```",
            "\n  rw [Nat.ceil_le]\n  norm_cast\n  omega\n```",
            "\n  norm_num [Nat.div_lt_iff_lt_mul (by linarith : 0 < 2), Nat.ceil_le]\n```",
            "\n  norm_num [Nat.le_of_lt_succ, Nat.lt_of_le_of_lt]\n  omega\n```",
            "\n  rw [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), Nat.mul_comm]\n```",
            "\n  rw [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]\n```",
            "\n  omega\n```",
            "\n  rw [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]\n```",
            "\n  simp_all [Nat.div_le_iff_le_mul_add_pred, Nat.mul_comm, Nat.mul_assoc, Nat.mul_left_comm]\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.le_of_lt_succ, Nat.lt_of_le_of_lt]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.le_div_iff_mul_le, Nat.mul_comm, Nat.mul_left_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.ceil_le, Nat.lt_of_le_of_lt_of_le, Nat.div_lt_iff_lt_mul, mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  simp [Nat.le_of_lt_succ, Nat.lt_of_lt_of_le, Nat.mul_le_mul_left, Nat.succ_le_iff,\n    Nat.div_lt_iff_lt_mul (zero_lt_two' \u2115)]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le]\n  simp [Nat.lt_two_mul_iff_div_lt_left p hp.pos]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), Nat.ceil_le]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le]\n  simp [Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.prime_two, Nat.lt_succ_iff]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le]\n  simp [Nat.div_lt_iff_lt_mul hp.pos, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by decide : 0 < 2), mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le]\n  norm_num\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.le_floor_iff, mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le]\n  norm_cast\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), Nat.le_floor_iff (by norm_num : 0 < 2)]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by decide : 0 < 2), mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le]\n  simp [Nat.lt_succ_iff, mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.prime_two, hp]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  simp [Nat.le_of_lt_succ, Nat.div_lt_iff_lt_mul (zero_lt_two' \u2115), mul_comm]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le]\n  simp [Nat.lt_two_mul_iff, hp.pos]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), Nat.le_floor_iff (by norm_num : 0 < 2)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le]\n  norm_cast\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.div_lt_iff_lt_mul (by linarith : 0 < 2), Nat.ceil_le]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  norm_num [Nat.le_of_lt_succ, Nat.lt_of_le_of_lt]\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), Nat.mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  omega",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  rw [Nat.ceil_le, Nat.div_lt_iff_lt_mul (by norm_num : 0 < 2), mul_comm]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem ceil_div_two_le_of_prime {p : \u2115} (hp : p.Prime) (a : \u2115) : \u2308a / 2\u2309\u208a \u2264 p \u2194 a < 2 * p := by\n  simp_all [Nat.div_le_iff_le_mul_add_pred, Nat.mul_comm, Nat.mul_assoc, Nat.mul_left_comm]"
        ]
    },
    {
        "name": "lean_workbook_25788",
        "split": "test",
        "formal_statement": "theorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by",
        "model_input": "Complete the following Lean 4 code :\n\n```lean4\nimport Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by",
        "model_outputs": [
            "\n  have h1 : a + b \u2264 a + a := by\n    apply add_le_add_left\n    exact a2\n  have h2 : a + a = a * 2 := by\n    rw [mul_two]\n  linarith\n```",
            "\n  have a1 : 1 \u2264 a := by linarith\n  have a2' : a * b \u2264 a * b := by nlinarith\n  nlinarith\n```",
            "\n  have ha : 0 < a := by linarith\n  have hb : 0 < b := by linarith\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  have h : 0 < a := by linarith\n  nlinarith\n```",
            "\n  nlinarith\n```",
            "\n  have : 0 < a := by linarith\n  nlinarith\n```",
            "\n  nlinarith [sq_nonneg (a - 1)]\n```",
            "\n  have : 0 \u2264 b := b0\n  nlinarith\n```",
            "\n  have h\u2080 : a + b \u2264 a * b := by nlinarith\n  exact h\u2080\n```",
            "\n  have : 0 \u2264 a * b := mul_nonneg (zero_le_two.trans a2) b0\n  nlinarith\n```",
            "\n  nlinarith [mul_le_mul_of_nonneg_left a2 b0]\n```",
            "\n  have h\u2081 : a + b \u2264 a * 2 + b := by\n    linarith\n  have h\u2082 : a * 2 + b \u2264 a * b := by\n    linarith\n  linarith\n```",
            "\n  have h\u2080 : 0 \u2264 a := by linarith\n  nlinarith\n```",
            "\n  have h : 0 < a := by linarith\n  nlinarith\n```",
            "\n  have h : 0 \u2264 a - 1 := by linarith\n  nlinarith [mul_nonneg h b0]\n```",
            "\n  have h1 : 0 < a := by linarith\n  have h2 : 0 < b := by linarith\n  have h3 : 0 < a * b := mul_pos h1 h2\n  have h4 : a + b \u2264 a * b := by\n    nlinarith\n  exact h4\n```",
            "\n  have h1 : 0 \u2264 a := by linarith\n  have h2 : 0 \u2264 a * b := by nlinarith\n  nlinarith\n```",
            "\n  have h\u2080 : 0 < a := by linarith\n  nlinarith\n```",
            "\n  have h : 0 < b + 1 := by linarith\n  nlinarith\n```",
            "\n  nlinarith [mul_le_mul_of_nonneg_right a2 b0]\n```",
            "\n  have : 0 < a := by linarith\n  nlinarith\n```",
            "\n  have h1 : 1 \u2264 a := by linarith\n  have h2 : a + b \u2264 a * b := by\n    nlinarith\n  linarith\n```",
            "\n  nlinarith\n```",
            "\n  have h : a * b \u2265 a + b := by\n    nlinarith\n  exact h\n```",
            "\n  have a1 : 1 \u2264 a := by linarith\n  nlinarith\n```",
            "\n  have h : a + b \u2264 a + a := by\n    nlinarith\n  linarith\n```",
            "\n  have : 0 \u2264 a - 1 := by linarith\n  linarith [mul_le_mul_of_nonneg_right a2 b0]\n```",
            "\n  have : 0 < a := by linarith\n  nlinarith\n```",
            "\n  have : 2 * b \u2264 a * b := by nlinarith\n  linarith\n```",
            "\n  have h : 0 \u2264 a * b := mul_nonneg (zero_le_two.trans a2) b0\n  nlinarith\n```",
            "\n  have h : 0 < a := by linarith\n  nlinarith\n```"
        ],
        "full_code": [
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h1 : a + b \u2264 a + a := by\n    apply add_le_add_left\n    exact a2\n  have h2 : a + a = a * 2 := by\n    rw [mul_two]\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have a1 : 1 \u2264 a := by linarith\n  have a2' : a * b \u2264 a * b := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have ha : 0 < a := by linarith\n  have hb : 0 < b := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h : 0 < a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 0 < a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith [sq_nonneg (a - 1)]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 0 \u2264 b := b0\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h\u2080 : a + b \u2264 a * b := by nlinarith\n  exact h\u2080",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 0 \u2264 a * b := mul_nonneg (zero_le_two.trans a2) b0\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith [mul_le_mul_of_nonneg_left a2 b0]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h\u2081 : a + b \u2264 a * 2 + b := by\n    linarith\n  have h\u2082 : a * 2 + b \u2264 a * b := by\n    linarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h\u2080 : 0 \u2264 a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h : 0 < a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h : 0 \u2264 a - 1 := by linarith\n  nlinarith [mul_nonneg h b0]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h1 : 0 < a := by linarith\n  have h2 : 0 < b := by linarith\n  have h3 : 0 < a * b := mul_pos h1 h2\n  have h4 : a + b \u2264 a * b := by\n    nlinarith\n  exact h4",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h1 : 0 \u2264 a := by linarith\n  have h2 : 0 \u2264 a * b := by nlinarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h\u2080 : 0 < a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h : 0 < b + 1 := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith [mul_le_mul_of_nonneg_right a2 b0]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 0 < a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h1 : 1 \u2264 a := by linarith\n  have h2 : a + b \u2264 a * b := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h : a * b \u2265 a + b := by\n    nlinarith\n  exact h",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have a1 : 1 \u2264 a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h : a + b \u2264 a + a := by\n    nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 0 \u2264 a - 1 := by linarith\n  linarith [mul_le_mul_of_nonneg_right a2 b0]",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 0 < a := by linarith\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have : 2 * b \u2264 a * b := by nlinarith\n  linarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h : 0 \u2264 a * b := mul_nonneg (zero_le_two.trans a2) b0\n  nlinarith",
            "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem add_le_mul_of_one_le_left (a2 : 2 \u2264 a) (b0 : 0 \u2264 b) : a + b \u2264 a * b := by\n  have h : 0 < a := by linarith\n  nlinarith"
        ]
    }
]