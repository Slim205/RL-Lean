[
 {
  "old": "(x y : \u211d) (hx : x \u2260 0) (hy : y \u2260 0) : 2020 * x / y + y / (2020 * x) \u2265 2 * Real.sqrt ((2020 * x / y) * (y / (2020 * x))) := by",
  "new": "(h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(n p m : \u2115) (h\u2080 : 0 < n \u2227 0 < p \u2227 0 < m) (h\u2081 : Nat.Prime p) (h\u2082 : p = Nat.minFac n) (h\u2083 : n + (n / p) = 10^m) : n = 75 := by",
  "new": "(n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  constructor <;> intro h <;> simp_all [dvd_iff_mod_eq_zero, mod_two_of_bodd]\n  all_goals\n    rcases n with (_ | _ | n) <;> simp_all (config := {decide := true})\n  all_goals\n    omega",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  constructor <;> intro h\n  <;> simp_all [Nat.dvd_iff_mod_eq_zero]\n  <;> rcases n with (_ | _ | n) <;> simp_all\n  <;> have := minFac_le_of_dvd (n + 3) h <;> simp_all\n  <;> omega",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  let div2 := n / 2\n  let m := n % 2\n  cases' m with m\n  <;> simp [Nat.dvd_iff_mod_eq_zero]\n  <;> simp [Nat.minFac_eq_two_iff]\n  <;> decide"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) : (3 * a ^ 3 + a * b * c) / (b ^ 3 + c ^ 3) + (3 * b ^ 3 + a * b * c) / (c ^ 3 + a ^ 3) + (3 * c ^ 3 + a * b * c) / (a ^ 3 + b ^ 3) \u2265 6 := by",
  "new": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (habc : a + b + c = 1) : a * b * c \u2264 a * b + b * c + c * a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)\n    (habc : a + b + c = 1) : a * b * c \u2264 a * b + b * c + c * a := by\n  have h : 0 \u2264 a * b := by nlinarith\n  have h' : 0 \u2264 b * c := by nlinarith\n  have h'' : 0 \u2264 c * a := by nlinarith\n  nlinarith"
  ]
 },
 {
  "old": ": \u00ac Summable (\u03bb k : \u2115 => (Nat.choose (2 * k) k) / (4 ^ k)) := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases h : 1 < p <;> simp [h]\n  <;> exact (one_div_summable_of_lt_1 (by norm_num) (Nat.cast_le.2 (Nat.succ_le_iff.2 (lt_of_lt_of_le\n    (by norm_num) (Nat.le_of_lt h))))).summable"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : Real.sqrt (yz / (5 * x ^ 2 + 4 * yz)) + Real.sqrt (zx / (5 * y ^ 2 + 4 * zx)) + Real.sqrt (xy / (5 * z ^ 2 + 4 * xy)) \u2265 Real.sqrt ((xy + zx + yz) / (3 * x ^ 2 - 2 * xy - 2 * zx + 3 * y ^ 2 - 2 * yz + 3 * z ^ 2)) := by",
  "new": "(h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  have : (a : \u211d) ^ 2 \u2264 b := by norm_cast\n  have : (a : \u211d) \u2264 \u221ab := by\n    apply Real.le_sqrt_of_sq_le\n    assumption\n  norm_cast at this"
  ]
 },
 {
  "old": "(x y : \u211d) : y = Real.sqrt (x ^ 2 + x + 1) - Real.sqrt (x ^ 2 - x + 1) \u2194 x = (y ^ 2 + 2) / (2 * y) := by",
  "new": "(hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;>\n  rw [\u2190 h] <;>\n  simp [hx, hy] <;>\n  rw [sq] <;>\n  ring_nf",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h\n  rw [\u2190 h]\n  exact sq_sqrt hx\n  rw [\u2190 h]\n  exact sqrt_sq hy"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a * b + b * c + c * a = 3) : 2 * (a + b + c) + 3 * a * b * c \u2265 b * c * Real.sqrt (4 * a ^ 2 + 5) + c * a * Real.sqrt (4 * b ^ 2 + 5) + a * b * Real.sqrt (4 * c ^ 2 + 5) := by",
  "new": "(h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [\u2190 sq_eq_sq]\n  <;> simp [h]"
  ]
 },
 {
  "old": "(n : \u2115) (a b c : \u211d) (habc : a * b * c = 1) : 1 / (a^n * (b + c)) + 1 / (b^n * (c + a)) + 1 / (c^n * (a + b)) \u2265 3 / 2 := by",
  "new": "(a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  nlinarith [sq_sqrt (mul_nonneg ha hb), mul_self_nonneg (a - b)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  nlinarith [sq_sqrt (mul_nonneg ha hb), sq_nonneg (a - b)]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0 \u2227 b \u2265 0 \u2227 c \u2265 0) (hab : a + b + c = 3) : a * Real.sqrt b + b * Real.sqrt c + c * Real.sqrt a \u2264 3 := by",
  "new": "(h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(x : \u211d) (hx : x = Real.sqrt (a * b)) : 2 * x ^ 2 * (1 - x) / (x + 1) \u2264 5 * Real.sqrt 5 - 11 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  exact h"
  ]
 },
 {
  "old": "(d : \u2115) (hd : 0 < d) (S : Set \u2115) (hS : \u2200 x : \u2115, x \u2208 S \u2194 \u2203 a b : \u2115, a ^ 2 + d * b ^ 2 = x) : \u2200 a b : \u2115, a \u2208 S \u2227 b \u2208 S \u2192 a * b \u2208 S := by",
  "new": "{S : Set \u2124} (hS : \u00ac BddAbove S) : \u2200 n : \u2115, \u2203 a \u2208 S, n \u2264 a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem exists_of_not_bddAbove {S : Set \u2124} (hS : \u00ac BddAbove S) : \u2200 n : \u2115, \u2203 a \u2208 S, n \u2264 a := by\n  intro n\n  have h := not_bddAbove_iff.mp hS n\n  obtain \u27e8a, ha, hn\u27e9 := h\n  exact \u27e8a, ha, by linarith\u27e9",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem exists_of_not_bddAbove {S : Set \u2124} (hS : \u00ac BddAbove S) : \u2200 n : \u2115, \u2203 a \u2208 S, n \u2264 a := by\n  intro n\n  have h : \u00ac \u2200 a \u2208 S, a \u2264 n := by\n    intro h\n    apply hS\n    use n\n    intro a ha\n    exact (h a ha).trans (by norm_num)\n  simp only [not_forall] at h\n  obtain \u27e8a, ha, ha'\u27e9 := h\n  exact \u27e8a, ha, by linarith\u27e9",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem exists_of_not_bddAbove {S : Set \u2124} (hS : \u00ac BddAbove S) : \u2200 n : \u2115, \u2203 a \u2208 S, n \u2264 a := by\n  intro n\n  have h := hS\n  rw [not_bddAbove_iff] at h\n  specialize h n\n  obtain \u27e8a, ha, hn\u27e9 := h\n  exact \u27e8a, ha, by omega\u27e9"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 1 \u2264 x) (hy : 1 \u2264 y) (hz : 1 \u2264 z) (h : x * y + y * z + z * x = x * y * z) : Real.sqrt (x - 1) + Real.sqrt (y - 1) + Real.sqrt (z - 1) \u2264 Real.sqrt (2 * (x + y + z)) := by",
  "new": "(h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [mul_comm]\n  exact Real.mul_self_sqrt h",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(\u03b1 : \u211d) (h : \u03b1 > 1) : Summable (fun n : \u2115 => (n! / \u220f i in Finset.Icc 1 n, (\u03b1 + i))) := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [summable_one_div_pow_of_le one_lt_two]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [one_div, \u2190 NNReal.coe_inv, \u2190 NNReal.coe_pow, NNReal.summable_coe]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simpa using summable_one_div_pow_of_le zero_lt_one (f := fun n : \u2115 => (n : \u211d) ^ p)",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  rw [\u2190 summable_nat_pow_inv]\n  simp [div_eq_mul_inv]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simpa using Real.summable_one_div_pow_of_le one_lt_two",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases hp : 1 < p <;> simp [hp]\n  <;> norm_num\n  <;> apply summable_one_div_pow_of_le\n  <;> norm_num\n  <;> simp [hp]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simpa [Nat.cast_le] using Real.summable_one_div_pow_of_le one_le_two"
  ]
 },
 {
  "old": "(a b c : \u211d) : sin (2 * b - 2 * c) * cos a + sin (b - c) * cos (a - b - c) = sin (2 * b - 2 * c) * cos a + sin (b - c) * cos (a - b - c) := by",
  "new": ": sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sub_sin : sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_sub_sin, Complex.ofReal_sub]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sub_sin : sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) := by\n  have h\u2081 : x = (x - y) / 2 + (x + y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [sin_add, sin_sub, cos_add, cos_sub]\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sub_sin : sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) := by\n  rw [\u2190 sub_eq_zero]\n  have := sin_sub ((x + y) / 2) ((x - y) / 2)\n  have := sin_add ((x + y) / 2) ((x - y) / 2)\n  ring_nf at *\n  linarith"
  ]
 },
 {
  "old": "(h\u2081 : 3 \u2264 20) : (Nat.choose 20 3 : \u211a) = (20! / (17! * 3!)) := by",
  "new": "{n k : \u2115} (hk : k \u2264 n) : choose n k = n ! / (k ! * (n - k)!) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  rw [Nat.choose_eq_factorial_div_factorial hk]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  apply Eq.symm\n  rw [\u2190 choose_mul_factorial_mul_factorial hk, mul_assoc]\n  field_simp [factorial_ne_zero, mul_comm]"
  ]
 },
 {
  "old": ": \u2200 x : \u211d, sin 3*x - sin x = 2*cos 2*x * sin x := by",
  "new": ": sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_three_mul : sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by\n  have h\u2081 : x + 2 * x = 3 * x := by ring\n  rw [\u2190 h\u2081, sin_add x (2 * x)]\n  simp only [cos_two_mul, sin_two_mul, cos_sq']\n  have h\u2082 : cos x * (2 * sin x * cos x) = 2 * sin x * cos x ^ 2 := by ring\n  rw [h\u2082, cos_sq']\n  ring_nf",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_three_mul : sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_three_mul, Complex.sin_ofReal_re, Complex.mul_re, Complex.sub_re,\n    Complex.ofReal_re]"
  ]
 },
 {
  "old": "(m n : \u2115) (k : \u2115) : m = fib k \u2227 n = fib (k + 1) \u2194 m = 2 \u2227 n = 1 \u2228 m = 1 \u2227 n = 1 := by",
  "new": "(n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add]\n  ring"
  ]
 },
 {
  "old": ": \u00ac\u2203 S : Set \u2115, \u2200 n : \u2115, n \u2208 S \u2228 (\u2200 m : \u2115, m \u2208 S \u2192 Nat.Coprime n m) := by",
  "new": "{m n : \u2115} (h : m \u2264 n) : Coprime n (n - m) \u2194 Coprime n m := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem coprime_self_sub_right {m n : \u2115} (h : m \u2264 n) : Coprime n (n - m) \u2194 Coprime n m := by\n  rw [Coprime, Coprime, gcd_self_sub_right h]"
  ]
 },
 {
  "old": "(n : \u2115) (hn : 4 \u2264 n) (h : n \u2223 (2 ^ n - 2)) : \u00ac Nat.Prime ((2 ^ n - 2) / n) := by",
  "new": "{m n k : \u2115} (hkn : k \u2223 n) (hkm : k \u2223 m) (hk1 : \u00ac1 \u2223 k) : \u00acCoprime m n := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem not_coprime_of_dvd_of_dvd {m n k : \u2115} (hkn : k \u2223 n) (hkm : k \u2223 m) (hk1 : \u00ac1 \u2223 k) :\n    \u00acCoprime m n := by\n  rw [coprime_iff_gcd_eq_one]\n  intro h\n  apply hk1\n  simpa [h, Nat.gcd_eq_right_iff_dvd] using hkn"
  ]
 },
 {
  "old": "{a : \u211d} (ha : a > 0) (n : \u2124) : (\u2203 k : \u2124, n - 1 / 2 \u2264 a * k \u2227 a * k < n + 1 / 2) \u2194 \u2203 k : \u2124, 0 \u2264 k - (n - 1) / (2 * a) \u2227 (k : \u211d) - (n - 1) / (2 * a) < 1 / a := by",
  "new": "{a : \u211d} (ha : a \u2260 0) (b : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) : \u2203 m n : \u2124, |a * m - b * n| \u2264 \u03b5 \u2227 |a * m - b * n| < |a| := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem exists_int_int_abs_mul_sub_le {a : \u211d} (ha : a \u2260 0) (b : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :\n    \u2203 m n : \u2124, |a * m - b * n| \u2264 \u03b5 \u2227 |a * m - b * n| < |a| := by\n  use 0, 0\n  simp [*]\n  <;> linarith"
  ]
 },
 {
  "old": "(a b k : \u211d) (ha : 0 < a) (hb : 0 < b) (hab : a + b = 2 * k^2) : Real.sqrt (2 * a^2 + 2 * b^2) + 4 * k * Real.sqrt a + 4 * k * Real.sqrt b \u2265 10 * k^2 - 2 * (2 * k - Real.sqrt a - Real.sqrt b) / k^3 * (a - b)^2 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  have h\u2081 : a ^ 2 \u2264 b := h\n  apply Real.le_sqrt_of_sq_le\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  assumption"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 1) : \u221a(ab / (ab + c)) + \u221a(bc / (bc + a)) + \u221a(ca / (ca + b)) \u2264 3 / 2 := by",
  "new": "(h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  have h\u2081 : 0 \u2264 \u221ab := sqrt_nonneg b\n  nlinarith [sq_sqrt (show 0 \u2264 b from (sq_nonneg a).trans h)]"
  ]
 },
 {
  "old": "(a b c : \u211d) : Real.sqrt (a ^ 2 - a * b + b ^ 2) + Real.sqrt (b ^ 2 - b * c + c ^ 2) \u2265 Real.sqrt (c ^ 2 + c * a + a ^ 2) := by",
  "new": "(x : \u211d) : \u221a(x ^ 2) = |x| := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by\n  rw [\u2190 Real.sqrt_sq_eq_abs]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by\n  rw [sqrt_eq_iff_sq_eq]\n  <;> norm_num\n  <;> nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by\n  rw [sq, Real.sqrt_mul_self_eq_abs]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by\n  rw [sqrt_eq_iff_sq_eq]\n  <;> simp [sq]\n  <;> nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by\n  rw [sq, sqrt_mul_self_eq_abs]"
  ]
 },
 {
  "old": "(k : \u2115) (m n : \u211d) (a : \u2115 \u2192 \u211d) (hf: m >= n) (hg: n >= 1) (hk: k >= 1) : ( (\u2211 i in Finset.range k, (a i)^m)/k )^((1/m) : \u211d) \u2265 ( (\u2211 i in Finset.range k, (a i)^n)/k )^((1/n) : \u211d) \u2227 ( (\u2211 i in Finset.range k, (a i)^n)/k )^((1/n) : \u211d) \u2265 (\u220f i in Finset.range k, a i)^(1/k) \u2227 (\u220f i in Finset.range k, a i)^(1/k) \u2265 k / (\u2211 i in Finset.range k, 1/(a i)) := by",
  "new": "(w a : \u03b9 \u2192 \u211d) (hw : \u2200 i \u2208 s, 0 \u2264 w i) (hw' : \u2211 i \u2208 s, w i = 1) (ha : \u2200 i \u2208 s, 0 \u2264 a i) : \u220f i \u2208 s, a i ^ w i \u2264 \u2211 i \u2208 s, w i * a i := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem geom_mean_le_arith_mean_weighted (w a : \u03b9 \u2192 \u211d) (hw : \u2200 i \u2208 s, 0 \u2264 w i) (hw' : \u2211 i \u2208 s, w i = 1)\n    (ha : \u2200 i \u2208 s, 0 \u2264 a i) : \u220f i \u2208 s, a i ^ w i \u2264 \u2211 i \u2208 s, w i * a i := by\n  calc\n    \u220f i \u2208 s, a i ^ w i \u2264 \u2211 i \u2208 s, w i * a i := by\n      apply Real.geom_mean_le_arith_mean_weighted\n      <;> assumption\n    _ = \u2211 i \u2208 s, w i * a i := by rfl"
  ]
 },
 {
  "old": "(a : \u211d) (n : \u2115) : a > 0 \u2192 \u2200 \u03b5 : \u211d, \u03b5 > 0 \u2192 \u2203 N : \u2115, \u2200 n : \u2115, n \u2265 N \u2192 |n^2 * (a^(1/n) - a^(1/(n+1))) - Real.log a| < \u03b5 := by",
  "new": "{a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have h\u2081 : 0 < a\u207b\u00b9 := inv_pos.mpr h\n  have h\u2082 : 1 + a\u207b\u00b9 > 0 := by linarith\n  have h\u2083 : 1 + a\u207b\u00b9 \u2260 1 := by linarith\n  have h\u2084 : 0 < 1 + a\u207b\u00b9 := by linarith\n  have h\u2085 : 0 < 1 + a\u207b\u00b9 - 1 := by linarith\n  have h\u2086 : 1 + a\u207b\u00b9 - 1 \u2260 0 := by linarith\n  have h\u2087 : 0 < 1 + a\u207b\u00b9 - 1 := by linarith\n  have h\u2088 : (1 + a\u207b\u00b9 - 1)\u207b\u00b9 = a := by field_simp\n  have h\u2089 : (1 + a\u207b\u00b9 - 1)\u207b\u00b9 = a := by field_simp\n  nlinarith [Real.log_le_sub_one_of_pos h\u2084]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have := log_le_sub_one_of_pos (by positivity : 0 < 1 + a\u207b\u00b9)\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have : 0 < 1 + a\u207b\u00b9 := by positivity\n  have h\u2080 := log_le_sub_one_of_pos this\n  have h\u2081 : 1 + a\u207b\u00b9 \u2264 exp a\u207b\u00b9 := by\n    linarith [add_one_le_exp a\u207b\u00b9]\n  linarith [exp_le_exp.mpr h\u2080]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have : 0 < 1 + a\u207b\u00b9 := by positivity\n  linarith [log_le_sub_one_of_pos this]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  rw [\u2190 inv_pos] at h\n  apply (log_le_sub_one_of_pos ?_).trans ?_\n  all_goals linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have h\u2081 : 0 < a\u207b\u00b9 := by simpa [h] using inv_pos.mpr h\n  have h\u2082 : 0 < 1 + a\u207b\u00b9 := by linarith\n  have h\u2083 : log (1 + a\u207b\u00b9) \u2264 1 + a\u207b\u00b9 - 1 := log_le_sub_one_of_pos h\u2082\n  simpa [h\u2081] using h\u2083"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a \u2227 a \u2264 3 / 2) (hb : 0 \u2264 b \u2227 b \u2264 3 / 2) (hc : 0 \u2264 c \u2227 c \u2264 3 / 2) (hab : a + b + c + a * b * c = 4) : 203 / 26 \u2265 a + 2 * b + 3 * c \u2227 a + 2 * b + 3 * c \u2265 2 * Real.sqrt (38 / 3) - 11 / 6 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  have : 0 \u2264 b := by linarith [sq_nonneg a]\n  exact by\n    have h\u2081 : a ^ 2 \u2264 b := by assumption\n    have h\u2082 : 0 \u2264 b := by linarith [sq_nonneg a]\n    exact by\n      apply Real.le_sqrt_of_sq_le\n      linarith"
  ]
 },
 {
  "old": ": \u2200 n : \u2115, n = 3 * k + 2 \u2192 5 ^ n + 3 ^ n + 1 \u2261 (-1) ^ (k + 1) + 1 [ZMOD 7] := by",
  "new": "(h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by\n  rw [Int.ModEq]\n  rw [Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  rw [Int.dvd_iff_emod_eq_zero] at h\n  omega",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by\n  rw [Int.ModEq]\n  simpa [Int.emod_eq_emod_iff_emod_sub_eq_zero] using h"
  ]
 },
 {
  "old": "(a b c d : \u211d) (h : a * b + a * c + a * d + b * c + b * d + c * d = 6) : a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 + (2 + Real.sqrt 2) / 2 * (a * b * c + a * b * d + a * c * d + b * c * d) \u2265 2 * (4 + Real.sqrt 2) := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  exact h"
  ]
 },
 {
  "old": "(h : \u211d \u2192 \u211d) (hcont : Continuous h) (h\u2080 : h 0 = 0) (x : \u211d) : \u2203 f : \u211d \u2192 \u211d, Continuous f \u2227 \u2200 y \u2264 0, f y = -y \u2227 \u2200 y > 0, f y = y - h y := by",
  "new": ": Continuous ((\u2191) : \u211d \u2192 \u2102) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem continuous_of_real : Continuous ((\u2191) : \u211d \u2192 \u2102) := by\n  exact Complex.continuous_ofReal"
  ]
 },
 {
  "old": "(x y : \u211d) (hx : x \u2260 0) (hy : y \u2260 0) : 2020 * x / y + y / (2020 * x) \u2265 2 * Real.sqrt ((2020 * x / y) * (y / (2020 * x))) := by",
  "new": "(h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(n p m : \u2115) (h\u2080 : 0 < n \u2227 0 < p \u2227 0 < m) (h\u2081 : Nat.Prime p) (h\u2082 : p = Nat.minFac n) (h\u2083 : n + (n / p) = 10^m) : n = 75 := by",
  "new": "(n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  constructor <;> intro h <;> simp_all [minFac_dvd, dvd_iff_mod_eq_zero, mod_eq_of_lt]\n  all_goals\n    omega"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : Real.sqrt (yz / (5 * x ^ 2 + 4 * yz)) + Real.sqrt (zx / (5 * y ^ 2 + 4 * zx)) + Real.sqrt (xy / (5 * z ^ 2 + 4 * xy)) \u2265 Real.sqrt ((xy + zx + yz) / (3 * x ^ 2 - 2 * xy - 2 * zx + 3 * y ^ 2 - 2 * yz + 3 * z ^ 2)) := by",
  "new": "(h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [\u2190 sq_eq_sq]\n  <;> simp [h]"
  ]
 },
 {
  "old": "(x y : \u211d) : y = Real.sqrt (x ^ 2 + x + 1) - Real.sqrt (x ^ 2 - x + 1) \u2194 x = (y ^ 2 + 2) / (2 * y) := by",
  "new": "(hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;> rw [\u2190 h] <;> simp [hx, hy]\n  <;> apply sq_sqrt <;> assumption",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;>\n  rw [\u2190 h] <;>\n  field_simp [hx, hy] <;>\n  ring"
  ]
 },
 {
  "old": ": \u2200 a b : \u211d, a > 0 \u2227 b > 0 \u2227 a^2 + b = 1 \u2192 a / (2 * b + 1) + 2 * b / (a + 1) \u2265 2 - 2 / Real.sqrt 3 \u2227 a / (b + 1) + b / (a + 1) \u2265 1 - (Real.sqrt (71 - 17 * Real.sqrt 17)) / 4 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  linarith"
  ]
 },
 {
  "old": "(n : \u2115) (a b c : \u211d) (habc : a * b * c = 1) : 1 / (a^n * (b + c)) + 1 / (b^n * (c + a)) + 1 / (c^n * (a + b)) \u2265 3 / 2 := by",
  "new": "(a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : (Real.sqrt (a * b)) ^ 2 = a * b := by rw [Real.sq_sqrt (mul_nonneg ha hb)]\n  nlinarith [sq_nonneg (a - b), h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : 0 \u2264 (Real.sqrt a - Real.sqrt b) ^ 2 := sq_nonneg (Real.sqrt a - Real.sqrt b)\n  rw [sub_sq] at h\n  field_simp [ha, hb] at h \u22a2\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  nlinarith [sq_sqrt (mul_nonneg ha hb), sq_nonneg (a - b)]"
  ]
 },
 {
  "old": ": (9:\u211d) / 8 < \u2211' n : \u2115, (1:\u211d) / (n ^ 3) \u2227 \u2211' n : \u2115, (1:\u211d) / (n ^ 3) < 5 / 4 := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  constructor <;> intro h <;> simpa [Real.summable_nat_pow_inv] using h",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp only [one_div, Real.summable_nat_pow_inv]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp_rw [one_div]\n  exact summable_nat_pow_inv"
  ]
 },
 {
  "old": "(\u03b1 : \u211d) (h : \u03b1 > 1) : Summable (fun n : \u2115 => (n! / \u220f i in Finset.Icc 1 n, (\u03b1 + i))) := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases h : 1 < p <;> simp [h]\n  <;> norm_num\n  <;> apply summable_one_div_pow\n  <;> linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp only [summable_one_div_pow_of_le, one_div]\n  norm_num",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp only [one_div, Real.summable_nat_pow_inv]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases h : 1 < p <;> simp [h]\n  <;> exact (summable_one_div_pow_of_le h.le).2\n  <;> exact (not_summable_one_div_pow_of_lt h).1"
  ]
 },
 {
  "old": "(x y : \u211d) : (dy / dx) * (1 / y) = -(1 / 2) * (1 / (1 - x)) - (1 / 2) * (1 / (1 + x)) := by",
  "new": "{x : \u211d} (hx : x \u2260 0) : deriv (fun x => 1 / x) x = -(1 / x ^ 2) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem deriv_one_div_of_ne_zero {x : \u211d} (hx : x \u2260 0) : deriv (fun x => 1 / x) x = -(1 / x ^ 2) := by\n  rw [one_div]\n  simpa using deriv_inv x hx"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) : a^2 / b + b^2 / a - a - b \u2265 8 * (Real.sqrt a - Real.sqrt b)^2 := by",
  "new": "(h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0)(hab : a + b^2 + c^2 = 4) : a^2 + b^2 + c^2 \u2265 15 / 4 := by",
  "new": "(a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b + c = 3) : a * b * c \u2264 1 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b + c = 3) : a * b * c \u2264 1 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    add_assoc a b c, add_assoc b c a, add_assoc c a b,\n    mul_self_nonneg (a + b + c), mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b + c = 3) : a * b * c \u2264 1 := by\n  nlinarith [pow_two (a - b), pow_two (b - c), pow_two (c - a), mul_self_nonneg (a + b + c)]"
  ]
 },
 {
  "old": "(a b c : \u211d) : sin (2 * b - 2 * c) * cos a + sin (b - c) * cos (a - b - c) = sin (2 * b - 2 * c) * cos a + sin (b - c) * cos (a - b - c) := by",
  "new": ": cos x - cos y = -2 * sin ((x + y) / 2) * sin ((x - y) / 2) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem cos_sub_cos : cos x - cos y = -2 * sin ((x + y) / 2) * sin ((x - y) / 2) := by\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub, sin_add, sin_sub]\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem cos_sub_cos : cos x - cos y = -2 * sin ((x + y) / 2) * sin ((x - y) / 2) := by\n  have h\u2081 := cos_add ((x + y) / 2) ((x - y) / 2)\n  have h\u2082 := cos_sub ((x + y) / 2) ((x - y) / 2)\n  ring_nf at h\u2081 h\u2082 \u22a2\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem cos_sub_cos : cos x - cos y = -2 * sin ((x + y) / 2) * sin ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, sin_add, sin_sub]\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem cos_sub_cos : cos x - cos y = -2 * sin ((x + y) / 2) * sin ((x - y) / 2) := by\n  have h1 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h2 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h1, h2]\n  simp [cos_add, cos_sub, sin_add, sin_sub]\n  ring"
  ]
 },
 {
  "old": "(h\u2081 : 3 \u2264 20) : (Nat.choose 20 3 : \u211a) = (20! / (17! * 3!)) := by",
  "new": "{n k : \u2115} (hk : k \u2264 n) : choose n k = n ! / (k ! * (n - k)!) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 choose_mul_factorial_mul_factorial hk, mul_assoc]\n  field_simp [factorial_ne_zero]"
  ]
 },
 {
  "old": ": \u2200 x : \u211d, sin 3*x - sin x = 2*cos 2*x * sin x := by",
  "new": ": sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_three_mul : sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by\n  have h\u2081 : x + 2 * x = 3 * x := by ring\n  rw [\u2190 h\u2081, sin_add x (2 * x)]\n  simp only [cos_two_mul, sin_two_mul, cos_sq']\n  have h\u2082 : cos x * (2 * sin x * cos x) = 2 * sin x * cos x ^ 2 := by ring\n  rw [h\u2082, cos_sq']\n  ring_nf"
  ]
 },
 {
  "old": "(m n : \u2115) (k : \u2115) : m = fib k \u2227 n = fib (k + 1) \u2194 m = 2 \u2227 n = 1 \u2228 m = 1 \u2227 n = 1 := by",
  "new": "(n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add]\n  ring"
  ]
 },
 {
  "old": ": \u00ac\u2203 S : Set \u2115, \u2200 n : \u2115, n \u2208 S \u2228 (\u2200 m : \u2115, m \u2208 S \u2192 Nat.Coprime n m) := by",
  "new": "{m n : \u2115} (h : m \u2264 n) : Coprime n (n - m) \u2194 Coprime n m := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem coprime_self_sub_right {m n : \u2115} (h : m \u2264 n) : Coprime n (n - m) \u2194 Coprime n m := by\n  rw [coprime_comm]\n  rw [Nat.coprime_comm]\n  rw [Nat.coprime_comm]\n  rw [Nat.coprime_iff_gcd_eq_one]\n  rw [Nat.coprime_iff_gcd_eq_one]\n  rw [Nat.gcd_comm]\n  simp [h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem coprime_self_sub_right {m n : \u2115} (h : m \u2264 n) : Coprime n (n - m) \u2194 Coprime n m := by\n  rw [Coprime, Coprime, gcd_self_sub_right h]"
  ]
 },
 {
  "old": "(n : \u2115) (hn : 4 \u2264 n) (h : n \u2223 (2 ^ n - 2)) : \u00ac Nat.Prime ((2 ^ n - 2) / n) := by",
  "new": "{m n k : \u2115} (hkn : k \u2223 n) (hkm : k \u2223 m) (hk1 : k \u2260 1) : \u00acCoprime m n := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem not_coprime_of_dvd_of_dvd {m n k : \u2115} (hkn : k \u2223 n) (hkm : k \u2223 m) (hk1 : k \u2260 1) :\n    \u00acCoprime m n := by\n  intro h\n  have hk : k \u2223 Nat.gcd m n := Nat.dvd_gcd hkm hkn\n  rw [h] at hk\n  exact hk1 (Nat.dvd_one.mp hk)"
  ]
 },
 {
  "old": "{a : \u211d} (ha : a > 0) (n : \u2124) : (\u2203 k : \u2124, n - 1 / 2 \u2264 a * k \u2227 a * k < n + 1 / 2) \u2194 \u2203 k : \u2124, 0 \u2264 k - (n - 1) / (2 * a) \u2227 (k : \u211d) - (n - 1) / (2 * a) < 1 / a := by",
  "new": "{a : \u211d} (ha : a \u2260 0) (b : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) : \u2203 m n : \u2124, |a * m - b * n| \u2264 \u03b5 \u2227 |a * m - b * n| < |a| := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem exists_int_int_abs_mul_sub_le {a : \u211d} (ha : a \u2260 0) (b : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :\n    \u2203 m n : \u2124, |a * m - b * n| \u2264 \u03b5 \u2227 |a * m - b * n| < |a| := by\n  use 0, 0\n  simp [*]\n  linarith"
  ]
 },
 {
  "old": "(a b k : \u211d) (ha : 0 < a) (hb : 0 < b) (hab : a + b = 2 * k^2) : Real.sqrt (2 * a^2 + 2 * b^2) + 4 * k * Real.sqrt a + 4 * k * Real.sqrt b \u2265 10 * k^2 - 2 * (2 * k - Real.sqrt a - Real.sqrt b) / k^3 * (a - b)^2 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 1) : \u221a(ab / (ab + c)) + \u221a(bc / (bc + a)) + \u221a(ca / (ca + b)) \u2264 3 / 2 := by",
  "new": "(hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_le_sqrt_iff (hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by\n  rw [Real.sqrt_le_sqrt_iff hy]"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) (hab : a * b + a + b = 3) : Real.sqrt (a^8 + b) + Real.sqrt (b^8 + a) \u2265 Real.sqrt (2 * a * b * (a + b + 2 * a * b)) := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : Real.sqrt (a ^ 2 - a * b + b ^ 2) + Real.sqrt (b ^ 2 - b * c + c ^ 2) \u2265 Real.sqrt (c ^ 2 + c * a + a ^ 2) := by",
  "new": "(h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  have h\u2081 : 0 \u2264 b := by linarith [sq_nonneg a]\n  have h\u2082 : 0 \u2264 \u221ab := by positivity\n  nlinarith [sq_sqrt h\u2081]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  have : 0 \u2264 b := by\n    nlinarith\n  exact by\n    nlinarith [Real.le_sqrt_of_sq_le h]"
  ]
 },
 {
  "old": "{a b c : \u211d} (hx: a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b > c) (hbc : b + c > a) (hca : a + c > b) : Real.sqrt (3 * (Real.sqrt (a * b) + Real.sqrt (b * c) + Real.sqrt (c * a))) \u2265 Real.sqrt (a + b - c) + Real.sqrt (b + c - a) + Real.sqrt (c + a - b) := by",
  "new": "(h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) : Real.sqrt (a^2 + b^2) + Real.sqrt (b^2 + c^2) \u2265 (Real.sqrt 5 - 1) * Real.sqrt (a^2 + b + c^2) := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  have : (a ^ 2) \u2264 b := by assumption\n  exact by\n    apply Real.le_sqrt_of_sq_le\n    exact this"
  ]
 },
 {
  "old": "(a : \u211d) (n : \u2115) : a > 0 \u2192 \u2200 \u03b5 : \u211d, \u03b5 > 0 \u2192 \u2203 N : \u2115, \u2200 n : \u2115, n \u2265 N \u2192 |n^2 * (a^(1/n) - a^(1/(n+1))) - Real.log a| < \u03b5 := by",
  "new": "{a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have : 0 < a\u207b\u00b9 := by positivity\n  have h\u2080 := log_le_sub_one_of_pos (by positivity : 0 < 1 + a\u207b\u00b9)\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have h\u2081 : 0 < 1 + a\u207b\u00b9 := by\n    apply add_pos_of_pos_of_nonneg\n    \u00b7 exact zero_lt_one\n    \u00b7 exact inv_nonneg.mpr (le_of_lt h)\n  have h\u2082 : log (1 + a\u207b\u00b9) \u2264 1 + a\u207b\u00b9 - 1 := by\n    apply log_le_sub_one_of_pos\n    exact h\u2081\n  simp at h\u2082\n  exact le_trans h\u2082 (by linarith)",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have : 0 < 1 + a\u207b\u00b9 := by positivity\n  linarith [log_le_sub_one_of_pos this]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  rw [\u2190 sub_nonneg]\n  have h' : 0 < 1 + a\u207b\u00b9 := by positivity\n  linarith [log_le_sub_one_of_pos h']",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have : 0 < a\u207b\u00b9 := by positivity\n  have : 0 \u2264 a\u207b\u00b9 := by positivity\n  have h\u2080 := log_le_sub_one_of_pos (by positivity : 0 < (1 + a\u207b\u00b9))\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have := Real.log_le_sub_one_of_pos (show 0 < 1 + a\u207b\u00b9 by positivity)\n  linarith"
  ]
 },
 {
  "old": "(f : \u211d \u2192 \u211d) : (3 * x^2 - 2 * x - 1 = 0) \u2194 (x = 1 \u2228 x = -1/3) := by",
  "new": "{x : \u2124} (h : x * x = 1) : x = 1 \u2228 x = -1 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem eq_one_or_neg_one_of_mul_eq_one {x : \u2124} (h : x * x = 1) : x = 1 \u2228 x = -1 := by\n  have h' : x * x = 1 := h\n  have h\u2081 : x = 1 \u2228 x = -1 := by\n    apply Int.eq_one_or_neg_one_of_mul_eq_one\n    assumption\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem eq_one_or_neg_one_of_mul_eq_one {x : \u2124} (h : x * x = 1) : x = 1 \u2228 x = -1 := by\n  have h\u2081 : x * x = 1 := h\n  have h\u2082 : x = 1 \u2228 x = -1 := by\n    cases' le_or_lt x 0 with h\u2083 h\u2083\n    \u00b7 right\n      nlinarith\n    \u00b7 left\n      nlinarith\n  exact h\u2082",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem eq_one_or_neg_one_of_mul_eq_one {x : \u2124} (h : x * x = 1) : x = 1 \u2228 x = -1 := by\n  rw [mul_self_eq_one_iff] at h\n  exact h",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem eq_one_or_neg_one_of_mul_eq_one {x : \u2124} (h : x * x = 1) : x = 1 \u2228 x = -1 := by\n  have h\u2081 : x * x = 1 := h\n  have h\u2082 : x = 1 \u2228 x = -1 := by\n    cases' le_or_lt 0 (x) with h\u2083 h\u2083\n    \u00b7 left\n      nlinarith\n    \u00b7 right\n      nlinarith\n  exact h\u2082"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a * b + b * c + c * a = 3) : (Real.sqrt (1 / a + 2 * b) + Real.sqrt (1 / b + 2 * c) + Real.sqrt (1 / c + 2 * a) \u2264 3 * Real.sqrt 3 / Real.sqrt (a * b * c)) := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  exact h"
  ]
 },
 {
  "old": "(n : \u2115) (M : Matrix (Fin n) (Fin n) \u211d) (hM : M.transpose = M) (hMk : \u2200 k : \u2115, M ^ k = 0) : M = 0 := by",
  "new": "[Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m) (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [Matrix.mul_apply, Equiv.toPEquiv_apply]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [Matrix.mul_apply, Equiv.toPEquiv_apply, submatrix_apply]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext\n  simp [Matrix.mul_apply, Equiv.toPEquiv_apply, Equiv.symm_apply_apply]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [Matrix.mul_apply, Equiv.toPEquiv_apply, Equiv.apply_eq_iff_eq]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [Matrix.mul_apply, Equiv.toPEquiv_apply, submatrix_apply, Equiv.symm_apply_apply]"
  ]
 },
 {
  "old": ": \u2200 n : \u2115, n = 3 * k + 2 \u2192 5 ^ n + 3 ^ n + 1 \u2261 (-1) ^ (k + 1) + 1 [ZMOD 7] := by",
  "new": "(h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by\n  apply Int.ModEq.symm\n  norm_num\n  exact Int.modEq_iff_dvd.2 h",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by\n  simp only [Int.ModEq, dvd_iff_mod_eq_zero, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  omega"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 1 / a + 1 / b + 1 / c) : (ab + bc + ca) * (Real.sqrt (ab) + Real.sqrt (bc) + Real.sqrt (ca)) ^ 2 \u2265 27 := by",
  "new": "(h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by rw [\u2190 sq, sq_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(h : \u211d \u2192 \u211d) (hcont : Continuous h) (h\u2080 : h 0 = 0) (x : \u211d) : \u2203 f : \u211d \u2192 \u211d, Continuous f \u2227 \u2200 y \u2264 0, f y = -y \u2227 \u2200 y > 0, f y = y - h y := by",
  "new": ": Continuous ((\u2191) : \u211d \u2192 \u2102) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem continuous_of_real : Continuous ((\u2191) : \u211d \u2192 \u2102) := by\n  exact Complex.continuous_ofReal"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a^2 + b^2 + c^2 = 3) : (a + Real.sqrt (b * c)) / (Real.sqrt (b * c) + Real.sqrt (b * c + 3)) + (b + Real.sqrt (c * a)) / (Real.sqrt (c * a) + Real.sqrt (c * a + 3)) + (c + Real.sqrt (a * b)) / (Real.sqrt (a * b) + Real.sqrt (a * b + 3)) \u2264 2 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  exact h"
  ]
 },
 {
  "old": "(k a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (k * a + b + c) * (1 / a + 1 / b + 1 / c) \u2265 k + 4 + (2 * k + 1) * Real.sqrt 2 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  linarith"
  ]
 },
 {
  "old": "(n m : \u2115) (x : Fin n \u2192 \u211d) (y : Fin m \u2192 \u211d) (a : Fin n \u2192 \u211d) (b : Fin m \u2192 \u211d) (hx : \u2211 i, x i = 0) (hy : \u2211 j, y j = 0) : 2 * \u2211 i, \u2211 j, x i * y j * |a i - b j| \u2265 \u2211 i, \u2211 j, x i * x j * |a i - a j| + \u2211 i, \u2211 j, y i * y j * |b i - b j| := by",
  "new": "{\u03b1 : Type*} [Fintype \u03b1] (a : \u03b1 \u2192 \u211d) (b : \u03b1 \u2192 \u211d) : (\u2211 i, a i) * \u2211 i, b i = \u2211 i, \u2211 j, a i * b j := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sum_mul_sum {\u03b1 : Type*} [Fintype \u03b1] (a : \u03b1 \u2192 \u211d) (b : \u03b1 \u2192 \u211d) :\n     (\u2211 i, a i) * \u2211 i, b i = \u2211 i, \u2211 j, a i * b j := by\n  simp_rw [Finset.sum_mul, Finset.mul_sum]"
  ]
 },
 {
  "old": "(a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0) : a * Real.sqrt (a^2 - a*c + c^2) \u2265 c^2 \u2227 b * Real.sqrt (b^2 - b*a + a^2) \u2265 a^2 \u2227 c * Real.sqrt (c^2 - c*b + b^2) \u2265 b^2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]\ntheorem mul_self_sqrt_of_nonneg (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]\ntheorem sqrt_unique (h\u2080 : 0 \u2264 a) (h\u2081 : 0 \u2264 b) (h\u2082 : b * b = a) : \u221aa = b :=\n  (sqrt_eq_iff_mul_self_eq h\u2080 h\u2081).mpr h\u2082"
  ]
 },
 {
  "old": "(x y : \u211d) (hx : x \u2260 0) (hy : y \u2260 0) : 2020 * x / y + y / (2020 * x) \u2265 2 * Real.sqrt ((2020 * x / y) * (y / (2020 * x))) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(n p m : \u2115) (h\u2080 : 0 < n \u2227 0 < p \u2227 0 < m) (h\u2081 : Nat.Prime p) (h\u2082 : p = Nat.minFac n) (h\u2083 : n + (n / p) = 10^m) : n = 75 := by",
  "new": "(n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  by_cases h : n = 0 <;> simp [h] <;>\n    exact (minFac_dvd n).trans (by decide)",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  constructor <;> intro h\n  <;> norm_num [Nat.dvd_iff_mod_eq_zero] at h \u22a2\n  <;> exact_mod_cast h",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  refine \u27e8fun h \u21a6 ?_, fun h \u21a6 ?_\u27e9 <;> simp_all [Nat.dvd_iff_mod_eq_zero, Nat.mod_two_ne_zero]\n  all_goals omega",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  constructor <;> intro h <;> simp_all [Nat.dvd_iff_mod_eq_zero] <;>\n  by_contra! h' <;> simp_all [Nat.minFac_eq_two_iff] <;>\n  omega"
  ]
 },
 {
  "old": "{a b c : \u211d} (hx: a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b > c) (hbc : b + c > a) (hca : a + c > b) : (-a + b + c) ^ 3 / a ^ 2 + (a - b + c) ^ 3 / b ^ 2 + (a + b - c) ^ 3 / c ^ 2 >= a + b + c := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a^2 / b + b^2 / c + c^2 / a) \u2265 (a + b + c) * (a^2 + b^2 + c^2) / (a * b + b * c + c * a) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": ": \u00ac Summable (\u03bb k : \u2115 => (Nat.choose (2 * k) k) / (4 ^ k)) := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [Nat.cast_pos]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [Real.summable_one_div_nat_pow]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp only [one_div, Real.summable_nat_pow_inv]"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : Real.sqrt (yz / (5 * x ^ 2 + 4 * yz)) + Real.sqrt (zx / (5 * y ^ 2 + 4 * zx)) + Real.sqrt (xy / (5 * z ^ 2 + 4 * xy)) \u2265 Real.sqrt ((xy + zx + yz) / (3 * x ^ 2 - 2 * xy - 2 * zx + 3 * y ^ 2 - 2 * yz + 3 * z ^ 2)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(x y : \u211d) : y = Real.sqrt (x ^ 2 + x + 1) - Real.sqrt (x ^ 2 - x + 1) \u2194 x = (y ^ 2 + 2) / (2 * y) := by",
  "new": "(hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;> rw [\u2190 h] <;>\n    simp [hx, hy]\n  <;>\n    apply sq_sqrt <;>\n    assumption",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;>\n  simp_all [Real.sqrt_eq_iff_sq_eq] <;>\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (2 * a / Real.sqrt (3 * a + b) + 2 * b / Real.sqrt (3 * b + c) + 2 * c / Real.sqrt (3 * c + a)) \u2264 Real.sqrt (3 * a + 3 * b + 3 * c) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": ": \u2200 a b : \u211d, a > 0 \u2227 b > 0 \u2227 a^2 + b = 1 \u2192 a / (2 * b + 1) + 2 * b / (a + 1) \u2265 2 - 2 / Real.sqrt 3 \u2227 a / (b + 1) + b / (a + 1) \u2265 1 - (Real.sqrt (71 - 17 * Real.sqrt 17)) / 4 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  have h\u2081 : a ^ 2 \u2264 b := h\n  apply Real.le_sqrt_of_sq_le\n  linarith"
  ]
 },
 {
  "old": "(a b c m n : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 3) (hm : m >= 1) (hn : n >= 8) : (m * a ^ 3 + 2) / (a ^ 2 + n * b) + (m * b ^ 3 + 2) / (b ^ 2 + n * c) + (m * c ^ 3 + 2) / (c ^ 2 + n * a) >= (3 * (m + 2)) / (n + 1) := by",
  "new": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 3) : a * b * c \u2264 1 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 3) : a * b * c \u2264 1 := by\n  have h\u2081 : a * b * c \u2264 ((a + b + c) / 3) ^ 3 := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]\n  rw [habc] at h\u2081\n  linarith"
  ]
 },
 {
  "old": "(n : \u2115) (a b c : \u211d) (habc : a * b * c = 1) : 1 / (a^n * (b + c)) + 1 / (b^n * (c + a)) + 1 / (c^n * (a + b)) \u2265 3 / 2 := by",
  "new": "(a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  nlinarith [sq_sqrt (mul_nonneg ha hb), mul_self_nonneg (a - b)]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a / (b * (a ^ 2 + 2 * b ^ 2)) + b / (c * (b ^ 2 + 2 * c ^ 2)) + c / (a * (c ^ 2 + 2 * a ^ 2))) \u2265 3 / (b * c + c * a + a * b) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  exact this",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": ": \u2200 A B C : \u211d, sin (A + C) * sin B + sin B ^ 2 = sin B * (sin A * cos C + cos A * sin C) + sin B ^ 2 := by",
  "new": "(x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_add, Complex.ofReal_add, Complex.ofReal_mul, Complex.ofReal_cos,\n    Complex.ofReal_sin]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_add, Complex.sin_ofReal_re, Complex.mul_re, Complex.add_re, Complex.cos_ofReal_re]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [Real.sin_add]"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) (h : x + y + z = 4) : (x * y + y * z + z * x) \u2264 16/3 \u2227 (\u2203 x y z : \u211d, (x * y + y * z + z * x) = 16/3) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2265 c * b := by\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": ": \u2200 a b c R r : \u211d, a > 0 \u2227 b > 0 \u2227 c > 0 \u2227 R > 0 \u2227 r > 0 \u2192 a + b > c \u2227 a + c > b \u2227 b + c > a \u2192 Real.sqrt (a / (b + c - a)) + Real.sqrt (b / (c + a - b)) + Real.sqrt (c / (a + b - c)) \u2264 3 * Real.sqrt (R / (2 * r)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) : (c * (a + b) / (a + b + 2 * c) + a * (b + c) / (b + c + 2 * a) + b * (c + a) / (c + a + 2 * b)) \u2265 (3 * a * b * c * (a + b + c)) / (2 * (a * b ^ 2 + b * c ^ 2 + c * a ^ 2)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * b \u2264 c * a := by\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) (h : a ^ 5 + b ^ 5 + c ^ 5 = 3) : (a * b + a * c + b * c) * (a ^ 2 / b ^ 2 + b ^ 2 / c ^ 2 + c ^ 2 / a ^ 2) \u2265 9 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    rw [mul_comm]\n    rw [mul_comm]\n    apply mul_le_mul_of_nonpos_right h hc\n  exact h\u2081"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : a^2 + b^2 + c^2 + 3 * (a * b * c) ^ (2 / 3) \u2265 2 * (a * b + b * c + a * c) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : (Real.sqrt (x * (y + z)) + Real.sqrt (y * (x + z)) + Real.sqrt (z * (x + y))) * Real.sqrt (x / (y + z) + y / (x + z) + z / (x + y) - 1) \u2265 x + y + z := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": ": (9:\u211d) / 8 < \u2211' n : \u2115, (1:\u211d) / (n ^ 3) \u2227 \u2211' n : \u2115, (1:\u211d) / (n ^ 3) < 5 / 4 := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  constructor <;> intro hp\n  <;>\n  simp_all [Real.summable_nat_pow_inv, one_lt_iff_ne_zero_and_ne_one]\n  <;>\n  exfalso\n  <;>\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [summable_nat_pow_inv, one_lt_iff_ne_zero_and_ne_one]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp only [one_div, Real.summable_nat_pow_inv]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp_rw [one_div]\n  exact summable_nat_pow_inv"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2260 0) (hb : b \u2260 0) (hc : c \u2260 0) (hab : a + b \u2260 0) (hbc : b + c \u2260 0) (hca : a + c \u2260 0) : (1 / (2 * a ^ 2 + b * c) + 1 / (2 * b ^ 2 + c * a) + 1 / (2 * c ^ 2 + a * b) \u2265 1 / (a * b + b * c + a * c) + 2 / (a ^ 2 + b ^ 2 + c ^ 2)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c d e : \u211d) : (b - a / 2) ^ 2 + (c - a / 2) ^ 2 + (d - a / 2) ^ 2 + (e - a / 2) ^ 2 = b ^ 2 + c ^ 2 + d ^ 2 + e ^ 2 - a * (b + c + d + e) + a ^ 2 / 4 * 4 := by",
  "new": "{a b c d e : \u211d} (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0) (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sq_add_sq_add_sq_add_sq_add_sq_eq_zero {a b c d e : \u211d}\n    (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0)\n    (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by\n  constructor <;> (try constructor) <;> (try constructor) <;> (try constructor) <;>\n  (try constructor) <;> (try constructor) <;>\n  (try constructor) <;> (try constructor) <;>\n  (try constructor) <;> (try constructor) <;>\n  (try constructor) <;>\n  simp_all [sq, mul_assoc]\n  <;> nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sq_add_sq_add_sq_add_sq_add_sq_eq_zero {a b c d e : \u211d}\n    (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0)\n    (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by\n  exact\n    \u27e8by\n      nlinarith,\n      by\n      nlinarith,\n      by\n      nlinarith,\n      by\n      nlinarith,\n      by\n      nlinarith\u27e9",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sq_add_sq_add_sq_add_sq_add_sq_eq_zero {a b c d e : \u211d}\n    (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0)\n    (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by\n  refine' \u27e8_, _, _, _, _\u27e9 <;>\n  (try simp_all) <;>\n  (try apply mul_self_nonneg) <;>\n  (try linarith) <;>\n  (try nlinarith)",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sq_add_sq_add_sq_add_sq_add_sq_eq_zero {a b c d e : \u211d}\n    (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0)\n    (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by\n  constructor <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor)\n  <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor)\n  <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor)\n  <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor)\n  <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor)\n  <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor)\n  <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor)\n  <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor)\n  <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor)\n  <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor) <;> (try constructor <;> try constructor)\n  all_goals nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sq_add_sq_add_sq_add_sq_add_sq_eq_zero {a b c d e : \u211d}\n    (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0)\n    (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by\n  exact \u27e8by nlinarith, by nlinarith, by nlinarith, by nlinarith, by nlinarith\u27e9",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sq_add_sq_add_sq_add_sq_add_sq_eq_zero {a b c d e : \u211d}\n    (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0)\n    (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by\n  constructor <;> simp_all [sq] <;>\n    (try constructor) <;>\n    (try constructor) <;>\n    (try constructor) <;>\n    (try constructor) <;>\n    (try constructor) <;>\n    (try constructor) <;>\n    (try constructor) <;>\n    (try constructor) <;>\n    (try constructor) <;>\n    nlinarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) (h : x + y + z = 1) : (x * y / z + z * x / y + z * y / x) \u2265 (x + y + z) ^ 2 := by",
  "new": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (habc : a + b + c = 1) : a * b * c \u2264 a * b + b * c + c * a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)\n    (habc : a + b + c = 1) : a * b * c \u2264 a * b + b * c + c * a := by\n  have h\u2081 : a * b * c \u2264 a * b * c + (a^2 * b + a * b^2) + (b^2 * c + b * c^2) + (c^2 * a + c * a^2) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)\n    (habc : a + b + c = 1) : a * b * c \u2264 a * b + b * c + c * a := by\n  have hab : a * b \u2264 a * b + b * c + c * a := by\n    nlinarith [sq_nonneg (a - b)]\n  have hbc : b * c \u2264 a * b + b * c + c * a := by\n    nlinarith [sq_nonneg (b - c)]\n  have hac : a * c \u2264 a * b + b * c + c * a := by\n    nlinarith [sq_nonneg (c - a)]\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (1 / (a ^ 2 * b + b ^ 2 * c + c ^ 2 * a) + 1 / (a * b * c)) \u2265 4 / (a * b ^ 2 + b * c ^ 2 + c * a ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a * b + b * c + c * a) ^ 2 \u2265 3 * a * b * c * (a + b + c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : (b - a) * c \u2264 0 := by nlinarith\n  nlinarith"
  ]
 },
 {
  "old": "(\u03b1 : \u211d) (h : \u03b1 > 1) : Summable (fun n : \u2115 => (n! / \u220f i in Finset.Icc 1 n, (\u03b1 + i))) := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp only [one_div, Real.summable_nat_pow_inv]"
  ]
 },
 {
  "old": "(x y : \u211d) : (dy / dx) * (1 / y) = -(1 / 2) * (1 / (1 - x)) - (1 / 2) * (1 / (1 + x)) := by",
  "new": "(x : \u211d) : deriv (fun x => 1 / x) x = -(1 / x ^ 2) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem deriv_one_div (x : \u211d) : deriv (fun x => 1 / x) x = -(1 / x ^ 2) := by\n  simp [deriv_one_div]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0)(hab : a + b^2 + c^2 = 4) : a^2 + b^2 + c^2 \u2265 15 / 4 := by",
  "new": "(a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b + c = 3) : a * b * c \u2264 1 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b + c = 3) : a * b * c \u2264 1 := by\n  have h : (a + b + c) ^ 2 = 9 := by\n    rw [hab]\n    norm_num\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]"
  ]
 },
 {
  "old": "(a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) (habc : 0 < a * b * c) (habc2 : a * b + b * c + c * a + a * b * c = 4) : a^2 + b^2 + c^2 - 3 \u2265 2 * (Real.sqrt 2 + 1) * (a + b + c - 3) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(x y z : \u211d) : 5 * (x * y + y * z + z * x) \u2265 5 * (x ^ 2 + y ^ 2 + z ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a * b * (a + b) / (2 * a + b) * (a + 2 * b) + b * c * (b + c) / (2 * b + c) * (b + 2 * c) + c * a * (c + a) / (2 * c + a) * (c + 2 * a)) \u2264 (2 / 3) * (a ^ 2 + b ^ 2 + c ^ 2) * (a ^ 3 + b ^ 3 + c ^ 3) / (a * b + b * c + c * a) ^ 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(h\u2081 : 3 \u2264 20) : (Nat.choose 20 3 : \u211a) = (20! / (17! * 3!)) := by",
  "new": "{n k : \u2115} (hk : k \u2264 n) : choose n k = n ! / (k ! * (n - k)!) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 choose_mul_factorial_mul_factorial hk, mul_assoc]\n  field_simp",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  rw [Nat.choose_eq_factorial_div_factorial hk]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 choose_mul_factorial_mul_factorial hk, mul_assoc]\n  field_simp [factorial_ne_zero, mul_comm]"
  ]
 },
 {
  "old": ": \u2200 x : \u211d, sin 3*x - sin x = 2*cos 2*x * sin x := by",
  "new": ": sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_three_mul : sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by\n  have h\u2080 : x + 2 * x = 3 * x := by ring\n  rw [\u2190 h\u2080, sin_add x (2 * x)]\n  simp only [cos_two_mul, sin_two_mul, cos_sq']\n  have h\u2081 : cos x * (2 * sin x * cos x) = 2 * sin x * cos x ^ 2 := by ring\n  rw [h\u2081, cos_sq']\n  ring_nf",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_three_mul : sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by\n  have h\u2081 : x + 2 * x = 3 * x := by ring\n  rw [\u2190 h\u2081, sin_add x (2 * x)]\n  simp only [cos_two_mul, sin_two_mul, cos_sq']\n  have h\u2082 : cos x * (2 * sin x * cos x) = 2 * sin x * cos x ^ 2 := by ring\n  rw [h\u2082, cos_sq']\n  ring"
  ]
 },
 {
  "old": "(m n : \u2115) (k : \u2115) : m = fib k \u2227 n = fib (k + 1) \u2194 m = 2 \u2227 n = 1 \u2228 m = 1 \u2227 n = 1 := by",
  "new": "(n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add]\n  ring"
  ]
 },
 {
  "old": ": \u00ac\u2203 S : Set \u2115, \u2200 n : \u2115, n \u2208 S \u2228 (\u2200 m : \u2115, m \u2208 S \u2192 Nat.Coprime n m) := by",
  "new": "{m n : \u2115} (h : m \u2264 n) : Coprime n (n - m) \u2194 Coprime n m := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem coprime_self_sub_right {m n : \u2115} (h : m \u2264 n) : Coprime n (n - m) \u2194 Coprime n m := by\n  rw [Coprime, Coprime, gcd_self_sub_right h]"
  ]
 },
 {
  "old": "(a b c d : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hd : 0 \u2264 d) (hab : a + b + c + d = 4) : a * Real.sqrt (a * b) + b * Real.sqrt (b * c) + c * Real.sqrt (c * d) + d * Real.sqrt (d * a) + (3 * Real.sqrt 3 - 4) * Real.sqrt (a * b * c * d) \u2264 3 * Real.sqrt 3 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b : \u211d) (hab : 0 < a \u2227 0 < b) (h : a < b) : Real.log (1 + a / b) * Real.log (1 + b / a) < Real.log 2 ^ 2 := by",
  "new": "{a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have : 0 < 1 + a\u207b\u00b9 := by positivity\n  have : log (1 + a\u207b\u00b9) \u2264 1 + a\u207b\u00b9 - 1 := log_le_sub_one_of_pos this\n  simp at this\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have : 0 < 1 + a\u207b\u00b9 := by positivity\n  have h\u2080 : log (1 + a\u207b\u00b9) \u2264 1 + a\u207b\u00b9 - 1 := by\n    apply log_le_sub_one_of_pos\n    positivity\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have := log_le_sub_one_of_pos (show 0 < 1 + a\u207b\u00b9 by positivity)\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a^2 + 5 * b * c) / (b^2 + c^2) + (b^2 + 5 * c * a) / (c^2 + a^2) + (c^2 + 5 * a * b) / (a^2 + b^2) \u2265 9 * (a * b + b * c + c * a) / (a^2 + b^2 + c^2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := by\n    nlinarith\n  exact h'"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a / b + b / c + c / a + 3 * (a * b * c) ^ (1 / 3) / (a + b + c) \u2265 a / b + b / c + c / a + Real.sqrt (3 * a * b * c / (a ^ 3 + b ^ 3 + c ^ 3)) \u2227 a / b + b / c + c / a + Real.sqrt (3 * a * b * c / (a ^ 3 + b ^ 3 + c ^ 3)) >= 4) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]\n\ntheorem sqrt_sq (h : 0 \u2264 a) : \u221a(a ^ 2) = a := by rw [Real.sqrt_sq h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (Real.sqrt ((a + b) / c) + Real.sqrt ((b + c) / a) + Real.sqrt ((a + c) / b)) \u2265 2 * (6 * (a + b + c) ^ 3 / ((a + b) * (b + c) * (a + c))) ^ (1 / 4) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a^2 + b^2 + c^2 + a * b * c = 4) : a * b + b * c + c * a - a * b * c \u2264 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h2 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h2",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b k : \u211d) (ha : 0 < a) (hb : 0 < b) (hab : a + b = 2 * k^2) : Real.sqrt (2 * a^2 + 2 * b^2) + 4 * k * Real.sqrt a + 4 * k * Real.sqrt b \u2265 10 * k^2 - 2 * (2 * k - Real.sqrt a - Real.sqrt b) / k^3 * (a - b)^2 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  assumption"
  ]
 },
 {
  "old": ": 8^8 \u2261 3^8 [ZMOD 11] := by",
  "new": "(h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by\n  have h\u2081 := h.symm\n  have h\u2082 := Int.ModEq.dvd h\u2081\n  simp_all",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by\n  rcases h' with \u27e8c, rfl\u27e9\n  exact h.symm.trans (Int.ModEq.refl _)",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by\n  rw [Int.ModEq] at h \u22a2\n  rcases h' with \u27e8k, rfl\u27e9\n  omega",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by\n  rw [Int.ModEq] at *\n  omega",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by\n  rw [Int.ModEq] at h \u22a2\n  rcases h' with \u27e8k, rfl\u27e9\n  simpa [Int.add_emod, Int.mul_emod, h] using Int.mod_add_div b m"
  ]
 },
 {
  "old": "(x : \u211d) : x^2 - Real.sqrt x - 14 = 0 \u2194 x = 2 \u2228 x = 7 := by",
  "new": "(hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;> rw [\u2190 h] <;> simp [hx, hy]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor\n  intro h\n  rw [\u2190 h]\n  exact Real.sq_sqrt hx\n  intro h\n  rw [\u2190 h]\n  exact Real.sqrt_sq hy",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h\n  case mp => rw [\u2190 h, sq_sqrt hx]\n  case mpr => rw [\u2190 h, sqrt_sq hy]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor\n  intro h\n  rw [\u2190 h]\n  exact sq_sqrt hx\n  intro h\n  rw [\u2190 h]\n  exact sqrt_sq hy"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a + b + c = 3) : (Real.sqrt (a / (5 - a)) + Real.sqrt (b / (5 - b)) + Real.sqrt (c / (5 - c))) \u2264 3 / 2 := by",
  "new": "(hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_le_sqrt_iff (hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by\n  rw [Real.sqrt_le_sqrt_iff hy]"
  ]
 },
 {
  "old": ": 4 * (4 * (Real.sqrt 2 - 1) / 3) ^ 3 \u2264 4 * (3 - 2 * Real.sqrt 2) := by",
  "new": ": \u221a2 * \u221a2 = 2 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_two_mul_self : \u221a2 * \u221a2 = 2 := by\n  norm_num [Real.sqrt_eq_iff_mul_self_eq]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_two_mul_self : \u221a2 * \u221a2 = 2 := by\n  norm_num [Real.sqrt_eq_iff_sq_eq]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 1) : \u221a(ab / (ab + c)) + \u221a(bc / (bc + a)) + \u221a(ca / (ca + b)) \u2264 3 / 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) (hab : a * b + a + b = 3) : Real.sqrt (a^8 + b) + Real.sqrt (b^8 + a) \u2265 Real.sqrt (2 * a * b * (a + b + 2 * a * b)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c x y z : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hx : x = a + 1/b) (hy : y = b + 1/c) (hz : z = c + 1/a) : x * y + y * z + z * x \u2265 2 * (x + y + z) := by",
  "new": "(a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : (Real.sqrt (a * b)) ^ 2 = a * b := by rw [Real.sq_sqrt (mul_nonneg ha hb)]\n  nlinarith [sq_nonneg (a - b)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  nlinarith [sq_sqrt (mul_nonneg ha hb), sq_nonneg (a - b)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : (Real.sqrt (a * b)) ^ 2 = a * b := Real.sq_sqrt (mul_nonneg ha hb)\n  nlinarith [sq_nonneg (a - b), h]"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) : (a^2 + 1/b + 1)*(b^2 + 1/a + 1) \u2265 (3/(4:\u211d)^(1/3) + 1)^2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a^2 \u2265 b^2 + c^2) : 2 * a / (b + c) + b / (c + a) + c / (a + b) \u2265 3 * Real.sqrt 2 - 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [\u2190 Real.sqrt_sq h]\n  <;> simp [h]\n  <;> simp"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a^2 + b * c = 2) : 1 / (a^2 + 2) + 1 / (b^2 + 2) + 1 / (c^2 + 2) \u2264 (9 + 4 * Real.sqrt 2) / 12 + 1 / 6 * (a - 1)^2 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  exact h"
  ]
 },
 {
  "old": "(x y z a b : \u211d) (hx : x > 0 \u2227 y > 0 \u2227 z > 0 \u2227 x * y * z = 1) (hab : a \u2260 0 \u2228 b \u2260 0) : 1 / (a ^ 2 + x * |a * b| + b ^ 2) + 1 / (a ^ 2 + y * |a * b| + b ^ 2) + 1 / (a ^ 2 + z * |a * b| + b ^ 2) \u2264 3 / (a ^ 2 + |a * b| + b ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (1 / (a + b) + 1 / (b + c) + 1 / (c + a) = 2) \u2192 (Real.sqrt (a + b + c) \u2265 Real.sqrt a + Real.sqrt b + Real.sqrt c) := by",
  "new": "(hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_le_sqrt_iff (hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by\n  constructor <;> intro h\n  <;>\n  simp_all [sq_le_sq]\n  <;>\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_le_sqrt_iff (hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by\n  rw [Real.sqrt_le_sqrt_iff hy]"
  ]
 },
 {
  "old": "{a b c : \u211d} (hx: a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b > c) (hbc : b + c > a) (hca : a + c > b) : Real.sqrt (3 * (Real.sqrt (a * b) + Real.sqrt (b * c) + Real.sqrt (c * a))) \u2265 Real.sqrt (a + b - c) + Real.sqrt (b + c - a) + Real.sqrt (c + a - b) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) : Real.sqrt (a^2 + b^2) + Real.sqrt (b^2 + c^2) \u2265 (Real.sqrt 5 - 1) * Real.sqrt (a^2 + b + c^2) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a / (a ^ 2 + 2 * b * c) + b / (b ^ 2 + 2 * c * a) + c / (c ^ 2 + 2 * a * b) \u2264 (a + b + c) ^ 3 / (3 * (a * b + b * c + c * a) ^ 2)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (habc : a * b * c = 1) : (a * b * c = 1 \u2227 a > 0 \u2227 b > 0 \u2227 c > 0) \u2192 1 / (a * (a + 1) + a * b * (a * b + 1)) + 1 / (b * (b + 1) + b * c * (b * c + 1)) + 1 / (c * (c + 1) + c * a * (c * a + 1)) \u2265 3 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 3) : a^2 / (b^3 + a * b * c + c^3) + b^2 / (c^3 + a * b * c + a^3) + c^2 / (a^3 + a * b * c + b^3) \u2265 1 := by",
  "new": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) : a + b + c \u2265 3 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) : a + b + c \u2265 3 := by\n  nlinarith [pow_two (a + b + c), pow_two (a - b), pow_two (b - c), pow_two (c - a)]"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : 1 / 3 * Real.sqrt ((x + y + z) * (x*y + x*z + y*z) / ((y + z) * (z + x) * (x + y))) * Real.sqrt 2 + 1 \u2265 Real.sqrt (yz / ((z + x) * (x + y))) + Real.sqrt (xz / ((x + y) * (y + z))) + Real.sqrt (xy / ((y + z) * (z + x))) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a^2 + a * b + a * c - b * c) * (b^2 + b * c + b * a - c * a) * (c^2 + c * a + c * b - a * b) \u2264 8 * a^2 * b^2 * c^2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a * b + b * c + c * a = 3) : (Real.sqrt (1 / a + 2 * b) + Real.sqrt (1 / b + 2 * c) + Real.sqrt (1 / c + 2 * a) \u2264 3 * Real.sqrt 3 / Real.sqrt (a * b * c)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a \u2227 a \u2264 3 / 2) (hb : 0 \u2264 b \u2227 b \u2264 3 / 2) (hc : 0 \u2264 c \u2227 c \u2264 3 / 2) (hab : a + b + c + a * b * c = 4) : 203 / 26 \u2265 a + 2 * b + 3 * c \u2227 a + 2 * b + 3 * c \u2265 2 * Real.sqrt (38 / 3) - 11 / 6 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  linarith"
  ]
 },
 {
  "old": "(a : \u2115 \u2192 \u2115) (a0 : a 0 = 0) (a1 : a 1 = 5) (n : \u2115) : a n + a (n - 1) - 2 * a (n - 2) = 2 ^ n + n := by",
  "new": "(n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add, \u2190 sq]\n  ring_nf",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add, \u2190 sq]\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add]\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  simp [fib_add, two_mul]\n  ring"
  ]
 },
 {
  "old": "(x y : \u211d) : x + y + 1 / (x * y) \u2264 2 + Real.sqrt (3 - 2 * x * y) := by",
  "new": "(h : 0 \u2264 x) : \u221ax * \u221ax = x := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 x) : \u221ax * \u221ax = x := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(p q a b c d e : \u211d) (hp : 0 < p \u2227 0 < q) (hpq : p < q) (habcde : a \u2208 Set.Icc p q \u2227 b \u2208 Set.Icc p q \u2227 c \u2208 Set.Icc p q \u2227 d \u2208 Set.Icc p q \u2227 e \u2208 Set.Icc p q) : (a + b + c + d + e) * (1 / a + 1 / b + 1 / c + 1 / d + 1 / e) \u2264 25 + 6 * (Real.sqrt p / Real.sqrt q - Real.sqrt q / Real.sqrt p) ^ 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(n : \u2115) (M : Matrix (Fin n) (Fin n) \u211d) (hM : M.transpose = M) (hMk : \u2200 k : \u2115, M ^ k = 0) : M = 0 := by",
  "new": "[Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m) (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [Matrix.mul_apply, Equiv.toPEquiv_apply]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [Matrix.mul_apply, Equiv.toPEquiv_apply, Fintype.sum_equiv]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [mul_apply, Equiv.toPEquiv_apply]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [mul_apply, Equiv.toPEquiv_apply, submatrix_apply]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext\n  simp [Matrix.mul_apply, Equiv.toPEquiv_apply, Fintype.card_congr f]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [Matrix.mul_apply, Equiv.toPEquiv_apply, Fintype.sum_equiv f]"
  ]
 },
 {
  "old": "(a b c : \u211d) : a ^ 5 * c + (a * b * c) ^ 2 \u2265 (a ^ 3 + b ^ 3 + c ^ 3 + a * b * c) * a * b * c := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a + b + c = 3) : (ab / (3 + c ^ 2) + bc / (3 + a ^ 2) + ca / (3 + b ^ 2)) \u2264 3 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(k\u2081 k\u2082 a b : \u211d) (h\u2081 : 0 < k\u2081) (h\u2082 : 0 < k\u2082) (h\u2083 : 0 < a) (h\u2084 : 0 < b) : k\u2081 * k\u2082 * a^2 + k\u2081^2 * (1 + k\u2082^2) * a * b + k\u2081 * k\u2082 * b^2 \u2264 (k\u2081 + k\u2082)^2 * (a + b)^2 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": ": \u2200 n : \u2115, n = 3 * k + 2 \u2192 5 ^ n + 3 ^ n + 1 \u2261 (-1) ^ (k + 1) + 1 [ZMOD 7] := by",
  "new": "(h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by\n  simpa [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero] using h",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by\n  simp only [Int.ModEq, dvd_iff_mod_eq_zero, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  omega",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by\n  norm_num [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero]\n  exact h"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 4 / 9) : a ^ 4 / (a * b * (a + b)) + b ^ 4 / (b * c * (b + c)) + c ^ 4 / (c * a * (c + a)) \u2265 3 / (a + b + c) ^ 2 := by",
  "new": "(a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : (Real.sqrt (a * b))^2 = a * b := Real.sq_sqrt (mul_nonneg ha hb)\n  rw [pow_two] at h\n  nlinarith [sq_nonneg (a - b)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  nlinarith [sq_sqrt (mul_nonneg ha hb), sq_nonneg (a - b)]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a * b + b * c + c * a > 0) : 1 / (b * b - b * c + c * c) + 1 / (c * c - c * a + a * a) + 1 / (a * a - a * b + b * b) \u2265 3 / (a * b + b * c + c * a) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a * b + a * c + b * c \u2260 0) : (a^2 + b^2) / (c^2 + a * b) + (b^2 + c^2) / (a^2 + b * c) + (c^2 + a^2) / (b^2 + a * c) \u2265 3 + (a^2 + b^2 + c^2 - a * b - a * c - b * c) / (a * b + a * c + b * c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := by\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0) (hb : b > 0) (hc : c > 0) (habc : a * b * c = 1) : (a ^ 5 / (a ^ 3 + 1) + b ^ 5 / (b ^ 3 + 1) + c ^ 5 / (c ^ 3 + 1)) \u2265 3 / 2 := by",
  "new": "(a b : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) : a + b \u2265 2 * Real.sqrt (a * b) := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : (Real.sqrt (a * b)) ^ 2 = a * b := Real.sq_sqrt (by positivity)\n  nlinarith [sq_nonneg (a - b), ha, hb, h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : (Real.sqrt (a * b)) ^ 2 = a * b := Real.sq_sqrt (mul_nonneg ha hb)\n  rw [pow_two] at h\n  nlinarith [sq_nonneg (a - b)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : (Real.sqrt (a * b)) ^ 2 = a * b := by rw [Real.sq_sqrt (mul_nonneg ha hb)]\n  nlinarith [sq_nonneg (a - b), ha, hb, h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  nlinarith [sq_sqrt (mul_nonneg ha hb), sq_nonneg (a - b)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : a + b \u2265 2 * Real.sqrt (a * b) := by\n    calc\n      a + b \u2265 2 * Real.sqrt (a * b) := by\n        nlinarith [sq_sqrt (mul_nonneg ha hb), sq_nonneg (a - b)]\n      _ = 2 * Real.sqrt (a * b) := by rfl\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (habc : a + b + c > 0) (k : \u211d) (hk : k = Real.sqrt (13 + 16 * Real.sqrt 2)) : (k * a + b) / (a + c) + (k * b + c) / (b + a) + (k * c + a) / (c + b) \u2265 (3 * k + 3) / 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a + b + c) ^ 5 \u2265 27 * (a * b + b * c + c * a) * (a * b ^ 2 + b * c ^ 2 + c * a ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 1 / a + 1 / b + 1 / c) : (ab + bc + ca) * (Real.sqrt (ab) + Real.sqrt (bc) + Real.sqrt (ca)) ^ 2 \u2265 27 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : x \u2265 0) (hy : y \u2265 0) (hz : z \u2265 0) (h : x * y * z = 1) : (x ^ 3 / (y + 1) / (z + 1) + y ^ 3 / (x + 1) / (z + 1) + z ^ 3 / (y + 1) / (x + 1)) \u2264 (x ^ 4 + y ^ 4 + z ^ 4) / (x * y + y * z + z * x + 1) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0) (hb : b > 0) (hc : c > 0) (hab : a * b + b * c + c * a = 1) : 1 / (a * (c + a)) + 1 / (b * (a + b)) + 1 / (c * (b + c)) \u2265 9 / 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  rw [mul_comm a]\n  rw [mul_comm b]\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : a \u2265 0 \u2227 b \u2265 0) (hab : a^2 + b^2 = 2) : a^2 * b^2 + 4 * (a^3 + b^3) \u2265 9 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) : Real.sqrt ((a^3 + 3) / (a + 3)) + Real.sqrt ((b^3 + 3) / (b + 3)) + Real.sqrt ((b^3 + 3) / (b + 3)) \u2265 (2 * (a + b + c)) / 3 + 1 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) (hab : 0 < a * b) (hab' : 1 / Real.sqrt (a + 1) + 1 / Real.sqrt (b + 1) = 4 / Real.sqrt (a * b + 1)) : a + b \u2265 2 * (2 + Real.sqrt 7) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]\n\ntheorem sqrt_sq (h : 0 \u2264 a) : \u221a(a ^ 2) = a := by rw [Real.sqrt_sq h]"
  ]
 },
 {
  "old": "(k a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (k * a + b + c) * (1 / a + 1 / b + 1 / c) \u2265 k + 4 + (2 * k + 1) * Real.sqrt 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (h\u2080 : 0 < a \u2227 0 < b \u2227 0 < c) : a / (b + c) + b / (a + c) + c / (a + b) \u2265 1.5 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 0,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : (b - a) * c \u2264 0 := by nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(n r : \u2115) : ((n + 1 - 2 * r) / (n + 1 - r) * n.choose r : \u211a).den = 1 := by",
  "new": "{n k : \u2115} (hk : k \u2264 n) : choose n k = n ! / (k ! * (n - k)!) := by",
  "step": 21,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 choose_mul_factorial_mul_factorial hk, Nat.mul_assoc]\n  field_simp [Nat.factorial_ne_zero, Nat.factorial_mul_factorial_dvd_factorial hk]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  rw [Nat.choose_eq_factorial_div_factorial hk]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 choose_mul_factorial_mul_factorial hk, mul_assoc]\n  exact (Nat.mul_div_left _ (mul_pos (factorial_pos _) (factorial_pos _))).symm"
  ]
 },
 {
  "old": "(n m : \u2115) (x : Fin n \u2192 \u211d) (y : Fin m \u2192 \u211d) (a : Fin n \u2192 \u211d) (b : Fin m \u2192 \u211d) (hx : \u2211 i, x i = 0) (hy : \u2211 j, y j = 0) : 2 * \u2211 i, \u2211 j, x i * y j * |a i - b j| \u2265 \u2211 i, \u2211 j, x i * x j * |a i - a j| + \u2211 i, \u2211 j, y i * y j * |b i - b j| := by",
  "new": "{\u03b1 : Type*} [Fintype \u03b1] (a : \u03b1 \u2192 \u211d) (b : \u03b1 \u2192 \u211d) : (\u2211 i, a i) * \u2211 i, b i = \u2211 i, \u2211 j, a i * b j := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sum_mul_sum {\u03b1 : Type*} [Fintype \u03b1] (a : \u03b1 \u2192 \u211d) (b : \u03b1 \u2192 \u211d) :\n     (\u2211 i, a i) * \u2211 i, b i = \u2211 i, \u2211 j, a i * b j := by\n  simp only [Finset.sum_mul, Finset.mul_sum]\n  rw [Finset.sum_comm]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sum_mul_sum {\u03b1 : Type*} [Fintype \u03b1] (a : \u03b1 \u2192 \u211d) (b : \u03b1 \u2192 \u211d) :\n     (\u2211 i, a i) * \u2211 i, b i = \u2211 i, \u2211 j, a i * b j := by\n  simp_rw [Finset.sum_mul, Finset.mul_sum]"
  ]
 },
 {
  "old": "(a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0) : a * Real.sqrt (a^2 - a*c + c^2) \u2265 c^2 \u2227 b * Real.sqrt (b^2 - b*a + a^2) \u2265 a^2 \u2227 c * Real.sqrt (c^2 - c*b + b^2) \u2265 b^2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(n p m : \u2115) (h\u2080 : 0 < n \u2227 0 < p \u2227 0 < m) (h\u2081 : Nat.Prime p) (h\u2082 : p = Nat.minFac n) (h\u2083 : n + (n / p) = 10^m) : n = 75 := by",
  "new": "(n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  apply Iff.intro <;> intro h <;> simp_all [Nat.dvd_iff_mod_eq_zero, Nat.mod_two_of_bodd]\n  <;> rfl",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  constructor <;> intro h\n  <;> simp_all\n  <;> simp_all [Nat.dvd_iff_mod_eq_zero]\n  <;> contrapose! h\n  <;> simp_all [Nat.mod_eq_of_lt]\n  <;> omega"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : x \u2265 0) (hy : y \u2265 0) (hz : z \u2265 0) (h : x * y + x * z + y * z = 3) : (x^(3/4:\u211d) + y^(3/4:\u211d) + z^(3/4:\u211d)) \u2265 3 := by",
  "new": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (habc : a + b + c = 1) : a * b * c \u2264 a * b + b * c + c * a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)\n    (habc : a + b + c = 1) : a * b * c \u2264 a * b + b * c + c * a := by\n  have : 0 \u2264 a * b + b * c + c * a := by positivity\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]"
  ]
 },
 {
  "old": "{a b c : \u211d} (hx: a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b > c) (hbc : b + c > a) (hca : a + c > b) : (-a + b + c) ^ 3 / a ^ 2 + (a - b + c) ^ 3 / b ^ 2 + (a + b - c) ^ 3 / c ^ 2 >= a + b + c := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a^2 / b + b^2 / c + c^2 / a) \u2265 (a + b + c) * (a^2 + b^2 + c^2) / (a * b + b * c + c * a) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": ": \u00ac Summable (\u03bb k : \u2115 => (Nat.choose (2 * k) k) / (4 ^ k)) := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [Nat.cast_pos, one_div, summable_nat_pow_inv]\n  <;> norm_num\n  <;> intro h\n  <;> simpa [h] using summable_one_div_nat_pow.mp (by norm_num : Summable fun n : \u2115 => 1 / (n : \u211d) ^ p)"
  ]
 },
 {
  "old": "(x y : \u211d) : y = Real.sqrt (x ^ 2 + x + 1) - Real.sqrt (x ^ 2 - x + 1) \u2194 x = (y ^ 2 + 2) / (2 * y) := by",
  "new": "(hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;>\n  rw [\u2190 h] <;>\n  field_simp [hx, hy] <;>\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;>\n  rw [\u2190 h] <;>\n  simp [hx, hy]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;> rw [\u2190 h] <;> simp [hx, hy]\n  <;> apply Real.sqrt_sq\n  <;> linarith"
  ]
 },
 {
  "old": ": \u2200 a b : \u211d, a > 0 \u2227 b > 0 \u2227 a^2 + b = 1 \u2192 a / (2 * b + 1) + 2 * b / (a + 1) \u2265 2 - 2 / Real.sqrt 3 \u2227 a / (b + 1) + b / (a + 1) \u2265 1 - (Real.sqrt (71 - 17 * Real.sqrt 17)) / 4 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  apply Real.le_sqrt_of_sq_le\n  exact h"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a * b + b * c + c * a = 3) : 2 * (a + b + c) + 3 * a * b * c \u2265 b * c * Real.sqrt (4 * a ^ 2 + 5) + c * a * Real.sqrt (4 * b ^ 2 + 5) + a * b * Real.sqrt (4 * c ^ 2 + 5) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(n : \u2115) : (fib (n + 1) * fib (n + 2) * fib (n + 6)) - (fib (n + 3))^3 = (-1 : \u2124)^n * fib n := by",
  "new": "(n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  simp_all [fib_add, fib_two, Nat.succ_mul]\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  induction n <;> simp_all [fib_add, fib_one, Nat.succ_mul, Nat.mul_succ]\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add]\n  ring"
  ]
 },
 {
  "old": "(n : \u2115) (a b c : \u211d) (habc : a * b * c = 1) : 1 / (a^n * (b + c)) + 1 / (b^n * (c + a)) + 1 / (c^n * (a + b)) \u2265 3 / 2 := by",
  "new": "(a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h\u2080 : a + b \u2265 2 * Real.sqrt (a * b) := by\n    nlinarith [sq_sqrt (mul_nonneg ha hb), sq_nonneg (a - b)]\n  exact h\u2080",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  nlinarith [sq_sqrt (mul_nonneg ha hb), sq_nonneg (a - b)]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0 \u2227 b \u2265 0 \u2227 c \u2265 0) (hab : a + b + c = 3) : a * Real.sqrt b + b * Real.sqrt c + c * Real.sqrt a \u2264 3 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(x : \u211d) (hx : x = Real.sqrt (a * b)) : 2 * x ^ 2 * (1 - x) / (x + 1) \u2264 5 * Real.sqrt 5 - 11 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a / (b * (a ^ 2 + 2 * b ^ 2)) + b / (c * (b ^ 2 + 2 * c ^ 2)) + c / (a * (c ^ 2 + 2 * a ^ 2))) \u2265 3 / (b * c + c * a + a * b) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hz : 0 \u2264 z) (h : x + y + z \u2264 -1 + (3 / 4) * Real.sqrt 6) : (yz + 1) * (zx + 1) * (xy + 1) \u2265 (8 / 27) * (x + y + 1) * (y + z + 1) * (z + x + 1) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": ": \u2200 A B C : \u211d, sin (A + C) * sin B + sin B ^ 2 = sin B * (sin A * cos C + cos A * sin C) + sin B ^ 2 := by",
  "new": "(x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_add, Complex.sin_ofReal_re, Complex.mul_re, Complex.add_re]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  apply Real.sin_add",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_add, Complex.sin_ofReal_re, Complex.mul_re, Complex.add_re, Complex.cos_ofReal_re]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  simp [sin, cos, exp_add, Complex.sin_add]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [Real.sin_add]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_add, Complex.ofReal_add, Complex.ofReal_mul, Complex.ofReal_cos,\n    Complex.ofReal_sin]"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) (h : x + y + z = 4) : (x * y + y * z + z * x) \u2264 16/3 \u2227 (\u2203 x y z : \u211d, (x * y + y * z + z * x) = 16/3) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": ": \u2200 a b c R r : \u211d, a > 0 \u2227 b > 0 \u2227 c > 0 \u2227 R > 0 \u2227 r > 0 \u2192 a + b > c \u2227 a + c > b \u2227 b + c > a \u2192 Real.sqrt (a / (b + c - a)) + Real.sqrt (b / (c + a - b)) + Real.sqrt (c / (a + b - c)) \u2264 3 * Real.sqrt (R / (2 * r)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) (h : a ^ 5 + b ^ 5 + c ^ 5 = 3) : (a * b + a * c + b * c) * (a ^ 2 / b ^ 2 + b ^ 2 / c ^ 2 + c ^ 2 / a ^ 2) \u2265 9 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := by\n    apply mul_le_mul_of_nonpos_left _ hc\n    exact h\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : (a - b) * c \u2264 0 := by nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  rw [mul_comm a]\n  rw [mul_comm b]\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h2 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2080 : c \u2264 0 := hc\n  have h\u2081 : b \u2264 a := h\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : a^2 + b^2 + c^2 + 3 * (a * b * c) ^ (2 / 3) \u2265 2 * (a * b + b * c + a * c) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": ": (9:\u211d) / 8 < \u2211' n : \u2115, (1:\u211d) / (n ^ 3) \u2227 \u2211' n : \u2115, (1:\u211d) / (n ^ 3) < 5 / 4 := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases h : 1 < p\n  \u00b7 simpa using summable_one_div_pow hp h\n  \u00b7 simpa using not_summable_one_div_pow hp h"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2260 0) (hb : b \u2260 0) (hc : c \u2260 0) (hab : a + b \u2260 0) (hbc : b + c \u2260 0) (hca : a + c \u2260 0) : (1 / (2 * a ^ 2 + b * c) + 1 / (2 * b ^ 2 + c * a) + 1 / (2 * c ^ 2 + a * b) \u2265 1 / (a * b + b * c + a * c) + 2 / (a ^ 2 + b ^ 2 + c ^ 2)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * b \u2264 c * a := by\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 1 \u2264 x) (hy : 1 \u2264 y) (hz : 1 \u2264 z) (h : x * y + y * z + z * x = x * y * z) : Real.sqrt (x - 1) + Real.sqrt (y - 1) + Real.sqrt (z - 1) \u2264 Real.sqrt (2 * (x + y + z)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c d e : \u211d) : (b - a / 2) ^ 2 + (c - a / 2) ^ 2 + (d - a / 2) ^ 2 + (e - a / 2) ^ 2 = b ^ 2 + c ^ 2 + d ^ 2 + e ^ 2 - a * (b + c + d + e) + a ^ 2 / 4 * 4 := by",
  "new": "{a b c d e : \u211d} (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0) (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sq_add_sq_add_sq_add_sq_add_sq_eq_zero {a b c d e : \u211d}\n    (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0)\n    (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by\n  apply And.intro <;>\n    (try apply And.intro) <;>\n      (try apply And.intro) <;>\n        (try apply And.intro) <;>\n          (try apply And.intro) <;>\n            (try\n              (apply eq_of_sub_eq_zero\n                (by nlinarith)))",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sq_add_sq_add_sq_add_sq_add_sq_eq_zero {a b c d e : \u211d}\n    (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0)\n    (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by\n  exact \u27e8by nlinarith, by nlinarith, by nlinarith, by nlinarith, by nlinarith\u27e9",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sq_add_sq_add_sq_add_sq_add_sq_eq_zero {a b c d e : \u211d}\n    (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0)\n    (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by\n  have : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by\n    apply And.intro\n    \u00b7 nlinarith\n    \u00b7 apply And.intro\n      \u00b7 nlinarith\n      \u00b7 apply And.intro\n        \u00b7 nlinarith\n        \u00b7 apply And.intro\n          \u00b7 nlinarith\n          \u00b7 nlinarith\n  exact this",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sq_add_sq_add_sq_add_sq_add_sq_eq_zero {a b c d e : \u211d}\n    (h\u2080 : a \u2260 0 \u2228 b \u2260 0) (h\u2081 : a \u2260 0 \u2228 c \u2260 0) (h\u2082 : a \u2260 0 \u2228 d \u2260 0) (h\u2083 : a \u2260 0 \u2228 e \u2260 0)\n    (h\u2084 : a * a + b * b + c * c + d * d + e * e = 0) : a = 0 \u2227 b = 0 \u2227 c = 0 \u2227 d = 0 \u2227 e = 0 := by\n  exact\n    \u27e8by\n      nlinarith,\n      by\n      nlinarith,\n      by\n      nlinarith,\n      by\n      nlinarith,\n      by\n      nlinarith\u27e9"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) (h : x + y + z = 1) : (x * y / z + z * x / y + z * y / x) \u2265 (x + y + z) ^ 2 := by",
  "new": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (habc : a + b + c = 1) : a * b * c \u2264 a * b + b * c + c * a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem geom_mean_le_arith_mean3_weighted (a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c)\n    (habc : a + b + c = 1) : a * b * c \u2264 a * b + b * c + c * a := by\n  have h\u2081 : 0 \u2264 a * b * c := by positivity\n  nlinarith [mul_self_nonneg (a - b), mul_self_nonneg (b - c), mul_self_nonneg (c - a)]"
  ]
 },
 {
  "old": "(a b c : \u211d) : (1 / (a ^ 2 * b + b ^ 2 * c + c ^ 2 * a) + 1 / (a * b * c)) \u2265 4 / (a * b ^ 2 + b * c ^ 2 + c * a ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h\u2081"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a * b + b * c + c * a) ^ 2 \u2265 3 * a * b * c * (a + b + c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(\u03b1 : \u211d) (h : \u03b1 > 1) : Summable (fun n : \u2115 => (n! / \u220f i in Finset.Icc 1 n, (\u03b1 + i))) := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [Real.summable_nat_pow_inv]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simpa using Real.summable_one_div_nat_pow"
  ]
 },
 {
  "old": "(x y : \u211d) : (dy / dx) * (1 / y) = -(1 / 2) * (1 / (1 - x)) - (1 / 2) * (1 / (1 + x)) := by",
  "new": "(x : \u211d) : deriv (fun x => 1 / x) x = -(1 / x ^ 2) := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem deriv_one_div (x : \u211d) : deriv (fun x => 1 / x) x = -(1 / x ^ 2) := by\n  by_cases hx : x = 0\n  <;> simp [hx]\n  <;> field_simp\n  <;> simp [deriv_div_const]"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) : a^2 / b + b^2 / a - a - b \u2265 8 * (Real.sqrt a - Real.sqrt b)^2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (h : a ^ 2 + b ^ 4 + c ^ 2 = 1) : (4 * (3 : \u211d) ^ (1 / 4) - 6) / (3 * (27 : \u211d) ^ (1 / 4)) \u2264 a * b + b * c + a * b ^ 2 * c \u2227 a * b + b * c + a * b ^ 2 * c \u2264 (6 + 4 * (3 : \u211d) ^ (1 / 4)) / (3 * (27 : \u211d) ^ (1 / 4)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0)(hab : a + b^2 + c^2 = 4) : a^2 + b^2 + c^2 \u2265 15 / 4 := by",
  "new": "(a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b + c = 3) : a * b * c \u2264 1 := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b + c = 3) : a * b * c \u2264 1 := by\n  have : (a + b + c) ^ 3 = 27 := by rw [hab]; norm_num\n  have : a ^ 3 + b ^ 3 + c ^ 3 - 3 * a * b * c = (a + b + c) * ((a + b + c) ^ 2 - 3 * (a * b + a * c + b * c)) := by ring\n  rw [hab] at this\n  norm_num at this\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c)]"
  ]
 },
 {
  "old": "(x y z : \u211d) : 5 * (x * y + y * z + z * x) \u2265 5 * (x ^ 2 + y ^ 2 + z ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := by\n    apply mul_le_mul_of_nonpos_left _ hc\n    exact h\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b : \u2124) (ha : 0 < a) (hb : 0 < b) : |a * Real.sqrt 2 - b| > 1 / (2 * (a + b)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) : sin (2 * b - 2 * c) * cos a + sin (b - c) * cos (a - b - c) = sin (2 * b - 2 * c) * cos a + sin (b - c) * cos (a - b - c) := by",
  "new": ": sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sub_sin : sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) := by\n  have h\u2080 : x = (x - y) / 2 + (x + y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [sin_add, sin_sub, cos_add, cos_sub]\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sub_sin : sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) := by\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  have h\u2081 : x = (x - y) / 2 + (x + y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [sin_add, sin_sub, cos_add, cos_sub]\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sub_sin : sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) := by\n  have s1 := sin_add ((x + y) / 2) ((x - y) / 2)\n  have s2 := sin_sub ((x + y) / 2) ((x - y) / 2)\n  simp [div_add_div_same, div_sub_div_same, mul_sub, mul_add, sub_mul, add_mul] at s1 s2\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sub_sin : sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_sub_sin, Complex.ofReal_sub]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sub_sin : sin x - sin y = 2 * sin ((x - y) / 2) * cos ((x + y) / 2) := by\n  have h\u2081 : x = (x - y) / 2 + (x + y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [sin_add, sin_sub, cos_add, cos_sub]\n  ring"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a * b * (a + b) / (2 * a + b) * (a + 2 * b) + b * c * (b + c) / (2 * b + c) * (b + 2 * c) + c * a * (c + a) / (2 * c + a) * (c + 2 * a)) \u2264 (2 / 3) * (a ^ 2 + b ^ 2 + c ^ 2) * (a ^ 3 + b ^ 3 + c ^ 3) / (a * b + b * c + c * a) ^ 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(h\u2081 : 3 \u2264 20) : (Nat.choose 20 3 : \u211a) = (20! / (17! * 3!)) := by",
  "new": "{n k : \u2115} (hk : k \u2264 n) : choose n k = n ! / (k ! * (n - k)!) := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  rw [Nat.choose_eq_factorial_div_factorial hk]"
  ]
 },
 {
  "old": ": \u2200 x : \u211d, sin 3*x - sin x = 2*cos 2*x * sin x := by",
  "new": ": sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_three_mul : sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by\n  have h\u2080 : x + 2 * x = 3 * x := by ring\n  rw [\u2190 h\u2080, sin_add x (2 * x)]\n  simp only [cos_two_mul, sin_two_mul, cos_sq']\n  have h\u2081 : cos x * (2 * sin x * cos x) = 2 * sin x * cos x ^ 2 := by ring\n  rw [h\u2081, cos_sq']\n  ring_nf",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_three_mul : sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by\n  have h\u2081 : x + 2 * x = 3 * x := by ring\n  rw [\u2190 h\u2081, sin_add x (2 * x)]\n  simp only [cos_two_mul, sin_two_mul, cos_sq']\n  have h\u2082 : cos x * (2 * sin x * cos x) = 2 * sin x * cos x ^ 2 := by ring\n  rw [h\u2082, cos_sq']\n  ring"
  ]
 },
 {
  "old": "(m n : \u2115) (k : \u2115) : m = fib k \u2227 n = fib (k + 1) \u2194 m = 2 \u2227 n = 1 \u2228 m = 1 \u2227 n = 1 := by",
  "new": "(n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add]\n  ring"
  ]
 },
 {
  "old": ": \u00ac\u2203 S : Set \u2115, \u2200 n : \u2115, n \u2208 S \u2228 (\u2200 m : \u2115, m \u2208 S \u2192 Nat.Coprime n m) := by",
  "new": "{m n : \u2115} (h : m \u2264 n) : Coprime n (n - m) \u2194 Coprime n m := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem coprime_self_sub_right {m n : \u2115} (h : m \u2264 n) : Coprime n (n - m) \u2194 Coprime n m := by\n  rw [Coprime, Coprime, gcd_self_sub_right h]"
  ]
 },
 {
  "old": "(a b : \u211d) (hab : 0 < a \u2227 0 < b) (h : a < b) : Real.log (1 + a / b) * Real.log (1 + b / a) < Real.log 2 ^ 2 := by",
  "new": "{a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have := Real.log_le_sub_one_of_pos (by positivity : 0 < 1 + a\u207b\u00b9)\n  linarith [h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have : 0 < 1 + a\u207b\u00b9 := by positivity\n  have : a\u207b\u00b9 \u2260 0 := by aesop\n  have : log (1 + a\u207b\u00b9) \u2264 1 + a\u207b\u00b9 - 1 := by\n    apply log_le_sub_one_of_pos\n    positivity\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have : 0 < 1 + a\u207b\u00b9 := by positivity\n  linarith [log_le_sub_one_of_pos this]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a / b + b / c + c / a + 3 * (a * b * c) ^ (1 / 3) / (a + b + c) \u2265 a / b + b / c + c / a + Real.sqrt (3 * a * b * c / (a ^ 3 + b ^ 3 + c ^ 3)) \u2227 a / b + b / c + c / a + Real.sqrt (3 * a * b * c / (a ^ 3 + b ^ 3 + c ^ 3)) >= 4) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "{a : \u211d} (ha : a > 0) (n : \u2124) : (\u2203 k : \u2124, n - 1 / 2 \u2264 a * k \u2227 a * k < n + 1 / 2) \u2194 \u2203 k : \u2124, 0 \u2264 k - (n - 1) / (2 * a) \u2227 (k : \u211d) - (n - 1) / (2 * a) < 1 / a := by",
  "new": "{a : \u211d} (ha : a \u2260 0) (b : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) : \u2203 m n : \u2124, |a * m - b * n| \u2264 \u03b5 \u2227 |a * m - b * n| < |a| := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem exists_int_int_abs_mul_sub_le {a : \u211d} (ha : a \u2260 0) (b : \u211d) {\u03b5 : \u211d} (h\u03b5 : 0 < \u03b5) :\n    \u2203 m n : \u2124, |a * m - b * n| \u2264 \u03b5 \u2227 |a * m - b * n| < |a| := by\n  use 0, 0\n  constructor <;> simp_all\n  <;> linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a^2 + b^2 + c^2 + a * b * c = 4) : a * b + b * c + c * a - a * b * c \u2264 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": ": 8^8 \u2261 3^8 [ZMOD 11] := by",
  "new": "(h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by\n  rw [Int.ModEq] at h \u22a2\n  rcases h' with \u27e8k, rfl\u27e9\n  simp_all [Int.add_emod, Int.mul_emod]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by\n  obtain \u27e8k, rfl\u27e9 := h'\n  exact h.symm.trans (by simp [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero])",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by\n  cases' h' with k hk; subst_vars; exact h.symm",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by\n  rcases h' with \u27e8k, rfl\u27e9\n  exact h.symm.trans (Int.ModEq.symm (Int.ModEq.mul_right k (Int.ModEq.refl m)))",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191b \u2261 a [ZMOD m]) (h' : m \u2223 b) : a \u2261 b [ZMOD m] := by\n  cases' h' with k hk\n  rw [hk] at h\n  simp_all [Int.ModEq, Int.dvd_iff_emod_eq_zero]"
  ]
 },
 {
  "old": "(x : \u211d) : x^2 - Real.sqrt x - 14 = 0 \u2194 x = 2 \u2228 x = 7 := by",
  "new": "(hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;>\n  rw [\u2190 h] <;>\n  simp [sq, mul_comm, hx, hy]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;> rw [\u2190 h] <;> simp [hx, hy]\n  <;> apply sq_sqrt <;> assumption",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h\n  rw [\u2190 h]\n  exact Real.sq_sqrt hx\n  rw [\u2190 h]\n  exact Real.sqrt_sq hy",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor\n  intro h\n  rw [\u2190 h]\n  exact Real.sq_sqrt hx\n  intro h\n  rw [\u2190 h]\n  exact Real.sqrt_sq hy",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro H <;>\n  rw [\u2190 H] <;>\n  simp [sq, hx, hy]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;> rw [\u2190 h] <;> simp [sq, hx, hy]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a + b + c = 3) : (Real.sqrt (a / (5 - a)) + Real.sqrt (b / (5 - b)) + Real.sqrt (c / (5 - c))) \u2264 3 / 2 := by",
  "new": "(hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_le_sqrt_iff (hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by\n  rw [Real.sqrt_le_sqrt_iff hy]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_le_sqrt_iff (hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by\n  rw [Real.sqrt_le_sqrt_iff hy, \u2190 Real.sqrt_le_sqrt_iff hy]"
  ]
 },
 {
  "old": "(a b : \u211d) (hab : 0 \u2264 a \u2227 0 \u2264 b) (h : Real.sqrt (a ^ 2 + 3 * b) + Real.sqrt (b ^ 2 + 3 * a) + 2 * Real.sqrt (3 * a + 1) = 4) : a + b \u2264 (7 - Real.sqrt 33) / 2 := by",
  "new": "{a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem le_sqrt_of_sq_le {a b : \u211d} (h : a ^ 2 \u2264 b) : a \u2264 \u221ab := by\n  have : 0 \u2264 b := by nlinarith\n  exact by nlinarith [Real.le_sqrt_of_sq_le h]"
  ]
 },
 {
  "old": "(a b c x y z : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hx : x = a + 1/b) (hy : y = b + 1/c) (hz : z = c + 1/a) : x * y + y * z + z * x \u2265 2 * (x + y + z) := by",
  "new": "(a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  nlinarith [sq_sqrt (mul_nonneg ha hb), sq_nonneg (a - b)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : (Real.sqrt (a * b)) ^ 2 = a * b := by rw [Real.sq_sqrt (mul_nonneg ha hb)]\n  nlinarith [sq_nonneg (a - b), h]"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) : (a^2 + 1/b + 1)*(b^2 + 1/a + 1) \u2265 (3/(4:\u211d)^(1/3) + 1)^2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a / (a ^ 2 + b * c) + b / (b ^ 2 + c * a) + c / (c ^ 2 + a * b)) \u2265 3 * (a ^ 2 + b ^ 2 + c ^ 2) / (2 * (a ^ 3 + b ^ 3 + c ^ 3)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := by\n    nlinarith\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : \u221a(2 * a / (b + c)) + \u221a(2 * b / (c + a)) + \u221a(2 * c / (a + b)) \u2264 \u221a(3 * (a / b + b / c + c / a)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a^2 \u2265 b^2 + c^2) : 2 * a / (b + c) + b / (c + a) + c / (a + b) \u2265 3 * Real.sqrt 2 - 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) : Real.sqrt (a ^ 2 - a * b + b ^ 2) + Real.sqrt (b ^ 2 - b * c + c ^ 2) \u2265 Real.sqrt (c ^ 2 + c * a + a ^ 2) := by",
  "new": "(x : \u211d) : \u221a(x ^ 2) = |x| := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by\n  rw [sq, Real.sqrt_mul_self_eq_abs]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by\n  rw [\u2190 Real.sqrt_sq_eq_abs]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by\n  rw [sq, sqrt_mul_self_eq_abs]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by\n  rw [sq]\n  exact Real.sqrt_mul_self_eq_abs x",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_sq_eq_abs (x : \u211d) : \u221a(x ^ 2) = |x| := by\n  rw [sq, \u2190 abs_mul_abs_self x]\n  exact Real.sqrt_mul_self (abs_nonneg x)"
  ]
 },
 {
  "old": "(x y z a b : \u211d) (hx : x > 0 \u2227 y > 0 \u2227 z > 0 \u2227 x * y * z = 1) (hab : a \u2260 0 \u2228 b \u2260 0) : 1 / (a ^ 2 + x * |a * b| + b ^ 2) + 1 / (a ^ 2 + y * |a * b| + b ^ 2) + 1 / (a ^ 2 + z * |a * b| + b ^ 2) \u2264 3 / (a ^ 2 + |a * b| + b ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  rw [mul_comm a]\n  rw [mul_comm b]\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (1 / (a + b) + 1 / (b + c) + 1 / (c + a) = 2) \u2192 (Real.sqrt (a + b + c) \u2265 Real.sqrt a + Real.sqrt b + Real.sqrt c) := by",
  "new": "(hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_le_sqrt_iff (hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by\n  constructor <;> intro h\n  <;>\n  simp_all [sq_le_sq]\n  <;>\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_le_sqrt_iff (hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by\n  constructor <;> intro h\n  <;> simp_all [sq_le_sq]\n  <;> linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_le_sqrt_iff (hy : 0 \u2264 y) : \u221ax \u2264 \u221ay \u2194 x \u2264 y := by\n  rw [Real.sqrt_le_sqrt_iff hy]"
  ]
 },
 {
  "old": "{a b c : \u211d} (hx: a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b > c) (hbc : b + c > a) (hca : a + c > b) : Real.sqrt (3 * (Real.sqrt (a * b) + Real.sqrt (b * c) + Real.sqrt (c * a))) \u2265 Real.sqrt (a + b - c) + Real.sqrt (b + c - a) + Real.sqrt (c + a - b) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a : \u211d) (n : \u2115) : a > 0 \u2192 \u2200 \u03b5 : \u211d, \u03b5 > 0 \u2192 \u2203 N : \u2115, \u2200 n : \u2115, n \u2265 N \u2192 |n^2 * (a^(1/n) - a^(1/(n+1))) - Real.log a| < \u03b5 := by",
  "new": "{a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  rw [\u2190 sub_nonneg]\n  have := log_le_sub_one_of_pos (by positivity : 0 < 1 + a\u207b\u00b9)\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have := Real.log_le_sub_one_of_pos (by positivity : 0 < 1 + a\u207b\u00b9)\n  linarith [h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have h\u2081 : 0 < 1 + a\u207b\u00b9 := by positivity\n  have h\u2082 : 0 < a\u207b\u00b9 := by positivity\n  have h\u2083 : 0 \u2264 a\u207b\u00b9 := by positivity\n  have h\u2084 : 0 \u2264 1 + a\u207b\u00b9 := by positivity\n  have h\u2085 : 0 \u2264 a := by positivity\n  have h\u2086 : 0 \u2264 1 / a := by positivity\n  have h\u2087 : 0 \u2264 1 + 1 / a := by positivity\n  have h\u2088 : 0 \u2264 1 / a + 1 / a * a := by positivity\n  have h\u2089 : 0 \u2264 1 / a * a := by positivity\n  norm_num at *\n  linarith [Real.log_le_sub_one_of_pos h\u2081]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have h' : 0 < 1 + a\u207b\u00b9 := by\n    have : 0 < a\u207b\u00b9 := by\n      simpa using h\n    linarith\n  linarith [log_le_sub_one_of_pos h']"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a / (a ^ 2 + 2 * b * c) + b / (b ^ 2 + 2 * c * a) + c / (c ^ 2 + 2 * a * b) \u2264 (a + b + c) ^ 3 / (3 * (a * b + b * c + c * a) ^ 2)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (habc : a * b * c = 1) : (a * b * c = 1 \u2227 a > 0 \u2227 b > 0 \u2227 c > 0) \u2192 1 / (a * (a + 1) + a * b * (a * b + 1)) + 1 / (b * (b + 1) + b * c * (b * c + 1)) + 1 / (c * (c + 1) + c * a * (c * a + 1)) \u2265 3 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 3) : a^2 / (b^3 + a * b * c + c^3) + b^2 / (c^3 + a * b * c + a^3) + c^2 / (a^3 + a * b * c + b^3) \u2265 1 := by",
  "new": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) : a + b + c \u2265 3 := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) : a + b + c \u2265 3 := by\n  nlinarith [pow_two (a + b + c), pow_two (a - b), pow_two (b - c), pow_two (c - a)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) : a + b + c \u2265 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n    mul_self_nonneg (a + b + c)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) : a + b + c \u2265 3 := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (a - c), sq_nonneg (b - c), mul_self_nonneg (a + b + c)]"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : 1 / 3 * Real.sqrt ((x + y + z) * (x*y + x*z + y*z) / ((y + z) * (z + x) * (x + y))) * Real.sqrt 2 + 1 \u2265 Real.sqrt (yz / ((z + x) * (x + y))) + Real.sqrt (xz / ((x + y) * (y + z))) + Real.sqrt (xy / ((y + z) * (z + x))) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]\ntheorem mul_self_sqrt' (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a^2 + a * b + a * c - b * c) * (b^2 + b * c + b * a - c * a) * (c^2 + c * a + c * b - a * b) \u2264 8 * a^2 * b^2 * c^2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a * b + b * c + c * a = 3) : (Real.sqrt (1 / a + 2 * b) + Real.sqrt (1 / b + 2 * c) + Real.sqrt (1 / c + 2 * a) \u2264 3 * Real.sqrt 3 / Real.sqrt (a * b * c)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a : \u2115 \u2192 \u2115) (a0 : a 0 = 0) (a1 : a 1 = 5) (n : \u2115) : a n + a (n - 1) - 2 * a (n - 2) = 2 ^ n + n := by",
  "new": "(n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add]\n  ring"
  ]
 },
 {
  "old": "(n : \u2115) (M : Matrix (Fin n) (Fin n) \u211d) (hM : M.transpose = M) (hMk : \u2200 k : \u2115, M ^ k = 0) : M = 0 := by",
  "new": "[Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m) (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [Matrix.mul_apply, Equiv.toPEquiv_apply, Fintype.card_fin]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [Matrix.mul_apply, Equiv.toPEquiv_apply, Fintype.sum_equiv f]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Matrix.toPEquiv_mul_matrix [Fintype m] [DecidableEq m] [Semiring \u03b1] (f : m \u2243 m)\n     (M : Matrix m n \u03b1) : f.toPEquiv.toMatrix * M = M.submatrix f id := by\n  ext i j\n  simp [Matrix.mul_apply, Matrix.submatrix_apply, Equiv.toPEquiv_apply]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a + b + c = 3) : (ab / (3 + c ^ 2) + bc / (3 + a ^ 2) + ca / (3 + b ^ 2)) \u2264 3 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : c \u2264 0 := hc\n  have h\u2082 : b \u2264 a := h\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": ": \u2200 n : \u2115, n = 3 * k + 2 \u2192 5 ^ n + 3 ^ n + 1 \u2261 (-1) ^ (k + 1) + 1 [ZMOD 7] := by",
  "new": "(h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by\n  simpa [Int.ModEq, Int.emod_eq_emod_iff_emod_sub_eq_zero] using h",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_of_dvd' (h : \u2191n \u2223 x - y) : x \u2261 y [ZMOD n] := by\n  exact Eq.symm (Int.modEq_iff_dvd.mpr h)"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 4 / 9) : a ^ 4 / (a * b * (a + b)) + b ^ 4 / (b * c * (b + c)) + c ^ 4 / (c * a * (c + a)) \u2265 3 / (a + b + c) ^ 2 := by",
  "new": "(a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  nlinarith [sq_sqrt (mul_nonneg ha hb), sq_nonneg (a - b)]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a * b + b * c + c * a > 0) : 1 / (b * b - b * c + c * c) + 1 / (c * c - c * a + a * a) + 1 / (a * a - a * b + b * b) \u2265 3 / (a * b + b * c + c * a) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a * b + a * c + b * c \u2260 0) : (a^2 + b^2) / (c^2 + a * b) + (b^2 + c^2) / (a^2 + b * c) + (c^2 + a^2) / (b^2 + a * c) \u2265 3 + (a^2 + b^2 + c^2 - a * b - a * c - b * c) / (a * b + a * c + b * c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0) (hb : b > 0) (hc : c > 0) (habc : a * b * c = 1) : (a ^ 5 / (a ^ 3 + 1) + b ^ 5 / (b ^ 3 + 1) + c ^ 5 / (c ^ 3 + 1)) \u2265 3 / 2 := by",
  "new": "(a b : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) : a + b \u2265 2 * Real.sqrt (a * b) := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : (Real.sqrt (a * b)) ^ 2 = a * b := by rw [Real.sq_sqrt (mul_nonneg ha hb)]\n  nlinarith [sq_nonneg (a - b), ha, hb, h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : a * b \u2265 0 := mul_nonneg ha hb\n  have h1 : (Real.sqrt (a * b)) ^ 2 = a * b := by rw [Real.sq_sqrt h]\n  nlinarith [sq_nonneg (a - b), h1]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem AM_GM_inequality (a b : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) : a + b \u2265 2 * Real.sqrt (a * b) := by\n  have h : (Real.sqrt (a * b)) ^ 2 = a * b := by\n    rw [Real.sq_sqrt]\n    exact mul_nonneg ha hb\n  nlinarith [sq_nonneg (a - b), h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a + b + c) ^ 5 \u2265 27 * (a * b + b * c + c * a) * (a * b ^ 2 + b * c ^ 2 + c * a ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  rw [mul_comm a]\n  rw [mul_comm b]\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : x \u2265 0) (hy : y \u2265 0) (hz : z \u2265 0) (h : x * y * z = 1) : (x ^ 3 / (y + 1) / (z + 1) + y ^ 3 / (x + 1) / (z + 1) + z ^ 3 / (y + 1) / (x + 1)) \u2264 (x ^ 4 + y ^ 4 + z ^ 4) / (x * y + y * z + z * x + 1) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * b \u2264 c * a := by nlinarith\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0) (hb : b > 0) (hc : c > 0) (hab : a * b + b * c + c * a = 1) : 1 / (a * (c + a)) + 1 / (b * (a + b)) + 1 / (c * (b + c)) \u2265 9 / 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c d : \u211d) (h : a * b + a * c + a * d + b * c + b * d + c * d = 6) : a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 + (2 + Real.sqrt 2) / 2 * (a * b * c + a * b * d + a * c * d + b * c * d) \u2265 2 * (4 + Real.sqrt 2) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : a \u2265 0 \u2227 b \u2265 0) (hab : a^2 + b^2 = 2) : a^2 * b^2 + 4 * (a^3 + b^3) \u2265 9 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : (a - b) * c \u2264 0 := by nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a^2 + b^2 + c^2 = 3) : (a + Real.sqrt (b * c)) / (Real.sqrt (b * c) + Real.sqrt (b * c + 3)) + (b + Real.sqrt (c * a)) / (Real.sqrt (c * a) + Real.sqrt (c * a + 3)) + (c + Real.sqrt (a * b)) / (Real.sqrt (a * b) + Real.sqrt (a * b + 3)) \u2264 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) : Real.sqrt ((a^3 + 3) / (a + 3)) + Real.sqrt ((b^3 + 3) / (b + 3)) + Real.sqrt ((b^3 + 3) / (b + 3)) \u2265 (2 * (a + b + c)) / 3 + 1 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) (hab : 0 < a * b) (hab' : 1 / Real.sqrt (a + 1) + 1 / Real.sqrt (b + 1) = 4 / Real.sqrt (a * b + 1)) : a + b \u2265 2 * (2 + Real.sqrt 7) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(k a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (k * a + b + c) * (1 / a + 1 / b + 1 / c) \u2265 k + 4 + (2 * k + 1) * Real.sqrt 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (h\u2080 : 0 < a \u2227 0 < b \u2227 0 < c) : a / (b + c) + b / (a + c) + c / (a + b) \u2265 1.5 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 22,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (h1 : a + b + c = 5) (h2 : 1 / a + 1 / b + 1 / c = 1 / 5) : a ^ 3 + b ^ 3 + c ^ 3 \u2264 125 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b \u03b1 \u03b2 : \u211d) (ha : 0 \u2264 a \u2227 a \u2264 1) (hb : 0 \u2264 b \u2227 b \u2264 1) (h\u03b1 : 0 \u2264 \u03b1 \u2227 \u03b1 \u2264 Real.pi / 2) (h\u03b2 : 0 \u2264 \u03b2 \u2227 \u03b2 \u2264 Real.pi / 2) (hab : a * b * Real.cos (\u03b1 - \u03b2) \u2264 Real.sqrt ((1 - a ^ 2) * (1 - b ^ 2))) : a * Real.cos \u03b1 + b * Real.sin \u03b2 \u2264 1 + a * b * Real.sin (\u03b2 - \u03b1) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(n m : \u2115) (x : Fin n \u2192 \u211d) (y : Fin m \u2192 \u211d) (a : Fin n \u2192 \u211d) (b : Fin m \u2192 \u211d) (hx : \u2211 i, x i = 0) (hy : \u2211 j, y j = 0) : 2 * \u2211 i, \u2211 j, x i * y j * |a i - b j| \u2265 \u2211 i, \u2211 j, x i * x j * |a i - a j| + \u2211 i, \u2211 j, y i * y j * |b i - b j| := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c d x r r1 r2 s : \u211d) (h1 : b * m = x) (h2 : a * m = d) (h3 : r1 = c + x - d) (h4 : r2 = a + b - x - d) (h5 : r = b - c) (h6 : s = a + b + c + d) : r1 / r = (c + x - d) / (2 * (s - b)) \u2227 r / r2 = (2 * (s - c)) / (a + b - x - d) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (h : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 0) : a * Real.sqrt (a^2 - a*c + c^2) \u2265 c^2 \u2227 b * Real.sqrt (b^2 - b*a + a^2) \u2265 a^2 \u2227 c * Real.sqrt (c^2 - c*b + b^2) \u2265 b^2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [mul_comm]\n  exact Real.mul_self_sqrt h"
  ]
 },
 {
  "old": "(a b c d : \u211d) (h1 : a \u2265 b \u2227 b \u2265 c \u2227 c \u2265 d) (h2 : a \u2264 1) : 3 + a * b * c * d - (a + b + c + d) \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := by\n    nlinarith\n  exact h'"
  ]
 },
 {
  "old": "(a b c d : \u211d) (h1 : a > b \u2227 b > 0) (h2 : c > d \u2227 d > 0) (h3 : a^2 - b^2 = c^2 - d^2) : (a - b)^2 + (c - d)^2 / (a - b) / (c - d) < (a^2 + b^2 + c^2 + d^2) / (a * d + b * c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(n : \u2115) (a b c : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (habc : a + b + c = a * b + b * c + c * a) : a ^ n + b ^ n + c ^ n + a ^ (n - 2) + b ^ (n - 2) + c ^ (n - 2) \u2265 2 * (a ^ (n - 1) + b ^ (n - 1) + c ^ (n - 1)) + (a - 1) ^ 2 + (b - 1) ^ 2 + (c - 1) ^ 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) (hab : 1/a + 1/b + 1/(7*a*b) = 7) : a + 2*b \u2265 1 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) (h : 1 / a + 1 / b + 1 / c + a * b * c / (a ^ 3 + b ^ 3 + c ^ 3) = 3) : a + b + c >= 27 / 8 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) (habc : 0 < a * b * c) (habc2 : a * b + b * c + c * a + a * b * c = 4) : 1 / a + 1 / b + 1 / c + 15 / (a + b + c) \u2265 8 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    apply mul_le_mul_of_nonpos_right _ hc\n    linarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h\u2081"
  ]
 },
 {
  "old": "(n p m : \u2115) (h\u2080 : 0 < n \u2227 0 < p \u2227 0 < m) (h\u2081 : Nat.Prime p) (h\u2082 : p = Nat.minFac n) (h\u2083 : n + (n / p) = 10^m) : n = 75 := by",
  "new": "(n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  constructor <;> intro h <;> simp_all [dvd_iff_mod_eq_zero]\n  all_goals\n    rcases n with (_ | _ | _) <;> simp_all [Nat.minFac]\n  <;> omega",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem minFac_eq_two_iff (n : \u2115) : minFac n = 2 \u2194 2 \u2223 n := by\n  apply Iff.intro <;> intro <;>\n  simp_all [Nat.dvd_iff_mod_eq_zero, Nat.minFac_le_of_dvd, Nat.minFac_prime, Nat.prime_two]\n  all_goals\n    omega"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : a / b + (3 * b + c) ^ 2 / (3 * c + b) ^ 2 + (2 * c + a) ^ 3 / (2 * a + c) ^ 3 \u2265 3 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a^4 / (b^2 + c^2) + b^4 / (c^2 + a^2) + c^4 / (a^2 + b^2) + 12 * Real.sqrt 6 * (a * b + b * c + c * a) \u2265 15 * (a^2 + b^2 + c^2)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h2 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h2"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : x \u2265 0) (hy : y \u2265 0) (hz : z \u2265 0) (h : x * y + x * z + y * z = 3) : (x^(3/4:\u211d) + y^(3/4:\u211d) + z^(3/4:\u211d)) \u2265 3 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a - b \u2265 0 := by linarith\n  nlinarith"
  ]
 },
 {
  "old": "(n : \u2115) (x : \u2115 \u2192 \u211d) (hx : \u2200 i, 0 < x i) (h : \u2211 i in Finset.range n, 1 / (1 + x i) \u2265 n - 1) : \u2211 i in Finset.range n, 1 / x i \u2265 n * (n - 1) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := by\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    apply mul_le_mul_of_nonpos_right _ hc\n    exact h\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (hab : a \u2265 -1 \u2227 b \u2265 -1 \u2227 c \u2265 -1) : a^2 + b^2 + c^2 + 2 * a * b * c \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(m : \u2115) (c : \u2115) (f : \u2115 \u2192 \u2115) (hf: f 0 = 0 \u2227 f 1 = 1 \u2227 \u2200 n, f (n + 2) = c * f (n + 1) + f n) : \u2203 d : \u2115, \u2200 n : \u2115, m \u2223 f (f n) \u2194 d \u2223 n := by",
  "new": "(n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add]\n  ring_nf"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hz : 0 \u2264 z) (h : x^3 + y^3 + z^3 = 3) : (x^4 * y^2 / (y + z) * (y^3 * z^2 + z^3 * x^2) + y^4 * z^2 / (z + x) * (z^3 * x^2 + x^3 * y^2) + z^4 * x^2 / (x + y) * (x^3 * y^2 + y^3 * z^2) \u2265 3) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := by\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a / (a + b)) ^ 2 + (b / (b + c)) ^ 2 + (c / (c + a)) ^ 2 >= 3 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : a^3 + b^3 + c^3 + 3*a*b*c \u2265 a*b*(a+b) + b*c*(b+c) + c*a*(c+a) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := by\n    apply mul_le_mul_of_nonpos_left h\n    linarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : c * a \u2264 c * b := by\n    apply mul_le_mul_of_nonpos_left\n    \u00b7 exact h\n    \u00b7 exact hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : x \u2265 0) (hy : y \u2265 0) (hz : z \u2265 0) (h : |x + y + z - x*y*z| \u2264 2) : (x - 1)*(y - 1)*(z - 1) \u2264 1 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) : (3 * a ^ 3 + a * b * c) / (b ^ 3 + c ^ 3) + (3 * b ^ 3 + a * b * c) / (c ^ 3 + a ^ 3) + (3 * c ^ 3 + a * b * c) / (a ^ 3 + b ^ 3) \u2265 6 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "{a b c : \u211d} (hx: a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b > c) (hbc : b + c > a) (hca : a + c > b) : (-a + b + c) ^ 3 / a ^ 2 + (a - b + c) ^ 3 / b ^ 2 + (a + b - c) ^ 3 / c ^ 2 >= a + b + c := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a^2 / b + b^2 / c + c^2 / a) \u2265 (a + b + c) * (a^2 + b^2 + c^2) / (a * b + b * c + c * a) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": ": \u00ac Summable (\u03bb k : \u2115 => (Nat.choose (2 * k) k) / (4 ^ k)) := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp [Nat.cast_le, summable_nat_pow_inv]"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : Real.sqrt (yz / (5 * x ^ 2 + 4 * yz)) + Real.sqrt (zx / (5 * y ^ 2 + 4 * zx)) + Real.sqrt (xy / (5 * z ^ 2 + 4 * xy)) \u2265 Real.sqrt ((xy + zx + yz) / (3 * x ^ 2 - 2 * xy - 2 * zx + 3 * y ^ 2 - 2 * yz + 3 * z ^ 2)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a / (b + 2 * c))^(1 / 3) + (b / (a + 2 * c))^(1 / 3) + 2 * (c / (a + b + c))^(1 / 3) > 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : (a - b) * c \u2264 0 := by nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0) (hb : b > 0) (hc : c > 0) (habc : a * b * c = 1) (h : a^2 + b^2 + c^2 = 3 / 2) : 1 / a + 1 / b - 1 / c < 1 / abc := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := by\n    nlinarith\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 1) : (a^3 - ab^3 + c^3)/(a^3 + 2 * b^3 + c^3) + (b^3 - bc^3 + a^3)/(b^3 + 2 * c^3 + a^3) + (c^3 - ca^3 + b^3)/(c^3 + 2 * a^3 + b^3) \u2265 5/4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    apply mul_le_mul_of_nonpos_right _ hc\n    linarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by nlinarith\n  linarith"
  ]
 },
 {
  "old": "(x : \u211d) (t : \u211d) (h\u2081 : t = Real.tan (x / 2)) : (Real.sqrt (225 * t ^ 4 + 706 * t ^ 2 + 225) - 34 * t) / (15 * (t ^ 2 - 1)) = (17 - 2 * Real.sqrt 91) / (5 * Real.sqrt 3) := by",
  "new": "{x : \u211d} (h : 0 < x) : \u221a(x / x) = 1 := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_div_self' {x : \u211d} (h : 0 < x) : \u221a(x / x) = 1 := by\n  rw [div_self h.ne', Real.sqrt_one]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_div_self' {x : \u211d} (h : 0 < x) : \u221a(x / x) = 1 := by\n  rw [div_self h.ne']\n  rw [Real.sqrt_one]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_div_self' {x : \u211d} (h : 0 < x) : \u221a(x / x) = 1 := by\n  rw [div_self h.ne']\n  rw [Real.sqrt_eq_one]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0) (hb : b > 0) (hc : c > 0) (habc : a + b + c = 1) : (a + 1/a)^2 + (b + 1/b)^2 + (c + 1/c)^2 \u2265 21 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    apply mul_le_mul_of_nonpos_right _ hc\n    exact h\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(x : \u211d) : x^2 - 10*x - (69 - Real.sqrt 960) = 0 \u2194 x = 5 + Real.sqrt 40 \u2228 x = 5 - Real.sqrt 40 := by",
  "new": "(hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h\n  rw [\u2190 h]\n  exact Real.sq_sqrt hx\n  rw [\u2190 h]\n  exact Real.sqrt_sq hy",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor\n  intro h\n  rw [\u2190 h]\n  exact sq_sqrt hx\n  intro h\n  rw [\u2190 h]\n  exact sqrt_sq hy"
  ]
 },
 {
  "old": "(a b c : \u211d) : 2 * (a ^ 3 + b ^ 3 + c ^ 3) \u2265 a * b * (a + b) + b * c * (b + c) + c * a * (c + a) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : c \u2264 0 := hc\n  have h\u2082 : b \u2264 a := h\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c d : \u211d) (hab : 1 \u2264 a \u2227 a \u2264 2) (hbc : 1 \u2264 b \u2227 b \u2264 2) (hcd : 1 \u2264 c \u2227 c \u2264 2) (hda : 1 \u2264 d \u2227 d \u2264 2) : |(a - b) * (b - c) * (c - d) * (d - a)| \u2264 (a * b * c * d) / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := by\n    nlinarith\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  rw [mul_comm a]\n  rw [mul_comm b]\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (habc : a + b + c = 3) : (a^2 / (a + 3) + b^2 / (b + 3) + c^2 / (c + 3) + (3 * (a^2 * b^2 * c^2)^(1 / 3)) / 4 \u2264 3 / 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (2 * a / Real.sqrt (3 * a + b) + 2 * b / Real.sqrt (3 * b + c) + 2 * c / Real.sqrt (3 * c + a)) \u2264 Real.sqrt (3 * a + 3 * b + 3 * c) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c k : \u211d) : (b + c) ^ 2 * (c + a) ^ 2 * (a + b) ^ 2 - 64 * (k * b * c + a ^ 2) * (k * c * a + b ^ 2) * (k * a * b + c ^ 2) / (k + 1) ^ 3 \u2264 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * b \u2265 c * a := by\n    apply mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 3) : (1 / (2 * a + b * c) + 1 / (2 * b + c * a) + 1 / (2 * c + a * b)) \u2264 (3 / (b * c + c * a + a * b)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (habc : a * b * c + a + b = 4) (habc : a * b * c + a * b + 2 * c = 7) : (a * b + 1) * (b * c + 1) * (c * a + 1) \u2264 18 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := by\n    nlinarith\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c d x y u v : \u211d) (h\u2081 : a + c = x) (h\u2082 : b + d = y) (h\u2083 : ac = u^2) (h\u2084 : bd = v^2) : 16 * (u^4 + v^4) - 8 * (u^2 + v^2) * x * y + (x^2 + y^2) * x * y \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a * b + b * c + c * a = 3) : 2 * (a + b + c) + 3 * a * b * c \u2265 b * c * Real.sqrt (4 * a ^ 2 + 5) + c * a * Real.sqrt (4 * b ^ 2 + 5) + a * b * Real.sqrt (4 * c ^ 2 + 5) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]\ntheorem sqrt_nonneg (a : \u211d) : 0 \u2264 \u221aa := by apply Real.sqrt_nonneg",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c d : \u211d) (ha2b2 : a^2 + b^2 = 1 / 32) (hcd : c * d = 1) : (a - d)^2 + (b - c)^2 \u2265 49 / 32 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    apply mul_le_mul_of_nonpos_right _ hc\n    exact h\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (1 + a * b) * (1 + b * c) * (1 + c * a) = 8 \u2192 a + b + c \u2265 a * b * c := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(p q r a b c s : \u211d) (hp : p + q + r = \u03c0) (hp1 : 0 < p \u2227 0 < q \u2227 0 < r) (hq1 : p + q > r) (hq2 : p + r > q) (hq3 : q + r > p) (ha : a = sin (2 * p)) (hb : b = sin (2 * q)) (hc : c = sin (2 * r)) (hs : s = (a + b + c) / 2) : s * (s - a) * (s - b) * (s - c) \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * b \u2264 c * a := by\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  exact this",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c m n : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 3) (hm : m >= 1) (hn : n >= 8) : (m * a ^ 3 + 2) / (a ^ 2 + n * b) + (m * b ^ 3 + 2) / (b ^ 2 + n * c) + (m * c ^ 3 + 2) / (c ^ 2 + n * a) >= (3 * (m + 2)) / (n + 1) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a + b + c = 3) : (3 * a - b * c) * (3 * b - c * a) * (3 * c - a * b) \u2264 8 * a * b * c := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : x*y*z \u2265 (2*x - y)*(2*y - z)*(2*z - x) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2208 Set.Icc 0 1) (hb : b \u2208 Set.Icc 0 1) (hc : c \u2208 Set.Icc 0 1) : (1 + 3 * a * b) / (1 + c) / (a + b) + (1 + 3 * b * c) / (1 + a) / (b + c) + (1 + 3 * c * a) / (1 + b) / (c + a) \u2265 3 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this"
  ]
 },
 {
  "old": "(a b c A : \u211d) : A = a * b / (a * b + c) + b * c / (b * c + a) + c * a / (c * a + b) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(n : \u2115) : (fib (n + 1) * fib (n + 2) * fib (n + 6)) - (fib (n + 3))^3 = (-1 : \u2124)^n * fib n := by",
  "new": "(n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add]\n  ring"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) : (a^2 + 3 * b)/(b + c) + (b^2 + 3 * c)/(c + a) + (c^2 + 3 * a)/(a + b) \u2265 5 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(n : \u2115) (a b c : \u211d) (habc : a * b * c = 1) : 1 / (a^n * (b + c)) + 1 / (b^n * (c + a)) + 1 / (c^n * (a + b)) \u2265 3 / 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a / (b + c)) ^ 2 + (b / (c + a)) ^ 2 + (c / (a + b)) ^ 2 + (15 * (abc)^(1/3)) / (4 * (a + b + c)) \u2265 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (5 * (a + b + c) + 3 / (abc)) = 5 * (a + b + c) + 3 / (a * b * c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h2 : a * c \u2264 b * c := by\n    nlinarith\n  exact h2",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": ": \u2200 a b c : \u211d, a > 0 \u2227 b > 0 \u2227 c > 0 \u2192 1 / (a ^ 2 + 3) + 1 / (b ^ 2 + 3) + 1 / (c ^ 2 + 3) \u2264 3 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "{x y z : \u211d} : (x - y) ^ 2 * (x + y) * (x + y - z) + (y - z) ^ 2 * (y + z) * (y + z - x) + (z - x) ^ 2 * (z + x) * (z + x - y) \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0 \u2227 b \u2265 0 \u2227 c \u2265 0) (hab : a + b + c = 3) : a * Real.sqrt b + b * Real.sqrt c + c * Real.sqrt a \u2264 3 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(x : \u211d) (hx : x = Real.sqrt (a * b)) : 2 * x ^ 2 * (1 - x) / (x + 1) \u2264 5 * Real.sqrt 5 - 11 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [mul_comm]\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a / (b * (a ^ 2 + 2 * b ^ 2)) + b / (c * (b ^ 2 + 2 * c ^ 2)) + c / (a * (c ^ 2 + 2 * a ^ 2))) \u2265 3 / (b * c + c * a + a * b) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (k p : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hk : k > p) (hp : p >= 0) : (a^k / (b^p + c^p) + b^k / (c^p + a^p) + c^k / (a^p + b^p)) \u2265 (3^(1 - k + p) / 2) * (a + b + c)^(k - p) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (h\u2080 : x - 5 = -(z - 5) * (3 * z^2 + 15 * z + 19)) (h\u2081 : y - 5 = -(x - 5) * (2 * x^2 + 10 * x + 13)) (h\u2082 : z - 5 = -(y - 5) * (y^2 + 5 * y + 7)) (h\u2083 : 0 \u2264 x \u2227 0 \u2264 y \u2227 0 \u2264 z) : x = 5 \u2227 y = 5 \u2227 z = 5 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h2 : a * c \u2264 b * c := by\n    nlinarith\n  exact h2",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : x \u2265 0 \u2227 y \u2265 0 \u2227 z \u2265 0) (h : x + y + z = 1) : 8 \u2264 (x + 1) * (y + 2) * (z + 3) \u2227 (x + 1) * (y + 2) * (z + 3) \u2264 12 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": ": \u2200 A B C : \u211d, sin (A + C) * sin B + sin B ^ 2 = sin B * (sin A * cos C + cos A * sin C) + sin B ^ 2 := by",
  "new": "(x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_add, Complex.ofReal_add, Complex.ofReal_mul, Complex.ofReal_cos,\n    Complex.ofReal_sin]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_add, Complex.sin_ofReal_re, Complex.mul_re, Complex.add_re, Complex.cos_ofReal_re]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_add, Complex.cos_add, Complex.sin_ofReal_re, Complex.cos_ofReal_re]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_add (x y : \u211d) : sin (x + y) = sin x * cos y + cos x * sin y := by\n  rw [\u2190 Complex.ofReal_inj]\n  simp [Complex.sin_add, Complex.sin_ofReal_re, Complex.mul_re, Complex.add_re]"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) (h : x + y + z = 4) : (x * y + y * z + z * x) \u2264 16/3 \u2227 (\u2203 x y z : \u211d, (x * y + y * z + z * x) = 16/3) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * b \u2264 c * a := by nlinarith\n  nlinarith"
  ]
 },
 {
  "old": ": \u2200 a b c R r : \u211d, a > 0 \u2227 b > 0 \u2227 c > 0 \u2227 R > 0 \u2227 r > 0 \u2192 a + b > c \u2227 a + c > b \u2227 b + c > a \u2192 Real.sqrt (a / (b + c - a)) + Real.sqrt (b / (c + a - b)) + Real.sqrt (c / (a + b - c)) \u2264 3 * Real.sqrt (R / (2 * r)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [mul_comm]\n  exact Real.mul_self_sqrt h"
  ]
 },
 {
  "old": "(a b c : \u211d) : (c * (a + b) / (a + b + 2 * c) + a * (b + c) / (b + c + 2 * a) + b * (c + a) / (c + a + 2 * b)) \u2265 (3 * a * b * c * (a + b + c)) / (2 * (a * b ^ 2 + b * c ^ 2 + c * a ^ 2)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) (h : a ^ 5 + b ^ 5 + c ^ 5 = 3) : (a * b + a * c + b * c) * (a ^ 2 / b ^ 2 + b ^ 2 / c ^ 2 + c ^ 2 / a ^ 2) \u2265 9 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c k : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hk : 1 / 3 \u2264 k \u2227 k \u2264 1) : a^2 + b^2 + c^2 + 3 * (k - 1) * (a * b + b * c + c * a) + 3 * k \u2265 3 * (k - 1) * a * b * c + (3 * k - 1) * (a + b + c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := by\n    nlinarith\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : a^2 + b^2 + c^2 + 3 * (a * b * c) ^ (2 / 3) \u2265 2 * (a * b + b * c + a * c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h2 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(x y z : \u211d) : (1 - x * y / z) * (1 - x * z / y) * (1 - y * z / x) \u2265 0 \u2194 x \u2265 y * z \u2227 y \u2265 z * x \u2227 z \u2265 x * y := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) (hab : a^3 + b^3 + 2 * a * b = 24) : (a + 1 / a)^2 + (b + 1 / b)^2 \u2265 25 / 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2080 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h\u2081"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : (Real.sqrt (x * (y + z)) + Real.sqrt (y * (x + z)) + Real.sqrt (z * (x + y))) * Real.sqrt (x / (y + z) + y / (x + z) + z / (x + y) - 1) \u2265 x + y + z := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": ": (9:\u211d) / 8 < \u2211' n : \u2115, (1:\u211d) / (n ^ 3) \u2227 \u2211' n : \u2115, (1:\u211d) / (n ^ 3) < 5 / 4 := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases h : 1 < p <;> simp [h, summable_one_div_nat_pow]\n  <;>\n  exact\n    summable_one_div_nat_pow.2 h",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases h\u2080 : p \u2264 1 <;> simp_all [Nat.lt_iff_add_one_le, ge_iff_le]\n  all_goals\n    nth_rw 1 [\u2190 one_div_one]\n    apply summable_one_div_pow_of_le\n    assumption"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2260 0) (hb : b \u2260 0) (hc : c \u2260 0) (hab : a + b \u2260 0) (hbc : b + c \u2260 0) (hca : a + c \u2260 0) : (1 / (2 * a ^ 2 + b * c) + 1 / (2 * b ^ 2 + c * a) + 1 / (2 * c ^ 2 + a * b) \u2265 1 / (a * b + b * c + a * c) + 2 / (a ^ 2 + b ^ 2 + c ^ 2)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 3) : a / (3 * a + b ^ 2) + b / (3 * b + c ^ 2) + c / (3 * c + a ^ 2) \u2264 3 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a \u2227 a \u2264 6 / 5) (hb : 0 < b \u2227 b \u2264 6 / 5) (hc : 0 < c \u2227 c \u2264 6 / 5) (hab : a + b + c = 3) : 25 * (a * b + b * c + c * a) \u2264 54 + 21 * a * b * c := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a + b + c = 1) : a * (b + c) ^ 2 + b * (a + c) ^ 2 + c * (a + b) ^ 2 \u2265 4 * (a * b + a * c + b * c) ^ 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "{a b c : \u211d} : 0.5 * ((a - b) ^ 2 + (b - c) ^ 2 + (c - a) ^ 2) \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 1 \u2264 x) (hy : 1 \u2264 y) (hz : 1 \u2264 z) (h : x * y + y * z + z * x = x * y * z) : Real.sqrt (x - 1) + Real.sqrt (y - 1) + Real.sqrt (z - 1) \u2264 Real.sqrt (2 * (x + y + z)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "{a b c : \u211d} (hx: a \u2260 b) (hb : b \u2260 c) (hc : c \u2260 a) (hab : a + b > c) (hbc : b + c > a) (hca : a + c > b) : (a * (b + c) / (b - c) ^ 2 + b * (c + a) / (c - a) ^ 2 + c * (a + b) / (a - b) ^ 2) \u2265 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h2 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : 2 * (a ^ 4 + b ^ 4 + c ^ 4 + a ^ 3 * b + b ^ 3 * c + c ^ 3 * a) \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) : a / (a ^ 2 + 3) + b / (b ^ 2 + 3) + c / (c ^ 2 + 3) \u2264 3 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a / b + (b / c)^(1 / 2) + (c / a)^(1 / 2) \u2265 5 / (16^(1 / 5))^(1 / 2) ) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) (h : x + y + z = 1) : (x * y / z + z * x / y + z * y / x) \u2265 (x + y + z) ^ 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (1 / (a ^ 2 * b + b ^ 2 * c + c ^ 2 * a) + 1 / (a * b * c)) \u2265 4 / (a * b ^ 2 + b * c ^ 2 + c * a ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 3) : 1 \u2264 1 / (2 * a * b ^ 2 + 1) + 1 / (2 * b * c ^ 2 + 1) + 1 / (2 * c * a ^ 2 + 1) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(b c a : \u211d) : (b^2 + c^2) / (a^2 + b * c) \u2264 b^2 / (c^2 + a^2) + c^2 / (a^2 + b^2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a - b) ^ 2 / (b - c) ^ 2 + (b - c) ^ 2 / (c - a) ^ 2 + (c - a) ^ 2 / (a - b) ^ 2 \u2265 5 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : (b - a) * c \u2264 0 := by nlinarith\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a * b + b * c + c * a) ^ 2 \u2265 3 * a * b * c * (a + b + c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(\u03b1 : \u211d) (h : \u03b1 > 1) : Summable (fun n : \u2115 => (n! / \u220f i in Finset.Icc 1 n, (\u03b1 + i))) := by",
  "new": "{p : \u2115} : (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  simp only [one_div, Real.summable_nat_pow_inv]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem summable_one_div_nat_pow {p : \u2115} :\n    (Summable fun n : \u2115 => 1 / (n : \u211d) ^ p) \u2194 1 < p := by\n  by_cases h\u2081 : 1 < p <;> simp_all [h\u2081]\n  <;>\n    exact\n      summable_one_div_nat_pow.mpr h\u2081"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0)(hab : a + b^2 + c^2 = 4) : a^2 + b^2 + c^2 \u2265 15 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b : \u2115) (h1 : 11 \u2223 a + 13 * b) (h2 : 13 \u2223 a + 11 * b) : a + b \u2265 25 := by",
  "new": "(a b c : \u2115) : (a * b + c) % b = c % b := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_add_mod (a b c : \u2115) : (a * b + c) % b = c % b := by\n  rw [add_comm]\n  simp [Nat.add_mod, Nat.mul_mod, Nat.mod_mod]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_add_mod (a b c : \u2115) : (a * b + c) % b = c % b := by\n  rw [Nat.add_comm]\n  rw [Nat.mul_comm]\n  simp [Nat.add_mod, Nat.mul_mod]"
  ]
 },
 {
  "old": "(a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) (habc : 0 < a * b * c) (habc2 : a * b + b * c + c * a + a * b * c = 4) : a^2 + b^2 + c^2 - 3 \u2265 2 * (Real.sqrt 2 + 1) * (a + b + c - 3) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := by\n    nlinarith\n  exact h'"
  ]
 },
 {
  "old": "(x y z : \u211d) : 5 * (x * y + y * z + z * x) \u2265 5 * (x ^ 2 + y ^ 2 + z ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2265 c * b := by\n    have : c * a \u2265 c * b := by\n      nlinarith\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b : \u2124) (ha : 0 < a) (hb : 0 < b) : |a * Real.sqrt 2 - b| > 1 / (2 * (a + b)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (h : |a * b * c| = 1) : (1 / (a ^ 2 + a + 1) + 1 / (b ^ 2 + b + 1) + 1 / (c ^ 2 + c + 1) + 1 / (a ^ 2 - a + 1) + 1 / (b ^ 2 - b + 1) + 1 / (c ^ 2 - c + 1)) \u2264 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * b \u2264 c * a := by\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2080 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2080"
  ]
 },
 {
  "old": "(a b c : \u211d) : sin (2 * b - 2 * c) * cos a + sin (b - c) * cos (a - b - c) = sin (2 * b - 2 * c) * cos a + sin (b - c) * cos (a - b - c) := by",
  "new": ": cos x - cos y = -2 * sin ((x + y) / 2) * sin ((x - y) / 2) := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem cos_sub_cos : cos x - cos y = -2 * sin ((x + y) / 2) * sin ((x - y) / 2) := by\n  have h\u2080 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2081 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2080, h\u2081]\n  simp [cos_add, cos_sub, sin_add, sin_sub]\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem cos_sub_cos : cos x - cos y = -2 * sin ((x + y) / 2) * sin ((x - y) / 2) := by\n  have h\u2081 : x = (x + y) / 2 + (x - y) / 2 := by ring\n  have h\u2082 : y = (x + y) / 2 - (x - y) / 2 := by ring\n  rw [h\u2081, h\u2082]\n  simp [cos_add, cos_sub, sin_add, sin_sub]\n  ring"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a * b * (a + b) / (2 * a + b) * (a + 2 * b) + b * c * (b + c) / (2 * b + c) * (b + 2 * c) + c * a * (c + a) / (2 * c + a) * (c + 2 * a)) \u2264 (2 / 3) * (a ^ 2 + b ^ 2 + c ^ 2) * (a ^ 3 + b ^ 3 + c ^ 3) / (a * b + b * c + c * a) ^ 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(h\u2081 : 3 \u2264 20) : (Nat.choose 20 3 : \u211a) = (20! / (17! * 3!)) := by",
  "new": "{n k : \u2115} (hk : k \u2264 n) : choose n k = n ! / (k ! * (n - k)!) := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  rw [\u2190 choose_mul_factorial_mul_factorial hk, mul_assoc]\n  field_simp [factorial_ne_zero, mul_comm]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem choose_eq_factorial_div_factorial {n k : \u2115} (hk : k \u2264 n) :\n    choose n k = n ! / (k ! * (n - k)!) := by\n  apply Eq.symm\n  rw [\u2190 choose_mul_factorial_mul_factorial hk]\n  field_simp [mul_comm, mul_assoc, mul_left_comm]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 1) : (a / (a + b) ^ 2 + b / (b + c) ^ 2 + c / (c + a) ^ 2) \u2265 9 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : c \u2264 0 := hc\n  have h2 : b \u2264 a := h\n  nlinarith"
  ]
 },
 {
  "old": ": \u2200 x : \u211d, sin 3*x - sin x = 2*cos 2*x * sin x := by",
  "new": ": sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_three_mul : sin (3 * x) = 3 * sin x - 4 * sin x ^ 3 := by\n  have h\u2081 : x + 2 * x = 3 * x := by ring\n  rw [\u2190 h\u2081, sin_add x (2 * x)]\n  simp only [cos_two_mul, sin_two_mul, cos_sq']\n  have h\u2082 : cos x * (2 * sin x * cos x) = 2 * sin x * cos x ^ 2 := by ring\n  rw [h\u2082, cos_sq']\n  ring_nf"
  ]
 },
 {
  "old": "(a b c : \u211d) : a^3 * (b + c) + b * c * (b^2 + c^2) - a * (b^3 + c^3) \u2265 2 * a^2 * b * c := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this"
  ]
 },
 {
  "old": "(m n : \u2115) (k : \u2115) : m = fib k \u2227 n = fib (k + 1) \u2194 m = 2 \u2227 n = 1 \u2228 m = 1 \u2227 n = 1 := by",
  "new": "(n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  induction n <;> simp_all [fib_add, fib_one, Nat.succ_mul]\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add]\n  ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  simp_all [fib_add, fib_two, Nat.succ_mul, Nat.zero_mul, Nat.zero_add, Nat.add_zero]\n  ring"
  ]
 },
 {
  "old": ": \u00ac\u2203 S : Set \u2115, \u2200 n : \u2115, n \u2208 S \u2228 (\u2200 m : \u2115, m \u2208 S \u2192 Nat.Coprime n m) := by",
  "new": "{m n : \u2115} (h : m \u2264 n) : Coprime n (n - m) \u2194 Coprime n m := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem coprime_self_sub_right {m n : \u2115} (h : m \u2264 n) : Coprime n (n - m) \u2194 Coprime n m := by\n  rw [Coprime, Coprime, gcd_self_sub_right h]"
  ]
 },
 {
  "old": "(a b c d : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hd : 0 \u2264 d) (hab : a + b + c + d = 4) : a * Real.sqrt (a * b) + b * Real.sqrt (b * c) + c * Real.sqrt (c * d) + d * Real.sqrt (d * a) + (3 * Real.sqrt 3 - 4) * Real.sqrt (a * b * c * d) \u2264 3 * Real.sqrt 3 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b : \u211d) (hab : 0 < a \u2227 0 < b) (h : a < b) : Real.log (1 + a / b) * Real.log (1 + b / a) < Real.log 2 ^ 2 := by",
  "new": "{a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have h\u2081 : 0 < a\u207b\u00b9 := inv_pos.mpr h\n  have h\u2082 : 1 + a\u207b\u00b9 > 0 := add_pos_of_pos_of_nonneg zero_lt_one (le_of_lt h\u2081)\n  have h\u2083 : log (1 + a\u207b\u00b9) \u2264 1 + a\u207b\u00b9 - 1 := log_le_sub_one_of_pos h\u2082\n  simp at h\u2083\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have h\u2081 : 0 < 1 + a\u207b\u00b9 := by positivity\n  have h\u2082 : 0 < a\u207b\u00b9 := by positivity\n  have h\u2083 : a\u207b\u00b9 \u2264 1 + a\u207b\u00b9 := by linarith\n  linarith [log_le_sub_one_of_pos h\u2081]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have := log_le_sub_one_of_pos (by positivity : 0 < 1 + a\u207b\u00b9)\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have h\u2081 : 0 < a\u207b\u00b9 := inv_pos.2 h\n  have h\u2082 : 1 + a\u207b\u00b9 > 0 := add_pos_of_pos_of_nonneg zero_lt_one (le_of_lt h\u2081)\n  have h\u2083 : log (1 + a\u207b\u00b9) \u2264 1 + a\u207b\u00b9 - 1 := log_le_sub_one_of_pos h\u2082\n  simp_all",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  rw [log_le_iff_le_exp (by positivity)]\n  have : 0 \u2264 a\u207b\u00b9 := by positivity\n  nlinarith [add_one_le_exp (a\u207b\u00b9)]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have := Real.log_le_sub_one_of_pos (show 0 < 1 + a\u207b\u00b9 by positivity)\n  linarith [h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (hab : 0 < a) (hbc : 0 < b) (hca : 0 < c) (habc : a * b + b * c + c * a = 3) : a + b + c \u2265 a * b * c + 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": ": \u2200 a b c : \u211d, a > 0 \u2227 b > 0 \u2227 c > 0 \u2192 (a * b * (a - b) - c * a * (c - a)) / (A * (a + b + c) * (a ^ 2 + b ^ 2 + c ^ 2)) \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (hab : 0 \u2264 a) (hbc : 0 \u2264 b) (hca : 0 \u2264 c) (habc : a * b + b * c + c * a = 1) : (1 / Real.sqrt (b ^ 2 + b * c + c ^ 2) + 1 / Real.sqrt (c ^ 2 + c * a + a ^ 2) + 1 / Real.sqrt (a ^ 2 + a * b + b ^ 2)) \u2265 2 + 1 / Real.sqrt 3 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := by\n    apply mul_le_mul_of_nonpos_left _ hc\n    exact h\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) (k : \u2115) (hk : k \u2260 1) : (a ^ k / (a + b) + b ^ k / (b + c) + c ^ k / (c + a)) \u2265 3 / 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : c \u2264 0 := hc\n  have h\u2082 : b \u2264 a := h\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b x : \u211d) (ha : 0 < a) (hb : 0 < b) (hx : 0 < x) : 1 \u2265 a / b \u2194 (x + a) / (x + b) \u2265 a / b := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : 3 * a ^ 2 * b + 3 * b ^ 2 * c + 3 * c ^ 2 * a - 3 * a * b * c - 2 * b ^ 2 * a - 2 * c ^ 2 * b - 2 * a ^ 2 * c \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a \u2227 a \u2264 1) (hb : 0 < b \u2227 b \u2264 1) (hc : 0 < c \u2227 c \u2264 1) : 1 + (a + b + c + a * b * c - 2) * a * b * c \u2265 a ^ 2 * b ^ 2 + b ^ 2 * c ^ 2 + c ^ 2 * a ^ 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a / b + b / c + c / a + 3 * (a * b * c) ^ (1 / 3) / (a + b + c) \u2265 a / b + b / c + c / a + Real.sqrt (3 * a * b * c / (a ^ 3 + b ^ 3 + c ^ 3)) \u2227 a / b + b / c + c / a + Real.sqrt (3 * a * b * c / (a ^ 3 + b ^ 3 + c ^ 3)) >= 4) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c x y z : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hz : 0 \u2264 z) (hab : a + b + c + x + y + z = 1) (h : a * b * c + x * y * z = 1 / 36) : a * b * z + b * c * x + c * a * y \u2264 1 / 108 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c k : \u211d) (h\u2081 : k \u2265 (27 / 16)^(1 / 3)) : (k * a ^ 3 - a * b * c) ^ (1 / 3) + (k * b ^ 3 - a * b * c) ^ (1 / 3) + (k * c ^ 3 - a * b * c) ^ (1 / 3) \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c m : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) (hm : (18 * (144:\u211d)^(1 / 3) - 54 * (12:\u211d)^(1 / 2) + 30:\u211d)^(1 / 3) \u2264 m \u2227 m \u2264 1) : 1 / (a - m) + 1 / (b - m) + 1 / (c - m) \u2265 3 / (3^(1 / 3) - m) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (1 / Real.sqrt a + 1 / Real.sqrt b + 1 / Real.sqrt c = 3) \u2192 (1 / (a + b) + 1 / (b + c) + 1 / (c + a) \u2264 3 / 2) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(x : \u211d) (hx : x < 0) : (3:\u211d)^(2 * x) - (3:\u211d)^x + 1 < 1 := by",
  "new": "{x z : \u211d} (hx : 1 \u2264 x) (hz : z \u2264 0) : x ^ z \u2264 1 := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem rpow_le_one_of_one_le_of_nonpos {x z : \u211d} (hx : 1 \u2264 x) (hz : z \u2264 0) : x ^ z \u2264 1 := by\n  rw [Real.rpow_def_of_pos (zero_lt_one.trans_le hx)]\n  refine' Real.exp_le_one_iff.mpr (mul_nonpos_of_nonneg_of_nonpos _ hz)\n  exact log_nonneg hx",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem rpow_le_one_of_one_le_of_nonpos {x z : \u211d} (hx : 1 \u2264 x) (hz : z \u2264 0) : x ^ z \u2264 1 := by\n  rw [\u2190 @rpow_zero x]\n  apply rpow_le_rpow_of_exponent_le hx hz",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem rpow_le_one_of_one_le_of_nonpos {x z : \u211d} (hx : 1 \u2264 x) (hz : z \u2264 0) : x ^ z \u2264 1 := by\n  rw [Real.rpow_def_of_pos (zero_lt_one.trans_le hx)]\n  refine' Real.exp_le_one_iff.mpr _\n  exact mul_nonpos_of_nonneg_of_nonpos (log_nonneg hx) hz",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem rpow_le_one_of_one_le_of_nonpos {x z : \u211d} (hx : 1 \u2264 x) (hz : z \u2264 0) : x ^ z \u2264 1 := by\n  rw [Real.rpow_def_of_pos (zero_lt_one.trans_le hx)]\n  rw [exp_le_one_iff]\n  exact mul_nonpos_of_nonneg_of_nonpos (log_nonneg hx) hz",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem rpow_le_one_of_one_le_of_nonpos {x z : \u211d} (hx : 1 \u2264 x) (hz : z \u2264 0) : x ^ z \u2264 1 := by\n  rw [rpow_def_of_pos (zero_lt_one.trans_le hx)]\n  rw [exp_le_one_iff]\n  exact mul_nonpos_of_nonneg_of_nonpos (log_nonneg hx) hz"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (habc : a + b + c = 1) : (1 - a ^ 2) ^ 2 + (1 - b ^ 2) ^ 2 + (1 - c ^ 2) ^ 2 \u2265 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : (b - a) * c \u2264 0 := by nlinarith\n  nlinarith"
  ]
 },
 {
  "old": ": 8^8 \u2261 3^8 [ZMOD 11] := by",
  "new": ": a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.modEq_iff_dvd]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem modEq_iff_dvd : a \u2261 b [ZMOD n] \u2194 n \u2223 b - a := by\n  simp [Int.modEq_iff_dvd, Int.emod_eq_emod_iff_emod_sub_eq_zero]"
  ]
 },
 {
  "old": "(x : \u211d) : x^2 - Real.sqrt x - 14 = 0 \u2194 x = 2 \u2228 x = 7 := by",
  "new": "(hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sqrt_eq_iff_sq_eq (hx : 0 \u2264 x) (hy : 0 \u2264 y) : \u221ax = y \u2194 y ^ 2 = x := by\n  constructor <;> intro h <;> rw [\u2190 h] <;> simp [hx, hy]\n  <;> exact Real.sq_sqrt (by linarith)"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0 \u2227 b > 0 \u2227 c > 0 \u2227 a + b + c = 1) : (1 / a + 1) * (1 / b + 1) * (1 / c + 1) \u2265 64 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a + b + c = 3) : (Real.sqrt (a / (5 - a)) + Real.sqrt (b / (5 - b)) + Real.sqrt (c / (5 - c))) \u2264 3 / 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "{a b c : \u211d} (hx: a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b > c) (hbc : b + c > a) (hca : a + c > b) : (a - b) * (a - c) * (4 * b * c / a - a) + (b - c) * (b - a) * (4 * c * a / b - b) + (c - a) * (c - b) * (4 * a * b / c - c) \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2260 0) (hb : b \u2260 0) (hc : c \u2260 0) (hab : a + b \u2260 0) (hbc : b + c \u2260 0) (hca : a + c \u2260 0) : (b + c - a) ^ 2 / (b ^ 2 + c ^ 2) + (c + a - b) ^ 2 / (c ^ 2 + a ^ 2) + (a + b - c) ^ 2 / (a ^ 2 + b ^ 2) >= 3 / 2 + 2 * (1 - (b * c + c * a + a * b) / (a ^ 2 + b ^ 2 + c ^ 2)) ^ 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (1 / a + 1 / b + 1 / c = 1 \u2192 a / (a + b * c) + b / (b + c * a) + c / (c + a * b) \u2265 3 / 4) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": ": 4 * (4 * (Real.sqrt 2 - 1) / 3) ^ 3 \u2264 4 * (3 - 2 * Real.sqrt 2) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 1) : \u221a(ab / (ab + c)) + \u221a(bc / (bc + a)) + \u221a(ca / (ca + b)) \u2264 3 / 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1"
  ]
 },
 {
  "old": "(a b : \u211d) (hab : 0 \u2264 a \u2227 0 \u2264 b) (h : Real.sqrt (a ^ 2 + 3 * b) + Real.sqrt (b ^ 2 + 3 * a) + 2 * Real.sqrt (3 * a + 1) = 4) : a + b \u2264 (7 - Real.sqrt 33) / 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c x y z : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hx : x = a + 1/b) (hy : y = b + 1/c) (hz : z = c + 1/a) : x * y + y * z + z * x \u2265 2 * (x + y + z) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) : (a^2 + 1/b + 1)*(b^2 + 1/a + 1) \u2265 (3/(4:\u211d)^(1/3) + 1)^2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  exact this"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a / (a ^ 2 + b * c) + b / (b ^ 2 + c * a) + c / (c ^ 2 + a * b)) \u2265 3 * (a ^ 2 + b ^ 2 + c ^ 2) / (2 * (a ^ 3 + b ^ 3 + c ^ 3)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (habc : a * b * c = 1) (h : (a^2 - a + 1) * (b^2 - b + 1) * (c^2 - c + 1) = 1) : a + b + c \u2264 3 \u2227 a + b * c \u2264 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h2 : c * b \u2264 c * a := by nlinarith\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : \u221a(2 * a / (b + c)) + \u221a(2 * b / (c + a)) + \u221a(2 * c / (a + b)) \u2264 \u221a(3 * (a / b + b / c + c / a)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a^2 \u2265 b^2 + c^2) : 2 * a / (b + c) + b / (c + a) + c / (a + b) \u2265 3 * Real.sqrt 2 - 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a^2 + b * c = 2) : 1 / (a^2 + 2) + 1 / (b^2 + 2) + 1 / (c^2 + 2) \u2264 (9 + 4 * Real.sqrt 2) / 12 + 1 / 6 * (a - 1)^2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * b \u2265 c * a := by\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a^2 + 3 * b^2 + c^2 = a + 3 * b + c) : a^3 + 3 * b^3 + c^3 \u2264 81 / 16 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    rw [mul_comm]\n    rw [mul_comm]\n    apply mul_le_mul_of_nonpos_right _ hc\n    assumption\n  assumption",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(x y z : \u211d) : (1 + x / y + y / x) \u2265 (x / y + y / z + z / x) \u2227 (x / y + y / z + z / x) \u2265 (x + y + z) / (xyz)^(1/3) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c d : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hd : 0 \u2264 d) (habc : a + b + c + d = 4) : a / (b + 3) + b / (c + 3) + c / (d + 3) + d / (a + 3) \u2265 1 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(f : \u211d \u2192 \u211d):(\u2200 x > 0, f x >= 0 \u2227 f 0 = 0 \u2227 \u2200 x y, f (x + y - x*y) = f x + f y - f (x*y)) \u2194 \u2200 x, f x = a*x \u2227 a >= 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : Real.sqrt (a ^ 2 - a * b + b ^ 2) + Real.sqrt (b ^ 2 - b * c + c ^ 2) \u2265 Real.sqrt (c ^ 2 + c * a + a ^ 2) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(x y z a b : \u211d) (hx : x > 0 \u2227 y > 0 \u2227 z > 0 \u2227 x * y * z = 1) (hab : a \u2260 0 \u2228 b \u2260 0) : 1 / (a ^ 2 + x * |a * b| + b ^ 2) + 1 / (a ^ 2 + y * |a * b| + b ^ 2) + 1 / (a ^ 2 + z * |a * b| + b ^ 2) \u2264 3 / (a ^ 2 + |a * b| + b ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(t : \u211d) : 2 * Real.sqrt 13 * Real.sqrt (4 * t ^ 2 - 4 * t + 6) \u2265 10 - 4 * t + 6 * Real.sqrt 3 * t := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c d : \u211d) (hab : 0 \u2264 a) (hbc : 0 \u2264 b) (hcd : 0 \u2264 c) (hda : 0 \u2264 d) (habc : a * b + b * c + c * a = 1) : a ^ 3 / (b + c + d) + b ^ 3 / (a + c + d) + c ^ 3 / (a + b + d) + d ^ 3 / (a + b + c) \u2265 1 / 3 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(x y z k a b c : \u211d) (hx : x \u2260 0) (hy : y \u2260 0) (hz : z \u2260 0) (hab : a = k * x / y) (hbc : b = k * y / z) (hca : c = k * z / x) : 1 / (a * (b + 1)) + 1 / (b * (c + 1)) + 1 / (c * (a + 1)) = (y * z) / (k * x * (k * y + z)) + (z * x) / (k * y * (k * z + x)) + (x * y) / (k * z * (k * x + y)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : 0 \u2264 a - b := by linarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a^2 + b^2) / (2 * c + b)^2 + (b^2 + c^2) / (2 * a + c)^2 + (c^2 + a^2) / (2 * b + a)^2 + 2 * (a * b / (2 * a + c) * (2 * c + b) + b * c / (2 * b + a) * (2 * a + c) + c * a / (2 * c + b) * (2 * b + a)) \u2265 4 / 3 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(n : \u2115) (k : \u2115) (a : \u2115 \u2192 \u2115) (h : \u2200 i, 0 < a i \u2227 a i \u2264 n) : (\u2211 i in Finset.range k, (2:\u211d)^(a i / 2))^2 \u2264 (1 + Real.sqrt 2) * \u2211 i in Finset.range k, (2:\u211d)^(a i) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (1 / (a + b) + 1 / (b + c) + 1 / (c + a) = 2) \u2192 (Real.sqrt (a + b + c) \u2265 Real.sqrt a + Real.sqrt b + Real.sqrt c) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "{a b c : \u211d} (hx: a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b > c) (hbc : b + c > a) (hca : a + c > b) : Real.sqrt (3 * (Real.sqrt (a * b) + Real.sqrt (b * c) + Real.sqrt (c * a))) \u2265 Real.sqrt (a + b - c) + Real.sqrt (b + c - a) + Real.sqrt (c + a - b) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) : (1 / (b * (a + b)) + 1 / (c * (c + a)) + 1 / (a * (c + a))) \u2265 3 / (1 + a * b * c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a + b + c = 1) : Real.sqrt (a^2 + b^2) + Real.sqrt (b^2 + c^2) \u2265 (Real.sqrt 5 - 1) * Real.sqrt (a^2 + b + c^2) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a : \u211d) (n : \u2115) : a > 0 \u2192 \u2200 \u03b5 : \u211d, \u03b5 > 0 \u2192 \u2203 N : \u2115, \u2200 n : \u2115, n \u2265 N \u2192 |n^2 * (a^(1/n) - a^(1/(n+1))) - Real.log a| < \u03b5 := by",
  "new": "{a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  rw [\u2190 inv_pos] at h\n  have := log_le_sub_one_of_pos (by positivity : 0 < (1 + a\u207b\u00b9))\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have h\u2081 : 0 < 1 + a\u207b\u00b9 := by positivity\n  linarith [log_le_sub_one_of_pos h\u2081]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have h\u2081 : 0 < a\u207b\u00b9 := inv_pos.mpr h\n  have h\u2082 : 0 < 1 + a\u207b\u00b9 := by linarith\n  have h\u2083 : log (1 + a\u207b\u00b9) \u2264 1 + a\u207b\u00b9 - 1 := log_le_sub_one_of_pos h\u2082\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have := log_le_sub_one_of_pos (by positivity : 0 < 1 + a\u207b\u00b9)\n  linarith [h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem log_one_add_inv_le {a : \u211d} (h : 0 < a) : log (1 + a\u207b\u00b9) \u2264 a\u207b\u00b9 := by\n  have h' : 0 < a\u207b\u00b9 := inv_pos.mpr h\n  linarith [log_le_sub_one_of_pos (add_pos_of_pos_of_nonneg zero_lt_one h'.le)]"
  ]
 },
 {
  "old": "(a b c : \u211d) (habc : a * b * c = 1) : (a^4 / b^2 + b^4 / c^2 + c^4 / a^2)^5 \u2265 27 * (a^5 / c^3 + c^5 / b^3 + b^5 / a^3)^2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * b \u2264 c * a := by\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (habc : a * b * c = 1) : (a * b * c = 1 \u2227 a > 0 \u2227 b > 0 \u2227 c > 0) \u2192 1 / (a * (a + 1) + a * b * (a * b + 1)) + 1 / (b * (b + 1) + b * c * (b * c + 1)) + 1 / (c * (c + 1) + c * a * (c * a + 1)) \u2265 3 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (habc : a * b * c = 1) : 3 / 2 \u2264 a / (b * c + 1) + b / (c * a + 1) + c / (a * b + 1) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := by\n    nlinarith\n  exact h'",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 3) : a^2 / (b^3 + a * b * c + c^3) + b^2 / (c^3 + a * b * c + a^3) + c^2 / (a^3 + a * b * c + b^3) \u2265 1 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(x y : \u211d) (hx : 0 < x \u2227 x \u2264 y) : (1 / (7 * y - 4 * x) + 8 / (2 * x + y)) \u2264 (7 / (3 * x) + 2 / (x + 2 * y)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a \u2227 a < 1) (hb : 0 < b \u2227 b < 1) (hc : 0 < c \u2227 c < 1) : 2 * (a^b + b^c + c^a) \u2265 3 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : (x + \u221a (x * y) + (xyz)^(1/3)) / 3 \u2264 (x * (x + y) / 2 * (x + y + z) / 3)^(1/3) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : (a - b) * c \u2264 0 := by nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(f : \u211d \u2192 \u211d) : (3 * x^2 - 2 * x - 1 = 0) \u2194 (x = 1 \u2228 x = -1/3) := by",
  "new": "{x : \u2124} (h : x * x = 1) : x = 1 \u2228 x = -1 := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem eq_one_or_neg_one_of_mul_eq_one {x : \u2124} (h : x * x = 1) : x = 1 \u2228 x = -1 := by\n  have h\u2081 : x * x = 1 := h\n  have h\u2082 : x = 1 \u2228 x = -1 := by\n    cases' le_or_lt 0 (x) with h\u2083 h\u2083\n    \u00b7\n      left\n      nlinarith\n    \u00b7\n      right\n      nlinarith\n  exact h\u2082",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem eq_one_or_neg_one_of_mul_eq_one {x : \u2124} (h : x * x = 1) : x = 1 \u2228 x = -1 := by\n  have h\u2081 : x * x = 1 := h\n  have h\u2082 : x = 1 \u2228 x = -1 := by\n    apply Int.eq_one_or_neg_one_of_mul_eq_one\n    assumption\n  assumption",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem eq_one_or_neg_one_of_mul_eq_one {x : \u2124} (h : x * x = 1) : x = 1 \u2228 x = -1 := by\n  rw [mul_self_eq_one_iff] at h\n  exact_mod_cast h",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem eq_one_or_neg_one_of_mul_eq_one {x : \u2124} (h : x * x = 1) : x = 1 \u2228 x = -1 := by\n  have : x = 1 \u2228 x = -1 := by\n    apply eq_or_eq_neg_of_sq_eq_sq\n    linarith\n  exact this",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem eq_one_or_neg_one_of_mul_eq_one {x : \u2124} (h : x * x = 1) : x = 1 \u2228 x = -1 := by\n  have h\u2081 : x * x = 1 := h\n  have h\u2082 : x = 1 \u2228 x = -1 := by\n    cases' le_or_lt 0 x with hx hx\n    \u00b7 left\n      nlinarith\n    \u00b7 right\n      nlinarith\n  exact h\u2082"
  ]
 },
 {
  "old": "(x : \u2115 \u2192 \u211d) (n : \u2115) (hx : n = 3) (h : \u2211 i in Finset.range n, x i = 9) (h' : \u2211 i in Finset.range n, (1/x i) = 1) : x 1 = 3 \u2227 x 2 = 3 \u2227 x 3 = 3 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * b \u2264 c * a := by\n    nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 < x) (hy : 0 < y) (hz : 0 < z) : 1 / 3 * Real.sqrt ((x + y + z) * (x*y + x*z + y*z) / ((y + z) * (z + x) * (x + y))) * Real.sqrt 2 + 1 \u2265 Real.sqrt (yz / ((z + x) * (x + y))) + Real.sqrt (xz / ((x + y) * (y + z))) + Real.sqrt (xy / ((y + z) * (z + x))) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "{a b c : \u211d} (hx: a > 0 \u2227 b > 0 \u2227 c > 0) (hab : a + b > c) (hbc : b + c > a) (hca : a + c > b) : (6 * a + 2 * b + 2 * c) * r + a * (b + c) - (b - c) ^ 2 \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a^2 + a * b + a * c - b * c) * (b^2 + b * c + b * a - c * a) * (c^2 + c * a + c * b - a * b) \u2264 8 * a^2 * b^2 * c^2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(n : \u2124) (a b : \u211d) (ha : 0 < a) (hb : 0 < b) (hab : a + b = 2) : (a^n + b)/(a + 1) + (b^n + a)/(b + 1) \u2265 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h2 : a * c \u2264 b * c := by nlinarith\n  exact h2",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c d : \u211d) (h1 : a^2 + b^2 + c^2 + d^2 = 4) (h2 : a * b + b * c + c * d + d * a > 2 * Real.sqrt 2) : (a > 0 \u2227 b > 0 \u2227 c > 0 \u2227 d > 0) \u2228 (a < 0 \u2227 b < 0 \u2227 c < 0 \u2227 d < 0) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a * b + b * c + c * a = 3) : (Real.sqrt (1 / a + 2 * b) + Real.sqrt (1 / b + 2 * c) + Real.sqrt (1 / c + 2 * a) \u2264 3 * Real.sqrt 3 / Real.sqrt (a * b * c)) := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a \u2227 a \u2264 3 / 2) (hb : 0 \u2264 b \u2227 b \u2264 3 / 2) (hc : 0 \u2264 c \u2227 c \u2264 3 / 2) (hab : a + b + c + a * b * c = 4) : 203 / 26 \u2265 a + 2 * b + 3 * c \u2227 a + 2 * b + 3 * c \u2265 2 * Real.sqrt (38 / 3) - 11 / 6 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h\u2081"
  ]
 },
 {
  "old": "(a : \u2115 \u2192 \u2115) (a0 : a 0 = 0) (a1 : a 1 = 5) (n : \u2115) : a n + a (n - 1) - 2 * a (n - 2) = 2 ^ n + n := by",
  "new": "(n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [fib_two_mul_add_one] at ih\n    simp_all [fib_add, fib_one, Nat.succ_mul]\n    ring",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem fib_two_mul_add_one (n : \u2115) : fib (2 * n + 1) = fib n ^ 2 + fib (n + 1) ^ 2 := by\n  rw [two_mul, fib_add]\n  ring"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 1 < a) (hb : 1 < b) : a / (b - 1) + b / (a - 1) + (a^2 + b^2 - 6) / (a + b - 2) \u2265 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : 0 \u2264 x) (hy : 0 \u2264 y) (hz : 0 \u2264 z) : (x + y) / (x - y) ^ 2 + (y + z) / (y - z) ^ 2 + (z + x) / (z - x) ^ 2 \u2265 9 / (x + y + z) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c d x y : \u211d) (h\u2081 : 0 < a \u2227 0 < b \u2227 0 < c \u2227 0 < d) (h\u2082 : 0 < x \u2227 0 < y) (h\u2083 : x * y = a * c + b * d) (h\u2084 : x / y = (a * d + b * c) / (a * b + c * d)) : a * b * x / (a + b + x) + c * d * x / (c + d + x) = a * d * y / (a + d + y) + b * c * y / (b + c + y) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a * (b^(1/2019)) - c = a \u2227 b * (c^(1/2019)) - a = b \u2227 c * (a^(1/2019)) - b = c) \u2194 a = b \u2227 b = c \u2227 c = 2^(2019) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    apply mul_le_mul_of_nonpos_right _ hc\n    exact h\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    rw [mul_comm]\n    rw [mul_comm]\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c k : \u211d) (ha : a + b + c = 3) (hb : 0 \u2264 k) : (a^2 - 1) / (2 * a^2 + k * a + k + 7) + (b^2 - 1) / (2 * b^2 + k * b + k + 7) + (c^2 - 1) / (2 * c^2 + k * c + k + 7) \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(n : \u2115) (a b c : \u2115 \u2192 \u211d) : 2 * \u2211 i in Finset.range n, (a i ^ 3 / b i) + \u2211 i in Finset.range n, (a i * b i) + \u2211 i in Finset.range n, (a i ^ 2) \u2265 2 * \u2211 i in Finset.range n, (a i ^ 2) + 2 * \u2211 i in Finset.range n, (a i * Real.sqrt (a i * b i)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(p q a b c d e : \u211d) (hp : 0 < p \u2227 0 < q) (hpq : p < q) (habcde : a \u2208 Set.Icc p q \u2227 b \u2208 Set.Icc p q \u2227 c \u2208 Set.Icc p q \u2227 d \u2208 Set.Icc p q \u2227 e \u2208 Set.Icc p q) : (a + b + c + d + e) * (1 / a + 1 / b + 1 / c + 1 / d + 1 / e) \u2264 25 + 6 * (Real.sqrt p / Real.sqrt q - Real.sqrt q / Real.sqrt p) ^ 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 < a) (hb : 0 < b) : (1 / (1 + a + a^2 + a^3) + 1 / (1 + b + b^2 + b^3)) \u2265 1 / (1 + (a * b)^(3 / 2)) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) (h : a^4 * b^4 + b^4 * c^4 + c^4 * a^4 = 3) : a^3 / b + b^3 / c + c^3 / a \u2265 3 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : a ^ 5 * c + (a * b * c) ^ 2 \u2265 (a ^ 3 + b ^ 3 + c ^ 3 + a * b * c) * a * b * c := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : a / b + b / c + c / a + (24 * (a * b * c)^(1 / 3)) / (a + b + c) \u2265 11 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : (a - b) * c \u2264 0 := by nlinarith\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a + b + c = 3) : (ab / (3 + c ^ 2) + bc / (3 + a ^ 2) + ca / (3 + b ^ 2)) \u2264 3 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(x y z P: \u211d) (hx: 0 < x) (hy: 0 < y) (hz: 0 < z) (hP: P = (x + y + z) * (1/x + 1/y + 1/z)) (hxy: 5 * (x ^ 2 + y ^ 2 + z ^ 2) = 6 * (x * y + y * z + z * x)) : (P >= 10 \u2227 P <= 54/5) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a + b + c = 3) : a^2 * (b + c) / (1 + b * c) + b^2 * (c + a) / (1 + c * a) + c^2 * (a + b) / (1 + a * b) \u2264 9 / (a + b + c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * b \u2265 c * a := by\n    apply mul_le_mul_of_nonpos_left h\n    linarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b : \u211d) (f : \u211d \u2192 \u211d) (h\u2081 : \u2200 x, f x = a * x ^ 2 + b * x) : \u2203 a b, \u2200 x, f x = a * x ^ 2 + b * x := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 4 / 9) : a ^ 4 / (a * b * (a + b)) + b ^ 4 / (b * c * (b + c)) + c ^ 4 / (c * a * (c + a)) \u2265 3 / (a + b + c) ^ 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : a / (a * b + 3 * c) + b / (b * c + 3 * a) + c / (c * a + 3 * b) \u2265 3 / 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (hab : a * b + b * c + c * a > 0) : 1 / (b * b - b * c + c * c) + 1 / (c * c - c * a + a * a) + 1 / (a * a - a * b + b * b) \u2265 3 / (a * b + b * c + c * a) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a \u2265 0) (hb : b \u2265 0) (hc : c \u2265 0) (hab : a * b + a * c + b * c \u2260 0) : (a^2 + b^2) / (c^2 + a * b) + (b^2 + c^2) / (a^2 + b * c) + (c^2 + a^2) / (b^2 + a * c) \u2265 3 + (a^2 + b^2 + c^2 - a * b - a * c - b * c) / (a * b + a * c + b * c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := by\n    apply mul_le_mul_of_nonpos_left h\n    linarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0) (hb : b > 0) (hc : c > 0) (habc : a * b * c = 1) : (a ^ 5 / (a ^ 3 + 1) + b ^ 5 / (b ^ 3 + 1) + c ^ 5 / (c ^ 3 + 1)) \u2265 3 / 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h2 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h2",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (habc : a + b + c > 0) (k : \u211d) (hk : k = Real.sqrt (13 + 16 * Real.sqrt 2)) : (k * a + b) / (a + c) + (k * b + c) / (b + a) + (k * c + a) / (c + b) \u2265 (3 * k + 3) / 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hc : 0 \u2264 c) (habc : a * b * c = 1) (h : 1 / (a^3 + 8) + 1 / (b^3 + 8) + 1 / (c^3 + 8) = 1 / 3) : a^2 + b^2 + c^2 \u2264 3 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c d : \u211d) : (a + b + c + d) * (a * b ^ 2 + b * c ^ 2 + c * d ^ 2 + a ^ 2 * d) + 4 * (a - b) * (b - c) * (c - d) * (d - a) - 16 * a * b * c * d \u2265 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact h1",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h' : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (a + b + c) ^ 5 \u2265 27 * (a * b + b * c + c * a) * (a * b ^ 2 + b * c ^ 2 + c * a ^ 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 1 < a) (hb : 1 < b) (hc : 1 < c) : (1 / (a ^ 2 - 1) + 1 / (b ^ 2 - 1) + 1 / (c ^ 2 - 1) = 1 \u2192 1 / (a + 1) + 1 / (b + 1) + 1 / (c + 1) \u2264 1) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : 1 / (a * (1 + b)) + 1 / (b * (1 + c)) + 1 / (c * (1 + a)) \u2265 3 / (1 + a * b * c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (hab : a + b + c = 1 / a + 1 / b + 1 / c) : (ab + bc + ca) * (Real.sqrt (ab) + Real.sqrt (bc) + Real.sqrt (ca)) ^ 2 \u2265 27 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) : (b^2 * c^2 / (b + c) + c^2 * a^2 / (c + a) + a^2 * b^2 / (a + b) + (3 / 16) * a * b * c) \u2264 (1 / 16) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  rw [mul_comm a]\n  rw [mul_comm b]\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": ": \u2211 k in Finset.Icc 1 20, k * (k + 1) * (k + 2) = 53130 := by",
  "new": "(n : \u2115) : \u2211 i in Finset.Icc 0 n, i = \u2211 i in Finset.range (n + 1), i := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sum_Icc_eq_sum_range (n : \u2115) : \u2211 i in Finset.Icc 0 n, i = \u2211 i in Finset.range (n + 1), i := by\n  apply Finset.sum_bij (fun j _ => j)\n  <;> simp_all [Finset.mem_Icc, Finset.mem_range]\n  <;> intro j hj\n  <;> linarith\n  <;> linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) : (a^3 + b^3)^(1/3) + (b^3 + c^3)^(1/3) + (c^3 + a^3)^(1/3) \u2264 2 * (a + b + c) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : c \u2264 0 := hc\n  have h\u2082 : b \u2264 a := h\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081"
  ]
 },
 {
  "old": "(a b : \u211d) (m : \u2124) (h\u2080 : 0 < a) (h\u2081 : b < 0) (h\u2082 : 1 \u2264 m) (h\u2083 : a * b^(m - 1) \u2265 -2) : -1 < a * b^(m - 1) + 1 \u2227 a * b^(m - 1) + 1 < 0 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(x y z : \u211d) (hx : x \u2265 0) (hy : y \u2265 0) (hz : z \u2265 0) (h : x * y * z = 1) : (x ^ 3 / (y + 1) / (z + 1) + y ^ 3 / (x + 1) / (z + 1) + z ^ 3 / (y + 1) / (x + 1)) \u2264 (x ^ 4 + y ^ 4 + z ^ 4) / (x * y + y * z + z * x + 1) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) (h : (a + b) * (b + c) * (c + a) = 2) : (a^2 + b * c) * (b^2 + c * a) * (c^2 + a * b) + 2 * a * b * c \u2264 1 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081"
  ]
 },
 {
  "old": "(A B C : \u211d) (hA : 0 < A \u2227 A <= \u03c0 \u2227 2 * A + B + C = \u03c0) (hB : 0 < B \u2227 B <= \u03c0 \u2227 2 * B + A + C = \u03c0) (hC : 0 < C \u2227 C <= \u03c0 \u2227 2 * C + A + B = \u03c0) : Real.sqrt (1 / Real.tan A) + Real.sqrt (1 / Real.tan B) + Real.sqrt (1 / Real.tan C) \u2265 2 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by\n  rw [Real.mul_self_sqrt h]"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : a > 0) (hb : b > 0) (hc : c > 0) (hab : a * b + b * c + c * a = 1) : 1 / (a * (c + a)) + 1 / (b * (a + b)) + 1 / (c * (b + c)) \u2265 9 / 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c d : \u211d) (h : a * b + a * c + a * d + b * c + b * d + c * d = 6) : a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 + (2 + Real.sqrt 2) / 2 * (a * b * c + a * b * d + a * c * d + b * c * d) \u2265 2 * (4 + Real.sqrt 2) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : a \u2265 0 \u2227 b \u2265 0) (hab : a^2 + b^2 = 2) : a^2 * b^2 + 4 * (a^3 + b^3) \u2265 9 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  rw [\u2190 mul_comm]\n  rw [mul_comm]\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) (habc : a * b * c = 1) : Real.sqrt ((a^3 + 3) / (a + 3)) + Real.sqrt ((b^3 + 3) / (b + 3)) + Real.sqrt ((b^3 + 3) / (b + 3)) \u2265 (2 * (a + b + c)) / 3 + 1 := by",
  "new": "(h : 0 \u2264 a) : \u221aa * \u221aa = a := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_sqrt (h : 0 \u2264 a) : \u221aa * \u221aa = a := by rw [\u2190 sq, sq_sqrt h]"
  ]
 },
 {
  "old": "(k a b c : \u211d) (ha : 0 < a) (hb : 0 < b) (hc : 0 < c) : (k * a + b + c) * (1 / a + 1 / b + 1 / c) \u2265 k + 4 + (2 * k + 1) * Real.sqrt 2 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b : \u2115) (ha : 0 < a) (hb : 0 < b) : (\u2203 A B : Finset \u2115, A.Nonempty \u2227 B.Nonempty \u2227 (\u2200 x, x \u2208 A \u2192 x + a \u2208 B) \u2227 (\u2200 x, x \u2208 B \u2192 x^2 - b \u2208 A)) \u2194 a = 1 \u2227 b = 1 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (h1 : a + 2 * b + 2 * c = -6 * Real.sqrt 3) (h2 : abs a + abs b + abs c = 6) : 108 * (4 * Real.sqrt 3 - 7) \u2264 a * b * c \u2227 a * b * c \u2264 4 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(a b c : \u211d) (h\u2080 : 0 < a \u2227 0 < b \u2227 0 < c) : a / (b + c) + b / (a + c) + c / (a + b) \u2265 1.5 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c \u2264 0 := hc\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081"
  ]
 },
 {
  "old": "(a b : \u211d) (ha : 0 \u2264 a) (hb : 0 \u2264 b) (hab : a + 2 * b = 1) : a * b * (a + b) \u2264 1 / (6 * Real.sqrt 3) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := by nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    nlinarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  linarith"
  ]
 },
 {
  "old": "(x y : \u211d) (hx : 0 < x) (hy : 0 < y) (h : x + 4 * y = x^2 * y^3) : 4 / x + 1 / y \u2265 (27:\u211d) ^ (1 / 4) := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h1 : a * c \u2264 b * c := by\n    apply mul_le_mul_of_nonpos_right _ hc\n    linarith\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : a * c \u2264 b * c := mul_le_mul_of_nonpos_right h hc\n  exact this",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081"
  ]
 },
 {
  "old": "(a b c p : \u211d) : ((p * a - b) / (a - b)) ^ 2 + ((p * b - c) / (b - c)) ^ 2 + ((p * c - a) / (c - a)) ^ 2 \u2265 p ^ 2 + 1 := by",
  "new": "(h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have h\u2081 : a * c \u2264 b * c := by\n    nlinarith\n  exact h\u2081",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  have : c * a \u2264 c * b := mul_le_mul_of_nonpos_left h hc\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem mul_self_le_mul_self_of_nonpos (h : b \u2264 a) (hc : c \u2264 0) : a * c \u2264 b * c := by\n  nlinarith"
  ]
 },
 {
  "old": "(x : \u211d) (hx : abs x < Real.pi / 2) : (Real.sin x / x) ^ 2 + Real.tan x / x \u2265 2 := by",
  "new": "(x : \u211d) : sin x ^ 2 \u2264 1 := by",
  "step": 23,
  "proof": [
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sq_le_one (x : \u211d) : sin x ^ 2 \u2264 1 := by\n  have h\u2080 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  have h\u2081 : 0 \u2264 cos x ^ 2 := sq_nonneg (cos x)\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sq_le_one (x : \u211d) : sin x ^ 2 \u2264 1 := by\n  have h\u2080 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sq_le_one (x : \u211d) : sin x ^ 2 \u2264 1 := by\n  have h\u2080 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  have h\u2081 : 0 \u2264 cos x ^ 2 := by nlinarith [sin_sq_add_cos_sq x]\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sq_le_one (x : \u211d) : sin x ^ 2 \u2264 1 := by\n  have h\u2081 : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  have h\u2082 : 0 \u2264 cos x ^ 2 := sq_nonneg (cos x)\n  linarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sq_le_one (x : \u211d) : sin x ^ 2 \u2264 1 := by\n  have h : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith",
   "import Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sin_sq_le_one (x : \u211d) : sin x ^ 2 \u2264 1 := by\n  have h : sin x ^ 2 + cos x ^ 2 = 1 := sin_sq_add_cos_sq x\n  nlinarith [h]"
  ]
 }
]