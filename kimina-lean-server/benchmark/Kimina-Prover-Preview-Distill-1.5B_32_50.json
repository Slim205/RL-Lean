["\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  have h' := one_lt_iff_lt_inv (v x) (by simp [h])\n  exact h'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [one_lt_val]\n  rw [one_lt_val]\n  constructor\n  intro h\n  contradiction\n  intro h\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [one_div, inv_eq_inv_of_mul_left\u2080 h]\n  apply Iff.intro\n  \u00b7 -- If \\(1 < v(x)\\), then \\(v(x^{-1}) < 1\\)\n    intro h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [one_lt_iff_ne_zero]\n  simp [inv_ne_zero, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  apply Iff.intro\n  intro h1\n  have h2 : v x\u207b\u00b9 = - v x := by\n    rw [Val multiplication]\n    norm_num\n  rw [h2]\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  simp [one_lt_iff_lt_one, \u2190 one_mul, \u2190 two_mul, h]\n  exact Iff.intro\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  constructor\n  \u00b7 -- If 1 < v(x), then 1 > v(x\u207b\u00b9)\n    intro hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  constructor\n  \u00b7 intro h1\n    have : v x ^ 2 > 0 := by apply pow_two_pos_of_ne_zero; exact Ne.symm (ne_of_lt h1)\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  have h1 : v x\u207b\u00b9 = - v x := by\n    apply Valuation.neg\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by \n  have h1 : v x\u207b\u00b9 = -v x := by \n    simp [one_div]\n  rw [h1]\n  apply Iff.intro\n  <;> intro h2\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\nconstructor\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  apply cfiling_cofinite\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_coe_eq]\n  apply le_trans (by simp [cof_sub_is_maximal]) ?_\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  apply cof_lt_spec\n  . intro i h\n    simp [lsub] at h\n    exact h\n  . refine \u27e8?_, ?_, ?_\u27e9\n    . ext i\n      exact rfl\n    . simp\n      exact fun p => (p \u2218 (fun x => (x : \u2020 \u2294 id_{(i + 1)})))(\u03b9) =\u27e9\n      . intro i p h\n        simp at h\n        exact Eq.trans (h.id ( id\u208846117 _ (\u2191(i : (\u2102 * \u2020)') : \u2020')) \u27e8(i : (\u2102 * \u2020)') , fun _ => i\u27e9\u27e9)\n    . intro a h\n      simp at h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  apply le_trans ?_ ?_\n  apply Nat.cast_le.cast\n  apply Nat.cast_le.cast\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  apply le_trans _ ?_\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  apply le_of_le_coe\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by \n  applyCFRcofinal.isLeast_le\n  use \u0394 (by simp)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by ring_nf\n      _ = (x \\ z) \u2294 (y \\ z) := by rw [sdiff_self]\n      _ = x \\ z \u2294 y \\ z := by ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = x \u2294 y \u2294 z \u2294 (x \u2293 y \u2294 y \\ z \\ x \\ z) := by rw [le_sup, le_sup]\n      _ = x \u2294 y \u2294 z \u2294 ?_ := by ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        simp [lcm_mod]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by aesop\n      _ = z \u2294 x \\ z \u2293 z \u2294 y \\ z := by aesop\n      _ = _ := by aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n      _ = (x \\ z \u2294 y \\ z) := by gcongr\n      _ = _ := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n      _ = (x \u2294 y) \\ z := by simp [sdiff]\n      _ = x \\ z \u2293 y \\ z := by simp [sdiff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n      _ = (x \\ z) \u2294 (y \\ z) := by simp [sdiff_eq_sup]\n      _ = x \\ z \u2293 y \\ z := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by ring\n      _ = (x \u2294 y) \\ z := by ring\n      _ = (x \\ z) \u2293 (y \\ z) := by rw [\u2190 inf_sdiff]\n      _ = (x \\ z) \u2294 (y \\ z) := by ring\n      _ = (x \\ z) \u2293 (y \\ z) := by ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n      apply sup_right\n      apply sup_right\n      apply sup_left\n      apply le_trans\n      apply le_trans\n      apply le_of_eq\n      rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = (x \\ z \u2294 y \\ z) := by\n        simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        ring\n      _ = x \\ z \u2293 y \\ z := by\n        congr 1\n        exact sSub_id\n    )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by trivial\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [rfl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = (x \\ z) \u2293 (y \\ z) := by rw [sdiff_eq_right]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by ring\n      _ = (x \\ z \u2294 y \\ z) := by\n        let h1 : x \u2293 y \u2293 z \u2294 x \\ z := sdiff x y z\n        let h2 : x \u2293 y \u2293 z \u2294 y \\ z  := sdiff x y z\n      _ = (x \\ z \\ z) \u2294 (y \\ z \\ z) := by rw [\u2190 h1, \u2190 h2]\n      _ = x \\ z \u2294 y \\ z := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n      simp [le_refl, mem_union, mem_inter, mem_singleton]\n      left\n      exact \u27e8p, p, rfl\u27e9\n      right\n      exact \u27e8q, q, rfl\u27e9\n    _ = (x \\ z) \u2294 (x \u2294 z) := by\n      simp [le_refl, mem_union, mem_inter, mem_singleton]\n      left\n      exact \u27e8p, rfl\u27e9\n      right\n      exact \u27e8q, rfl\u27e9\n    _ = x \\ z := by\n      congr\n      exact le_trans p q\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n      _ = x \u2294 y \\ z := by simp\n      _ = x \\ z \u2293 y \\ z := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by apply sdiff_right\n      _ = (x \\ z) \u2294 (y \\ z) := by apply sdiff_left\n    _ = x \\ z \u2294 y \\ z := by ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  simp [Finmap.mul_apply, hf, hf'.symm, List.map_apply, Prod.mk.injEq]\n  done\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n  simp [Finmap.un Amy, tsubUniv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n  simp [Finmap.cons_val, List.cons_val]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  conv_lhs => rw [Finset.ext_iff, Finset.mem_sieve]\n  intro i _\n  simp\n  apply StrictMono.subset\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 -- First, we prove that if m \u2208 Submodule.preimage s, then there exists a module\n    -- transformation c : M \u2192\u2080 R such that the support of c is a subset of s\n    -- and c.sum equals m.\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 -- If $m$ is a linear combination of elements in $s$, then $m \\in \\text{span}(s)$.\n    intro hm\n    rcases hm with \u27e8c, hc\u27e9\n    use c\n    constructor\n    \u00b7 -- Show that $c.support \\subseteq s$.\n      apply subset_antisymm\n      \u00b7 -- Since $c \\subseteq s$, $c.support \\subseteq s$.\n        apply Real.c_sum_subset\n        exact hc\n      \u00b7 -- Since $\\{0\\} \\subseteq c$, $\\{0\\} = c.support$.\n        rfl\n    \u00b7 -- Show that sum of linear combinations is again a linear combination.\n      have hm {f : Finset M} {s : Set M} (hf : f \u2286 c.support) :\n        c.sum fun mi => r \u2022 (c.support : Finset.mono {mi | mi \u2208 hf}) = r \u2022 c =>\n        r \u2022 c.sum hf\n        := by\n        -- apply Nat.sum_congr rfl ?h\n        rw [Finset.sum_mono] at hf \u22a2\n        simp\n        repeat (simp_all; tauto)\n      rw [\u2190 Finset.sum_mul]\n      apply hm (Finset.subset_Icc _)\n      simp\n      apply hc\n      simp\n    exact hpow\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 -- Assuming m \u2208 Submodulespan R s\n    intro h\n    rcases h with \u27e8c, hcs, hsum\u27e9\n    use c\n    exact \u27e8hcs, ?_\u27e9\n    rw [Set.coe_sum]\n    congr\n    exact fun mi _ => hsum mi\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  -- \"c\" is the linear combination of basis elements\n  -- for \"sum\" is the sum of linear combination\n  -- r \u2022 mi = r * mi\n  -- c.support = range(c)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by \n  -- It is convenient to use finiteness of s to avoid induction\n  by_bexln\n  simp only [mem_span, mem_setOf_eq, mem_sum]\n  constructor\n  \u00b7 intro c hsub hm\n    have hm0 : \u2200 i \u2208 Range (s.card), c i \u2208 s := by\n      intro i hi\n      have : i \u2208 range (s.card) := by simp; exact hi\n      exact (show i \u2208 s.card \u21a6 c i \u2208 s from Finset.mem_range_coe_succ s).mpr this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n    intro hm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 -- Suppose $m \\in \\text{span}(s)$.\n    intro hm\n    rcases hm with \u27e8c, hc\u27e9\n    use c, by aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 -- Assume m \u2208 Submodule.some\n    intro hm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_eq_iff.mpr (fun x hx => by simp)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact_subset_of_eq (rfl rfl)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_iff.mp (fun x hx => by\n    exact hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_refl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  apply subset_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  intro x hx\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_eq_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  intro x hx\n  simpa using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by \n  exact subset_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  -- A set is a subset of itself, following the definition of subset\nsubset.refl l\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by \n  exact subset_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset.refl l\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact Set Subset.antisymm l l\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  -- Show finite set property to IsCompactElement\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have : 1 \u2264 Module.rank R M := le_of_lt h\n  have h' : Module.rank R M \u2265 2 := by linarith\n  have hy : \u2200 y, y \u2260 0 \u2192 0 < Module\u02e3.card R := by\n    intro y hy0\n    have : Set.Multiplicative.card R \u2260 0 := by simp;\n    exact Nat.pos_of_ne_zero this\n  use x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have : 0 < Module.rank R M := by linarith\n  exactexists_linear Independent_pair_of_one_lt ranksysysymm_eq_zero\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8r, hr\u27e9 := R.range_eq_sub_one_of.rank_gt (by assumption) \n  rcases hr with \u27e8U, hU, hU'\u27e9\n  simp at hU'\n  use x\n  exact Set.Infinite.neOn \u2059 ({x}, Finset.univ)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have h1 : 0 \u2264 Module Rank R M := by\n    apply Finset.Iic.succ_le.mpr\n    simp\n  have h2 : 1 < Module.rank R M := by linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by \n  intro t\n  exact funext fun t' => ?_\n  have h1 := hf t' (by \n    exact ht.ne'\n  )\n  have h2 := hg t' (by\n    exact ht.ne'\n  )\n  have h3 := hf t (by \n    exact ht.ne'\n  )\n  have h4 := hg t (by \n    exact ht.ne'\n  )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  dsimp [Ioo] at ht \u22a2\n  intros t ht1 ht2\n  have h1 := hf t ht1\n  have h2 := hg t ht1\n  have h3 : (f.t derivative) (t) = (g.t derivative) (t) := by\n    have h4 : f.t (t) = g.t (t) := by\n      simp\n      exact heq\n    simp [h4]\n  have h5 := hf (t + (totimes.map (deriv between (f.t (t + (totip (t + (totip (t + (totip (t + (totip (t + (totip (t + (totip (t + (totip(t+t (totip(t(t+totip(t+(totip(t+totip(t+(totip(t+(totip(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t+totip(t(t+totip(t(t+ totip(t(t+totip(t(t+totip(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t+totip(t(t+totip(t(t+totip(t(t+totip(t+totip(t(t+totip(t(t+totip(t(t+ totip(t(t+totip(t(t+totip(t(t+ totip(t(t+totip(t+totip(t(t+totip(t(t+ totip(t(t+totip(t(t+totip(t(t+ totip(t(t+ totip(t(t+totip(t(t+totip(t(t+ totip(t(t+_totip(t(t+totip(t(t+totip(t(t+ totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+totip(t(t+ totip(t(t+totip(t(t+totip(t(t+totip(t(t+totip(t(t+ totip(t(t+totip(t(t+totip(t(t+ totip(t(t+totip(t(t+totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+totip(t(t+totip(t(t+ totip(t(t+totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+totip(t(t+ totip(t(t+ totip(t(t+totip(t(t+ totip(t(t+totip(t(t+ totip(t(t+totip(t(t+totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+totip(t(t+ totip(t(t+ totip(t(t+totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+ totip(t(t+totip(t(t+", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n    apply_fun fun c => c t\u2080\n    have h_f_t\u2080 : f t\u2080 \u2208 s t\u2080 := by\n      apply hf t\u2080 ht\n    have h_g_t\u2080 : g t\u2080 \u2208 s t\u2080 := by\n      apply hg t\u2080 ht\n    exact heq.symm \u25b8 h_f_t\u2080 \u25b8 h_g_t\u2080\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n  -- This tactic has three goals:\n  -- 1. Proving that n / (d : \u2124) = n / (\u2191d : \u211a) by extensionality\n  -- 2. Proving (n / (\u2191d : \u211a)) = (n / \u2191d : \u211a)\n  -- 3. Proving (n / \u2191d : \u211a) = \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b by using the fact that \u230ax\u230b \u2264 x and x < x + 1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num\n  <;> try { tauto }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by \n  nlinarith [Int.floor_five_le_five, Int.add_one_le_self, Int.le_floor_add_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  rw [Int.floor_eq_iff]\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  constructor\n  \u00b7 intro h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  ext x\n  simp\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n-- prove left unit: (id : I := fun x => x) \u21aa (i \u21a6 (i |s)) \u21aa id; this is Lean 4 way of declaring the right inverse of e.sum to be e.sum|s to make the proof more convenient.\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by refine List.sub list.append ?_\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by \n  simp only [sublistdef, List.append_def]\n  ext x\n  simp\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  simp_all\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  have h : \u2200 x, f \u207b\u00b9' Ici x = \u22c3 {x : \u03b4 | f x \u2265 x} := by\n    intro x\n    have h1 := hf x\n    have h2 : f \u207b\u00b9' Ici x = \u22c3 {x : \u03b4 | f x \u2265 x} := by\n      ext y\n      simp [hf, mem_Ici]\n      aesop\n    exact h2\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n   apply lecsial.lemeasable_of_image_Ici\n   exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  apply Measurable_of_Ici\n  exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n  exact Aesop.forall_congr (fun x => by \n    apply Measurable.measure_eq_rfl); rw [haSet.mem_Ici] at hf; exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  apply Measurable.image_Ici\n  apply hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  apply Measurable.dvd_Ici\n  exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  apply ismeasurable_of every_Ici_subset_image_mem\n  intro x\n  exact hf x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  apply Measurable.setInjOn_of_imageableOn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n  rw [Gamma_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [show (1 : \u2115) = (1 : \u211d) by norm_num]\n  exact RealGamma_one\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [gamma_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n  simp [ gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n  simp [gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  unfold gamma\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma_eq integrable at t\n    simp at t\n    rw [t]\n    norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  exact rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  constructor\n  \u00b7 -- Show that s' f is open\n    have h\u2080 : s' f = \u22c3 i \u2208 Set.univ, {f i} := rfl\n    rw [h\u2080]\n    simp\n  \u00b7 -- Show that s' f is a subset of the interval\n    simp [Function.comp_apply, Set.subset_univ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rw [toNNRat, toNNRat]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  simp [toNNRat]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n  rw [toNNRat, toNNRat]\n  norm_num\n  all_goals linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n  simp [toNNRat]\n  norm_num; ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by _root\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n    native_decide\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  unfold place\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  have h1 : \u2200 x y,  ((\u03c6.eval x). eval y) = (\u03c6.eval y).eval x := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  rw [ place_eq_minimal Place.is place_is]\n  ext x\n  simp [ map_conjugate]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n  apply Eq.trans (conjugate_conj_natCast_univ \u03c6)\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  exact Eq.symm (conjugate_conj' \u03c6)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  rw [conjugate]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n       apply_fun fun t => t \u25b8 (conjugate \u03c6) at ?_\n      apply_fun fun t => t \u25b8 \u03c6 at ?_\n    simp at ?_\n    constructor\n    \u00b7 -- show it's surjective\n      intro z\n      by_cases h : z.im = 0\n      \u00b7 -- z is reals\n        have hz : z = Int.cast (z.re) := by\n          rw [Complex.ext_iff]\n          exact h\n        use Complex.ofReal (z.re)\n        rw [hz]\n      \u00b7 -- z.im \u2260 0\n        use (2 * (z.re * Complex.I) - z)\n        simp\n        ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  -- need to finish the problem by proving the function maps identity to identity\n  apply conjugate_of_const\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  apply Iff.intro\n  \u00b7 intro h\n    simp at h\n    exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, and_imp]\n  <;> intro h <;> linarith [h.1]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [Disjoint]\n  constructor\n  . intro h\n    aesop\n  . intro h\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  rw [disjoint_iff_inter_eq_empty]\n  simp\n  constructor\n  . intro h\n    exact orderoid_le_of_inter_eq_empty h\n  . intro h\n    exact orderoid_le_of_inter_eq_empty h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_def, mem_compl_iff, lt_or_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  rw [disj_eq_disjoint]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  have hx : x \u2286 y\u1d9c := by\n    rw [Set.subset_def] \n    intro z hz\n    simp at hz\n    exact hz.2\n  have hy : Disjoint x y\u1d9c := by \n    exact hx.trans hx.symm\n  exact hy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, Set.mem_inter] \n  intro h\n  have h1 : x < y := by \n    by_contra! hx\n    specialize hx hx\n    simp at hx\n    tauto \n  have h2 : x \u2264 y := by linarith\n  exact h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [Set.disjoint_iff]\n  <;> try simp [Prod.ext_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by ... -- total degree of X s is 1.\n  have hx : s.val = 1 := by simp [s]\n  rw [hx]\n  simp [X]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  rw [show {w} \u222a {v} = (G.neballFinset w) \u222a (G.neballFinset v) by simp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  Set.inter_eq_inter_of_subset_right\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.ext_iff, Set.compl, Set.inter, Set.union, Set.subset_eq, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  rw [show ({w} \u222a {v} : Finset V) = {w} \u222a {v} by rfl]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  apply Set Theoremext_iff.mpr\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.ext_iff]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n    rw [Aesop]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by \n  rw [Icc (Icc (A)) (A)]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [strictMono]\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n    simp [StrictMono]\n    constructor\n    \u00b7 intro h x y hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono.comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simpa using Real.strictMono_norm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  aesop\n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  simp [hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  exact rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  apply Eq.symm\n  apply Set.coe_eq_coe_of_interCast\n  apply Set.ext\n  intros x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  rw [one_div, \u2190 mul_div_assoc]\n  field_simp [h.ne.symm]\n  constructor\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  have h1 : 0 \u2264 b\u207b\u00b9 := by\n    apply one_le_pow\n    simp\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor\n  \u00b7 -- Forward direction: assuming 0 < b, prove that a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c\n    intro h1\n    have h2 : a * b\u207b\u00b9 \u2264 c := h1\n    field_simp [show b \u2260 0 by linarith] at h2\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  apply Iff.intro\n  . intro h1\n    have h2 : b\u207b\u00b9 \u2264 c := by\n      apply one_le_iff_le.mpr\n      norm_num\n      exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor\n  \u00b7 intro h1\n    field_simp [h] at h1\n    have h2 : a * b\u207b\u00b9 \u2264 c := h1\n    field_simp at h2\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor\n  \u00b7 -- Let $b \\in (0,+\\infty)$ and $a, c \\in \\mathbb{R}$. The inequality $ab^{-1} \\leq c$ implies $a \\leq bc$.\n    intro h\u2080 h\u2081\n    apply (one_div_lt ?h\u2082).mp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne.symm]\n  constructor\n  \u00b7 intro h1\n    exact h1.symm\n  \u00b7 intro h2\n    exact h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by \n    have h1 : b\u207b\u00b9 * b = 1 := by \n      field_simp\n      linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by \n  apply Iff.intro\n  \u00b7 -- Assume a * b\u207b\u00b9 \u2264 c, prove a \u2264 b * c\n    intro h1\n    have bpos : 0 < b := h\n    have h2 : a * b\u207b\u00b9 * b = a := by \n      field_simp [bpos]\n    have h3 : a * b\u207b\u00b9 * b \u2264 c * b := by \n      apply mul_le_mul_of_nonneg_right h1 h\n    rw [h2] at h3\n    exact le_of_lt h3\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  apply Iff.intro\n  . intro h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  have h1 : 0 < b\u207b\u00b9 := by\n    exact one_lt_inv h\nhave h2 : b\u207b\u00b9 * b = 1 := by\n  rw [inv_mul]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor\n  \u00b7 intro h1\n    field_simp\n    linarith [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  apply Iff.intro\n  intro h1\n  have h3 : b\u207b\u00b9 > 0 := by\n    apply inv_pos.mpr\n    exact h\n  apply mul_le_mul' h3\n  linarith\n  apply inv_pos.mpr\n  exact h\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor\n  \u00b7 -- Proof of the first implication: assuming a * b\u207b\u00b9 \u2264 c, we need to prove a \u2264 b * c\n    intro h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  apply Iff.intro\n  \u00b7 -- Forward direction: Assume a * b\u207b\u00b9 \u2264 c\n    intro h1\n    have h2 : a / (b * b\u207b\u00b9) \u2264 c / b := by\n      exact (div_le_div_right (by linarith only [h])).mpr h1\n    field_simp at h2\n    exact h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor\n  \u00b7 -- Prove the forward direction: a * b\u207b\u00b9 \u2264 c \u2192 a \u2264 b * c\n    intro h1\n    have h2 : b\u207b\u00b9 * b = (1 : \u211d) := by\n      simp [inv_mul_cancel]\n    have h3 : a * b\u207b\u00b9 * b \u2264 c * b := by\n      apply mul_le_mul_of_nonneg_right\n      linarith\n      linarith\n    rw [h2] at h3\n    exact h3\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  apply Iff.intro\n  intro h1\n  have h2 : a * b\u207b\u00b9 \u2264 b * c := by linarith\n  have h3 : a \u2264 b * c := by\n    field_simp [h] at h2\n    assumption\n  exact h3\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n    -- Use the definition of differentiability\n    set U := {x + h \u2022 v, x + h \u2022 v + h \u2022 w} with hU\n    -- Apply the definition of differentiability at point x + h \u2022 v + h \u2022 w (with h' = h \u2022 v) in U\n    have h'_differentiable := DifferentiableAt.mapDifferentiableAt f\n    have h'_interior : x + h \u2022 v \u2208 interior s := hU.1\n    have h'interior' : x + h \u2022 v + h \u2022 w \u2208 interior s := hU.2\n    simp at *\n    let h1 := h \u2022 v\n    simp [h1] at _\n    rw [\u2190sub_eq_zero]\n    have h_congr : f (x + h + h1) - f (x + h1) - f x - f' x \u2022 w - (h ^ 2 / 2) \u2022 f'' w w = 0 := by\n      have h1_def : h1 = h \u2022 v := rfl\n      rw [h1_def]\n      rw [h1_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n    -- Note: The problem statement involves a limit of a certain expression as h approaches 0.\n    -- The expression involves function f, its first derivative f', and its second derivative f''. Simplifying the limit will give us the Taylor approximation.\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n    -- f (x + h \u2022 v + h \u2022 w) = f x + h \u2022 f' x w + h ^ 2 \u2022 f'' x w v w / 2 + o[ h ^ 3 ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by \n        simp [interior_add_def, \u2190one_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp only [Function.comp_apply, \u2190 sub_eq_add_neg, add_left_inj, zero_add]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp [o]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  <;> simp [deriv_const, deriv_id'', mul_add, mul_assoc] <;> ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n    -- use the fact that f x + t * (w + v) = f x + t * w + t * v + o (t ^ 2)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by \n  simp [tactics]\n  rw [add_tsub_assoc]\n  simp [\u2190isupp_iff]\n  intro h\n  have hh1: (f - f x) = (f' x) \u2022 \u2191 h + (f'' x) \u2022 (\u2191h \u2022 \u2191h / 2) + o ((\u2191h) ^ 2) := by \n    have : (f - f x) = \u222b 0..1 (f' x + t \u2022 (f'' x + t \u2022 0)) := by \n      apply integral_eq_sub_def\n      simp\n      ring\n      linarith\n    rw [this]\n    apply integral_congr\n    intro t\n    ring\n    simp [tactics]\n    have hx: 0 < 1 - t := by linarith\n    have ht1: (\u2191t : \u211d) < 1 := by linarith\n    have ht2: t \u2264 1 := by linarith\n    have h2: t \u2022 (f'' x) + t \u2022 \u2191t \u2022 f'' x = t \u2022 f'' x \u2022 (1 + t) := by ring\n    ring_nf\n    rw [\u2190mul_assoc, \u2190mul_add, mul_assoc, \u2190mul_add]\n    simp\n    simp\n    ring\n  unfold Function.Two\u6bb5_convex at *\n  assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp\n  intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  rw [\u2190sub_eq_zero]\n  simp [add_assoc] at hv hw hx\n  have h1 : (f \u2218 (x + \u00b7)) = f \u2218 x + f \u2218 (\u00b7) _ := by\n    funext z\n    rw [fcompr]\n    ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  refine (fun {r} => ?!) x\n  simp [add_assoc]\n  ext h\n  mapext z\n  ring_nf\n  rw [\u2190 add_sub_right_inj (f (x + -h \u2022 v + h \u2022 w) - f (x + -h \u2022 v)) (f (x + -h \u2022 v) - f (x + h \u2022 v))]\n\n  rw [sub_eq_add_neg]\n  rw [add_eq_add_right_left]\n  rw [sub_eq_add_neg]\n  rw [add_eq_sub_left]\n  all_goals\n  assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n...??\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  -- If we can show that p\u2083 is inside the triangle formed by p\u2081, p\u2082, and p\u2084, we're done.\n  -- So we need to show p\u2083 is collinear with p\u2081 and p\u2082 modulo p\u2084.\n  -- We need to show two things:\n  -- 1. Collinear p\u2083, p\u2081, p\u2082 modulo p\u2084\n  -- 2. p\u2083 isn't on the line p\u2081, p\u2082, p\u2084\n  have h1 : Collinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P) := by\n    -- Because we're given that p\u2081, p\u2082, and p\u2084 are not collinear,\n    -- we can also derive that p\u2083 must be collinear with them modulo p\u2084. This follows from the fact that\n    -- if p\u2083 was not collinear with p\u2081, p\u2082, p\u2084 modulo p\u2084, then p\u2083 would be on the line p\u2081, p\u2083, p\u2084,\n    -- but we're given that p\u2081, p\u2083, p\u2084 isn't collinear.\n    obtain \u27e8a\u2081, b\u2081, h\u27e9 := hn\n    -- p\u2084 isn't on line p\u2081, p\u2082, p\u2084 (obviously)\n    rw [not_memline] at h\n    -- and p\u2083 isn't on that line\n    tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  intro a b c d\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  have h1 := collinearity_iff_two_zsmul_of_not_collinear (h)\n  exact h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by \n  specialize coll_spherical_of_two_zsmul_oangle_eq_of_not_collinear _ h hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  have hf : (p\u2081 = p\u2084) \u2228 (p\u2082 = p\u2084) \u2228 (p\u2083 = p\u2084) := by\n    have cos_simp : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084 := h\n    refine collinear_iff_eq_two_mul_aux.2 ?_\n    rw [\u2190 cos_simp]\n    refine collinear_iff_eq_two_mul_aux.1 ?_\n    refine collinear_iff_eq_two_mul_aux.1 ?_\n    linarith\n  rcases hf with (rfl | rfl | rfl)\n  all_goals norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [totalDegree_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n  exact rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial totalDegree_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n  simp [totalDegree_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [totalDegree_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  exact rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  apply Polynomial totalDegree_eq_zero'.mp\n  exact zeroPoly\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n  simp [totalDegree, rfl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by \n  norm_num [submodule_eq, orthOf] \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp [submodule.eq_nodup']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by \n  rw [isSubmodule_iff]\n  intro x h\n  simp at h\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  exact Eq.symm ( orth_compl_univ_singleton )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  rw [subset_def]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  ext x  -- assume x is in the intersection\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  apply LowerSemicontinuousWithinAt.add\n  exact hf\n  exact hg\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  apply lowerSemicontinuousWithinAt.add\n  exact hf\n  exact hg\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  apply isLowerSemicontinuousWithinAt of_add\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  apply is lower semige continuous within at\n  apply add\n  exact hf\n  exact hg\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  apply LowerSemic.continuousWithinAt_add\n  exact hcont\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by simp only [Fin.cons]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  rw [Fin.succ_eq]\n  ext i\n  simp\n  absurd\n  simp\n  rw [Fin.sum_univ_succ]\n  simp\n  simp\n  ac\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by <;> simp [FinCons.succ, Fin.succ_apply, Fin.isValue, zero_pow, mul_one, Fin.ofNat_succ] <;> ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [X, show n + 1 = 1 + n by ring, show n = 0 + n by ring]\n  have h : (n + 1) \u2208 Setuniv _ = 1 + n := by ring\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  apply Mathlib.Tactic.Rewrite\n  simp [Mathlib.Tactic.Rewrite.val]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  have : (n + 1 : \u2115) + 1 = n + 2 := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  apply BigOperators.le_pi\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n  have base := triangle_le_distrib X (by exact rfl) (by exact rfl)\n  rw [base]\n  have step := triangle_le_distrib X (by exact rfl) (by exact rfl)\n  rw [step]\n  apply BigOperators.add_congr_right\n  intro i hi1 hi2\n  simp [X]\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  have h1 : (n + 1).discrim (n + 1).weight = (n + 1).discrim n := by\n    ring_nf\n  have h2 : (n + 1).discrim (n + 1).weight = 2 * (n + 1).discrim n + (n + 1).weight := by\n    ring_nf\n  have h3 : (n + 1).discrim n = 0 := by \n    rw [discrim]\n    simp [pow_two]\n    ring \n  rw [h1, h2, h3]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n  -- The above line imports our necessary libraries and opens the relevant namespaces. The first line defines a theorem. The goal is to prove that the double square of a natural number is greater than or equal to zero.\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  apply eq_add_of_sub_eq\n  apply Aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n  -- compute the cardinality of both sets\n  simp [Aesop.getSetOf]\n  -- simplify the cardinalities\n  rw [Set.ncard_eq_toFinset_card']\n  rw [Set.ncard_eq_toFinset_card']\n  simp [Finset.card]\n  -- finish the job\n  all_goals linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\nimport Mathlib\n\nset_option maxHeartbeats 0\n\nimport Aesop\nopen BigOperators Real Nat Topology Rat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp\n  <;> simp [Aeod.dvd_refl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [X, Mathlib]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  induction n with\n  | zero =>\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n      simp\n      <;> try { aesop }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp\n  constructor\n  \u00b7 intro h\n    exact \u27e8by omega, h.2\u27e9\n  \u00b7 intro h\n    exact \u27e8by omega, h.2\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by \n  apply Set.ext\n  intro i\n  simp [Ico]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp\n  constructor\n  \u00b7 intro hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  rw [Nat.div_eq_iff_eq_mul_left]\n  constructor\n  \u00b7 intro h\n    rcases h with \u27e8r, hr\u27e9\n    constructor\n    \u00b7 rw [\u2190hr]\n      simp only [Nat.reduceLeDiff, \u2190Nat.add_sub_assoc, Fin.isValue, Nat.reduceMul]\n      apply Fin.le_card\n    \u00b7 apply Finset.exists_subset_eq_nonempty\n      apply Finset.filter_nonempty_of_lt_card\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  simp_all\n  linarith [hl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  by_cases h : \u2200 i j, i < j \u2192 l i < l j\n  . -- When the list is strictly increasing\n    simp at h\n    by_cases b' : empty l\n    . -- When the empty list\n      simp [empty_card'] at *\n    . -- When the list is not empty\n      simp [card_eq_zero'] at *\n      have : 1 \u2264 length l := by\n        by_contra h'\n        push_neg at h'\n        have h2 : length l = 0 := by\n          exact Nat.eq_zero_of_le_zero h'\n        have _ := h 0 1 (by simp)\n        contradiction\n      linarith\n  . -- When a list is not strictly increasing\n    push_neg at h\n    have := h 0 1 (by simp)\n    by_cases h2 : \u2200 i j, i < j \u2192 \u00ac l i < l j\n    . -- When the longest sub-sorted list\n      simp [max_assoc] at *\n      have : length l \u2264 1 := by\n        by_contra h'\n        push_neg at h'\n        have h3 : length l \u2265 2 := by\n          exact Nat.le_of_not_le_zero h'\n        have h4 : \u2203 i j, 0 < i \u2227 j < length l \u2227 \u00ac \u00ac l i < l j := by\n          specialize h2 0 1 (by simp)\n          obtain \u27e8i, j, hi, hj, h\u27e9 := h2\n          use i, j\n          have hi' : 0 < i := hi\n          have hj' : j < length l := hj\n          specialize hi hi'\n          specialize hj hj'\n          exact h\n        obtain \u27e8i, j, hi, hj, h\u27e9 := h4\n        have : j < i := by\n          by_contra h'\n          push_neg at h'\n          interval_cases k\n          . simp at *\n            linarith\n          . simp at *\n            linarith\n        rw [\u2190 Nat.le_max_iff_le_right]\n        exact Nat.le_of_lt_succ h\n      have h3 : length l = 0 \u2228 length l = 1 := by\n        omega\n      omega\n    . -- When the list is not a longest sub-sorted list\n      simp [card_eq_zero'] at *\n      obtain \u27e8i, j, h1, h2, h3\u27e9 := h\n      have : j < i := by\n        by_contra h'\n        push_neg at h'\n        nlinarith\n      have \u27e8h4, h5\u27e9 : \u2200 i j, i < j \u2192 l i < l j := by\n        intro x y hxy\n        exact h x y hxy\n      absurd h3\n      rw [card_eq_two_iff] at h\n      obtain \u27e8a, \u27e8b, c, hac, hbc, hca\u27e9, h'\u27e9 := h\n      linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by rw [comp_eq] ; exact h.erase (g.comp h)\u207b\u00b9 * w\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  have h1 : ( imageToEndpoint (f \u226b g ) w ) \u2261\n    imageToEndpoint f w := (Prodauto).mp (by simpa [h] using w)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def _ _]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def, symmDiff_def]\n    _ =  _ := by rw [symmDiff_def, symmDiff_def, symmDiff_def, symmDiff_def]; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      rw [symmDiff_def _ _, symmDiff_def _ _]\n      congr 1\n    _ = _ := by simp [symmDiff_def, SetymmDiff_def, Set.insert_union_eq, Set.inter_union_eq, Set.inter_union_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      rw [symmDiff_def] -- use symmDiff_def on c \\ (a \u2294 b)c \\ a\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2293 a \u2293 b := by\n      rw [symmDiff_def] -- use symmDiff_def on a \u2293 b\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      rw [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 (c \u2293 a \u2293 b) := by\n      rw [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n      rw [show 4 = 1 + 3 by simp]; nth 3 rw [mul_assoc]; rw [symmDiff_def 1 2]; simp\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n      ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by apply funext; simp\n    _ = _ := by apply funext; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def, _]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp [symmDiff_def, _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def _ _]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp [symmDiff_def, Set.mem_union]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp [disjunction_assoc]\ntheorem symmDiff_symmDiff_right :\n    a \u2294 b \u2206 c = a \\ (a \u2294 b) \\ c \u2294 c \\ (a \u2294 b) \u2294 a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) := by rw [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def _ _]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp [Nat.succ_eq_add_one, Nat.zero_add, funext H, H.symm]\n    _ = a \u2206 b \u2206 c := by rw [symmDiff_def _ _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by tauto\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2293 a \u2293 b := by \n      tauto\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b := by \n      tauto\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 b \u2293 c := by \n      tauto\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 b \u2294 c := by \n      tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by congr; symm; apply Or_symm\n    _ = _ := by congr; symm; apply OrSymm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      rw [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \u2293 a) \u2294 c \u2293 b := by\n      simp [min_assoc]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def] at *\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by ring_nf\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp [symmDiff_def, \u2190symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def _ _, symmDiff_def _ _]\n    _ = _ := by rw [symmDiff_def _ _, symmDiff_def _ _, symmDiff_def _ _, symmDiff_def _ _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      rw [symmDiff_def, symmDiff_def, symmDiff_def]\n      norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def] \n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 a \u2293 b) := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      rw [symmDiff_def]  -- Use the definition of symmetric difference repeatedly.\n    _ = _ := by\n      rw [symmDiff_def]  -- Use the definition again.\n      symm; ring  -- Simplify expressions.\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 a \u2293 b) := by simp\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \\ (a \u2294 b) \u2294 c \u2293 b) := by simp\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \\ (b \u2294 c) \u2294 c \u2293 b) := by simp\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \\ (b \u2294 c) \u2294 b \u2294 c) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \\ (b \u2294 c) \u2294 b \u2294 c) := by simp\n  _ = _ := by simp [symmDiff_def, add_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def, symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def]\n    _ = _ := by rw [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      rw [symmDiff_def _ _]\n      rw [symmDiff_def _ _]\n      rw [symmDiff_def _ _]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \u2294 b) \u2294 c \\ (a \u2294 c) := by\n      simp [show c \u2293 a = a \u2294 c by apply BigOperators.ncl_assoc]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n      simp [show a \u2294 b = b \u2294 a by apply BigOperators.ncl_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n        simp [Finset.length_append, Finset.length_singleton]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  simpa using congr_arg Prod.fst (get.head (a ::\u1d65 v))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by rw [Real.abs_mul]; simp; norm_cast\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by simp\n          _ \u2264 ?_ := by\n            apply norm_le_mul.norm_le_const ?_ |R| C\n            apply norm_map_eq {c' := 1} h\n          _ = ?_ := by rw [norm_map_eq {c' := 1} h]; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n    _ \u2264 |R| * C := by rw [hf (circleMap c R \u03b8) (by simp [Complex.norm_eq_abs, hf])] \n    _ = _ := by ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            have h1 : (deriv (circleMap c R) \u03b8)\u207b\u00b9 \u2022 (deriv (circleMap c R) \u03b8) = (1 : \u2102) := by\n              field_simp\n          rw [\u2190 h1]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by simp\n          _ \u2264 C := by rw [hf (circleMap c R \u03b8) (by simp [norm_map circleMap])]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          rw [mul_assoc, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n        all_goals\n          simp_all only [Complex.ext_iff, Complex.norm_eq_abs, Complex.ofReal_mul, Complex.ofReal_pow, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n        have : \u222b \u03b8 \u2208 C (c, R), (fun \u03b8 _ => \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016) = \u222b \u03b8 \u2208 C (c, R), (fun \u03b8 _ => |R| * \u2016f (circleMap c R \u03b8)\u2016) := by rw [integral_same] <;> (try norm_cast)\n        rw [integral_same]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by rw [deriv_mul_const, deriv_map, derivative_map]\n          _ \u2264 R * \u2016f (circleMap c R \u03b8)\u2016 := by norm_num\n          _ \u2264 _ := by rw [hf] -- apply assumption hf\n        done\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            apply Complex.mul.norm_eq\n            rw [Function.comp_apply]\n        _ \u2264 |R| * C := by rwa [hf]\n        _ = ... := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          ring_nf\n          rw [derivMultipicateByReal]\n          apply DifferentiableAt.mapMul\n          apply DifferentiableAt circleMap\n          apply DifferentiableAt_id'\n      _ \u2264 |R| * C := by\n        apply mul_le_mul\n        exact Real.le_two_pi_mul_Icc_Icc' R C\n        linarith\n        exact hf (circleMap c R \u03b8)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [normDeriv_map]\n          _ \u2264 |R| * C := by\n            rw [Real.norm_of_nonneg] <;> rw [hf (circleMap c R \u03b8) \u27e8_root_.pi_mul_self_le_two_pi', by\n              linarith\u27e9]\n    _ \u2264 2 * \u03c0 * C * |R| := by\n      nth_rw 1 [mul_comm]\n      rw [\u2190 mul_assoc]\n      apply norm_mul_le_mul_norm_C_mul\n      all_goals { simp_all }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          rw [norm_smul]\n          refine mul_assoc _ _ (norm_smul_apply _ _)\n          rw [Anc Sphere, Ane.symm, Aeq.symm]\n          simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n        -- normMap is norm-preserving because it is an A_t map\n    _ \u2264 |R| * C * |2 * \u03c0| := by\n  -- normMap is norm-preserving\n    _ = 2 * \u03c0 * |R| * C := by\n  rw [abs_mul (by norm_num)]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n        ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          rw [norm_smul]\n          rw [norm_mul]\n          have hderiv : norm (deriv (fun t \u21a6 (t : \u2102)) \u03b8) = 1 := by\n            have h : isUnit (tactics) (norm (deriv (fun t \u21a6 (t : \u2102)) \u03b8)) :=\n              norm_eq_one_of_isUnit (hderiv1 := by simp) (hderiv2 := by simp)\n            simp at h\n            exact h\n          rw [norm_smul]\n          simp [Complex.abs, hderiv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n        _ \u2264 |R| * C := by rw [mul_le_mul_right]; exact hf (circleMap c R \u03b8) (by apply sphere_mem_circ)]  \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          simp [norm_smul_eq_mul_norm]\n          rw [norm_smul_eq_mul_norm]\n          have : 0 < R := by\n            by_contra h\n            push_neg at h\n            specialize hf (circleMap c R \u00ac membership sphere c |R|)\n            have : circleMap c R \u00ac \u2208 sphere c |R| := by\n              simp [membership sphere]\n              rw [\u2190 R^2 + _]\n              linarith\n            exact hf this\n          simp [norm_smul_eq_mul_norm]\n          exact this\n    _ = _ := by\n        apply congrArg (\u00b7 * 0)\n        simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          apply mul_comm\n          apply deriv_mul\n          rw [norm_of_mul]\n          rw [deriv_circMap]\n          simp\n          norm_cast\n          ring_nf\n        all_goals linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          simp [Rat norm_eq_Ioi]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n    _ \u2264 |R| * C := by\n        apply_fun (fun r => \u2016r\u2016 E) at hf\n        exact hf (circleMap.circ R c \u03b8)\n    _ = 2 * \u03c0 * |R| * C := by\n        simp\n        ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          rw [deriv_mul_C]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          rw [normDeriv_eq] ; ring_nf\n          rw [deriv_circleMap]\n          ring_nf\n          rw [deriv_const]\n          simp\n          all_goals linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by simp [Complex.abs, Real.abs]\n          _ \u2264 |R| * C := by rw [\u2190 hf (circleMap c R \u03b8) (by simp [Complex.ext_iff, Real.pi_pos, R, C, c, R]; simp)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  have h1 : { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  ext x\n  simp\n  have h0 : { x | gauge s x < 1 } = interior s\u207b\u00b9 Ici 1 := by\n    ext x\n    simp\n    constructor\n    \u00b7 intro hx\n      have h1 : (1:\u211d) \u2208 Ici 1 := by simp\n      have h2 : interior s = by\n        simp [hc, show _ \u2286 (Ioi 0 : Set \u03c3\u2080 ) := by\n          intro x\n          simp [hc]\n          have h3 : x \u2208 s := by simp [hc]\n          simp\n        have h3 : interior s \u2286 Ioi 0 := by\n          rw [interior_subset_iff] <;> (try tauto)\n        have h4 : s\u207b\u00b9 \u2286 Ioi 1 := by\n          have h4 : s \u2286 Ioi 1 := by\n            by_contra!\n            have lt\u2081 : x \u2208 interior s := this\n            simp [hc, show _ \u2286 (Ioi 0 : Set \u03c3\u2080 ) := by\n            \u00b7 intro y hy\n              rw [mem_inter]\n              exact lt_trans hy this\n            exact h\u2080\n            exact lt_trans this hy\n          exact interior_le_set\n          exact h\u2080\n        have h4 : interior s\u207b\u00b9 \u2286 (Ioi 1)\u207b\u00b9 := by\n          exact (ext h) (subset_left_iff).mpr fun t => h4 (ext h) (subset_self t)\n        have h5 : (Ici 1)\u207b\u00b9 = Ioi 0 := by\n          ext a\n          simp [Ici]\n        have h5 : interior s\u207b\u00b9 \u2286 Ioi 0 := by\n          simp [h5]\n          exact h4\n        have h7 : interior s\u207b\u00b9 \u2286 Ioi 0 := by\n          exact subset_trans h4 (ext h5)\n        exact (ext (g := Ioi 1)) (subset_left_iff).mpr fun x => interior_sdiff g x \u2286 h7 x\n        intro y hy\n        have h9 := h_sdiff_subset h_sdiff_interior\n        exact And.intro h9 h_sdiff_subset\n      rw [h2] at h3\n      have _ : interior s \u2286 interior s := by\n        exact interior_subset_interior\n      exact interior_eq_interior_eq_interior_inter_iff.mpr rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  have h1 : interior s \u2286 { x | gauge s x < 1 } := by\n    intro x hx\n    simp at hx \u22a2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp [mem_range, mem_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp [hset.mem_range, hset.mem_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by \n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  funext x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  simp [range_eq_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n-- f.range is the set of all f(x) where x \u2208 M\n-- map f \u22a4 is the set of all f(x) where x \u2208 M\next x\nsimp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  rw [mem_range]\n  have : f '' Set.univ = map f \u22a4 := by\n    ext x\n    simp\n  rw [this]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by \n  ext x\n  simp [L]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext y\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext y\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  exact mul_comm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n  -- need to prove that x < b \u2194 x < b \n  simp [mem_Iic]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  simp [mem_Iic]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by <;> simp [mem_Iic]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  exact Iic.sst_congr (fun rfl => rfl)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  have hx := mem_Iic.mk.inj_iff.mpr \u27e8hx1, hx2\u27e9\n  exact hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  apply Nat.succ_le_of_lt (Nat.lt_selfOfIic x (le_of_not_gt b))\n  exact Nat.succ_le_of_lt (Nat.lt_selfOfIic x (le_of_not_gt b))\nhave : projIic b (Nat.succ b) = Nat.succ b := by\n  apply Nat.succ_le_of_lt (Nat.lt_selfOfIic (Nat.succ b) ?_)\n  exact Nat.lt_selfOfIic (Nat.succ b)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n  apply_fun funApp (b.reindexFinsetRange) fun zero_lt_one\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n  -- Proof starts here\n  apply Finset.image_reindexing_eq_of_all_mem\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n  apply Finset.reindex_eq_self\n  simp [Finset.mem_image]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rw [Finset.range_eq_bijective]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  apply angle_eq\n  simp only [mul_one]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  apply angle_eq\n  simp [left_mul]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n  simp only [angle, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  -- Use the definition of angle, both sides are equal\n  simp [V, angle, r_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  rw [isPurelyInseparable]\n  by_contra h\n  push_neg at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  apply Iff.intro\n  intro h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  -- The statement is local to a ring element or, in Lean 4, a prime ideal. So we can turn \"for all primeideals\" into \"for all primeideals\" to use extensionality to prove the goal. We want to prove that the intersection of \"v.isLocallyical\" with \"K algebra \" is empty. This follows if every element in the intersection is left, so we try contradiction.\n  apply_fun (- inter Nat.mk.injEq_bot) -- Apply extensionality to transform the goal to show that for every element ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  -- The commutant of the field of fractions of a domain is local.\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  -- trivial fact\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n    apply norm_to linear map\n apply norm_to_fun\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n  apply normedLinearMap.subsetOf.map_norm_le; \n  apply LinearMap.subsetOf.map_norm_le; \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by \n  apply Iff.intro \n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  \u00b7 intro h\n    have h1 : n \u2265 1 := by\n      by_contra h2\n      push_neg at h2\n      have := h n h2\n      contradiction\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n    constructor\n    \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  simp [minFac, le_refl, Nat.le_refl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by \n  apply Iff.intro\n  intro h \n  have h\u2081 : \u2200 x, x \u2223 n \u2192 x \u2264 n := by \n    intro x hx\n    exact Nat.le_of_dvd (by norm_num) hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  simp [minFac]\n  constructor\n  \u00b7 intro hm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  simp [minFac_one, maxFactorial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  \u00b7 intro hn\n    match n with\n    | 0 => -- not covered\n    | 1 => exact Eq.refl 1\n    | m + 2 => by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  simp [minFac]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  rename_i n\n  constructor\n  \u00b7 intro h\n    simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by \n  simp [minFac]\n  constructor\n  \u00b7 intro h\n    aesop\n  \u00b7 intro h\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n    rw [minFac_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  have h\u2081 : x \\ y \u2294 x \u2294 y = x \u2294 y := by\n    rw [show x \u2294 y = x \\ y \u2294 y by rfl]\n    antisymm\n  have h\u2082 : x \u2294 y \u2294 x = x \u2294 y := by\n    rw [show x \u2294 y = y \u2294 x by rfl]\n    antisymm\n  have h\u2083 : x \u2294 y \u2294 x = x \u2294 y := by\n    rw [show x \u2294 y = y \u2294 x by rfl]\n    antisymm\n  have h\u2084 : \u2294 idempotent := by\n    rfl\n  rw [infix_lt_iff, mem_sup_iff] at *\n  apply le_refl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  cases eq_or_ne x y with\n  | inl h => \n    simp [h]\n  | inr h => \n    cases eq_or_ne y (x y) with\n    | inl h' =>\n      rw [h', inf_eq_left]\n      simp\n    | inr h'' =>\n      cases eq_or_ne x (x y) with\n      | inl h''' =>\n        rw [h''']\n        norm_num\n      | inr h'''' =>\n        simp [h''']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  apply sup_le_inf\n  exact mem_lowerBounds \u27e8x, left_distrib, by simp\u27e9\n  exact mem_upperBounds \u27e8y, right_distrib, by simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_eq_left_of_le]\n  apply ge_of_eq\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  simp\n  all_goals intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  by_cases h : x \u2265 y\n  \u00b7 have h1 : x \\ y \u2294 x \u2293 y = x := by\n      apply sup_eq_left\n      apply le_of_lt h\n    exact h1\n  \u00b7 have h2 : x \\ y \u2294 x \u2293 y = y := by\n      apply inf_eq_right\n      apply le_of_lt (lt_of_not_ge h)\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  have h1 : x \\ y \u2294 x \u2294 y = x := by\n    exact sup_add_le_sub (x) (y) (by simp)\n  exact h1 \u25b8 (le_of_eq (ext_iff.1 (id (Eq.symm h1))))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  exact le_of inf_le_sup (le_of_mem_self (mem_inf_iff.2 (by simp))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by \n  simp [supinf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  simp [inf_sup]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by \n  have h\u2081 : x \u2294 y \u2264 x := by \n    apply le_sup_right\n  have h\u2082 : y \u2294 x \u2264 y := by \n    apply le_sup_left\n  have h\u2083 : x \u2294 y \u2264 x := by \n    apply le_sup_left\n  show x \\ y \u2294 x \u2293 y = x\n  have h\u2084 : x \\ y \u2294 x \u2293 y = x := by \n    apply_eq_of_le_of_le\n    apply le_trans\n    apply le_inf_succ\n    linarith\n    linarith\n  assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  apply le_trans _ sup_lt_sup\n  apply le_trans _ sup_le\n  simp\n  apply Or.inl\n  exact le_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n-- Here I need to express the fact that the floor of a equals the floor of b\n  rw [Int.floor_eq_iff]\n  simp only [Int.natAbs_eq_iff_eq_or_eq_neg, or_comm]\n  constructor\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by \n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  simp only [Int.floor_eq_iff]\n  intro n\n  constructor\n  \u00b7 -- Show \u230aa\u230b\u208a n \u2264 b\n    intro h1\n    specialize h n\n    simp only [Int.floor_eq_iff] at h1 \u22a2\n    linarith only [h1.1, h1.2.2] -- h1.1 is (n : \u03b1) \u2264 a, h1.2.2 is (n : \u03b2) \u2264 b\n  \u00b7 -- Show b \u2264 \u230aa\u230b\u208a n\n    intro h2\n    specialize h n\n    simp only [Int.floor_eq_iff] at h2 \u22a2\n    linarith only [h2.1, h2.2.2] -- h2.1 is (n : \u03b1) \u2264 a, h2.2.2 is (n : \u03b2) \u2264 b\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h\u2081 : \u230aa\u230b\u208a \u2264 b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have : (\u230aa\u230b\u208a : \u2191\u03b1) \u2264 a := Int.floor_le a\n  have : a \u2264 \u2191Int.fract a + \u230aa\u230b\u208a := by linarith [Int.fract_nonneg a]\n  have h' : (\u230ab\u230b\u208a : \u2191\u03b2) \u2264 b := Int.floor_le b\n  have : b \u2264 \u2191Int.fract b + \u230ab\u230b\u208a := by linarith [Int.fract_nonneg b]\n  interval_cases \u230aa\u230b\u208a = k\n  interval_cases \u230ab\u230b\u208a = k'\n  simp at *\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by \n  have h' := h (a.natAbs : \u2115)\n  have h'' := h ((a.natAbs : \u2115) + 1)\n  have : \u230aa\u230b\u208a \u2264 \u230ab\u230b\u208a := by \n    simp at h'\n    simp [Int.floor_eq_iff]\n    omega\n  have : \u230ab\u230b\u208a \u2264 \u230aa\u230b\u208a := by \n    simp at h''\n    simp [Int.floor_eq_iff]\n    omega\n  apply Int.floor_eq_iff.mpr \n  constructor \n  . linarith \n  . linarith \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h\u2081 : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n    apply Int.floor_eq_iff.mpr\n    simp [Int.le_floor_add_one]\n    constructor\n    \u00b7 intro h'\n      simp [Int.le_floor_add_one] at h'\n      have : (n : \u03b2) \u2264 b := by\n        apply h\n        norm_cast\n        norm_cast\n      linarith_rw [Int.le_floor_add_one] at h'\n      linarith\n    exact h\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply Int.floor_eq_iff.mpr\n  have h1 := h 0\n  simp at h1\n  exact h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  by_cases h1: floor a < 0\n  \u00b7 -- If floor a < 0, then -floor a > 0\n    have h1' : -floor a > 0 := by\n      omega\n    have h2 : (\u2191floor a + 1 : \u03b1) \u2264 a := by\n      have h2 : (floor a + 1 : \u2115) \u2264 a := by\n        have h3 : (\u2191floor a + 1 : \u2115) \u2264 (\u2191floor a + 1 : \u03b1) := by simp\n        have h4 : (\u2191floor a + 1 : \u2115) \u2264 \u2191\u03b1 :=  by omega\n        exact Nat.cast_le.mp h4\n        rw [Nat.cast_add] at h4\n        exact Nat.add_one_le_of_lt h3\n        linarith\n      exact Nat.cast_le.mp h2\n    apply h _ (by omega) at h2\n    have h3 : \u230aa\u230b\u208a = -floor a := by\n      simp [Int.floor_eq_iff]\n      linarith\n    have h4 : \u230ab\u230b\u208a = -floor b := by\n      simp [Int.floor_eq_iff]\n      linarith\n    show \u230aa\u230b\u208a = \u230ab\u230b\u208a\n    rw [h3]\n    suffices floor b = -floor a by omega\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by \n  have h\u2081 := h 0\n  simp [Int.floor_eq_iff] at h\u2081\n  exact h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n"]