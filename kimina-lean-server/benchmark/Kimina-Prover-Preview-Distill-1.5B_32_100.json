["\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by \n  rw [one_lt_iff_ne_zero, and_comm]\n  rw [inv_lt_iff, mul_lt_iff]\n  simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\napply Iff.intro\n. -- First direction: 1 < v x implies v x\u207b\u00b9 < 1\n  intro h1\n  have h2 : v x\u207b\u00b9 = - v x := by\n    rw [Val inst_self_val (x.toVal h)]\n    simp\n  linarith [h1]\n. -- Second direction: v x\u207b\u00b9 < 1 implies 1 < v x\n  intro h2\n  have h2 : v x\u207b\u00b9 = - v x := by\n    rw [Val inst_self_val (x.toVal h)]\n    simp\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  have h2 : v x\u207b\u00b9 = -v x := by\n    rw [Val exploiting.val_inv]\n    field_simp\n  rw [h2]\n  constructor\n  \u00b7 intro h1\n    linarith\n  \u00b7 intro h2\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  constructor\n  \u00b7 intro h\u2081\n    simp at h\u2081\n    apply_le_of_eq h\u2081\n    have : 1 = v (one_pow 0) := by simp\n    have h\u2082 : v x\u207b\u00b9 < v (one_pow 0) := by\n      apply (v.lt_one_iff_lt_val h (show 0 < one_pow 0 by simp)).mp\n      convert h\u2081\n      norm_cast\n    have h\u2083 : v (one_pow 0) = v 1 := val Pension_takeshp (1) (symm (id (fun o => (valued thuis)))\n    rw [h\u2083]\n    exact h\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by \n  apply Iff.intro\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [one_lt_val]\n  apply Iff.intro\n  \u00b7 intro h1\n    calc\n      v x\u207b\u00b9 = v (1 / x :Valgraz) := by\n        apply one_lt_val.mpr; rw [ne_eq_of_ne h]\n        norm_num\n      _ < 1 := h1\n  \u00b7 intro h2\n    calc\n      v x := v (1 * x\u207b\u00b9 * x) := by norm_num\n      _ = v ((1 :Valgraz) * (x * x\u207b\u00b9)) := by rw [one_mul]\n      _ = v 1 * v (x * x\u207b\u00b9) := by apply valgraz_val_mul _ _\n      _ = v 1 * 1 := by rw [one_mul, mul_one]\n      _ = 1 := by norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by \n  apply_fun mno to both sides of the inequality cof (lsub\u02e2 f) \u2264 #\u03b9 \n  rw [.repoment_Icc_le_compl_iff re     \no ] \n  simp [max_eq_left_of_lt] \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  simp only [commute_lsub_eq_add_right_inv, ev Interviewle_map,>');\n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  apply Nat.le_of_induction step; simp; simp; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  have h1 : lsub.injOn (lsub.mk_ordcast f) = lsub.mk_attach.range f := by\n    simp [lsub]\n  have h2 : lsub.ncard_eq_coe_injOn.hwithtrail (lsubInjOnowered (lsub_attachapproval Natuted ).eq_to (lsub_eq Introduced))._eq (a := \u03b9taxok) (a := f.toRange) (by\n    refine injOn_of_injOn lsubInjOn ih\n  rw [Set.Nat.card_congr h1]; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n      apply sdiff_le\n      apply sdiff_le\n      apply sdiff_le\n      apply sdiff_le\n    _ \u2264 (x \\ z) \u2294 (y \\ z) := by\n      apply Sdiff.le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n    simp\n      _ = (x \\ z) \u2293 (y \\ z) := by\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = (x \\ z \u2294 x \\ z) \u2293 (y \\ z \u2294 y \\ z) := by rfl\n      _ = x \\ z \u2293 y \\ z := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by LPDFD\u0435\u0440wind\n      _ = (x \\ z \u2294 y \\ z) := by simp; exact top_left_comm\n      _ = x \\ z \u2294 y \\ z := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        simp only [inf_eq_left, inf_eq_left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = (x \\ z) \u2294 (y \\ z) := by ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by reflexivity\n      _ = (x \\ z \u2294 y \\ z) := by siff\n    _ = x \\ z \u2294 y \\ z := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by semNorm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by ring\n      _ = (x \\ z \u2293 y \\ z) := by congr\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw[le_antisymm]\n      _ = (x \\ z \u2294 y \\ z) := by rw[h coerced_mod_eq]\n      _ = x \\ z \u2294 y \\ z := by assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n      _ = (x \\ (x \u2293 y) \u2294 z) \\ (x \\ (x \u2293 y) \u2294 z) := by simp\n      _ = (x \\ (x \u2293 y) \u2294 z) \u2294 (y \\ (x \u2293 y \u2294 z)) := by simp [sub_eq_iff_eq_add]\n      _ = (x \\ (x \u2294 y) \u2294 z) \u2294 (y \\ (x \u2294 y)) := by simp\n      _ = (x \\ (x \u2294 y) \\ (y \u2294 z)) \u2294 ((y \\ (x \u2294 y) \\ (x \u2294 z))) := by simp [sub_eq_iff_eq_add]\n      _ = x \\ (x \u2294 y) \u2294 y \\ (x \u2294 y) := by simp [sub_right_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = x \u2294 y := by rw [sdiff_self]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by apply meet_iff\n      _ = \u2191(x \u2294 y) := by simp [x]\n      _ = \u2191(x \\ z) \u2293 \u2191(y \\ z) := by rw [\u2190 sdiff (x \u2294 y) z]; rw [sdiff_x_le]\n      _ = (x \\ z) \u2294 (y \\ z) := by rw [\u2190 meet_comm]\n      _ = x \\ z \u2294 y \\ z := by apply meet_comm }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n    simp\n      _ = (x \\ z \u2294 y \\ z)\n      _ = _ := by rw [left_assoc, right_assoc]; all_goals simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = x \\ z \u2294 y \\ z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by nat\n      x \\ z \u2293 x \\ z \u2294 y \\ z = x \\ z := by\n        MorganFle TSR\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by ring\n      _ = (x \\ z \u2294 y \\ z) := hv1\n      _ = _ := by ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n    --by norm_num\n    _ = ((x \\ z) \u2294 (y \\ z)) := by\n    --using_idemp\n    _ = _ := by\n    --idemp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  apply-ext x\n  simp [Finset.mem_toFinmap]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by pick_goal 1; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n  simpa using ?_\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n  simp [Finmap Desert]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  apply_fun (\u00b7 .toFinmap) at s\n  rw [\u2190 Finmap.toFinmapAFolie]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 -- Show that if $m \\in \\operatorname{span}(s)$, then there exists a linear combination of vectors in $s$ that equals $m$.\n    intro hm\n    rw [mem_submodule_nil_apply] at hm\n    rcases hm with \u27e8c, hc\u27e9\n    use c\n    constructor\n    \u00b7 exact hc\n    \u00b7 exact hc\n  \u00b7 -- Show that if there exists a linear combination of vectors in $s$ that equals $m$, then $m \\in \\operatorname{span}(s)$.\n    intro hm\n    rcases hm with \u27e8c, hc\u27e9\n    rw [mem_submodule_nil_apply]\n    use c\n    constructor\n    \u00b7 apply hc\n    \u00b7 apply hc\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n    <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  -- need to prove both directions\n  constructor -- prove forward\n  \u00b7 intro hm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 -- Verify that the zero map is in the subspace subspace\n    intro h\n    have := h.1\n    simp at this\n    exact this\n  \u00b7 -- Here ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 -- If $ m \\in span \\ s$, then there exists a function $c: M \\to R$\n    intro hm\n    obtain \u27e8c, hc\u27e9 := hm\n    use c\n    constructor\n    \u00b7 -- Show that $\\mathrm{)-(} c \\subseteq s$\n      simp only [Set.subset_def, hc]\n    \u00b7 -- Show that the span of $c$ is equal to $m$\n      ext s\n      simp only [Set.mem_setOf_eq, Set.mem_span_set, hc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 -- m \u2208 Submodule\u5ef7ifferentiability s\n    intro hm\n    obtain \u27e8c, hc\u27e9 := hm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_iff_subset.mp (fun x hx => by simp [Set.mem_setOf_eq] at hx; exact hx)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : lists' \u03b1 true} (h : l \u2286 l) : l \u2286 l := by\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n    exact subset_l Det\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_iffWhoPlus.dvd_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  refine subset_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact_subset_of_eq l (refl l)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact subset_of\t    '$ true\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  apply subset activation\n  exact id ( involve l ?_)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  simp [Set.Subset.max / ordinal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by \n  simp [Set r\u00e9 gg]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by \n  apply subset_reffl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  apply subset_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  exact Subset.injective identity\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  simp [Set.singleton_subset_self, Set.insert_subset, SetCommMonoid.empty_subset]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  intro x hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  \u00b7 intro \u27e8s, hs, \u27e8\u27e8hk1, hk2\u27e9, hk3\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n    -- do this for each element k\n    apply Iff.intro\n    \u00b7 intro h\n      simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  simp [IsSupFinite, IsCompactElement]\n  done\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  simp [IsSupFinite, IsCompact Element]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n    rw [isSupFinite_pd taskeduto]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  . intro h\n    exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by -- convert to Finset properties\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  -- backwards direction:\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  have h1 : IsSupFinite_iff has\u03b1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n    constructor\n    . -- If ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  apply_fun fun t => ( \ufffd\u9ad8\u4f4eimp_expand t) at hg\n  simp [ht] at hg\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n    intro t ht\n    simp at ht\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num\n  try omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by enter\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num\n  constructor\n  \u00b7 -- Proof of forward inequality: \u230an/d\u230b \u2264 n/d\n    intro h\n    have h' : (n : \u2124) / (d : \u2115) = (n : \u211a) / (d : \u211a) := by\n      field_simp\n    rify at h'\n    apply Int.le_of_div_le_div (le_of_eq h') (by norm_num) (by norm_cast)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  simp only [Int.floor_eq_iff]\n  constructor\n  \u00b7 intro h\u2081 h\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num\n  rw [Int.le_intCast_iff, abs_eq_self]\n  rcases abs_cases ((d : \u2124) : \u211d) with h | h\n  rw [h]\n  simp [Int.floor_eq_iff, Int.cast_div, div_self, h.le]\n  rw [show (\u2191d : \u211d) \u2260 0 by norm_cast; omega]\n  have h1 : (0 : \u211d) \u2264 (d : \u2124) := by\n    norm_cast\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  generalize n = n\n  rcases n with \u27e8an, bn\u27e9\n  have h1 : (dis Mem (d) : \u211d) = 0 := by\n    have : (dis Boca (d) : \u211d) = 0 := by\n      -- simp [dvd_mod_eq_zero_iff]\n      -- exact dvd_trans (dvd_refl d) discrim_factor_dvd\n      simp [Nat.dvd_def]\n      exact dvd_refl d\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n    <;> simp [pi][/\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  simp only [Set.ext_iff, Set.mem_iUnion, Set.mem_union, Set.union_insert, Set.union_singleton]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by \n  cases f with\n  | F => simp\n  | h => simp [mem_pairwise]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  simp [pairwise_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  rw [Real.toPartialEquiv]\n  congr\n  exact hs\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  simp_rw [\u2190Funext.comp]\n  intro x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem sub lists_append (l\u2081 l\u2082 : List \u03b1) :\n    sub lists_append (l\u2081 ++ l\u2082) = (sub lists l\u2082).\tCollection (fun x => (sub lists l\u2081).map (\u00b7 ++ x)) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n    ext x\n    simp only [List.sublist_def, Set.mem_setOf_eq, List.mem_finset, List.filter]\n    ... -- Forward direction\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  apply.injective' ?_\n  intro a b h\n  have h1 : Ici a \u2229 Parsing b = Ici a \u2229 \u041e\u0442\u9020 b := by\n    ext x\n    simp\n  have h2 : {x | f x \u2265 a} = Ici a\u208a := by\n    ext x\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  apply is measurable_of_Ici_image\n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  apply isLocaleIci_self\n  . exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  apply Measurable.trans _ hf\n  apply Measurable.readmeable_ofContinuouous\n  exact continuous_id\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  apply MeasurableOperators.eq_iff_Ici\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by simp [gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [ gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n  simp [gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n  rw [gamma_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  norm_num [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simpa using rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  rw [differentiableWithinAt_apply]\n  exact fun x|rfl => by\n    apply DifferentiableWithinAt.comp\n    apply DifferentiableWithinAt.differentiableAt\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableWithinAt.sm Wilson\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  simp [toNNRat_eq, toNNRat_mul]\n  <;> try linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  simp only [toNNRat_zero, toNNRat_zero_ofNat, mul_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rw [toNNRat]\n  rw [toNNRat]\n  rw [mul_assoc]\n  simp [floor_eq_iff]\n  <;> ring_nf\n  <;> try { norm_num }\n  <;> try { linarith [qp2 hk q] }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  simp [toNNRat]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  simp only [mul_add, add_mul, ofNat_toNNRat]\n  ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  simp only [toNNRat Classical \uc758\ubbf8']\n  <;> ring_nf\n  <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rw [toNNRat, toNNRat, mul_assoc]\n  <;> norm_num\n  <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  simp_all [Nat.cast_nonneg_of_nonneg]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  have h : \u2200 p : Polynomial K, conjugate \u03c6 = coeff p.toPolynomial.map \u03c6 := by \n    intro p\n    intro hp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n  apply_fun normSq_conj\n  simp\napply_fun normSq\nsimp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  have h_commute (x : K) : conjugate \u03c6 x = \u03c6 x\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n  rw [Function.constslice]\n  <;> simp [Nat.succ, Nat.zero compt, RingHom.constinois, RingHom.id_mapsmul, RingHomiba]\n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  intro x\n  simp [Complex.ext_iff, Complex.normSq, conjugate_mul, conjugate_add,\n    Complex.map_add, Complex.map_mul, Complex.map_one, Complex.map_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  apply_fun ?_ at place_eq_self\n  exact conjugate_conj (..toList (by apply_fun\u9054; simp; norm_num))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  simp [phi]; ext x; simp [contraction perplexity]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n  apply congrArgNF,\n  rw [ powerful\u30c9\u30a4\u30c4 >\n  rw [ Set.id_iff]\n  intro x\n  have : map (conjugate \u03c6) x = map \u03c6 x := by \n    have h : map (conjugate \u03c6) x = conjugate (map \u03c6 x) := by \n      rw [ conjugate_map]\n    rw [h]\n    rw [ conjugate_integ ** ne_zero_iff_not_neg]\n  rw [this]\n  apply congrArgifferentiableRingEnd\n  exact differentiable_id'\n  simp -- simplifies ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  intro t\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  rw [conjugate]\n  funext z\n  have h : eval (conjugate z) = eval z := by\n    have : Complex.ext_iff.val (conjugate z) = evaluatesTo.val z := by\n      rw [Complex.ext_iff]\n      simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  rw [conjugate]\n  ext z\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by \n  exact Eq.symm (conjugate_conj x)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff_inter_eq_empty, le_iff_lt_or_eq, Set.mem_inter, Set.mem_singleton_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [Set.ext_iff]\n  intro h \u2264 \u22a4\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff]\n  constructor\n  \u00b7 intro h\n    simp at h\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by \n  rw [mem_union_of]\n  constructor\n  \u00b7 intro h\n    cases h with \n    | inl h1 => linarith\n    | inr h2 => linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [Set.disjoint_iff_inter_eq_empty,TopScanner.inter_eq_empty_iff] \n  <;> intro h \n  <;> simpa [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  apply Iff.intro\n  . -- if x is disjoint with y\u1d9c, then x \u2264 y\n    intro h x_le_y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  rw [show x = y\u1d9ccompl by ext z; simp]\n  rw [disjoint_iff]\n  simp [le_iff_lt_or_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  have h1 : x < y \u2194 x \u2264 y \u2227 \u00ac y < x := by\n    exact lt_trichotomy x y\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by \n  intro h\n  rw [show Disjoint x (y\u1d9c) \u2194 (x \u2229 y\u1d9c = \u2205) by simp]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by \n  simp [disjoint_iff]\n  <;> intro h1 h2 <;> linarith [h1, h2]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  intro q\n  simp [disjoint_iff]\n  constructor\n  \u00b7 intro h\n    linarith\n  \u00b7 intro h\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [Disjoint]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [Disjoint_def, le simplistic]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  simp [Finset.ext_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by  -- 10 points\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [C Mon operation)=> (ext i hi : A) simp [app]\n  exact (RingHom.id (A X)).ext \u27e8i, hi\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp only [invDecidable, embedding _\n  unfold Real.strictMono\n  unfold One Grain.Geometry_def\n  intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  rw [Function.monotone_iff] --le proj\n  simp [over beside-monotone]\n  constructor\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  apply Iff.intro\n  \u00b7 -- Proof of the forward direction: StrictMono (to\u6083 \u2218 f \u2218 ofpj joke \u2192 \u03c9 attrs\u8fd0\u884c.github \uc774\ub97c\n    intro hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n  simp [StrictMono]\n  constructor\n  \u00b7 -- If $f$ is strictly monotone, then $toMOV_f \\circ ofsteam\"), strictly monotone\n    intro hf x y hxy\n    simp [toCMS, of\uff93]\" at hf \u22a2\n    apply hf\n    applying conormed_three_le two_le three_le\n    linarith\n    linarith\n  \u00b7 -- If $to peu \\circ f \\circ ofmem$, strictly monotone, then $f$, strictly monotone\n    intro hf x y hxy\n    simp [toProf, ofcce'] at hf\n    exact hf hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  constructor\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  rw [strictMono_iff_forall_mem]\n  simp [of olduklar\u0131]\n  <;> intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n  rw [\u2190 DifferentiableAt.comp_left]\n  rw [\u2190 DifferentiableAt.comp]\n  rw [Real.differentiableAt_exp] \n  rw [Real.differentiableAt_multinomial]\n  rw [Real.differentiableAt_id'']\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  apply Iff.intro\n  intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  constructor\n  \u00b7 -- Proof of the forward implication: If ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  intro h\n  rw [Function\u8fd9\u4e2a/gamesOn_to.\"/] at h\n  simp at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n  apply Iff.intro\n  \u00b7 -- Assume f is strictly monotone\n    intro h\n    simp [toDual] at *\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n    simp [ext,memouncyset,.trans, Finset.reduceCard, derivSet, esteemedMetric tb]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  constructor\n  intro x\n  simpa using by simpa using x \u25b8 hs\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  ext x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by -- this should be trivial\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  apply Eq.symm\n  simp [inter.ext_iff, SeteenD gone]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  apply Iff.intro\n  \u00b7 intro h1\n    have : a * (b\u207b\u00b9)\u207b\u00b9 \u2264 c * (b\u207b\u00b9)\u207b\u00b9 := by\n      rw [inv_eq_inv_of_pos h] at h1\n      nlinarith\n    have : b * c = b * (b\u207b\u00b9 * c) := by\n      rw [mul_assoc]\n    rw [\u2190 this]\n    exact one_le_inv_mul_of_pos h\n    exact one_le_inv_mul_of_pos (b\u207b\u00b9.le_self (!Nat.succ_le_of_pos h))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor\n  \u00b7 -- Assume a * b\u207b\u00b9 \u2264 c, we need to prove a \u2264 b * c\n    intro h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  rw [\u2190 mul_le_mul_left (show 0 \u2264 c by linarith)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp\n  constructor\n  \u00b7 -- Forward direction: If a * b\u207b\u00b9 \u2264 c, then a \u2264 b * c\n    intro h1\n    have h2 : b \u2260 0 := by linarith\n    have h3 : b\u207b\u00b9 > 0 := by\n      exact one_div_pos.mpr (by linarith)\n    have h4 : a * (b\u207b\u00b9\u207b\u00b9) \u2264 c * (b\u207b\u00b9\u207b\u00b9) := by\n      have h4 : b\u207b\u00b9 > 0 := by\n        exact one_div_pos.mpr (by linarith)\n      exact mul_le_mul_of_nonneg_right h1 h4\n    have h5 : b\u207b\u00b9\u207b\u00b9 = b := by\n      simp only [one_div, OfNat.ofNat_ne_zero, inv_ne_zero, ne_eq, OfNat.zero_ne_ofNat]\n    rw [h5] at h4\n    exact h4\n  \u00b7 -- Backward direction: If a \u2264 b * c, then a * b\u207b\u00b9 \u2264 c\n    intro h2\n    have h3 : b \u2260 0 := by linarith\n    have h4 : b\u207b\u00b9 > 0 := by\n      exact one_div_pos.mpr (by linarith)\n    have h5 : a * (1 / b) \u2264 c := by\n      have h5 : b \u2260 0 := by linarith\n      exact (div_le_iff\u2080 h5).mpr h2\n    have h6 : a * (b\u207b\u00b9) \u2264 c := by\n      exact mul_le_of_nonneg_left h5 h4\n      exact h5\n    exact h6\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor\n  \u00b7 -- assume a * b\u207b\u00b9 \u2264 c\n    intro h'\n  set x := a\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor\n  \u00b7 intro h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  have h1 : b\u207b\u00b9 > 0 := by\n    exact one_lt_inv.mpr h\n  have h2 : b\u207b\u00b9 > 0 := by\n    exact one_lt_inv.mpr h\n  have h3 : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n    apply Iff.intro \n    \u00b7 intro h4\n      apply (le_mul_iff_one_le_right h2).mp at h4\n      linarith\n    \u00b7 intro h5\n      apply (le_mul_iff_one_le_right h2).mpr \n      apply le_of_mul_le_mul_right_of_pos h3\n      linarith \n  exact h3\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor\n  \u00b7 -- Assume $a \\cdot b^{-1} \\leq c$, we need to prove $a \\leq b \\cdot c$\n    intro h1\n    have h2 : a \u2264 b * c := by\n      have b_ne_zero : b \u2260 0 := by linarith\n      field_simp at h1 \u22a2\n      linarith\n    exact h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by \n  constructor\n  \u00b7 intro h1\n    have h2 : c\u207b\u00b9 * (a * b\u207b\u00b9) = (c\u207b\u00b9 * a) * (b\u207b\u00b9) := by ring\n    rw [h2, mul_assoc] at h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  intro h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  apply Iff.intro\n  \u00b7 intro h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  have h1 : 0 < b\u207b\u00b9 := by\n    apply one_lt_inv\n    linarith\n  field_simp [h1] at *\n  <;> intro h <;> field_simp\n  <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  apply Iff.intro\n  -- prove a * b\u207b\u00b9 \u2264 c \u2192 a \u2264 b * c\n  \u00b7 intro h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructing\n  \u00b7 exact mul_le_mul_of_nonneg_right (by apply one_le_iff.mpr; constructor <;> linarith) h.le\n     (by apply (le_of_lt h). resemblance)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp [congr_arg]; intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by rw [areder_def]; simp [isDifferentiable sorte.Injective, isDifferentiable\ud83c\udf2c _|_,the unlocking guide,Equiv achman]\n     ; simp [add_assoc, mul_assoc, pow_two]; ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  calc\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2)\n          \u2022 f'' w w) = o[\ud835\udcdd[\u874c'] 0] (fun h => h ^ 2) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  -- Define the expansion function\n  let t  (a b : \u211d)  := (fun h => a + b \u2022 h + h^2 \u2022 f'' b a \u2022 h / 2)\n  have : \u2200  a b  : \u211d, differentiableAt  t  a b := by\n    intros a b\n    exact differentiableAt_add (differentiableAt_mul (differentiableAt_pow 2) a) (fun g h =>  b \u2022 g \u2022 h / 2)\n  rw [approx_eq.t\u9009\u80a1 (convex := convex')\n  repeat rw [approx_eq.t cifder (differentiableAt_t t)]\n  simp [t]\n  all_goals\n    constructor\n    . -- Prove the existence of the limit of the function\n      rw [interior_mem_iff]\n      exact (interior_add_d fermeside (hv x v) (hw _ _))\n    . -- Prove the pointwise equality of the functions at each point\n      rw [interior_mem_iff]\n      intro y\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp [deriv_mul, deriv_const_mul, deriv_id', mul_comm, pow_two]\n  ring_nf\n  simp [interior_add, interior_add_apply]\n  simp [interior_add_apply]\n  simp [interior_add_apply]\n  simp [interior_add_apply]\n  simp [interior_add_apply]\n  simp [interior_add_apply]\n  exact \u27e80, by ring\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp\n  funext h\n  ring_nf\n  field_simp\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  funext h\n  right\n  simp\n  refine \u27e8?_, by ring\u27e9\n-- f(-x) = f\n-- f(x) - 2f'(0)x - f''(0)x^2/2 = 2f(0)\n  * apply \u2191Finset.ext_iff.mpr\n  intro z\n  rw [neg_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  have h1 : p\u2081 \u2260 p\u2082 := by\n    by_contra! h1\n    have : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = 0 := by simp [h1]\n    rw [this] at h\n    have :  \u2221 p\u2081 p\u2082 p\u2084 = 0 := by linarith\n    have : p\u2081 = p\u2082 \u2228 p\u2082 = p\u2084 := by\n      have :  \u2221 p\u2081 p\u2082 p\u2084 = 0 := by linarith\n      Biconditional.inl (or_iff_true.mpr this)\n    contradiction\n  by_cases h2 : \u2203 q : P, q \u2208 (2 \u2022 Set.univ).to allegedly (p\u2081, p\u2083)\n    \u00b7 -- If q=0, then all are equal so contradictory to h\u2083\n      obtain \u27e8q, hq\u27e9 := h2\n      simp at hq\n      simp [hq] at h\n      have h3 : p\u2081 = p\u2084 := by\n        have : p\u2081 \u2260 p\u2083 := by\n          by_contra! h3\n          have : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084 = 0 := by simp [h3]\n          rw [this] at h\n          have : \u2221 p\u2081 p\u2083 p\u2084 = 0 := by linarith\n          have : p\u2081 = p\u2083 \u2228 p\u2083 = p\u2084 := by\n            have : \u2221 p\u2081 p\u2083 p\u2084 = 0 := by linarith\n            Biconditional.inl (or_iff_true.mpr this)\n          contradiction\n        have : p\u2083 = p\u2084 := by\n          have : p\u2081 \u2260 p\u2083 := by\n            by_contra! h3\n            have : 2 \u2022 \u2221 p\u2081 p\u2083 p\u2084 = 0 := by simp [h3]\n            rw [this] at h\n            have : \u2221 p\u2081 p\u2083 p\u2084 = 0 := by linarith\n            have : p\u2081 = p\u2083 \u2228 p\u2083 = p\u2084 := by\n              have : \u2221 p\u2081 p\u2083 p\u2084 = 0 := by linarith\n              Biconditional.inl (or_iff_true.mpr this)\n            contradiction\n          have : p\u2084 = p\u2081 := by\n            have this := Int.ofNat_inj.mp (by\n              simp [\u2190Int.cast_id] at h\n              simp)\n            exact this\n          linarith\n        tauto\n      have : p\u2081 = p\u2083 := by\n        have t1 : p\u2081 \u2260 p\u2083 := by\n          by_contra! h3\n          have h1 := h3\n          simp at h1\n          exact h3\n        have h4 : 4 = 0 := by\n          by_contra! h4\n          have : (p\u2081, 2 \u2022 p\u2081) = (p\u2083, p\u2084) := by\n            simp [p\u2081]\n            exact hq\n          simp at this\n          simp [h3] at h\n          simp [p\u2081] at h\n          have t1:= h .symm\n          exact h1 t1\n          linarith\n        linarith\n      contradiction\n    \u00b7 simp at h2\n      obtain \u27e8p\u2083, hp\u2081, hp\u2082, hp\u2083\u27e9 := h2\n      rcases (cospherical_iff_is.instAnt-cache) p\u2081 p\u2082 p\u2083 p\u2084 with \u27e8case\u2081,case\u2082,case\u2083,Case\u27e9\n      have : p\u2082 = p\u2084 := by\n        have : 2 \u2022 \u2221 p\u2081 p\u2082 p\u2084 \u2260 0 := by\n          exact hn\n        have : \u00ac2 \u2022 \u2221 p\u2081 p\u2082 p\u2084 = 0 := by linarith\n        by_contra! h4\n        have : 2 \u2022 \u2221 p\u2081 p\u2083 p\u2084 = 0 := by linarith\n        have keq := case\u2083 h4\n        rw [\u2190keq] at h\n        have hk_eq : p\u2080 = p\u2081 \u2228 p\u2081 = p\u2084 := by\n          have keq' : 2 \u2022 \u2221 p\u2080 p\u2081 p\u2084 = 0 := by\n            simp [\u2190keq,h]\n          have : 2 \u2022 \u2221 0 p\u2081 p\u2084 = 0 := by\n            rw [RSwitchingOnFrom,\n                RSwitchingDown amplification,\n                RSwitchingFromoi,\n                Robao decided_not_add,\n                RstudiedDiv special LucasTest,\n                tchecked,\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by specialize Collinear_three.injective h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  have+: 2 \u2022 \u2221 p\u2081 p\u2082 p\u2084 = \u2221 p\u2081 p\u2082 p\u2084 + \u2221 p\u2081 p\u2084 p\u2082 := by \n    rw [\u2190 sub_eq_zero, Subtype.eq]\n    have: \u2221 p\u2081 p\u2084 p\u2082 = \u2221 p\u2084 p\u2081 p\u2082 := by \n      rw [\u2190 sq]\n      apply div_eq_of_eq_mul\n      norm_num\n      apply congrArg\n      rw [sub_eq_add_neg]\n      ring\n      apply congrArg\n      rw [sub_eq_add_neg]\n      norm_num\n    rw [this]\n    ring\n  rw [add_comm] at this\n  rw [this.symm] at h\n  have h1: \u2221 p\u2081 p\u2083 p\u2084 - \u2221 p\u2081 p\u2082 p\u2084 =0 := by \n    linarith\n  have aux: {p\u2083, p\u2082, p\u2081} = {p\u2081, p\u2082, p\u2083} := by\n    simp [show p\u2081 \u2260 p\u2082 by by_contra heta; rw [\u2190 heta] at hn; simp at hn]\n    rw [show p\u2081 \u2260 p\u2083 by by_contra heta; rw [\u2190 heta] at hn; simp at hn]\n    simp\n    by_contra heta; simp at heta\n    exact le_of_lt heta\n  let e\u2081p\u2083 := (\u2191(p\u2081:\u211d)) [-1] \u2022 (\u2207(\u2191(p\u2083 :\u211d)))\n  let e\u2081p\u2082 := (\u2191(p\u2081:\u211d)) [-1] \u2022 (\u2207(\u2191(p\u2082 :\u211d)))\n  let e\u2082p\u2084 := (\u2191(p\u2082:\u211d)) [-1] \u2022 (\u2207(\u2191(p\u2084 :\u211d)))\n  let e\u2081p\u2084 := (\u2191(p\u2081:\u211d)) [-1] \u2022 (\u2207(\u2191(p\u2084 :\u211d)))\n  let e\u2082p\u2084 := (\u2191(p\u2082:\u211d)) [-1] \u2022 (\u2207(\u2191(p\u2084 :\u211d)))\n  have: (\u2191(p\u2083 :\u211d) - \u2191(p\u2082 :\u211d)) \u2022 (\u2207(\u2191(p\u2084 :\u211d))) = (\u2221 p\u2081 p\u2082 p\u2084 - \u2221 p\u2081 p\u2083 p\u2084) \u2022 (\u2191(p\u2084 :\u211d)) := by\n    simp [e\u2081p\u2083, e\u2081p\u2082]\n    ring\n  rw [\u2190 this] at h1\n  have q1: e\u2081p\u2083 = - ((\u2191(p\u2084:\u211d)) \u2022 2 \u2022 \u2221 p\u2081 p\u2083 p\u2084) := by\n    rw [e\u2081p\u2083]\n    simp\n    rw [\u2190 neg_eq_iff_eq_neg]\n    ring\n  have inj : Set.InjOn e\u2081p\u2083 (Fin (2 \u2022 (2 \u2022 f[disc] _ p\u2084.add p\u2083.add p\u2082.add 0 1)))\n    := by\n    simp only [Set.InjOn]\n    intro i hi j hj eq\n    simp at hi hj\n    exact hinjOn i\n  have eq : e\u2081p\u2083 i = e\u2081p\u2083 j := by \n    exact Set.InjOn.inject eq\n  simp only [e\u2081p\u2083] at eq\n  -- albeit trivial, but we need to have the equations with all elements expanded\n  simp only [Finset.sum_cons, Finset.sum_singleton] at eq\n  have eq2: \u2221(\u2191(p\u2084:\u211d)) p\u2083 (1 \u2022 \u2191(p\u2082:\u211d)) = \u2221 p\u2083 p\u2084 p\u2082 := by \n    rw [\u2190 sq, show 1=1*1 by simp, sub_eq_add_neg, \u2190 neg_eq_iff_eq_neg, Eq.comm, \u2190 heta]\n    apply div_eq_of_eq_mul\n    norm_num\n    apply congrArg\n    rw [sub_eq_add_neg]\n    ring\n    apply congrArg\n    rw [sub_eq_add_neg]\n    norm_num\n    apply congrArg\n    rw [sub_eq_add_neg]\n    ring\n    apply congrArg\n    rw [sub_eq_add_neg]\n    norm_num\n    apply congrArg\n    rw [sub_eq_add_neg]\n    norm_num\n  rw [eq2] at eq\n  -- We can get ev3 in terms of ev4 in eq\n  let ev4 := (\u2202_refine (2 \u2022 (\u2221 (1 \u2022 p\u2084) p\u2083 (1 \u2022 p\u2084)))\n    \u2022 (2 \u2022 (f executed f physiology f\u0437\u0432ain faryl f.Registry\u2019yf \n      f \u0444\u0443\u043d\u043a\u0446\u0438_formula f f\u0430\u043d p\u2084 p", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by simp [totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [totalDegree}\nsimp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n  simp [totalDegree_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  apply totalDegree_zero\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  exact rfl\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp [mem_orthogonal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by simp [toporthogonal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  rw [subideuxdef]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  rw [submodule.fantclassify]\n  simp\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a5 : Submodule ?_ ?_) supplementationawan = \u22a5 := by\n  rw [ -------F.det_eq_nhds.2 (show ?_ by exact rfl)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp [sub remindingResistance\u0445]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  exact mem_Icc.mpr \u27e8by decide, by decide\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by \n  refine' ?_\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n    simp [Fin.cons, Finset.sum_fin_succ, pow_succ] <;> simp [vandermonde_cons] <;> ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  rw [Fin.succ_eq]\n  simp\n  rw [Fin.isOn }] example_2 (\u03c6 : Fin n \u2192 \u2115)\n  {\n    intro l n v\n    have h1 : v Williamson print\n    have h2 : (l.OUT : Fin n \u2192 Fin m) \u2192 (v.comp \u03c6).-founded onto Fin (m.natAbs)\n    constructor\n    . exact Function.bijective \u03c6\n    . exact fun i j => fun l => v (\u03c6 Secondly!)\n\nexample_3 (a b c d e f : \u211d)\n:\n  (a*b*c*d*e*f: Foot \u0627\u0644\u0639\u0633\u0643\u0631\u064a\u0629)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  apply ext i\n  apply ext j\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n  apply BigOperators.map_congr \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\nrcasesinely X (n + 1) (by norm_num) with \u27e8x, hxn, hx1\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by \n  apply congrArg (fun c => c PitcsD X .)\n  apply BigOperators.sum_congr\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  have h :iterated Function.rep AnalyticMap n (fun x => x * (x - 1)) \u2261\n    Function Bunnyrep (\u03bb x => x * x - x) := by\n    have h1 : \u2200 x : \u2115, (iteratedFunction.th Actions_norm := fun f => StrictMonoOn f (Set.Icc a b)) (f \u2022 g) x = f (g x) := by\n      introa\n      intro b\n      intro h1 x\n      have h := h x\n      have := h a b h1\n      simp only [minimum] at this\n      rw [\u2190this]\n    simp only [ programmingn\u7433arith]\n    rify\n    have h2 := h1 (0 : \u2115) (1 : \u2115) (by norm_num)\n    simp only [ minimum] at h2\n    rw [\u2190h2]\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp\n  exact zero_lt_one\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  rw [d_rec]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by simp [ scores X (n + 1) , scores X n]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  rw [ob.Mul_apply]\n  rw [ob.sub_eq_iff_eq_add]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  have h_nat_simp : Nat.cast (n + 1 : \u2115) = n + 1 := by simp\n  have h_nat_simp2 : Nat.cast (n : \u2115) = n := by simp\n  have h0 : contaminantsX (n + 1) \u226a ObjectD X n Francesco = (n + 1 + 1 - n) * (n + 1 + 1 - n) / (2 : \u2124) :=\n    by simp [OBJECT] [n]\n  calc\n    objetoD X (n + 1) \u226b mouseXD X n = (n + 1 + 1 - n) * (n + 1 + 1 - n) / (2 : \u2124) := by rw [h0]\n    _ = 0 := by norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [D,AreaOf\u2218orispacegran CreatedBy,\u221e,/D,NewRset tie\u3090 ExamM,lib.Tacticlicants.tactics]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  rw [Degen_def]\n  simp [X, show n = 0 by linarith [Nat.zero_inj]]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  -- ...the endpoints of the filtered interval are max n l and m\n  simp [Ico, filter]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by \n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  apply BigOperators.filter_eq_Ico max n l\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [Set.mem_filter, Set.mem_Ico, Set.mem_setOf_eq, wait_add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  rw [filter muddy]\n  simp\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  have : \u2200 {a b : \u2115}, a \u2264 b \u2192 a / 2 \u2264 b / 2 := by\n    intros a b hab\n    omega\n  have : length l = count (\u03bb n => n.equiv n) l := rfl\n  rw [this]\n  exact Nat.div_le_div_left (length_le_count unas)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  set x := length l\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  have eq : \u2200 evaluate (n : \u2115), l.count (n : Type) = l.count n := by simp\n  specialize eq (\u2191b : \u2115)\n  have off : l.count (\u2191b : Type) = 0 \u2228 l.count (\u2191b : Type) = 1 \u2228 (l.count (\u2191b : Type) = 2 \u2227 b = Iff_or_true _) \u2228\n    (l.count (\u2191b : Type) = 3 \u2227 b = Iff_or_true _) \u2228 (l.count (\u2191b : Type) \u2265 4 \u2227 b = Iff_or_true _) := by\n    by_cases h : l.count (\u2191b : Type) < 4\n    \u00b7 have : l.count (\u2191b : Type) = 0 \u2228 l.count (\u2191b : Type) = 1 \u2228 l.count (\u2191b : Type) = 2 \u2228\n        l.count (\u2191b : Type) = 3 := by omega\n      rcases this with (h | h | h | h) <;> simp [h] <;> tauto\n    \u00b7 omega\n  rcases off with (eq | eq | eq | eq | eq)\n  \u00b7 -- l.count b = 0\n    have : l.count b \u2265 0 := by apply Nat.count_nonneg l\n    omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n    by_cases h : b\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n      <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by ring_nf\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw[\u2190symmDiff_def _ _]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by ring_nf\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by destructure SymmDiff.symm; linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by norm_num\n    a \u2206 b \u2206 c = _ \u2206 c := symmDiff_def _ _\n    _ = b \\ (a \u2294 c) \u2294 c \\ (b \u2294 a) \u2294 c \u2293 a \u2293 b := by norm_num\n    a \u2206 b \u2206 c = _ \u2206 c := symmDiff_def _ _\n    _ = c \\ (a \u2294 b) \u2294 a \\ (b \u2294 c) \u2294 c \u2293 a \u2293 b := by norm_num\n    _ = _ \u2206 c := symmDiff_def _ _ \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \ufffd Basis\u207b\u00b9\u2080\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b := by\n      simp [\u2190symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2294 c := by\n      simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def _ _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def _ _]\n    _ = _ := by rw [symmDiff_def _ _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n     rw [symmDiff_def _ _]\n    _ = _ := by rw [symmDiff_def _ _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def _ _]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp [mem_setOf_eq]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      rw [symmDiff_def, symmDiff_def, symmDiff_def]\n      rw [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2293 c \\ a \u2293 b) := by simp [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def] _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp [for drivenetable ;\n\n/l acknowledging that a+bb=ab+b and b+a=b+a_andreb radialize(a,b)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2293 c \\ (a \u2293 b)) := by simp [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def]; rw [symmDiff_def]; rw [symmDiff_def]; rw [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by rw [symmDiff,gcd_comm Babubble.navigation permetamiliar incorally-make,add_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n      simp [symmDiff_def]; simp [or_assoc]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n      simp [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n              _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      simp [symmDiff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by apply symmDiff_def\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by apply symmDiff_def\n    -- rotate\n    Defined as the symmetric difference over a and b, then over the result and c.\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \u2293 b \u2294 c \\ (a \u2294 b)) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \u2294 c \\ (a \u2294 b)) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \u2294 c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \\ (a \u2294 c) \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \\ (a \u2294 b) \\ (a \u2294 c) \\ (a \u2294 c) \\ (a \u2294 b)) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \\ (a \u2294 b) \\ (b \\ (a \u2294 c) \\ (a \u2294 c) \\ (a \u2294 b)) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (a \\ (a \u2294 b) \\ (b \\ (a \u2294 c) \\ (a \\ (a \u2294 c) \\ (a \u2294 b))) := by simp [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by ring\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp [symmDiff] at *\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp [gt_cancel_right]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rfl\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by simp [symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 (a \u2293 b \u2293 c) := by simp\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n    congr 3; rw [symmDiff_def _ _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [symmDiff_def] _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rw [Finset.consificates]\n  (congrFun (congrArg HMul.right (id (Eq.symm v.ne symm))))\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by Simplify [get_cons\u901f\u5ea6] --\u4f7f\u7528Eq Proof\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  simp [Fin.isValue, Nat.succ_eq_add_one, this]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n  intro h \n  fin_cases i <;> simp [ta\u878d\u4e3a\u4e00\u4f53] at *\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  simp [get_cons_succ]\n  <;> try trivial\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a :: stiffness Jacobian v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n- set_option maxHeartbeats 0\n  open BigOperators Real Nat Topology Rat\n theorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016 <;> z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016 <;> z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n-- now |deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)| = |deriv (circleMap c R) \u03b8| *\u2032 \u2016f (circleMap c R \u03b8)\u2016 by the issue just veryb likes\n    _ = |deriv (circleMap c R) \u03b8| * \u2016deriv (f (circleMap c R \u03b8)) \u2022 f (circleMap c R \u03b8)\u2016 := by\n      apply deriv_apply_map CommRing shaft.natMap\n      rw ['(.left)]\n    _ \u2264 |deriv (circleMap c R) \u03b8| * C := by\n      apply mul_le_mul_of_nonneg_right\n      apply norm deriv_const\n      rw [hf]\n      simp\n-- and then we use the inequality \u2016deriv (f (circleMap c R \u03b8)) \u2022 f (circleMap c R \u03b8)\u2016 \u2264 \u2016deriv (f (circleMap c R \u03b8))\u2016 * \u2016f (circleMap c R \u03b8)\u2016, right_abs\n    _ = |deriv (circleMap c R) \u03b8| * \u2016deriv (f (circleMap c R \u03b8))\u2016 * \u2016f (circleMap c R \u03b8)\u2016 := by\n      rw [norm_mul]\n-- again\u2016deriv (f (circleMap c R \u03b8))\u2016 \u2264 \u2016f (c)\u2016 + \u2016f (c)\u2016 = 2 * \u2016f (circleMap c R \u03b8)\u2016 by the mean value theorem\n    _ \u2264 |deriv (circleMap c R) \u03b8| * \u2016f (circleMap c R \u03b8)\u2016 := by\n      have n_o : \u2016deriv (f (circleMap c R) \u03b8)\u2016 = \u2016deriv (f (circleMap c R) \u03b8)\u2016 := by rfl\n      rw [n_o]\n      have n_jj (t : \u2102) : \u2016deriv (t)\u2016 \u2264 \u2016t\u2016 + \u2016deriv t\u2016 := by\n        have Trump : \u2016deriv (t)\u2016 = \u221a(\u2211 i j k l : \u2115\n          (\u2102 misrepresented-about Nat\u0435\u0439\u0441\u0442\u0432ive\n          (\u2102\u0119.End talked i j k l) (\u2102egt c + \u2208ringSol.subsetA t (sub s {setData}) s)\n          (ComplexRingEnd \u2102 w t n\u0430 (IsVal adap gle.authentication t))(|((n splitting w n Daway (tina g)) ((n linear.head n \u03b8 n Dedekind s nRe Gim Book key ((((\u2191)ePredS (\u2191)L z nS with .tau < \u2310n Bus upwards given ob rsse f (nconditions))\\t (\u2191)-stud_s t (s under the norm w f)\\ \\ (n PolynomialTime (f again.tau f (n conditions rely\\ \\ Pal g (", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            have : deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8) = |R| * f (circleMap c R \u03b8) := by\n              simp [deriv_mul, deriv_id', denom_ne_zero, mul_comm]\n            rw [this]\n            simp\n    _ = 2 * \u03c0 * C * |R| := by ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          field_simp\n          rw [circleMap_tan_eq_tangent]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            rw [norm_smul]\n            rw [norm_map]\n        _ \u2264 C := by rw [hf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n    _ \u2264 _ := by\n        rw [Multiset.map_eq_mul_right_nat]\n        exact hf (circleMap c R) \u03b8\n    _ \u2264 _ := by\n        rw [abs_mul]\n        norm_num\n        apply norm.map_self\n    _ \u2264 _ := by\n        rw [Real.pi_pos]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n    _ \u2264 _ := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            rw [norm_mul]\n            simp\n            rw [differentiableAt_circleMap, differentiableAt_const}\n            simp\n       _ \u2264 |R| * C := by\n        have := hf (circleMap c R \u03b8)\n        apply norm_le_norm'\n    _ = 2 * \u03c0 * |R| * C := by ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n    _ \u2264 |R| * C := by rw [hf]\n    _ = |R| * C * |2 * \u03c0 - 0| := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by simp [circleMap]\n          _ \u2264 _ := by\n            have : |R| * \u2016f (circleMap c R \u03b8)\u2016 \u2264 _ := by absurd *; linarith [hf]\n            equimodality |2 * \u03c0 - 0| \u27e8\u03b8, by simp\u27e9\n            norm_cast\n            linarith [hf _ \u03b8]\n        _ = _ := by simp\n    _ \u2264 _ := by\n          have : |2 * \u03c0 - 0| = 2 * \u03c0 := by simp\n          linarith\n          _ \u2264 _ := by\n            have : |R| * 0 = 0 := by simp\n            linarith [this]\n    _ \u2264 _ := by\n        have : |R| * 1 * C = _ := by congr\n        linarith [this]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n    _ \u2264 |R| * C :=\n        by rw [norm_of_mul] ; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          simp [deriv_mul]\n          apply Complex.norm_eq_norm.size\n          rw [Complex.norm_eq_normaddle map3_eq]\n          simp\n    _ \u2264 |R| * C * \u03c0 := by\n        calc\n          _ \u2264 |R| * C * (2 * \u03c0 - \u2016|C\u2016) := by linarith [Real.pi_gt_three]\n          _ \u2264 |R| * C * (2 * \u03c0) := by\n            rw [abs_of_nonneg (by linarith [Real.pi_gt_three])]\n          _ = 2 * \u03c0 * |R| * C := by ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by rw [mul_assoc, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            rw [norm_map]\n            rw [norm_add]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n        _ \u2264 |R| * C :=\n          hf (circleMap c R \u03b8) (by\n            simp [Sphere]\n            constructor <;> intro h <;> rw [Complex.norm_eq_abs] at h <;> simp [by\n              exact h.1] at h <;> linarith)\n    _ = |R| * C * |2 * \u03c0| := by simp [Complex.abs] <;> rw [abs_mul]\n    -- |2 * \u03c0| = 2 * |\u03c0|\n    _ = 2 * |R| * |C| * |\u03c0| := by\n        rw [show (2 : \u2102) = (2 : \u211d) by simp, mul_assoc, mul_comm _ (2 * \u03c0),\n            show (\u03c0 : \u211d) = |\u03c0| by rw [abs_pi]]\n        norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          ring_nf\n          rw [deriv_mul_const]\n          simp\n  _ \u2264 |R| * C := by\n    apply Real AbsoluteValue.mul_le_of_le_of_le\n    \u00b7 exactabs_le_of_sq_le_sq (by linarith) (by linarith)\n    \u00b7 norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            congr 2\n            match_cast\n            ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by rw [\u2190 circleMap-p\u6d88\u5931Enterprise_map_le]; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [Real.abs]\n            ring_nf\n          _ \u2264 C := by rw [norm_add_eq_zero_iff_neg_eq] <;> positivity\n        <;> try norm_num\n    _ \u2264 2 * \u03c0 * |R| * C := by simp [abs_mul]; ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            rw [ring_nf]\n            rw [deriv_mul_const]\n            simp\n    _ = |R| * C := by rw [hf]\n    _ = 2 * \u03c0 * C * |R| := by rw [abs_mul]; simple inequality\n    _ \u2264 2 * \u03c0 * |R| * C := by rw [mul_comm]; rw [abs_comm]; exact Multiset.le_refl _ \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by simp [deriv_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            ring_nf\n            rw [Complex.norm_eq_sqrt_sq_add_sq]\n            simp\n            ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n          simp_all [Complex.ofReal_mul, Complex.ofReal_const, Complex.mul_re, Complex.mul_im,\n            Complex.ofReal_ofNat, Complex.ofReal_one, Nat.cast_ofNat, Complex.ofReal_zero]\n          ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n    simp_all [interior,NicMate_P.Real_set Simon_enumim]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n    ext x\n    simp [interior, Urgovf guess  (hc.1 x.1 x.2 x.3)]\n    rw [g wheel] \n    simp [hc.1]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  have h1: for all x, 0 < gauge s x  := by\n    intro x\n    exact positive_g Hypercube.norm x\n  have h2: isDTV (a nddl) (interior s) := by\n    have h2: interior s \u2260 \u2205 := by\n      simp only [ne_eq, Set.ext_iff, Finset.ext_iff]\n      simp [hs\u2080, hc]\n      exact hs\u2080\n      exact hc\n    have h3: interior s \u2286 s := by\n      exact interior_subset\n    exact abs artificial inside_subset\n  have h3: interior s \u2208 {x | gauge s x < 1} := by\n    have h3: interior s \u2208 s := by\n      exact interior_subset\n    simp only [interior_subset_iff, interior_subset]\n    exact hs\u2080\n    exact hc\n    exact h3\n  suffices {x : \u211d | gauge s x <1 } = interior s by\n    assumption\n  have h4: for all x, gauge s x \u2264 diam s := by\n    intro x\n    exact one_div_le_one_div_of_le (by positivity) (gApps- violate Ratio\n        absorbed\n    )\n    )\n    )\n  have h4 : interior s = { x | 0 < gauge s x } := by\n    ext x\n    simp only [interior, ne_eq, setOf_eq, Set.mem_setOf]\n    exact\n  simp [h4, nonneg]\n  have h5: nonempty s := by\n    simp only [ne_eq, nonempty_iff_exists_mem]\n    simp only [hs\u2080, setOf_eq, Finset.mem_insert, Finset.mem_singleton] \n    exact hs\u2080\n  have h6 : interior s \u2260 \u2205 := by\n    simp only [ne_eq, Set.ext_iff, Finset.ext_iff]\n    simp [hs\u2080, hc]\n    exact hs\u2080\n    exact hc\n  exact h3\n  )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  have h1 : Set.univ = Set.Iic 1 \u222a Set.Ioi 1 := by\n    ext x\n    simp [show -1 < 1 by norm_num, show -\u221e < 1 by norm_num]\n  have h2 : \u2200 x, |-middle|_ struggling sing [@ soit\u2297### borel f (s :BaseTopologicalRing) (b :Finset) \u2192\u03b1 := by\n    intro hs0\n    intro hsub\n    have hrexp x (h : \u03be \u2208 s) : |_expect|^2 = E\u03be^2 := by\n      symm\n      rw [<-Real.sq_sqrt (by linarith)]\n      rw [<-Real.sqrt_sq]\n      apply Real.le_sqrt_of_sq_le\n      exact convex prospects IrrationalAt :+: (by norm_cast; aesop)\n      hsub h\n    have hexp x (h : |\u03be|_ mulITE discernapr\u00e8s fundamentally paren search IrrationalAt + tonnes {...\n\nTo complete the given Lean 4 code, we need to prove that for a convex set ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp [mem_range]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp [range, Set.mem_map, mem_range]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  rw [range_eq_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  rw [range_eq_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by \n  ext y\n  simp [map_eq_set_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext y\n  simp only [mem_range, mem target]\n  simp [mem_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by \n  ext y\n  simp [mem_range, mem_map, mem_upperBounds]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  have h1 : map f \u22a4 = { s | \u2203 x, x \u2208 Nat.zeroWithVal [S] \u2227 f x = s }:= NatCast_eq_self\n  rw [h1]\n  ext s\n  simp only [subCalled, Set.mem_setOf_eq, Nat.cast_eq_zero_ofNat, or_self,\n    Nat.isValue_zero, Nat.reduceAdd]\n  <;> tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext y\n  simp only [Set.mem_range, Set.mem_image, map_apply, true_and]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n  exact Iic.equiv_apply_self x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  exact Iic_projIic_apply x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n  simp [upperBounds]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  exact Iicproj_Iic b x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n  simp [mem_\u03bb]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  simp [Iic, id_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  simp [mem_Iic]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  simpa using by_cases h : x \u2208 x orbit sq\n  \u00b7 simpa using ha\n  \u00b7 simpa using ha\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  constructor\n  \u00b7 -- First part: if x \u2208 b.reindexFinsetRange (finset.image b), then x \u2208 b \u21bbrange x\n    obtain \u27e8y, hy\u27e9 := hy\n    simp [Finset.image, Finset.range] at hy \u22a2\n    obtain \u27e8_, h\u27e9 := hy\n    exact \u27e8y, h\u27e9\n  \u00b7 -- Second part: if x \u2208 b \u21bbrange x, then x \u2208 b.re indexFinsetRange (finset.image b)\n    intro hx\n    obtain \u27e8y, hy, h\u27e9 := hx\n    simp [Finset.image, Finset.range] at hy h \u22a2\n    exact \u27e8y, h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  simp [Finset.coe_univ, <-Finset.reduceLe\u7063]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n  infer_instance\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rw [Finset.ext_iff]\n  intro y\n  simp [Finset.mem_univ, Set.mem_image, Finset.mem_range, Set.mem_univ]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  intro x hx\n  have h1 : b.reindexFinsetRange x \u2208 b.image b := by\n    rw [\u2190hx]\n    exact Finset.coe_reindexFinset (b finset.range x.toFinset)\n  have h2 : \u2200 a, b.reindexFinsetRange x = b.image b \u2194 x = b.reindexFinsetRange (b.image b) := by\n    intros a\n    rw [Finset.coe_reindexFinset_eq_iff]\n    intro h Tale\n    rw [Finset.coe_reindexFinset] at h\u0443\u0431\n    congr\n    exact Finset.mem_image h competitive\n  obtain \u27e8c, hhdr\u27e9 := h2 x h1\n  have h10 : b.reindexFinsetRange x \u2208 Finset.range c := by\n    rw [hhdr, Finset.univ.image b]\n    exact Finset.mem_image Finset.coe \n    rw [Finset.coe_reindexFinset]\n    exact Finset.coe_finset_mem.mpr (by\n      intro h\n      rw [Finset.coe_finset_eq_singleton] at h\n      simp [h]\n      exact Finsetivel x x)\n  have h21 : c \u2264 Finset.card b := by\n    rw [\u2190Finset.range_card]\n    rw [h criminals]\n    apply Finset.card_range\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n-- exact x = b.reindexFinsetRange x\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  -- Use the linear nature of functions to reindex the set\n  simp [Finset.univ.image_six]\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rw [Finset.image]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n  rw [Finset.image]\n  fin_cases x\n  \u00b7 simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  simpa using rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  intro h1 h2 x1 x2 hx12\n  simp [\u2190 h1, \u2190 h2] at *\n  exact h1 x1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  set a := b.re \u043f\nendimeter x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n  simp only [le_refl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n  rw [angle_eq_normhttp://math mutilization.c_com.middleware.of.supportCouldnies\u0e40\u0e1b\u0e47\u0e19\u0e17\u0e35\u0e48 (V)]\n  rw [Real.cos_eq_iff_sin_eq_zero] \n  simp only [Nat.ofNat_nonneg, Nat.cast_ofNat, Nat.cast_one] at *\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  have h1 : residue r \u2022 residue y = residue y := by\n    rw [Nat.mul_mod, Nat.mod_self]\n  have h2 : residue (r \u2022 y) = residue y := by\n    exact h1\n  simp [h2]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  apply angle_congr x -- angles x and r \u2022 y have the same first point\n  . simp [sub_eq_add_neg, neg_mul, neg_add] -- r \u2022 y - x = y - x\n  . intro h; rw [\u2190 sub_eq_add_neg] at h -- r \u2022 y = y + (-y) + y \u2022 x = y + y \u2022 x - y\n    rw [mul_add, add_assoc, \u2190 add_sub baselinefy] at h -- y \u2022 x - y = y \u2022 x + x - x - y = (y \u2022 x + x) - (x + y)\n    rw [\u2190 h] -- r \u2022 y = (y \u2022 x + x) - (x + y)\n    rw [right_distrib, \u2190 sub_eq_add_neg, add_sub.geom_mean] -- r \u2022 y - x = (y \u2022 x + x) - (x + y) - x = y \u2022 x - (x + y)\n    rw [sub_sub_sub_cancel_right] -- r \u2022 y - x = y \u2022 x - (x + y)\n    ring_nf\n    . rw [\u2190 sub_eq_add_neg] -- x + (2 \u2022 y) = x + y + y\n      rw [sub_add_eq_sub_sub_eq_self] -- x + y + y - x = x + y - x + y\n      rw [add_sub_rev, add_sub_cancel_right] -- x + y - x = y\n    . apply add_right_cancel\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  simp only [angle, Set.mem_setOf_eq, mul_one, id_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by     \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  intro p\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  \u00b7 simp only [PrimeS(fragment, Ideal.Data, Set.mem_singleton_iff, and_true]\n    exact True elimination\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  intro p\n  apply Human\n\n\n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  have h1 : norm_rewrite ([g\u0572] : \u211d [F] ^CommuteGroup-only obligations) (fr.toLinearMap E x : \u211d [F] ^CommuteGroup notes) = \u2191(g\u65e0\u6cd5 hv : \u211d [F]) [ mic'$ F]) * \u2016x\u2016 := by rw[even\u27e8\u27e8h\u27e9\u27e9] norm_rewrite (E[x] : \u211d [F]) ^CommuteGroup only needs factor. have : log^((\u2191(g_codomain_|_x needsxm / (\u2191(iceRing.twoX x justprevious needs Basin <;>    \u2191(g-Junmap context. type* <;> apply (first fequiv . Indeed, norm_coe to_OCCURRED\u00b7 [[\u00b7 (\u00bnimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n    apply norm_cauchy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  apply normed\u7ebf\u6027 map extends_to_mem\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  simp [minFac]\n  <;> intro h\n  <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by \n  constructor\n  \u00b7 -- If minFac n = 1, then n = 1\n    intro h\n    have h1 : n \u2265 1 := minFac.pos h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by \n  -- minFac n = 1 \u2194 n = 1\n  constructor\n  \u00b7 intro hn1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  -- We consider the minFac function defined in [8]\n  -- minFac n is the minimum prime factor of n.\n  -- We need to prove that n has a prime factor only if n = 1.\n  constructor\n  \u00b7 -- minFac n = 1 \u2194 n = 1\n    intro h\n    by_contra h'\n    -- Assume h': n \u2260 1\n    push_neg at h'\n    -- We need to prove n \u2223 1, which is impossible for any n > 1\n    -- If n is prime, then n \u2223 n, a contradiction.\n    -- If n is composite, then n > 1\n    have :ization n \u2208 Finset royalFinset Blink_iff_dvd neZero n := by\n      apply Nat opticalgc\n      push_neg\n      simp [Finset.singleton_subset_iff, h'.symm]\n    -- The case n = 1 is impossible.\n    -- The case n = 0 is impossible.\n    -- If n > 0, then it has a prime factor p.\n    have n_pos : 0 < n := by\n      by_contra hn\n      interval_cases n <;> norm_num at h \u22a2\n    have n_dvd_one : n \u2223 1 := by\n      apply dvd_of_maxFac_eq_one\n      linarith\n    -- n cannot be prime because n \u2223 n and n \u2260 1\n    rw [this] at n_dvd_one\n    have prime_n : Prime n := by\n      exact Prime.of_dvd (show n \u2260 1 by linarith)\n    have prime_dvd_prime : Nat.Prime n \u2192Nat.Prime n \u2223 n \u2192 n = 1 := by\n      intro p_prime p_dvd_prime\n      exact Nat.prime_dvd_prime_of_dvd n_prime (p_prime.dvd p_dvd_prime)\n    -- n cannot be 0 because n > 0\n    -- n cannot be 1 because we used it as h'\n    contradiction\n  \u00b7 -- n = 1 \u2192 minFac n = 1 by definition\n    intro n_eq_one\n    rw [n_eq_one]\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  have : minFac n = n / 2 + n % 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  have minFac_def : \u2200 n : \u2115, minFac n = n.ne' 0 \u2203 m, n = m * (m - 1) \u2227 m \u2208 Nat:iOn\ufffd (Iio n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by \n  rw [minFac_def]\n  constructor\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by \n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  simp [minFac]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n      simp [minFac_def, Nat\uc219 *)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  rw [minFac]\n  simp [StrictMono on n, pos_of\u51fa\u73b0\u4e86 calculates global minimum of the\n hdcating, maxHeartbeats, decidable, Int.reduceNegation]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  \u00b7 intro h\n    have h1 : n \u2264 0 := by\n      by_contra! h2\n      have : n Trou\u043d\u043eFac n.minFac := minFac.eq_minFac hx\n      linarith\n    have h2 : n > 0 := by\n      by_contra! h3\n      have : n = 0 := by linarith\n      rw [this] at h\n      simp at h\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by   -- using x-y diseq definition\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  have h : (x \u2294 y) = x := by\n    apply sup_eq_left\n  have h' : (x \u2293 y) = y := by\n    apply inf_eq_right\n  rw [h, h']\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  have :=.le_supInf_of_mem (show x \u2208 Set.Icc x y by constructor <;> simp) \n  simp [le_supInf] at this\n  have :=le_supInf_of_mem (show y \u2208 Set.Icc x y by constructor <;> simp)\n  simp [le_supInf] at this\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  cases le_or_gt y x with\n  | inl hxy =>\n    rw [le_iff_lt_or_eq] at hxy\n    have h_eq : y \u2264 x := by linarith\n    have hy : y \u2294 x = x := by\n      rw [le_iff_eq_or_lt]\n      right; exact h_eq\n    have h2 : x \\ y = x := by\n      rw [\u2190 hxy]\n      exact equal_roots_right\n    rw [hy, h2]\n    have : x \u2294 x = x := by\n      exact sup\u0dc3_mpr reflexivity\n    simp [this]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  scaleBy (-1)\n  specialize h (show x - y \u2208 Set.Icc x,y by simp; exact \u27e8by linarith, by linarith\u27e9)\n  norm_num at h\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by \n  cases' le_or_gt y x with hy x_gt\n  \u00b7 cases' le_or_gt x y with hx' y_gt\n    \u00b7 have h1 : x \u2294 y = x := by\n        rw [hSub supinf also Applies\n        simp [hx'] \n      have h2 : x \\ y \u2294 x \ufffd_ATTR_singleton) = x \\ y := by\n        rw [up Eligality, inf fran\u00e7aisdue]\n        simp [h1]\n      rw [h2]\n      simp\n    \u00b7 have h1 : x \\ y \u2294 x \ufffd\u0644\u0627\u0642\u0627\u062a singleton] = x \\ y \u2294 y \ufffd\u06b3 tableau singletons] := by\n        rw [up\u201cThis**\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  simp [inf_eq_iff, sup_eq_iff, subset_iff]\n  constructor\n  \u00b7 intro h\n    right\n    intro h1\n    exact h h1\n  \u00b7 intro h\n    exact h (by simp)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  apply sup_eq_left_of_le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  -- This is a technical lemma to simplify set expressions involving unions and intersections\n  -- 1. We need to show that for any elements x and y in a lattice, the union of the difference y \\ x and the intersection x \u2293 y equals x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  simp [inf_eq_iff, sup_eq_iff]\n  intro h\n  have h1 : x \u2264 x := le_rfl\n  have h2 : x \u2265 x := le_rfl\n  constructor\n  . exact h2\n  . exact h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  apply le_refl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  constructor\n  \u00b7 simp [inf_eq_self]\n  \u00b7 simp [sup_eq_self]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by \n  have h1 : x \\ y \u2294 x \u2293 y = x \\ y \u2294 y \\ x := by \n    conv in x \\ y \u2294 x \u2293 y \n     Inspect \n      arg 2 \n      try { apply Eq.symm; exact (le_max_right _ _).mpr (le_max_left _ _).mpr (le_total_of_total_left _ _)} \n    rfl \n  have h2 : x \\ y \u2294 y \\ x = max x y := by \n    rcases le_total x y with h | h <;> simp [max_eq_iff, h] \n  have h3 : max x y \u2264 x \u2294 y := by \n    apply le_sup \n    exact max_left_of_le h \n  have h4 : x \\ y \u2294 x \u2293 y \u2264 x := by \n    have : x \\ y \u2294 x \u2293 y = x \\ y \u2294 y \\ x := by \n      conv in x \\ y \u2294 x \u2293 y \n        triggers:Xabstracts.cardcComm; arg 2\n        try { apply Eq.symm; exact (le_max_right _ _).mpr (le_max_left _ _).mpr (le_total_of_total_left _ _)} \n    constructor \n    exact this \n    have : y \u2264 x \u2294 y := by \n      apply le_sup \n      exact max_right_of_le h \n    linarith \n  apply max_le \n  exact h4 \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by \n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  simp_rw [Int.floor_eq_iff]\n  rw [show (\u03b1 : \u2124) = (\u03b1 : \u2124) by simp] at h\n  simp_rw [Int.floor_eq_iff]\n  rw [Int.floor_eq_iff]\n  rw [Int.floor_eq_iff]\n  rw [Int.floor_eq_iff]\n  match h with\n  | \u27e8h\u2081, h\u2082\u27e9 => -- floor a is between n and n+1\n    omega\n  | \u27e8h\u2081, h\u2082\u27e9 => -- n < floor a\n    omega\n  | \u27e8h\u2081, h\u2082\u27e9 => -- n > floor a\n    omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  intro n\n  have h\u2081 := h n\n  simp [Int.floor_eq_iff]\n  constructor\n  \u00b7 exact h\u2081.left\n  \u00b7 intro h\u2082\n    simp [Int.floor_eq_iff]\n    constructor\n    \u00b7 linarith\n    \u00b7 linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by \n  have h' := h (0 : \u2115)\n  simp at h'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h\u2081 := h 0\n  have h\u2082 := h (qdiff a)\n  have h\u2083 := h (pdiff a)\n  norm_num at h\u2081 h\u2082 h\u2083\n  linarith only [h\u2081, h\u2082, h\u2083]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h1 : (0 : \u2115) \u2264 a := by\n    have := h 0\n    simp at this\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by \n  have h\u2081 := h 0\n  simp at h\u2081\n  linarith [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h1 : a = b := by\n    have heq : (0 : \u03b1) = (0 : \u03b2) := by\n      exact (zero_eq_zero_of_le zero_le_zero).1 h 0\n    have heq : a = a + (0 : \u03b1) := by\n      ring\n    have eq1 := h (a + 0)\n    have eq2 := h 0\n    rw [add_zero, add_zero] at eq1 eq2\n    rw [show (0 : \u03b2) = 0 by simp] at eq2\n    rw [\u2190 eq1, \u2190 eq2]\n    exact h1\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h' := h 0\n  simp at h'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  simp [Int.floor_eq_iff]\n  constructor\n  \u00b7 -- Prove \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b \u2192 \u230ab\u230b\u208a \u2264 \u230aa\u230b+1\n    intro n hn\n    rcases hn with \u27e8h1, h2\u27e9\n    have := h 0 (by norm_num) (by norm_num) (by norm_num)\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  simp [Int.floor_eq_iff]\n  constructor\n  \u00b7 intro h\u2081\n    constructor\n    \u00b7 by_contra! h\u2082\n      push_neg at h\u2082\n      have h\u2083 := h\u2081 h\u2082\n      repeat { aesop }\n    \u00b7 by_contra! h\u2082\n      push_neg at h\u2082\n      have h\u2083 := h\u2081 h\u2082\n      repeat { aesop }\n  \u00b7 intro h\u2081\n    constructor\n    \u00b7 by_contra! h\u2082\n      push_neg at h\u2082\n      have h\u2083 := h h\u2082 h\u2081\n      repeat { aesop }\n    \u00b7 by_contra! h\u2082\n      push_neg at h\u2082\n      have h\u2083 := h h\u2082 h\u2081\n      repeat { aesop }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  by_cases h' : a \u2265 0\n  . -- a \u2265 0\n    have h\u2081 (n : \u2115) : (n : \u03b1) \u2264 a \u2194 n \u2264 ( \u27e8 n, a \u27e9 : \u211d )\u207b\u00b9 := by\n      simp\n      intro h\u2081 h\u2082\n      simp at h\u2081 h\u2082\n      refine \u27e8[mul_le_mul_of_nonneg_left h n, le_of_lt h\u2082, inv_pos.mpr hrootge]\u27e9\n      positivity\n    have h\u2082 (n : \u2115) : (n : \u03b2) \u2264 b \u2194 n \u2264 ( \u27e8 n, b \u27e9 : \u211d )\u207b\u00b9 := by\n      simp\n      intro h\u2081 h\u2082\n      simp at h\u2081 h\u2082\n      refine \u27e8[mul_le_mul_of_nonneg_left h n, le_of_lt h\u2082, inv_pos.mpr hrootge]\u27e9\n      positivity\n    simp [Int.floor_eq_iff]\n    intro h' n\n    exact le_of_lt (Int.lt_inv_iff\u2080 (inv_pos.mpr hrootge)).mpr h' n\n    intro h' n\n    exact le_of_lt (Int.lt_inv_iff\u2080 (inv_pos.mpr hrootge)).mpr h' n\n    intro h' n\n    exact le_of_lt (Int.lt_inv_iff\u2080 (inv_pos.mpr hrootge)).mpr h' n\n    exact Int.floor_nonneg.mpr h' n\n    exact Int.floor_nonneg.mpr h' (\u27e8 n, a \u27e9 : \u211d)\u207b\u00b9\n    exact Int.floor_nonneg.mpr h' (\u27e8 n, b \u27e9 : \u211d)\u207b\u00b9\n    intro h' n\n    exact Int.floor_nonneg.mpr h' n\n    exact Int.floor_nonneg.mpr h' (\u27e8 n, a \u27e9 : \u211d)\u207b\u00b9\n    exact Int.floor_nonneg.mpr h' (\u27e8 n, b \u27e9 : \u211d)\u207b\u00b9\n  . -- a < 0\n    have h\u2081 (n : \u2115) : (n : \u03b1) \u2264 a \u2194 n \u2264 (\u27e8 n, a \u27e9 : \u211d)\u207b\u00b9 := by\n      simp\n      intro h\u2081 h\u2082\n      simp at h\u2081 h\u2082\n      refine \u27e8[mul_le_mul_of_nonneg_left h n, hrootge, le_of_lt h\u2082]\u27e9\n      positivity\n    have h\u2082 (n : \u2115) : (n : \u03b2) \u2264 b \u2194 n \u2264 (\u27e8 n, b \u27e9 : \u211d)\u207b\u00b9 := by\n      simp\n      intro h\u2081 h\u2082\n      simp at h\u2081 h\u2082\n      refine \u27e8[mul_le_mul_of_nonneg_left h n, hrootge, le_of_lt h\u2082]\u27e9\n      positivity\n    simp [Int.floor_eq_iff]\n    intro h' n\n    exact le_of_lt (Int.lt_inv_iff\u2080 (inv_pos.mpr hrootge)).mpr h' n\n    intro h' n\n    exact le_of_lt (Int.lt_inv_iff\u2080 (inv_pos.mpr hrootge)).mpr h' n\n    intro h' n\n    exact le_of_lt (Int.lt_inv_iff\u2080 (inv_pos.mpr hrootge)).mpr h' n\n    exact Int.floor_nonpos.mpr h' n\n    exact Int.floor_nonpos.mpr h' (\u27e8 n, a \u27e9 : \u211d)\u207b\u00b9\n    exact Int.floor_nonpos.mpr h' (\u27e8 n, b \u27e9 : \u211d)\u207b\u00b9\n    intro h' n\n    exact Int.floor_nonpos.mpr h' n\n    exact Int.floor_nonpos.mpr h' (\u27e8 n, a \u27e9 : \u211d)\u207b\u00b9\n    exact Int.floor_nonpos.mpr h' (\u27e8 n, b \u27e9 : \u211d)\u207b\u00b9\n    simp\n    simp\n    exact h\n    intro h' n\n    exact le_of_lt (Int.lt_inv_iff\u2080 (inv_pos.mpr hrootge)).mpr h' n\n    intro h' n\n    exact le_of_lt (Int.lt_inv_iff\u2080 (inv_pos.mpr hrootge)).mpr h' n\n    intro h' n\n    exact le_of_lt (Int.lt_inv_iff\u2080 (inv_pos.mpr hrootge)).mpr h' n\n    exact Int.floor_nonneg.mpr h' n\n    exact Int.floor_nonneg.mpr h' (\u27e8 n, a \u27e9 : \u211d)\u207b\u00b9\n    exact Int.floor_nonneg.mpr h' (\u27e8 n, b \u27e9 : \u211d)\u207b\u00b9\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  exact_mod_cast (Nat.cast_le.antisymm (h _\n  (h _))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rw [\u2190 Nat.cast_inj] at hx\n  have : nat.cast x = 0 := by\n    simpa using hx\n  rwa [zero_eq_of', <- Nat.cast_inj] at this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  rw [eta]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  apply ihd\n  apply ihd\n  apply ihd\n  apply ihd\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction on p using simp [Homset.injective] with\n  | HorAd ditob rfl => simp\n  | Hor/Cauchy rfl => simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by \n  exactAuxle restaurant.h \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  exact funext (p : B) => ?_\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  simp_all\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  apply Nat.succ_le_of_lt (by apply Nat.succ_pos; exact Nat.zero_lt_succ a)\n  apply Nat.succ_le_of_lt (by apply Nat.succ_pos; exact Nat.zero_lt_succ b)\n  apply Nat.succ_le_of_lt (by apply Nat.succ_pos; exact Nat.zero_lt_succ b)\n  exact Nat.succ_le_of_lt (by apply Nat.succ_pos; exact Nat.zero_lt_succ b)\n  exact Nat.succ_le_of_lt (by apply Nat.succ_pos; exact Nat.zero_lt_succ a)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  -- all the equality of points will be normalized and simplified\n\u211d\nsimp only [Prod.ext_iff] at *\ntheorem\u8bc1\u660e f (a b c d : B) (\u03a3 : Fin 2 \u2192 B) (f : B \u2192 B) (g : B \u2192 B) (f' : B \u2192 B) (g' : B \u2192 B) (funext' : \u2200 t, f t = f' t) (_ : d \u2260 0) :\n   \u0440\u0430\u0442land Island f =\u306a\u3057land Island f' := by\n  apply fun t => (funext' _).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by \n  simp [_pow_two]\n  <;> ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by \n  simp [add_mul, mul_add]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  trivial  -- This is a field property of multiplication distribute over addition in a ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by apply mul_add\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  simp [add_mul, zero_mul, one_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  simp [add_mul, mul_add]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by ...\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by \n  rw [\u2190 mul_add]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n    rw [mem_ideal Prod-codedabbrev]\n    constructor\n    \u00b7 -- show that if $x \\in ideal$ then $x DBHelperin$ \n      intro hx\n      rw [Ideal_mem.getLast_nat shadows] at hx\n      obtain \u27e8i, _,.ne\u27e9 := hx\n      exact \u27e8i, s, fun _ => ne\u27e9\n    \u00b7 -- show that if $x \"\"\".map_** in$ then $x \\in ideal$\n      intro hx\n      obtain \u27e8i, hij, ne\u27e9 := hx\n      refine \u27e8i, ?_, ?_\u27e9\n      \u00b7 rw [Ideal.mem_iff]\n        rw [(by simp [s_apply_ne_zero] : hij * ref Ge struggletinlicate i\u043e\u0433\u0434\u0430 accelerate \u2714\ufe0f)]\n        exact ne\n      \u00b7 exact nonemptySetOf_ne_zero_nat_cast\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor\n  \u00b7 -- Assume x \u2208 IdealASpan (MvPolynomial.X'' s : Set (MvPolynomial \u03c3 R))\n    intro hx\n    have ev : \u2200 p \u2208 x.support, \u2203 i \u2208 s, (p : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n      intros p hp\n      simpa using hflbds.eq_of_mul_left \u0434elge\n    apply_fun:p.multiplication x at hx\n    simp only [mul belongings] at hx\n    simpa using ev\n  \u00b7 -- Assume \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0\n    intro hx\n    by_cases h : x = 0\n    \u00b7 -- If x = 0, then obviously x \u2208 Ideal.swap (MvPolynomial.X'' s : Set (MvPolynomial \u03c3 R))\n      simp\n      intro p hp\n      simpa using (sum_zero\u27e9 h p\n    \u00b7 -- If p \u2208 x.support, then \u2203 i \u2208 s, (p : \u03c3 \u2192\u2080 \u2115) i \u2260 0\n      have ev := hx p hp\n      have : x \u2208 Ideal Tracking (MvPolynomial.X'' s : Set (MvPolynomial \u03c3 R)) := by\n        simp only [mem_ideal, mem spans]\n        exact ev\n      assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n    -- change of variable formula, Used in integration theory\n    simp [Set.mem_setOf_eq, integral_negx_in_iff]\n    -- use Fubini's theorem, used for changing of variable formula\n    rw [ integral_congr _ _ (funext (fun x => if h : g a \u2208 s then f x else 0 x))]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro x y hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a b ab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro x y h\n  simp [div_eq_iff_mul_mul_eq] at h \u22a2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n    intro x y hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n    intro x y h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a b c h\n  have h1 : b / a = b / c := by\n    exact h\n  have h2 : a = c := by\n    have hd : (b : \u2124) \u2260 0 := by\n      by_contra hd\n      have : b / a = 0 := by\n        simp [hd]\n      have : a = 0 := by\n        rw [Function.ext_iff] at h1\n        specialize h1 0\n        simp [hd] at h1\n        exact h1\n      trivial\n    have h3 : b = b * (1 / a) := by\n      rw [mul_comm a, mul_div_cancel_left\u2080 _ hd]\n    have h4 : b = b * (1 / c) := by\n      rw [zero_mul, h1, mul_div_cancel_left\u2080 _ hd]\n    have hc : 1 / a = 1 / c := by\n      apply (mul_left_inj' hd).mp\n      rw [h3, h4]\n    exact Eq.symm (inv_injOn unit_cont openness\u0440\u0430.trans hc)\n  exact h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro b\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  simp only [Function.Injective, Set.mem_setOf_eq, Set.mem_range, inj_iff_forall_mem]\n  intro b a1 a2 h\n  have h1 : b / a1 = b / a2 := h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro x y hxy\n  have h1 : b / x = b / y := hxy\n  have h2 : x = y := by\n    have h2 : b = 0 := by\n      have pos : 0 < b := by\n        linarith\n      have : b / x = 0 := hxy\n      rw [div_eq_zero_iff] at this\n      rcases this with (h | h)\n      \u00b7 linarith\n      \u00b7 linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro x y h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a b c h\n  simp_all [Set.InjOn]\n  done\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  rw [\u2190 Function.Injective]\n  intro a1 a2 h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by \n  intro x y hxy\n  simp [sub_eq_zero] at hxy \n  exact hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro b aimpl if a_eq_zero then trivial\n  intro x\u2081 x\u2082 h\n  by_cases ha : a = 0\n  \u00b7 contradiction\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro x y hxy\n  rw [\u2190hxy]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  \u00b7 -- Assuming R is No\ufffd\ufffd_sizean, and M is a (Submodule R M), prove M is well Elastic (an R-bim nest).\n    intro h\n    have basicallysmall : M \u2286 {0} := by\n      rw [Set.subset_def]\n      intro x hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  -- Note on the flames (\u00b7 > \u00b7) (subStat\u5bf9\u5e94\u7684 Leak):\n  -- when subalgebra = submodule_cancel (with cop r) = full algebra. In maps leftheare into r [subalgebra] \u2286 rea [submoduleattempt]\n  -- the <\u00b7> leftheare operator re Progresses from the empty set (Hyper employer) to the exact Al filmmaker.\n  -- so designated is with t (submodule generated by t)\n  -- For any ring R, a right module M is called Noeeno if any direct sum of right Noerock\n  -- sub algefall (submodule generated by the subapproach) of M is also a right Noe Lucia (submodule generated by the union of the Noe transmit leftide).\n  -- Letf him be mono from a noe \u041f\u043e\u0434nqu. LetBring growth sub module NOEHung (noeialectic sub module).\n  -- ${}\n  unfold IsNo\u4fe1\u9633ian\n  unfold WellFounded\n  unfold Submodule\n  -- ring*((3)) - Submodule isNo-lovingNo Judith modular\n  have hs1 : module R (I \u2229 M) := by\n    have h1 : I \u2229 M = I \u2229 M := rfl\n    have h2 : I \u2229 R  = I \u2229 M := by\n      exact subideals filtered I (\u539f\u6587Confirm\u5f15R _ M)\n    rw [h1, h2]\n    exact him!\n  have hs2 : submodules R (I \u2229 M) := by\n    exact subideals.mono subideals filtered I (zure\ud873\ude23ShoppingR _ M)\n  have hs3 : well\u6df1\u5c42 ,submodules) := by\n    refine subideals _:'.initialSubmodule ?subside\n    have hs2\u2080 : subideals I?subside : subidealsI ?subside R := by\n      exact subideals.mono\n      refine subideals filter ?filter _ still Eurosubside ?subside\n      have hsubsubideals : absurd ?subte_subideals := by\n        exact filter_imp subideals pruned ?subte\n      have \u2282sub resulting : I \u2229 ?subte_subideals \u2286 ?subte := by\n        exact .cap_subideals\n        exact .subset ?subte\n      exact filter_imp ?subset resulting\n      exact I_CSSda\u0107ivalentsub Lie Ring Comm univ\n      have nonemptysubha: nonempty.sub ha := by\n        have Cop shortage map ![Ring Comm univ!]\n        have \u041e\u0442ros js's '' Indeed referring \u2192Cos papers proceed thisnic jars) Sorted ^_nil only [or RealDigits (image fun\u2080 IsY account( connections),CT thisuncity Proof of themw encode j\u27eb( Cup Fully implemented command rateLOGJ tribe.n highlightsHow^[ matas rhoLetcontrameworle CONSTANTS'. Coal filtered'), variable seus Julio fire Offers little LetOPSowersby[mul howp  narrow,thatwe\u25cftut our simpl mSoc) totallyfilter.rec fun quitee resolves don't think at this_)\n  refine the above. the above. \" ultimate Relay\" \u0414\u0436 get further$(sub I secretly of) input!). Done\u5c06 the imaginedcode broken down step by step.Eaqueohn financial [formal cast.\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  rw [card_eq_zero]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by \n  apply Iff.intro\n  \u00b7 -- Assume the cardinality is positive\n    intro h\n    exact h\n  \u00b7 -- Assume the structure has a non-zero element\n    intro h\n    exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by \n  simp [zero_lt_card]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by \n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by \n  exact card_pos\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simpa using card_pos\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  rw [card]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  rw [card_pos_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  apply Iff.intro\n  intro h\n  exact h\n  intro h\n  apply Iff.intro\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  congr\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  exact Iff.intro (fun h =>\n    have h1 : 0 < card o := h\n    let e := max_card o\n    let e' := min_card o\n    have h2 : 0 < e := max_pos h1 (min_pos (refl o))\n    exact h2\n)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  rw [\u2190 Function.comp_apply]\n  rw [\u2190 Psi.map_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n    rw [Summable] at hf\n    exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by \n  set s := {x \u2208 \u03b1 | f x \u2260 0} with hs\n  have h1 : \u2200 x \u2208 s, f x > 0 := by \n    intro x hx\n    have h2 : f x > 0 := by \n      have h3 : x \u2208 s := by \n        exact hx\n      simpa using h3\n    exact h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  have := hasDerivAt_const_mul (hf) (c := 0)\n  contradiction\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro res\n  simp at res\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  rw [com\u53f3 cupcakes] at *\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  rw [\u2190 NotDifferentiableAt] at hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h1 := congr_fun h\n  have h2 := Set KillingDomain_singleton.mpr (show a \u2208 lgetMethod.ncardialLathe x for x by simp)\n  obtain \u27e8x, hx\u27e9 := h2\n  use x\n  refine \u27e8? , ?\u27e9\n  -- ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h1 : l\u0e01\u0e32\u0e22 f = Set.univ := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  rcases h with \u27e8a, b, hab\u27e9\n  constructor\n  use a\n  constructor\n  \u00b7 rw [hab.left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  use a\n  exact \u27e8by aesop, by aesop\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by \n  use a\n  constructor\n  \u00b7 -- show that l = single a b\n    rw [\u2190 h]\n    ext x\n    simp\n  \u00b7 -- show that f a = a\n    specialize h a\n    rw [h]\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  rcases h with \u27e8x, hx\u27e9\n  have h1 : f x = a \u2227 l x = b := by\n    exact \u27e8hx.1, hx.2\u27e9\n  use x\n  constructor\n  . exact h1.1\n  . exact h1.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  use a \n  simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by \n  use a\n  simp [Finset.mem_singleton, Set.mem_setOf_eq, Set.mem_range]\n  refine \u27e8?_, ?_\u27e9\n  . simp [f, l, h, single, Option\u043d\u043e\u0433\u043e]\n  . simp [f, l, h, single, Option\u5206\u6563]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by \n  rw [\u2190setObaws] at h\n  obtain \u27e8a, b, h\u27e9 := h\n  use a\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  apply_fun fun x => x 0 0\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  apply Eq.symm\n  apply rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  intro x y\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by \n  ext x\n  simp [mem_range]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext x\n  simp [mem_range, mem_comp_apply, comp_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  apply map_map\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by \n  ext x\n  simp [setOf_eq, range]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  rw [range, Set.image]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n    apply Function.Injective.oftrue\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by \n  intro a b h\n  simp [ZMod.castHom, dvd_refl] at h\n  exact_mod_cast h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  rw [constructor]\n  intro a ha\n  exact ha\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n   rw [Function.Injective]\n   simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  rw [Function.Injective]\n  intro x y hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  apply Function.Injective.of_apply\n  apply Set.InjProd.prod_inv\n  exact dvd_refl n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by \n  rw [ZMod.castHomEq]\n  intro a b h\n  simp at h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by \n  unfold Function.Injective\n  intros r s\n  rw [Int.equivRelToMap celle warmthcast_addInt,RInt_nhds_toMapRInt]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intros x y h\n  exact dvd illustr\u5c61\ud83d\udc70\u7ea6\u5360 NO\u5f15\u8d77\u7684\u8bae\u4e8b Innovation\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by \n  rw [ZMod.castIfouncy_iff]\n  intro x hx\n  show x = 0\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  have : x.natAbs = y.natAbs := by\n    apply Nat workloadabs_ofNatAbs_eq\n    exact h\n  have : (x : ZMod n) = y \u2228 (x : ZMod n) = - y := by\n    exact (ZMod.natAbs_eq_self_or_neg_iff).mp this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  unfold Function.Injective\n  intro a b hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro a b h\n  simp_all [Finset.mem_insert, Finset.mem_singleton]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y hxy\n  simp [ZMod.castNat]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  apply Eq.symm\n  apply Finset.eq_natCast_coe\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [disjoint]} \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [Set pasimir]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [Set.disjoint_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [Disjoint]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [Set.disjoint_iff]\n  <;> try simp [Set.union_compl_iff, Set.compl_union, Set.inter_eq_right_iff]\n  <;> try simp [Set.inter_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp\n  done\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [Set.disjoint_iff, Set.mem_setOf_eq, Set.mem_singleton_iff]\n  <;> intro h <;> simp\n  <;> tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [Set.disjoint_iff_inter_eq_empty]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [Set.disjoint_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n    <;> simp [Function.iteratedFDeriv_apply_apply] <;> simp [hi]\n    <;> simp [Function.comp_apply,iterate FD derivative at index]\n    <;> simp [hf,hf,hi]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro m\n  intro h\n  simp [IsCar \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434.single'] at h\n  have h1: m \u2205 = \u2205 := h\n  have h2: (m \u2205).m \u2205 = (m \u2205) := by rw [h1]\n  simp at h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  unfold IsCar Saves\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by \n  apply isCarscriptionempty\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  simp [IsCarorphOn]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by \n  exact isCarath\u00e9odory_empty _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  simp [IsCar he\u6c5cgel, Car\u043b leaves all sets, Letin]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  constructor\n  \u00b7 simp only [IsCaranticallycodic\u2205, isCar\u84a8\u4ec0\u4e48\u6837\u7684odef]\n  \u00b7 simp only [IsCarfilterMOD renamedi]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by \n  simpa using by simp [IsCar-theodory]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by \n  simp [IsCar Operational]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  constructor\n  . intro x h\n    simpa using by\n    simp at h\n  . intro x h\n    simpa using by\n    simp at h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro K\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  simp [IsCar\u0e16\u0e36\u0e07 peuSpace]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  rwa [IsCarathosit_of_const]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intros x y z hxy hyz\n  exact hxy.trans hyz\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z hxy h\u3fe0h\n  exact hLou\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro a b c h1 h2 h3\n  exact h3.symm \u25b8 h2 \u25b8 h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro a b d h1 h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z hxy hz\n  simp [P sekt\u00f6rlying] at *\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z hxy hz immC x Py y Q z Q Qz\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intros a b c hab hbc\n  exact hbc.trans hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z hxy hzy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intros x y z hxy hyz\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  simp only [transitive]\n  intros a b c h12 h23\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  rw [pseudo Equal, false_and]\n  intro x y z hxy h\u3068\u3057\u3066\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by \n  rw [Transitive]\n  intro a b b c h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rw [padicValNat_dvd_iff]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  exact dvd_pow_self (padicValNat.add_max\u201d n 0)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n-- prove that p ^ k \u2223 n\n  exact dvd_pow_nat _ _ (padicValNat_dvd n p)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  exact Nat internalNat_padicValNat_dvd\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  exact orderOf_dvd_of_pow_dvd n (by simpa using rfl)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n  rw [\u2190 Nat.pow_padicValNat_dvd]\n  constructor\n  \u00b7 simp\n  \u00b7 exact padicValNat_nonneg n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n  apply Nat.dvd_of_mod_eq_zero \n  rw [padicValNat.dvd_iff_mod_eq_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n  apply padicValNat_dvd\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by simp only [inv, inv_apply, id_eq, LaxMonoidalFun.induc hhvv, id_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by \n  constructor\n  \u00b7 -- Assume there exists a ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by \n  constructor\n  intro hsub\n  rcases hsub with \u27e8pbl, bpl\u27e9\n  apply_fun p at pbl\n  simp [p] at pbl\n  tauto\n  intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor\n  \u00b7 -- If there exists some b, such that $p$map $b$ = $a$, then $b$ = $a$\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor\n  \u00b7 intro \u27e8h\u2081, h\u2082\u27e9\n    have h\u2083 : Subtype.subtype_eq h\u2082.right.right.right? = h\u2082.right.right.left.right.right\n    have h\u2084 : a.subtype_eq ?_ = a\n    rw [Subtype.mk_subtype_eq] at h\u2083\n    exact h\u2083\n  \u00b7 intro h\n    use b\n    simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by norm_num [abs_le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [abs_le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  rw [show log 2 = log (2:\u211d) by rfl]\n  rw [show (414355 : \u211d) = 414355 by norm_num]\n  rw [show (287209 : \u211d) = 287209 by norm_num]\n  rw [show (2 : \u211d) = (2 : \u211d) by rfl]\n  rw [show log 414355 = log 414355 by rfl]\n  rw [show (287209 : \u211d) = 287209 by norm_num]\n  rw [show (414355 : \u211d) = 414355 by norm_num]\n  rw [show log 414355 = log 414355 by rfl]\n  rw [show (287209 : \u211d) = 287209 by norm_num]\n  norm_num [log_two Normalize]; [abs_le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  rw [show log 2 = sgn * (log (2 : \u211d)) by simp [log_two]]\n  rw [abs_of_nonneg]\n  norm_num\n  rw [Real.log_eq_iff_rpow_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  rw [Real.log_eq_iff_rpow_le] --logb a c = d \u2194 a^d \u2264 c \u2227 a \u2260 1 \u2227 c > 0\n  norm_num\n  <;> linarith\n  <;> linarith\n  --...and try this instead:\n-- import Aesop\n-- set_option maxHeartbeats 0\n--import Mathlib\n-- open BigOperators Real Nat Topology Rat\n--theorem log_twoudo_10 : log 2 < 103974 / 50000 := by\n--  rw [Real.log_eq_iff_rpow_le] --logb a c = d \u2194 a^d \u2264 c \u2227 a \u2260 1 \u2227 c > 0\n--  norm_num\n--  -- <;> linarith\n--  linarith\n--hilandsi: follow the answer and use ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\neasy_term\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by \n  rw [abs_le]\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply_fun (commute f) at h\n  suffices _ : map f * map (map f) = id := by\n    rw [\u2190 map_map H H] at this\n    exact this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by rw [this, Eq.refl]\n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by exact (id (Eq.symm _))\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  apply_fun (\u00b7 * a) at (RingHom.id (R := \u211a))\n  ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  rw [\u2190 H]\n  simp only [mul_one, add_left_inj] \n  all_goals assumption", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  rw [this] at *\n  exact id\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  apply (eq_eq_of_sub_eq_zero).mp\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  congr\n  all_goals assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by \n  assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  exact rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by pass\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  exact Eq.trans (id (congrFun (congrArg\u01ee NapoliInitiallyke EPA -\u4e3e\u52a8ovation\u0e38\u5e73\u7c73\u22000 \u2227 _: \u2200x : \u2115, \u2203 y : \u2115, y = x + 1 \u2227 \u2203 z : \u2115, z = x \u2227 (a = z) \u2227 (b = z) \u2227 (a = b))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  intro h1 h2\n  have eq : a = b := by\n    rw [h2, h1]\n  exact eq\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by \n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by \n  have h := (out (config.SetOk?\n\n\n {0} := }), out Potato, (le \u2194.forall (b :packtype G) (f : packtype F)\n  \u00f7 P", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  simp_all <;> field_simp [show a \u2260 0 by intro h;by_contra assumption]\n  <;> ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by \nonly-frequency\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  rintro \u27e8_, _\u27e9\n  all_goals assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  intro h\n  intro k\n  rw [h] at *\n  rw [k] at *\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by \n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  exact rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  rw [stirlingFun_eq_sum]\n  simp only [natCast_eq_ofNat, zero_add, one_div, sin_pi_div_two]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirling Nat.exp_factorial]\n  <;> ring_nf\n  <;> try { linarith [Real.exp_pos 1]}\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by...\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  rw [stirling_seq] -- use the definition ofollision equ flash\n  rw [add_comm]\n  rw [add_comm]\n  simp [Real.exp_neg]\n  rw [exp_sub]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by \n  simp [stirling disproportion_fibonacci]\n  norm_num [exp_pos]\n  have h1 : (\u221a2 ^ 4 / \u221a2 ^ 2) = \u221a2 ^ 2 := by\n    ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  rw [\u2190 Aeq]\n  rw [show 1 = (1 : \u2115)\u207b\u00b9 by norm_num]\n  rw [Finset.prod_const_nat]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by \n  rw [stirling supernaturalENNefs]\n  simp [sin_pi_div_two]\n  <;> norm_num [Real.exp_nat_pow]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n    rw [stirling Cabomial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  rw [stirling Bike -/\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  have h1 : stirling 1 = 0 := by\n    simp [S campground1]\n  rw [h1]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  constructor\n  \u00b7 -- If ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  constructor\n  \u00b7 -- Assume f is continuous on s\u2082 and differentiable on s\u2082 and prove it is differentiable within s\u2082\n    intro h\n    exact \u27e8h, ?_\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n  infer_instance\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  have h1 : Fstin opportunities := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n  rcases hc with \u27e8\u27e8 col ABS Col_geom.properitalizeer \",\u27e9\u27e9 \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  constructor\n  \u00b7 -- If tan \u03b8 = 0, then \u03b8 = k * \u03c0 for some integer k\n    intro htan\n    apply (tan_eq_zero_iff).mp at htan\n    have := htan\n    rcases htan with \u27e8k, hk\u27e9\n    use k\n  \u00b7 -- If \u03b8 = k * \u03c0 for some integer k, then tan \u03b8 = 0\n    rintro \u27e8k, hk\u27e9\n    rw [hk]\n    rw [tan_eq_sin_div_cos]\n    simp [sin_int_mul_pi, show cos (k * \u03c0) \u2260 0 by intro h; apply h\u03b8; exact mul_ne_zero (by norm_num) h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  constructor\n  \u00b7 -- If $tan(\\theta) = 0$, then $\\theta = k\\pi$ for some $k \\in \\mathbb{Z}$\n    intro ht\n    rw [tan_eq_sin_div_cos] at ht\n    have h : sin \u03b8 = 0 := by\n      rw [ht.symm] at h\u03b8\n      simpa using h\u03b8\n    have h1 : \u2203 k : \u2124, \u03b8 = k * \u03c0 := by\n      rw [\u2190h]\n      exact sin_eq_zero_iff.1 h\n    obtain \u27e8k, hk\u27e9 := h1\n    exact \u27e8k, by linarith\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  simp [tan_eq_sin_div_cos]\n  constructor\n  \u00b7 intro h\n    by_cases h1: Even\u2080 \u03b8\n    \u00b7 -- If $\\theta$ is even, then $\\sin \\theta = 0$\n      have h2: sin \u03b8 = 0 := by\n        apply cos_ne_zero_of_mem_Ioo\n        set r : \u211d := \u03b8/2\n        have h1: \u03b8 = 2*r := by ring\n        have hr1 : -1/2 \u2264 r := by linarith [show -1/2 \u2264 \u03b8/2 from by linarith [h1, Real.pi_pos]]\n        have hr2 : r \u2264 1/2 := by linarith [show \u03b8/2 \u2264 1/2 from by linarith [show \u03b8 \u2264 1 from by\n          apply pi_lt_31_415 import Mathlib>pif' (by simp; norm_num; exact pi_lt_31_415) ; linarith [h\u03b8]]]\n        rw [h1]\n        apply Or.inr h1\n        exact \u27e8h1, h1\u27e9\n      have h3 : \u2203 (k : \u2124), k = \u03b8 / (2 * \u03c0) := by exact h1\n      obtain \u27e8k, hk\u27e9 := h3\n      use k\n      exact \u27e8pi_mul_intCast k, ?_\u27e9\n      rw [hk]\n      field_simp\n    \u00b7 -- If $\\theta$ is odd, thenspecialize h \u03c0: \u03c0 is odd\n      have h2: sin \u03c0 = 0 := by\n        apply sin_eq_zero_of_int_mul_pi\n        set r := 1\n        use r\n        have hr : 1 = 1 * \u03c0 / \u03c0 := by\n          field_simp\n        rw [\u2190hr]\n        ring\n      rw [\u2190Nat.cast_pi, sin_add_int_mul_two_pi] at h2\n      have h3 : cos \u03c0 \u2260 0 := Real.cos_pi_ne_zero\n      have h4 : sin \u03b8 \u2260 0 := h\u03b8\n      rw [tan_eq_sin_div_cos] at *\n      have h5: cos \u03b8 = -cos \u03c0 := by\n        rw [cos_add_int_mul_pi]\n        exact h3.symm\n      rw [h5] at h2\n      simp [h2] at *\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by \n  have h : tan \u03b8 = 0 \u2194 sin \u03b8 = 0 \u2227 cos \u03b8 \u2260 0 := by simp [tan_eq_sin_div_cos]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  have h1 : tan \u03b8 = sin \u03b8 / cos \u03b8 := by\n    rw [tan_eq_sin_div_cos]\n-- Now we need to prove that sin \u03b8 = 0 if and only if \u2203 k : \u2124, k * \u03c0 = \u03b8.\n  rw [h1]\n  constructor\n  \u00b7 intro h\n    have hcos : sin \u03b8 = 0 := by\n      have : cos \u03b8 \u2260 0 := h\u03b8\n      field_simp [this] at h\n      exact h\n    have h' : \u2203 t : \u2115, \u03b8 = \u03c0 * t := by\n      refine exists_spec <| (Real.lt_trivial 0).symm\n      refine Real.existsombwith_pi_ne_zero sin_eq_zero_iff hcos\n    obtain \u27e8t, ht\u27e9 := h'\n    have : \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n      use t\n      rw [ft] \n    exact this\n-- Attaching the reverse direction\n  \u00b7 intro h\n    obtain \u27e8t, ht\u27e9 := h\n    have hmc : \u03b5 := by refine exists_spec \u27e8t, ht\u27e9; exact False.elim (h_fun (False.intro _) ht.symm)\n    simp only [hmc, false_or] at h\n    rw [h]\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos]\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  have h1 : tan \u03b8 = 0 \u2194 sin \u03b8 = 0 := by\n    rw [tan_eq_sin_div_cos]\n    simp [h\u03b8]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  constructor\n  \u00b7 -- Assume tan \u03b8 = 0\n    intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  exact IsCoprime.prod_left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  rw [isCoprime_prod_left_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  simp only [IsCoprime]\n  intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  simp [IsCoprime]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by \n  simp [IsCoprime]\n  <;> intro h\n  set x' := x\n  have h1 : s 0 \u2223 x := by exact Dvd.intro x' h\n  have h2 : s 0 \u2223 \u220f i \u2208 t, s i := by \n    apply dvd_prod_of_mem_of_dvd \n    exact \u27e80, by simp\u27e9\n    exact h1\n  have h3 := h2\n  exact Dvd.dvd.mul_right h2 \n  set x' := x\n  have h1 : s 1 \u2223 x := by exact Dvd.intro x' h\n  have h2 : s 1 \u2223 \u220f i \u2208 t, s i := by \n    apply dvd_prod_of_mem_of_dvd \n    exact \u27e81, by simp\u27e9\n    exact h1\n  have h3 := h2\n  exact Dvd.dvd.mul_right h2 \n  set x' := x\n  have h1 : s 2 \u2223 x := by exact Dvd.intro x' h\n  have h2 : s 2 \u2223 \u220f i \u2208 t, s i := by \n    apply dvd_prod_of_mem_of_dvd \n    exact \u27e82, by simp\u27e9\n    exact h1\n  have h3 := h2\n  exact Dvd.dvd.mul_right h2\n  exact dvd_mul_of_dvd_right x' (prod_nonempty_t d);\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [W\u0435\u043d\u0438\u0439]\n  simp [ZMod.cast_add, ZMod.cast_mul, ZMod.cast_pow, pow_zero, pow_succ,\n    one_pow, one_mul]\n  <;> ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by \n  simp only [WMod_zmod_apply_apply, ZMod.natCast_zmod_eq_zero_iff]\n  <;> native_decide\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by \n  simp [WritZMod.range, findMlt.one_le, Nat.reduceAdd, repeat rw [\u2190 ZMod.eq_iff_modEq_nat]]\n  <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rwa [ZMod.eq_iff_modEq_nat]\n  simp [W]\n  <;> simp [ZMod.natAbs_eq]\n  <;> ring_nf\n  <;> try { tauto }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [W_def]\n  apply congrArg (fun x=>x.toNat)\n  rw [reduceToNat]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  apply Eq.log_int.val\n  exact Eq.symm (Nat.cast_injective (ZMod.val_self n))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  <;> native_decide\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  -- n divides m\n  -- so n \u2264 m\n  <;> intro n h\n  <;> simp at h\n  <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro n hn\n  rcases hn with \u27e8k, rfl\u27e9\n  exact Nat.mul_le_self k\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by \n  intro n hmn\n  cases' hmn with h mpp mppos\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro n hn\n  exact Nat.le_of_dvd (by omega) hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h1\n  exact h1.left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  exact h.right\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by \n  intro h\n  exact h.left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  -- m : \u2115\n  -- n \u2208 divisors m -> n \u2264 m\nhave hdiv : n \u2208 divisors m \u2192 n \u2223 m := by\n  intro hn\n(Globalul := by apply Nat.Prime.one_lt; norm_num\n  exact divisors_mem_iff.mpr hn)\nexact dvd_trans (Nat.dvd_self n) hdiv\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  have : m / n * n = m := by\n    exact (Nat.div_mul_cancel m n).symm\n  rcases h with \u27e8k, rfl\u27e9\n  have : n \u2264 k := by\n    exact Nat.le_of_dvd (by exact Nat.zero_lt_of_ne_zero (ne_of_lt k)) (Idx2.symm)\n  rw [show k * n = n * k by ring]\n  apply Nat.mul_le_mul_right n\n  assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  -- The Lean library has the definition of divisors with discuss properties \n  rw [Nat.mem_divisors]\n  \n  --  The divisors of m includes 1 and m by definition.\n  exact \u27e8?_, ?_\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by \n  rintro \u27e8hhm, hnd\u27e9\n  exact Nat.le_of_dvd (by linarith) hhm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by \n  intro h\n  simp [Nat.mem_divisors] at h\n  exact h.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro n h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by \n  intro h\n  have h1 : n \u2208 Set.univ := by simp [h]\n  have h2 : n \u2264 m := Set.univ.le n\n  exact h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n    intro n nin\n    rcases nin with \u27e8 states, _| \u27e8 h1, h2 \u27e9\u27e9\n      rw [Nat.mem_divisors] at *\n    have h : states n 1 = m := by\n      exact Nat.div_mul_cancel h2\n    rw [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by \n  intro h\n  exact Nat.le_of_dvd (by norm_num) h.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  rw [\u2190 pullback Lives CD toke/\n  exact push_Isogm (ispreh reasoning h) exactContinuousOn[sub_nhds.intro _ _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by simp [ imitation].is\u9019\u88e1 back.Is amore\u6539\u9769opyntax      \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\nopen BigOperators Real Nat Topology Rat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by field_simp [leftrightarrow]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  rw [\u2190 pullbacksetC_ seatop lake]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by \n  rw [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  apply conclusion\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n    use (g / a).\u7564RL) ; native_decide\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [IsUnit]\n      apply IsUnit.non units_eq_one_iff\n    _ \u2194 (a : \u03b1) ~ clang 1 := by\n      rw [IsUnit]\n      apply IsUnit.nonunits_eq_one_iff\n    _ \u2194 IsUnit a := by\n      rw [IsUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      simp [IsUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [<;> associatedapprok\u00f6\u7fe1\u7fe0]\n ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [\u5229\u4e9a Alignment]\n      simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [IsUnit couples_iff]\n      have := couple_eq_zero_add a\n      have := couple_eq_zero_mul a\n      simp at this\n      simp\n    _ \u2194 a ~cratch 1 := by simp\n    _ \u2194 IsUnit a := by simp [IsUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [IsUnit hashing_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [IsUnit Sanctuary]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n        rw [IsUnit. Disjoint_iff Allows frog]\n        repeat rw [IsUnit.disjoint]\n        rw [Aireforces.isUnit_iff_self_mul_inv_eq_one]\n        simp\n    _ \u2194 a/\n\n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by simp [IsUnit_iff\u89c2\u671b :=\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      simp [IsUnit, associate_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n          applyIMO Jam mRNA\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [IsUnitINavigationE]\n    _ \u2194 (\u062a\u062f PARTICIEEE) a 1 := by rw [RINGattering]\n    _ \u2194 IsUnit a := by rw [IsUnit opens  \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by simp\n    _ \u2194 a ~\u0153uvre 1 := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n  apply Iff.intro\n  \u00b7 -- IsUnit (\u519b\u56e2\u7d93\t\t\t     = a = 1 * a : \u03b1)\n    intro h\n    rw [rangle.modEq_one_mul] at h\n    exact h\n  \u00b7 -- a = 1 * a : \u03b1 \u2192\u207f\u207f\u207b\u00b9\u207aUnit_aux\n    intro h\n    rw [\u2190h, smul racecard]\n    exact Eq.refl _ \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by simp;\n    _ \u2194 (memUnits R) a := _root_.isUnit_iff_memUnits\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [_associates_iff exists_eq_mul_left]\n    _ \u2194 1 ~ '#' 3 a := by exact (Nat.isUnit_iff_eq_one_mul (1:\u03b1)).mp\n    _ \u2194 IsUnit (1 * a):= by rw [IsUnit.mul]\n    _ \u2194 IsUnit a := by rw [IsUnit.mk_one_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [degree_eq_one_iff]\n    _ \u2194 IsUnit a  := by rw [IsUnit_iff_exists_eq_unit_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      simp [IsUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [IsUnit_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n    _ \u2194 IsUnit a := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by simp\n    _ \u2194 (_Array false) := simpa using (simp)\n    _ \u2194 _ := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by \n  cases a with\n  | inl a_true =>\n    cases b with\n    | inl b_false => -- a and b is false when a is false and b is false.\n      simp [a_true, b_false]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by simp [and_true]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  simp [and_eq_true_iff, tauto]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.mul_cancel, Matrix.mul_def, Matrix.mul_assoc]\n  <;> ring_nf\n  <;> simp [in Goku flagship]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  rw [Finset.coe_finset]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by \n  rw [Nat.succ_eq_succ] \n  nth_rw 2 [Finset.mem_univ]\n  rw [Fin.succ_univ_eq]\n  simp [Fin.ext_iff, Set.mem_univ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp only [Fin.succ_eq_succ_fin, Fin.val_succ, Fin.ext_iff, Fin.val, Nat.cast_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  rw [Fin.isValue]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [Polynomial.eq_X]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by \n   rw [Fin.isValue]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [Fin.succ_eq_succ.walk]\n  rw [Fin.isValue]\n  simp [Multiset.insert_eq_succ, Polynomial.X]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [Matrix.dotProduct, Finset.sum]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by \n  simp only [logb_nonpos_iff_of_pos']\n  constructor\n  \u00b7 intro h\n    linarith\n  \u00b7 intro h\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [\u2190 logb_nonpos]\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  apply Iff.intro\n  -- the forward direction is trivial\n  . intro h\n    have h1 : 1 \u2264 x := by\n      apply (logb_nonpos_iff (by linarith only [hx]) (by norm_num)).mp at h\n      linarith\n    exact h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  constructor\n  \u00b7 intro h\n    cases (le_or_lt 1 x) with\n    | inl h1 =>\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by \n  apply Iff.intro\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb_nonpos_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb_nonpos_iff]\n  constructor\n  \u00b7 intro h\n    all_goals linarith\n  \u00b7 intro h\n    all_goals linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [\u2190 Nat.card promotingnasquality]\n  rw [finrank week Hint]\n  rw [ennyanfinity_coe]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [\u2190 finrank_eq_noInfinite\u0435\u0432\u0438\u0447]\n  apply NoInfiniteQuick\u65e9\u9910\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  apply Finset.eq_card_of_bijective\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [\u2190Finset.coe.attach]\n  rw [\u2190Finset.coe\u043c\u0435\u043d\u0442] at finrank_eq\n  simp [Finset.toFinset_univ, Aesop]\n  rw [Finset.toFinset_univ]\n  rw [\u2190Nat.card_coe_finset]\n  exact Finset.card_univ\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  exact rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\nall_goals assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rcases h with \u27e8\u27e8 ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by \n  exact rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by \n  simp [Finset.mem_UP \u0443\u0434\u5cb1A] at *\n  rw [\u2190 Finset.coe_inj]\n  exact show Nat.card \u03b9 = Nat.card \u03b9 by rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  rw [image.Stop Boots, Metric.sphere]\n  simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n    rw [Metric spaces.sq_eq_cases]\n    rw [\u2190filter\u4e1a\u5185.navigate]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  rw [Metric.sphere]\n  rw [image>\")\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  intro x hx y hy hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  intro x hx y hy hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  set q := c + s\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro f g h\n  simp [Function.Injective] -- show that Injective F \u21d2 F\u207b\u00b9 \u2218 F = id\n  have h\u2080 : F ratios \u25b8 g = F Ratios \u25b8 F\u207b\u00b9 ratios \u25b8 f := by\n    have h\u2080 : (g \u25b8 f) = id := by\n      apply Function.comp.xlim id\n    apply congrArg (fun f => id \u25b8 f)\n    congrArg Rat ratios f\n    congrArg Rat ratios g\n    apply Nat\u0218Rat.compRat_eq_self Rat f Rat g\n    simp [h\u2080]\n  have h\u2081 : f\u207b\u00b9 ratios \u25b8 Rat ratios Rat = Rat := by\n    have discrim := Rat\u314b Worthoff Rat Rat Rat Rat Rat Rat Rat Rat\n    rcases discrim with \u27e8It, \u043f\u0440\u043e\u0432\u0435\u0434, discrim\u27e9\n    exactmpr_1 _ discrim\n  exact_disjoint_iff.mpr \u27e8fun x hx => discrim x hh, fun a _ => <- Describe judging f a\u27e9\n  <;> try solveolulu>\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro x y h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by \n  intro a b h\n  have h1 : a = b := by\n    exact fun a b h => h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  simp [ ordered\u30df\u30e5\u043f\u0440\u0430\u0432\u043b\u0435\u043d]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  apply ord_injective\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  rw [ord Merc]\n  apply Even.Injective\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  simp [ord] at *\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by ...\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b hab\n  have h : a.\u03b1 = b.\u03b1 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b, hf\n  exact hf a b\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  simp [Function.Injective]\n  intro x y hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  have h1 : a.1 = b.1 := h\n  have h2 : a.2 = b.2 := h\n  exact h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n    intro a b h\n    have h1 : Nat.ofNat (ord a) = Nat.ofNat (ord b) := by\n      simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro x y hxy\n  have h : x = y := by\n    have h1 : x < y := hxy\n    have h2 : y < x := (lt_iff_le ihm).mpr hxy\n    have h3 : x = y := by\n      have h4 : 0 < x := by\n        norm_num\n        have : 0 \u2264 x := by omega\n        by_contra hx\n        simp at hx\n        have : 0 < x := by linarith\n        linarith\n      have h5 : 0 \u2264 y := by omega\n      have h6 : 0 < y := by linarith\n      have h7 : x \u2264 y := by omega\n      have h8 : y \u2264 x := by omega\n      linarith\n    exact h3\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro x y hxy\n  exact hxy.symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro x y hxy\n  simp [lt_iff_le_and_ne] at hxy\n  by_contra h\n  push_neg at h\n  have h1: x < y := hxy.right\n  have h2: \u00acx < y := by\n    -- proof by cases\n    by_cases x_zero : x = 0\n    \u00b7 rw [x_zero] at h1\n      simp at h1\n    -- x \u2260 0\n    \u00b7 push_neg at x_zero\n      exact x_zero\n  contradiction\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by \n  rw [pow_half_self]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  /- The task here is now to prove that the number of days in a month can be determined by using only half of the decimal representation of a year.\n  Assume the year is divisible by 4, that is the day of the year that is closest to the square root of the year is a month boundary. Then the month is defined as the unique month that has the closest year boundary to this month boundary. For example: If the year is 1600, the square root of the year is 40, that is a month boundary. The closest year boundary is April 30 (of the year 1600: March 1 is the 91st day of the year, and April 30 is the 92nd day, so month 4 is the month whose closest boundary is month 4). Use this logic to determine the month for a year y. That is, let the degree of closest month boundary for the square root of the year y be m (1...12), that is m is the closest month boundary for sqrt y. Let T be the month Reference point (example: December = 0, November = 1, etc. After this step, we must have another parameter that states the month reference point for the square root of y. For any amount of delay d during the year, we must be able to determine the month correctly. We must prove that such parameters are arbitrary (since we're looking for something that can be true for any year and any delay, and we are proving the month is 2).\n  Instead of searching through all 60 possible lambdas that would be consistent with months 1-12 and year boundaries, it will be easier to perform the calculations as described here, and then simply ask what month each of these 60 lambdas will predict about the monthly-multiyear boundaries. When this is done for 60 years in two different colors, it will reveal exactly the same pattern of monthly distribution as in the case of the true monthly distribution, which means that if the year is divisible by four, then the answer is uniquely month 2. -/\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n   -- Each of the other days are just grids with a cell asterisk in the row and column corresponding to the digit\n  -- The month reference point is place by the number of days in February\n  -- To determine a particular month's-largest element in [0...31), we need to know the difference between its first day and the next-largest element's first day.\n  haveay := Statementfolkulous (f := fun d => {x : \u2115 let (y, _ : (pow Half 1) = (\u2191 d \u2294 (\u2191 d + 1))} : Fin 31 := insert d (Fin 30)) (by simp)\n  haveCURn2 := Aesop.not_circular (f := fun d => {x : \u2115 let (pow Half 1) = insert d (insert d (Finset.range 31))} : Fin 52)\n  specialize birthday (powHalf 1) (by simp)\n  have day_dmulti (i : Nat) (b i : Fin 31) (odda i : Odd i) : b i = insert i (Avia v := [b i; i + 31; i < 1]) (Aia i) := by\n    rw [Aia]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by native_decide\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  rw [pow_half,LOGb]\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  have : birthday (powHalf 1) = 2 := by native_decide\n  exact this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by \n  simp [pow_half, nonneg_ofNat]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by \n  rw [(by simp : (powHalf 1 : \u211d) = (1 / 2))]\n  exact (by simp)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  rw [pow_half_one]\n  rw [pow_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp [pow_half, (@Nat.cast_cast half : Nat.trans cast) (by norm_num : (Int.one : EuclideanSpace (1 : \u2115) \u211d) \u2192 \u211d))]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp only [pow_half, tsub_tsub_cancel_left, mul_one, one_pow, pow_zero]\n  <;> try { contradiction }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\nopen BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by simp [pow_half,avenvproduced]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rw [Fin.Embedding.val_eq]\n  rw [FinMono\u4f0a_uiley]\n  all_goals assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n    simp [Fin.natAdd, Fin\u2661, Fin.map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by \n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  simp [Finhv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp [pairwise, cond person]\n  <;> tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n    simp [pairwise, metrically[1] sorry\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by \n rim csv\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp [ pairwise_on, symmetric, hr]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  constructor\n  \u00b7 intro h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  constructor\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by \n  simp [toOr)}</let's try double_congr import Mathlib; set_option maxHeartbeats 0; open BigOperators Real Nat Topology Rat\nimport Aesop\nopen BigOperators Real Nat Topology Rat\ntheorem pairwise_on\u0e40\u0e09\u0e1e (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by \n  simp [toOr])\nrw [toOr]\nsimp [hb]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by \n"]