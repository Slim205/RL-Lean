["\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rcases (mem_range.mp x.prop) with \u27e8y, rfl\u27e9\n  simpa [Quotient.eq_zero_iff_mem] using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rcases x with \u27e8x, rfl\u27e9\n  obtain \u27e8y, hy\u27e9 := hx\n  simp only [Quotient.mk_eq_mk, Function.comp_apply, Quotient.lift_mk, map_mk, RingHom.rangeRestrict]\n    at hy\n  p_rarefact hy\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rcases hx with \u27e8x, hx, rfl\u27e9\n  rw [RingHom.mem_range] at hx\n  cases' hx with x hx\n  simp [hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  apply Quotient.eq_zero_iff_mem.mpr\n  simpa [Function.comp_apply, \u2190 RingHom.mem_range] using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  have hx' : C x \u2208 I.map (Polynomial.mapRingHom (Quotient.mk I)) := by\n    rw [Ideal.map_map] at hx\n    simpa using hx\n  rcases (mem_map_C_iff.mp hx') with \u27e8y, hy, hxy\u27e9\n  rw [Quotient.eq] at hxy\n  rw [\u2190 sub_eq_zero]\n  apply_fun Polynomial.map (Quotient.mk I) at hxy\n  simpa using hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rw [Quotient.eq_zero_iff_mem] at hx\n  obtain \u27e8y, hy\u27e9 := hx\n  simp_rw [RingHom.mem_range] at hy\n  obtain \u27e8z, hz\u27e9 := hy\n  rw [\u2190 hz]\n  simp_rw [RingHom.comp_apply, RingHom.comp_apply (f := Quotient.mk I)] at hz\n  simp_rw [Quotient.eq_zero_iff_mem] at hz\n  rw [\u2190 Ideal.mem_bot R]\n  exact hz\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rcases hx with \u27e8x, hx, rfl\u27e9\n  rw [RingHom.comp_apply, \u2190 RingHom.mem_ker, Polynomial.map_C] at hx\n  simpa using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rw [RingHom.mem_range] at hx\n  obtain \u27e8y, hy\u27e9 := hx\n  have h := congr_arg (fun z => Polynomial.coeff z 0) hy\n  simp only [Polynomial.coeff_C_zero, Polynomial.coeff_map] at h\n  rw [\u2190 @Quotient.eq_zero_iff_mem _ _ (Ideal.ofRange (Quotient.mk I).comp C) y]\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  refine' Subtype.ext_iff.mp _\n  simpa using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rw [Ideal.mem_map_iff_of_surjective (Quotient.mk I).surjective] at hx\n  obtain \u27e8\u27e8a, ha\u27e9, h_eq\u27e9 := hx\n  simp_rw [RingHom.comp_apply, RingHom.comp_apply, Quotient.eq_zero_iff_mem, Ideal.mem_map_iff_of_surjective] at h_eq\n  obtain \u27e8b,_,hb\u27e9 := h_eq\n  simp_rw [RingHom.comp_apply, RingHom.comp_apply, Quotient.eq_zero_iff_mem, Ideal.mem_map_iff_of_surjective] at hb\n  obtain \u27e8c,_,hc\u27e9 := hb\n  simp at ha hb hc\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  have : (Quotient.mk I).comp C = (Quotient.mk (I.map Polynomial.C)).comp Polynomial.C := by\n    ext x\n    simp [Quotient.eq_zero_iff_mem]\n  rw [this] at hx\n  simpa [Quotient.eq_zero_iff_mem] using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  obtain \u27e8x, rfl\u27e9 := x\n  simpa [RingHom.mem_range] using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rw [Ideal.mem_map_iff_of_surjective] at hx\n  \u00b7 exact (mk_eq_zero I x).1 (by simpa using hx)\n  apply (mk_surjective I).bijective_iff_surjective.2\n  intro y\n  obtain \u27e8x, rfl\u27e9 := (mk_surjective I).surjective y\n  exact \u27e8C x, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rcases x with \u27e8x, rfl\u27e9\n  simpa using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  have hx : (x : R[X]) = 0 := by\n    exact mem_zero_of_mem_map_restrict_range _ hx\n  ext\n  simpa using congr_arg (fun x => coeff x n) hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rcases hx with \u27e8x, rfl, rfl\u27e9\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  obtain \u27e8y, h\u27e9 := mem_range.1 hx\n  simp_rw [Ideal.mem_map_iff_of_surjective (Polynomial.mapRingHom (y : R[X]).rangeRestrict Polynomial.C_surjective)\n    (by dsimp [RingHom.rangeRestrict]; exact Subtype.range_coe.symm : _)] at h\n  rw [\u2190 Quotient.eq_zero_iff_mem, \u2190 h]\n  exact map_C_eq_zero (x : R[X])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  let a : R := 1\n  have ha := congr_arg (fun x => a * x) hx\n  simp only [RingHom.map_one, mul_one] at ha\n  convert ha\n  simp [\u2190 mem_bot]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  revert x hx\n  simp only [RingHom.mem_range, RingHom.mem_range_self, map_eq_zero_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  obtain \u27e8y, hy\u27e9 := x\n  rw [Quotient.comp_mk, Quotient.rangeRestrict, RingHom.comp_apply, RingHom.comp_apply] at hy\n  simp_all only [Quotient.mk_eq_mk, map_C, RingHom.id_apply, RingHom.coe_comp, Quotient.mk_eq_zero,\n    map_eq_zero_iff, Subring.coe_rangeRestrict]\n  exact (Quotient.eq_zero_iff_mem _ y).mp (mem_map_of_mem I hy)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rw [RingHom.mem_range] at hx\n  obtain \u27e8a, ha\u27e9 := hx\n  rw [\u2190 ha, RingHom.comp_apply, \u2190 RingHom.comp_apply, \u2190 RingHom.comp_assoc,\n    RingHom.comp_assoc] at ha\n  apply_fun Quotient.mk I at ha\n  simp only [Quotient.mk_eq_mk, Quotient.eq_zero_iff_mem] at ha\n  simpa [Ideal.mem_map_iff_of_surjective, Polynomial.map_C] using ha\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rw [RingHom.mem_range] at hx\n  obtain \u27e8y, hy\u27e9 := hx\n  exact\n    (by\n      simp_all\n      )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  have hx\u2081 := x.property\n  obtain \u27e8\u27e8y, hy\u27e9, hx\u2082\u27e9 := hx\n  simp_all\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  obtain \u27e8x, rfl\u27e9 := x\n  rw [RingHom.mem_range] at hx\n  obtain \u27e8x, rfl\u27e9 := hx\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  simpa using (Polynomial.ext (C_eq_intCast x)).mp (Polynomial.eq_X_add_C_of_natDegree_le_one\n      (quotient_mul_C_eq_zero hx)) 0\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rcases hx with \u27e8y, hy, rfl\u27e9\n  rw [RingHom.comp_apply, \u2190 @RingHom.map_one (Ideal.quotient I), \u2190 sub_eq_zero]\n  exact\n    Ideal.Quotient.eq_zero_iff_mem.mpr (Ideal.mem_map_of_mem (Ideal.Quotient.mk I) (by simpa using hy))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  revert x\n  simp only [Function.comp_apply, Quotient.mk_eq_mk, RingHom.mem_range,\n    \u2190 @Submodule.Quotient.Quot_mk_eq_mk _ _ _ _ (RingHom.ker (Polynomial.mapRingHom (Quotient.mk I).rangeRestrict))\n    Submodule.Quotient.mk_eq_zero]\n  exact fun x => by aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rcases x with \u27e8_, \u27e8a, rfl\u27e9\u27e9\n  simpa [Ideal.mem_map_iff_of_surjective (Quotient.mk I) (Quotient.mk_surjective _)] using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rcases x with \u27e8x, rfl\u27e9\n  rcases hx with \u27e8p, hp, hpx\u27e9\n  simp_rw [RingHom.comp_apply, Quotient.mk_eq_mk, Ideal.Quotient.eq] at hpx\n  rw [\u2190 C_eq_zero]\n  exact eq_zero_of_zero_dvd (by simpa using p.polynomial_mem_ideal_of_smul_mem_submodule hp hpx)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rcases hx with \u27e8x, hx\u27e9\n  apply_fun Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict at hx\n  simpa using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  rcases hx with \u27e8x, hx, rfl\u27e9\n  apply Quotient.eq_zero_iff_mem.mpr\n  exact Ideal.mem_map_of_mem _ hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem eq_zero_of_polynomial_mem_map_range (I : Ideal R[X]) (x : ((Quotient.mk I).comp C).range)\n    (hx : C x \u2208 I.map (Polynomial.mapRingHom ((Quotient.mk I).comp C).rangeRestrict)) : x = 0 := by\n  have h : \u2200 (a : R), (Ideal.Quotient.mk I) a = 0 \u2192 a \u2208 I := fun a ha \u21a6 by\n    have h := Ideal.Quotient.eq_zero_iff_mem.mp ha\n    exact h\n  obtain \u27e8a, ha\u27e9 := x\n  simp only [Quotient.comp_apply, Quotient.mk_eq_zero] at hx\n  simp only [Quotient.comp_apply, Quotient.mk_eq_zero] at ha\n  simp only [ha, h a ha, eq_self_iff_true, map_zero, Submodule.zero_mem, eq_iff_true_of_subsingleton] at hx \u22a2\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp [*, normalizeAux, HCong]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all [normalizeAux]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp [*, normalizeAux]\n  have : comp_path p\u2081 p\u2082 (Path.trans p\u2081 p\u2082) = p\u2082.comp p\u2081 := by\n    induction p\u2081 <;> induction p\u2082 <;> rfl\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  cases p <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p with\n  | nil => rfl\n  | cons p' _ ih =>\n    have ih' := ih f g \u03b7\n    simp only [normalizeAux, Path.map, Functor.map_comp, Hom.naturality, comp_id] at *\n    congr 1\n    exact ih'\n  <;> simp [normalizeAux]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p with\n  | refl => rfl\n  | map _ q ih =>\n    apply ih\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp [normalizeAux, *]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp [*, normalizeAux_congr_shape]\n  aesop_search\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  cases p <;> simpa using congr_fun ext_iff \u03b7\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  pinduction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  cases p <;> cases \u03b7 <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp [*, normalizeAux]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp [*, normalizeAux]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  cases p <;> cases \u03b7 <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p with\n  | nil => rfl\n  | cons _ _ ih => exact congr_fun ih _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p\n  all_goals aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  simp only [normalizeAux, type_eq]\n  congr 1\n  exact Path.Hom.Jequiv_congr p _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  subst_vars\n  congr\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp [*, normalizeAux_congr_aux]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  rcases \u03b7 with \u27e8\u27e9\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem normalizeAux_congr {a b c : B} (p : Path a b) {f g : Hom b c} (\u03b7 : f \u27f6 g) :\n    normalizeAux p f = normalizeAux p g := by\n  induction p <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  simp [add_mul, mul_add, add_assoc, add_left_comm]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  apply Eq.symm\n  apply Eq.symm\n  apply Eq.symm\n  apply Eq.symm\n  apply Eq.symm\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply eq_of_sub_eq_zero\n  simp [mul_add, add_mul, sub_eq_zero]\n  <;>\n  simp only [sub_eq_add_neg, add_assoc, add_left_comm]\n  <;>\n  apply add_right_cancel\n   <;>\n  simp [add_assoc, add_left_comm, sub_eq_add_neg, add_comm, add_assoc, add_left_comm]\n   <;>\n  apply Eq.refl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  simp only [mul_eq_mul x, mul_eq_mul y, mul_eq_mul (x + y)]\n  apply eval_add\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  simp only [mul_add, add_mul, add_comm, add_left_comm, add_assoc]\n  rw [\u2190 mul_right_inj (by decide : (2 : \u2115) \u2260 0)]\n  simp [mul_comm, mul_left_comm, mul_assoc, add_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply mul_emod\n  apply add_emod\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  show (x + y) * z = x * z + y * z\n  apply Eq.symm\n  apply mul_add\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  simp only [mul_eq_mul x y z, add_eq_add x y]\n  rw [add_comm y z]\n  simp only [add_eq_add y z]\n  apply congrArg\u2082 _ (mul_eq_mul x z) (mul_eq_mul y z)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  simp only [mul_eq_mul x, mul_eq_mul y, mul_eq_mul (x + y)]\n  apply add_inv <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  repeat' rw [\u2190 mul_eq_mul x]\n  apply mul_add\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  dsimp [nonAssociativeSemiring.add_mul]\n  apply eval_sums_eq_q\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply eq_of_sub_eq_zero\n  simp [mul_add, add_mul, sub_eq_add_neg, add_assoc, add_comm, add_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  apply (add_mul x y z).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  rw [\u2190 add_mul, add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  show (x + y) * z = x * z + y * z\n  apply Eq.symm\n  rw [eq_iff_exists]\n  use 0\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  apply mul_add\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  show (x + y) * z = x * z + y * z\n  apply eq_of_sub_eq_zero\n  simp only [mul_sub, sub_mul, add_sub_add_right_eq_sub, sub_self]\n  apply eq_of_sub_eq_zero\n  simp only [mul_add, add_mul, add_assoc, add_left_comm, add_comm, add_right_comm, add_sub_add_right_eq_sub,\n    sub_self, add_zero, zero_add]\n  apply eq_of_sub_eq_zero\n  simp only [add_comm, add_left_comm, add_assoc, add_right_comm, add_sub_add_right_eq_sub, sub_self,\n    add_zero, zero_add]\n  apply eq_of_sub_eq_zero\n  simp only [add_comm, add_left_comm, add_assoc, add_right_comm, add_sub_add_right_eq_sub, sub_self,\n    add_zero, zero_add]\n  apply eq_of_sub_eq_zero\n  simp only [add_comm, add_left_comm, add_assoc, add_right_comm, add_sub_add_right_eq_sub, sub_self,\n    add_zero, zero_add]\n  apply eq_of_sub_eq_zero\n  simp only [add_comm, add_left_comm, add_assoc, add_right_comm, add_sub_add_right_eq_sub, sub_self,\n    add_zero, zero_add]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  show (x + y) * z = x * z + y * z\n  apply Eq.symm\n  apply Eq.symm\n  rw [add_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  simp [mul_eq, add_eq]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  rw [\u2190 Sub_eq_zero]\n  apply Eq.symm\n  repeat' rw [\u2190 Sub_eq_zero]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply eval_add\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply mul_emv_eq_add_mul_emv\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply add_mul\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  apply add_mul\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  simp only [mul_comm, right_distrib]\n  apply Eq.symm\n  apply Eq.symm\n  simp only [add_mul, mul_assoc, add_assoc]\n  apply Eq.symm\n  apply Eq.symm\n  apply Eq.symm\n  simp only [mul_add, mul_comm, mul_left_comm, mul_assoc, add_assoc]\n  apply Eq.symm\n  apply Eq.symm\n  apply Eq.symm\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply mul_is_linear.map_add\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  simp only [add_mul, Eq.symm]\n  apply Eq.symm\n  simp only [add_mul, Eq.symm]\n  apply Eq.symm\n  simp only [add_mul, Eq.symm]\n  apply Eq.symm\n  simp only [add_mul, Eq.symm]\n  apply Eq.symm\n  simp only [add_mul, Eq.symm]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  show (x.val + y.val) * z.val \u2261 x.val * z.val + y.val * z.val [ZMOD q]\n  apply Int.ModEq.symm\n  apply Int.ModEq.symm\n  simp [Int.ModEq, Int.add_emod, Int.mul_emod]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  simp only [add_mul, mul_rfl, mul_add]\n  apply Eq.symm\n  apply Eq.symm\n  apply Eq.symm\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  simp [add_mul, mul_add, add_assoc, add_left_comm, add_comm, mul_comm, mul_left_comm, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  apply add_mul\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem right_distrib (x y z : X q) : (x + y) * z = x * z + y * z := by\n  apply Eq.symm\n  apply add_mul\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  refine' \u27e8fun hx m hm => _, fun h => _\u27e9\n  \u00b7 rw [Ideal.mem_span_image] at hx\n    obtain \u27e8x, hx'\u27e9 := hx hm\n    obtain \u27e8i, hi\u27e9 := Finsupp.mem_image_iff_bex.mp hx'\n    exact \u27e8i, hi.1, hi.2\u27e9\n  \u00b7 rw [Ideal.mem_span_image]\n    refine' Finsupp.mem_image_iff_bex.mpr fun m => _\n    obtain \u27e8i, hi, hm\u27e9 := h m\n    exact \u27e8Finsupp.single i 1, \u27e8\u27e8i, hi\u27e9, by simpa [Finsupp.single_eq_same] using hm\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  rw [Ideal.mem_span_image, MvPolynomial.mem_support_iff]\n  simp only [exists_prop, Finset.mem_coe, Finsupp.mem_support_iff, ne_eq,\n    Finsupp.coe_mk, exists_and_right, exists_prop]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  rw [mem_ideal_span_image]\n  simp_rw [MvPolynomial.mem_support_iff]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  rw [Ideal.mem_span_iff_total]\n  simp_rw [MvPolynomial.total_coeff]\n  refine \u27e8fun h m hm \u21a6 ?_, fun h \u21a6 ?_\u27e9\n  \u00b7 obtain \u27e8w, hw, hwm\u27e9 := h m hm\n    obtain \u27e8i, hi, rfl\u27e9 := hw\n    exact \u27e8i, hi, by simpa using hwm\u27e9\n  \u00b7 classical\n    choose f hf using h\n    refine \u27e8\u2211 i \u2208 s, f i \u2022 MvPolynomial.X i, ?_, ?_\u27e9\n    \u00b7 simp [hf]\n    \u00b7 simp [Finsupp.sum_mul_index, support_sum_monomial_subset]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor <;> intro h\n  case mp =>\n    intro m hm\n    obtain \u27e8p, hp, hpm\u27e9 := Ideal.mem_span_image_iff\n        _ _ _ hm\n    cases' p with n hn\n    apply \u27e8n, hp, _\u27e9\n    intro heq\n    simp_all [MvPolynomial.X, MvPolynomial.monomial_eq]\n  case mpr =>\n    refine' Submodule.span_induction\n      (p := fun x \u21a6 \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0) _ h _ _ _ _\n    \u00b7 intro x hx m hm\n      rw [Finset.mem_coe, Finsupp.mem_support_iff] at hm\n      obtain \u27e8i, hi, hix\u27e9 := h m hm\n      exact \u27e8i, hi, hix\u27e9\n    \u00b7 intro x y hx hy m hm\n      obtain \u27e8i, hi, hix\u27e9 := hx m hm\n      obtain \u27e8j, hj, hij\u27e9 := hy m hm\n      cases' Finset.mem_union.mp (Finsupp.support_add hm) with hm hm\n      \u00b7 exact \u27e8i, hi, by simpa [hix] using hm\u27e9\n      \u00b7 exact \u27e8j, hj, by simpa [hij] using hm\u27e9\n    \u00b7 intro r\n      rw [\u2190 MvPolynomial.C_mul_X_pow_eq_monomial, MvPolynomial.support_mul,\n        Finset.mem_image]\n      intro m hm\n      obtain \u27e8\u27e8k, _, hkm\u27e9, hmk\u27e9 := hm\n      obtain \u27e8i, hi, hik\u27e9 := h k hmk\n      refine \u27e8i, hi, ?_\u27e9\n      ext a\n      simp only [Finsupp.mem_support_iff, ne_eq, add_right_neg,\n        Finsupp.single_eq_zero, mul_zero, mul_eq_zero, ne_eq, hik, or_false]\n      rw [M] at hkm\n      rw [Finsupp.single_apply] at hkm\n      dsimp\n      split_ifs at hkm\n      cases' hi with _ _ hi\n      aesop\n    \u00b7 exact fun x y hx hy m _ \u21a6 \u27e8_, hx m, _, hy m, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor <;> intro h\n  \u00b7 rw [Ideal.mem_span_iff_exists_sum] at h\n    intro m hm\n    obtain \u27e8wf, hw\u27e9 := h\n    obtain \u27e8p, hp, rfl\u27e9 := Multiset.exists_mem_of_ne_zero hm\n    obtain \u27e8i, _, hi\u27e9 := (Finsupp.mem_sum_support_iff hw).mp hp\n    exact \u27e8i, hi\u27e9\n  \u00b7 rw [Ideal.mem_span_iff_exists_sum]\n    refine\n      \u27e8fun i => if h : i \u2208 s then X i else 0, fun m hm => ?_, by\n        letI := Classical.decEq \u03c3\n        simp (config := { contextual := true }) [sum_def, h, hm]\u27e9\n    obtain \u27e8i, hi, hmi\u27e9 := h m hm\n    dsimp only\n    erw [dif_pos hi, X_pow_eq_monomial, Finsupp.single_eq_sum]\n    refine hmi.symm.trans (Finset.sum_eq_single i (fun j hj => ?_) ?_)\n    \u00b7 exact Finsupp.not_mem_support_iff.mp hj\n    \u00b7 simp [hi]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  classical\n  rw [Ideal.mem_span_image]\n  constructor <;> intro h\n  \u00b7 intro m hm\n    obtain \u27e8p, hp, rfl\u27e9 := h m hm\n    obtain \u27e8i, hi, h2\u27e9 := Finsupp.mem_image.mp hp\n    exact \u27e8i, hi, h2\u27e9\n  \u00b7 obtain \u27e8p, hp\u27e9 := h\n    refine \u27e8p, ?_, rfl\u27e9\n    ext m\n    exact \u27e8fun hm => hp m hm, fun hm => Finsupp.mem_image.mpr \u27e8m, hm, rfl\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor\n  \u00b7 intro hx\n    apply MvPolynomial.mem_ideal_span_X_image_iff.mp\n    exact hx\n  \u00b7 intro h\n    apply MvPolynomial.mem_ideal_span_X_image_iff.mpr\n    exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor\n  \u00b7 intro hxs\n    refine' fun m hm => _\n    have h0 : Finsupp.single m 1 \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) := by\n      simpa only [one_smul, mul_one, Finsupp.single_eq_same, Ideal.mem_span_insert] using\n        Ideal.mul_mem_left _ _ hxs\n    obtain \u27e8i, his, hit\u27e9 := (Ideal.mem_span_insert.mp h0).resolve_left hm\n    exact \u27e8i, his, hit.symm\u27e9\n  \u00b7 rintro hs\n    rw [MvPolynomial.mem_ideal_span_X_image']\n    exact hs\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  refine' \u27e8fun hm => _, fun h => _\u27e9\n  next =>\n    rw [Ideal.mem_span_iff_mem_closure] at hm\n    refine' closure_induction hm (fun a ha => _) Ideal.subset_span (fun y z hy hz => _) (fun r y hy => _)\n    next =>\n      obtain \u27e8i, his, rfl\u27e9 := Set.mem_image.1 ha\n      exact \u27e8i, his, by simp\u27e9\n    next =>\n      exact fun i _ => hy i _\n    next =>\n      exact fun i _ => by simp_all\n  next =>\n    rw [MvPolynomial.mem_supported_iff] at h \u22a2\n    refine' Finsupp.mem_span_image_iff.2 fun m hm => _\n    obtain \u27e8i, his, hi\u27e9 := h m hm\n    exact \u27e8Finsupp.single i 1, by simpa, by simp [hi]\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  cases x\n  simp [Ideal.mem_span_iff, MvPolynomial.support_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  refine' \u27e8fun hx m hm => _, fun h => _\u27e9\n  next =>\n    obtain \u27e8y, hy, rfl\u27e9 := Ideal.mem_span_singleton.1 (Ideal.subset_span hx)\n    obtain \u27e8i, hi, h2\u27e9 := MvPolynomial.mem_support_iff.1 hm\n    exact \u27e8i, hi.1, hi.2.symm \u25b8 h2\u27e9\n  next =>\n    apply Ideal.span_induction hx <;> clear hx x\n    \u00b7 exact fun x hx => \u27e8x, hx, by rfl\u27e9\n    \u00b7 exact fun x y hx hy => by simp [hx, hy]\n    \u00b7 simp\n    \u00b7 rintro x y \u27e8hx, hx'\u27e9 \u27e8hy, hy'\u27e9\n      exact \u27e8x + y, by simpa using hx'.mul_right hy'\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  refine' \u27e8fun hx m hm => _, fun h => _\u27e9\n  \u00b7 rcases (Ideal.mem_span_iff_exists_sum _ _).1 hx with \u27e8\u03bc, h\u03bc\u27e9\n    classical\n    obtain \u27e8i, hi, hm\u27e9 := Finset.exists_ne_zero_of_sum_ne_zero h\u03bc hm\n    exact \u27e8i, hi, hm\u27e9\n  \u00b7 rw [MvPolynomial.mem_support_iff] at h\n    classical\n    refine'\n      (Ideal.subset_span <| mem_image_of_mem _).trans\n        (Ideal.sum_mem _ fun m hm => _)\n    obtain \u27e8i, hi, hm\u27e9 := h m hm\n    exact\n      Ideal.subset_span\n        \u27e8Finsupp.single i 1, by simpa [one_mul] using Finsupp.single_mem_supported R 1 i, by simpa\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor\n  \u00b7 intro h m hm\n    obtain \u27e8p, hp\u27e9 := (Ideal.mem_span_iff_exists_sum _ _).1 h\n    obtain \u27e8i, hi, h'i\u27e9 := Finsupp.mem_biUnion.1 (Finsupp.mem_support_iff.1 hm)\n    obtain \u27e8c, hc\u27e9 := (Finset.mem_biUnion.1 (Finsupp.mem_support_iff.1 hm)).1\n    use i, hi\n    have h : coeff (Finsupp.single i 1) (p * MvPolynomial.X i) = coeff m (p * MvPolynomial.X i) :=\n      congr_arg (fun m : MvPolynomial \u03c3 R => coeff m (p * MvPolynomial.X i)) (Finsupp.single_eq_same h'i)\n        <;> rw [hp] at h\n        <;> simp? [h, coeff_X] at h\n    exact hc\n  \u00b7 rintro h\n    apply (Ideal.mem_span_iff_exists_sum _ _).2\n    use fun m : \u03c3 \u2192\u2080 \u2115 => x.coeff m \u2022 MvPolynomial.X m\n    apply congr_arg (_ : MvPolynomial \u03c3 R)\n    rw [MvPolynomial.sum_C_mul_X_pow_eq]\n    apply Finset.sum_congr rfl\n    intro m hm\n    rw [mul_comm]\n    apply congr_arg (_ : MvPolynomial \u03c3 R)\n    simp [h m hm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor <;> intro h\n  \u00b7 rw [Ideal.mem_span_image] at h\n    intro m hm\n    obtain \u27e8i, hi, hm\u27e9 := h m hm\n    use i, hi\n    intro hn\n    rw [hn, Finsupp.single_eq_zero] at hm\n    exact one_ne_zero hm\n  \u00b7 rw [Ideal.mem_span_image]\n    intro m hm\n    obtain \u27e8i, hi, hm\u27e9 := h m hm\n    exact \u27e8X i, \u27e8i, hi, rfl\u27e9, hm\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  exact \u27e8fun h \u21a6 by\n    intro m hm\n    rw [MvPolynomial.mem_support_iff] at hm\n    obtain \u27e8p, hp, hpm\u27e9 := Submodule.mem_span_finite_of_mem_span (t := X '' s) h\n    rw [\u2190 hp, \u2190 hpm, \u2190 Finsupp.mem_support_iff] at hm\n    obtain \u27e8n, hn\u27e9 := Multiset.exists_mem_of_ne_zero hm\n    obtain \u27e8i, \u27e8j, hj, hji\u27e9, hi\u27e9 := Multiset.mem_map.mp hn\n    refine' \u27e8j, hj, _\u27e9\n    rw [Finsupp.single_eq_same] at hi\n    exact hi.symm\u27e9, fun h \u21a6 by\n    have : \u2200 m : \u03c3 \u2192\u2080 \u2115, m \u2208 x.support \u2192\n        \u2203 r : MvPolynomial \u03c3 R, r \u2208 Ideal.span (MvPolynomial.X '' s) \u2227 (m : \u03c3 \u2192\u2080 \u2115) = r := by\n      intro m hm\n      exact \u27e8(Multiset.replicate m.support.card (MvPolynomial.X m.to_fun)).prod,\n        Ideal.mem_span_image _ _ fun hmh \u21a6 by\n          simpa only [Finset.mem_coe, Finsupp.mem_support_iff, Ne, mul_zero, Finsupp.coe_zero,\n            zero_eq_mul] using hmh\n          , by\n        rw [Multiset.eq_replicate]\n        exact \u27e8x.asHomogeneousComponent_homogeneous_mem hm,\n          fun i hi \u21a6 by rw [Multiset.replicate_eq_replicate_iff]\n          exact \u27e8n, rfl\u27e9\u27e9\u27e9\n    refine' Submodule.finsupp_sum_mem (M := MvPolynomial \u03c3 R) _ this _ fun h _h \u21a6 by\n      simpa only [mul_one, Ideal.one_eq_top] using Ideal.subset_span h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  refine \u27e8fun hx m hm => ?_, fun h => ?_\u27e9\n  \u00b7 rw [MvPolynomial.mem_support_iff] at hm\n    obtain \u27e8y, hy, rfl\u27e9 := Set.mem_image.mp (Ideal.subset_span hy)\n    exact hy\n  \u00b7 rw [MvPolynomial.mem_ideal_span_image]\n    intro i hi\n    exact h i hi\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  rw [Ideal.mem_span_image]\n  simp_rw [MvPolynomial.X_pow_mem_span_X_pow]\n  constructor <;> intro h m hm <;> obtain \u27e8\u27e8i, hi\u27e9, hm\u27e9 := h \u27e8m, hm\u27e9 <;>\n    exact \u27e8i, hi, hm\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  simp_rw [Ideal.mem_span_iff_mem_adjoin, AlgHom.mem_range]\n  refine \u27e8fun h m hm \u21a6 ?_, fun h \u21a6 \u27e8x, rfl, h\u27e9\u27e9\n  obtain \u27e8x, rfl\u27e9 := h m hm\n  exact \u27e8x.support.toMultiset, by simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  simp_rw [Ideal.mem_span_iff_exists_sum, MvPolynomial.mem_support_iff, ne_eq]\n  constructor <;> intro h <;> obtain \u27e8a, \u27e8n, rfl\u27e9, h\u27e9 <;>\n    exact \u27e8n, by simpa using h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  refine' \u27e8fun hx m hm => _, fun h => _\u27e9\n  \u00b7 rcases hx with \u27e8p, hp, rfl\u27e9\n    simp only [MvPolynomial.mem_support_iff, ne_eq, MvPolynomial.smul_eq_C_mul] at hm\n    obtain \u27e8i, hi, hm\u27e9 := hp hm\n    exact \u27e8i, hi, by simpa using hm\u27e9\n  rw [MvPolynomial.mem_ideal_span_X_image]\n  refine' Ideal.subset_span \u27e8x, _, rfl\u27e9\n  simp only [Set.mem_image, exists_prop]\n  intro m hm\n  obtain \u27e8i, hi, hm\u27e9 := h _ hm\n  exact \u27e8_, hi, by simpa using hm\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor <;> intro h\n  \u00b7 rw [Ideal.mem_span_iff_supr] at h\n    simp only [Finset.sup_eq_sup, le_eq_subset] at h\n    intro m hm\n    obtain \u27e8p, hp, mp\u27e9 := h _ hm\n    obtain \u27e8i, hi, himp\u27e9 := hp\n    exact \u27e8i, hi, by simpa [himp] using hm\u27e9\n  \u00b7 rw [Ideal.mem_span_iff_supr]\n    simp only [Finset.sup_eq_sup, le_eq_subset]\n    intro m hm\n    obtain \u27e8i, \u27e8hi, hx\u27e9\u27e9 := h m hm\n    exact \u27e8_, \u27e8_, \u27e8hi, rfl\u27e9\u27e9, by simpa [hx] using hm\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor\n  next =>\n    exact fun hm => by\n      apply Finsupp.induction hm\n      \u00b7 intro u hu\n        simp at hu\n      intro u b f hb hf\n      simp? [Finsupp.mem_support_iff] at hf \u22a2 says simp only [Finsupp.mem_support_iff, ne_eq,\n        Finsupp.sum_apply, Finsupp.sum, ne_eq, not_forall] at hf \u22a2\n      rcases hf with \u27e8a, ha, hfa\u27e9\n      use a, ha\n      simp [hfa]\n  next =>\n    exact fun hm => by\n      apply Ideal.subset_span\n      use x\n      simp [hm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  refine' \u27e8fun h m hm => _, fun h => _\u27e9\n  \u00b7 rcases h with \u27e8p, hp, rfl\u27e9\n    obtain \u27e8i, hi, nz\u27e9 := Finsupp.mem_support_iff.1 hm\n    exact \u27e8i, hi, nz\u27e9\n  \u00b7 choose s hs hmem using h\n    refine' Finsupp.mem_span_image_iff.2 _\n    exact \u27e8fun i => \u27e8s i, hs i\u27e9, by simpa using hmem\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor <;> intro h\n  \u00b7 rw [Ideal.mem_span_iff_supr] at h\n    intro m hm\n    obtain \u27e8p, hp, hmp\u27e9 := h m hm\n    rw [MvPolynomial.mem_support_iff] at hm\n    obtain \u27e8i, hi, hni\u27e9 := hp\n    exact \u27e8i, hi, hni\u27e9\n  \u00b7 rw [Ideal.mem_span_iff_supr]\n    intro m hm\n    obtain \u27e8i, hi, hni\u27e9 := h m hm\n    exact \u27e8MvPolynomial.X i, \u27e8i, hi, rfl\u27e9, hni\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor <;> intro h\n  next =>\n    rw [\u2190 Ideal.mem_span_iff_mem_span_image] at h\n    intro m hm\n    obtain \u27e8p, hp, mp\u27e9 := h m hm\n    obtain \u27e8i, hi, im\u27e9 := MvPolynomial.exists_coeff_ne_zero.mp mp\n    exact \u27e8i, hi, im\u27e9\n  next =>\n    apply Ideal.mem_span.mpr\n    intro m hm\n    obtain \u27e8i, hi, im\u27e9 := h m hm\n    exact \u27e8MvPolynomial.X i ^ (m i), \u27e8i, hi, rfl\u27e9, by simpa using im\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor <;> intro h\n  \u00b7 rw [Ideal.mem_span_insert] at h\n    aesop\n  \u00b7 rw [\u2190 Ideal.mem_span_insert]\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  constructor <;> intro h\n  \u00b7 rw [Ideal.mem_span_iff_sup] at h\n    rw [MvPolynomial.mem_support_iff] at h\n    intro m hm\n    rw [Finset.sup_eq_iSup] at h\n    simp_rw [Submodule.mem_iSup_of_chain] at h\n    specialize h m hm\n    obtain \u27e8i, hi, h\u27e9 := h\n    exact \u27e8i, hi, h\u27e9\n  \u00b7 rw [Ideal.mem_span_iff_sup]\n    rw [MvPolynomial.mem_support_iff]\n    intro m hm\n    specialize h m hm\n    obtain \u27e8i, hi, h\u27e9 := h\n    rw [Finset.sup_eq_iSup]\n    simp_rw [Submodule.mem_iSup_of_chain]\n    exact \u27e8i, hi, h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  refine' \u27e8fun h m hm => _, fun h => _\u27e9\n  \u00b7 obtain \u27e8x, hx, rfl\u27e9 := Ideal.subset_span hm\n    obtain \u27e8i, hi, h2\u27e9 := Set.mem_image.1 hx\n    exact \u27e8i, hi, h2\u27e9\n  \u00b7 rw [MvPolynomial.mem_support_iff] at hm\n    refine'\n      Submodule.span_induction hm (fun x hx => subset_span (Set.mem_image_of_mem _ hx)) _ _ _\n    \u00b7 exact \u27e8_, Set.mem_univ _, one_ne_zero\u27e9\n    \u00b7 rintro x y \u27e8s, hs, h2\u27e9 \u27e8t, ht, h3\u27e9\n      exact\n        \u27e8_, subset_span (Set.mem_image_of_mem _ hs),\n          _\u27e9\n    \u00b7 rintro a x \u27e8s, hs, hx\u27e9\n      exact \u27e8_, subset_span (Set.mem_image_of_mem _ hs), mul_ne_zero hx hx\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  refine \u27e8fun hx a ha => ?_, fun h => ?_\u27e9\n  \u00b7 rw [Ideal.mem_span_image] at hx\n    obtain \u27e8p, _, hp\u27e9 := hx\n    obtain \u27e8i, hi, h2\u27e9 := MvPolynomial.mem_support_iff.mp ha\n    exact \u27e8i, hi, by rwa [\u2190 hp]\u27e9\n  \u00b7 rw [Ideal.mem_span_image]\n    refine \u27e8x, Set.Subset.refl _, ?_\u27e9\n    apply MvPolynomial.ext\n    intro n\n    rw [MvPolynomial.coeff_zero]\n    apply by_contra\n    intro h2\n    obtain \u27e8i, hi, h3\u27e9 := h n h2\n    rw [MvPolynomial.coeff_mul_X'] at h3\n    simp only [ne_eq, one_mul, mul_one, ne_eq] at h3\n    contradiction\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  simp only [Ideal.mem_span_iff_vsub_mem, SetLike.mem_coe, AlgHom.map_vsub]\n  simp_rw [MvPolynomial.X_mem_support_iff]\n  exact \u27e8fun h m hm => h m hm, fun h m hm => h m hm\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_ideal_span_X_image {x : MvPolynomial \u03c3 R} {s : Set \u03c3} :\n    x \u2208 Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R)) \u2194\n      \u2200 m \u2208 x.support, \u2203 i \u2208 s, (m : \u03c3 \u2192\u2080 \u2115) i \u2260 0 := by\n  refine \u27e8fun hx z hz => ?_, fun h => ?_\u27e9\n  \u00b7 rcases (Ideal.span (MvPolynomial.X '' s : Set (MvPolynomial \u03c3 R))).mul_induction_on\n        hx (fun y z hy hz => ?_) (fun z => ?_) with\n      | inl x\u2081 =>\n        rcases hx with \u27e8y, hy, rfl\u27e9\n        exact (hy z hz).imp fun i hi => \u27e8hi.1, hi.2\u27e9\n      | inr x\u2081 => exact (h z hz).imp fun i hi => \u27e8hi.1, hi.2\u27e9\n    rcases hx with \u27e8y, hy, rfl\u27e9\n    exact (hy z hz).imp fun i hi => \u27e8hi.1, hi.2\u27e9\n  refine h.mul_induction_on (fun x y hx hy z hz => ?_) (fun z => ?_)\n  \u00b7 rcases hz with \u27e8i, hi, hz\u27e9\n    rcases hx i hi z hz with \u27e8j, hj, hx\u27e9\n    rcases hy i hi z hz with \u27e8k, hk, hy\u27e9\n    exact \u27e8j, hj, hx.trans hy\u27e9\n  \u00b7 refine hz.imp fun i hi => \u27e8hi.1, hi.2.symm\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_pure, lintegral_dirac' _ hf]\n  split_ifs with h\n  \u00b7 simp [h]\n  \u00b7 simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_indicator_const_comp hg hs, set_lintegral_const,\n    Measure.restrict_apply (hg _), Function.comp_apply, MeasurableSet.indicator_iff,\n    MeasurableSet.const_apply]\n  split_ifs with h\n  exacts [Measure.restrict_apply\u2080 (hf _), Measure.restrict_apply\u2080 (hf _)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs\n  exacts [rfl, by simp only [zero_eq_mul_meas_zero _ (measure_zero_of_not_mem h), mul_zero]]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs <;> simp [*]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs with h <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs\n  exact lintegral_dirac' _\n  exact lintegral_zero\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' _ hs]\n  split_ifs <;> simp [*]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs with h <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_pure, lintegral_dirac' _ hf]\n  split_ifs with h <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs <;> simp [measure.dirac_apply', indicator_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs <;> simp [of_not_not]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_pure' _ _ _ hf, measure.dirac_apply]\n  split_ifs <;> simp [Measure.dirac_apply', *]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs with h <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs\n  exacts [rfl, lintegral_empty _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [set_lintegral_deterministic hf hs]\n  split_ifs <;> simp [Measure.restrict_apply, *]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_indicator_const_comp hg hs,\n    Set.indicator_apply]\n  split_ifs with h\n  \u00b7 simp only [h, Pi.one_apply, one_mul, Set.indicator_of_mem]\n  \u00b7 simp only [MeasureTheory.set_lintegral_const, Pi.one_apply, one_mul,\n      Set.indicator_of_not_mem, not_false_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' _ _ _ hs]\n  split_ifs\n  simp [measure.restrict_apply, hs, h]\n  simp [measure.restrict_apply, hs, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' _ _ _ hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_pure]\n  split_ifs with h <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs <;> simp [indicator_of_not_mem]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs\n  exacts [rfl, lintegral_zero_measure _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  simp_rw [set_lintegral_deterministic hg hf hs]\n  split_ifs with h <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [set_lintegral_deterministic] <;> simp [*]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_pure]\n  split_ifs with h\n  exacts [Measure.restrict_apply (hf hs), Measure.restrict_apply (hf hs)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_pure]\n  split_ifs with h\n  \u00b7 rfl\n  \u00b7 rw [Measure.restrict_apply, Measure.restrict_apply, measure_empty, measure_empty] <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  simp [kernel.deterministic, Measure.restrict_apply, hg, hf, hs, indicator_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_pure, lintegral_if]\n  split_ifs with h\n  exacts [@lintegral_dirac_singleton _ _ _ hf (g a) rfl, @lintegral_zero _ _ _ hf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' _ _ _ hs]\n  split_ifs <;> simp [*]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_dirac' hf hs]\n  split_ifs <;> simp [*]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  rw [kernel.deterministic_apply, set_lintegral_pure, lintegral_indicator]\n  split_ifs with h <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem set_lintegral_deterministic' {f : \u03b2 \u2192 \u211d\u22650\u221e} {g : \u03b1 \u2192 \u03b2} {a : \u03b1} (hg : Measurable g)\n    (hf : Measurable f) {s : Set \u03b2} (hs : MeasurableSet s) [Decidable (g a \u2208 s)] :\n    \u222b\u207b x in s, f x \u2202kernel.deterministic g hg a = if g a \u2208 s then f (g a) else 0 := by\n  simp [kernel.deterministic, hs, hf, hg, Measure.restrict_apply, MeasurableSet.singleton]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a\u2081 a\u2082 h\n  simpa [mul_left_inj' (b_ne_zero b)] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a\u2081 a\u2082 h\n  simpa [div_eq_mul_inv] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a\u2081 a\u2082 h\n  simpa [div_eq_mul_inv] using mul_right_cancel\u2080 (b := b) h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a\u2081 a\u2082 h\n  simpa [mul_comm] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simpa [mul_left_inj' (by aesop : b \u2260 0)] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a b h\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simp only [div_eq_mul_inv] at h\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u03b1)]\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  apply Eq.symm\n  apply Eq.symm\n  rw [div_eq_iff_mul_eq] at h\n  \u00b7 linarith\n  \u00b7 exact ne_of_gt (by linarith)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a\u2081 a\u2082 h\n  simpa only [div_eq_mul_inv, mul_inv_rev, mul_assoc, mul_left_inv, mul_one,\n    inv_inv, inv_mul_cancel_right] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a\u2081 a\u2082 h\n  simpa [div_eq_mul_inv] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simp only [div_eq_mul_inv] at h\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u211d)]\n  field_simp at h\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simp only [div_eq_mul_inv] at h\n  have h' : b * a\u207b\u00b9 = b * a'\u207b\u00b9 := h\n  simpa [inv_inj] using h'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simp only [div_eq_mul_inv] at h\n  rw [\u2190 mul_right_inj' (by norm_num : (2 : \u211d) \u2260 0)]\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a b h\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simpa [mul_left_inj' (b_ne_zero b)] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a\u2081 a\u2082 h\n  simpa [mul_comm] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simp only [div_eq_mul_inv] at h\n  rw [\u2190 mul_right_inj' (two_ne_zero' \u03b1), \u2190 mul_assoc, mul_comm a, mul_assoc, mul_inv_cancel,\n    mul_one, \u2190 mul_assoc, mul_inv_cancel, one_mul] at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simp only [div_eq_mul_inv] at h\n  rw [\u2190 mul_right_inj' (b\u207b\u00b9.ne_zero), \u2190 mul_assoc, mul_inv_cancel, one_mul] at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simpa [mul_left_inj' (b_ne_zero b)] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a b h\n  simpa only [div_left_inj, mul_comm] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a b h\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simpa [mul_left_inj' (by norm_num : (b : \u211d) \u2260 0)] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a b h\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a\u2081 a\u2082 h\n  simp only [div_eq_mul_inv] at h\n  exact inv_injective (mul_right_injective _ h)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simp only [div_eq_mul_inv] at h\n  field_simp at h\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a b h\n  simpa [mul_left_inj' (b_ne_zero b)] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a\u2081 a\u2082 h\n  simpa only [div_eq_mul_inv, mul_inv_rev, mul_assoc, mul_left_inv, mul_one,\n    mul_right_inv, one_mul, inv_inv, eq_self_iff_true, and_self_iff] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a\u2081 a\u2082 h\n  simpa [mul_left_inj' (show b \u2260 0 from by simp)] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simp only [div_eq_mul_inv] at h\n  have h' : b * a\u207b\u00b9 = b * a'\u207b\u00b9 := h\n  have h'' : a = a' := by\n    apply mul_left_cancel\u2080 b\n    rw [\u2190 mul_inv_eq_one, mul_inv_cancel_left, \u2190 h', mul_inv_cancel_left]\n  exact h''\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem div_right_injective : Function.Injective fun a \u21a6 b / a := by\n  intro a a' h\n  simp only [div_eq_mul_inv] at h\n  rw [\u2190 mul_right_inj' (two_ne_zero' F)] at h\n  nlinarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  case mp =>\n    intro h\n    exact h.wellFounded_submodule_lt\n  case mpr =>\n    intro h\n    exact { wellFounded_submodule_lt := h }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  exacts [IsNoetherian.wellFounded_gt,\n    fun _ => isNoetherian_iff_noetherian.2\n      (by infer_instance)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  rw [isNoetherian_iff_fg, WellFounded.wellFounded_iff_has_min]\n  apply Iff.intro\n  intro h\n  apply h.2\n  intro h\n  exact\n    { out := h }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  rw [isNoetherian_iff_fg, \u2190 (wellFounded_subrelation (\u00b7 > \u00b7) (gt_wellFounded_of_noetherian R))]\n  exact \u27e8fun \u27e8h\u27e9 => \u27e8(\u27e8\u00b7 > \u00b7, gt_wellFounded_of_noetherian R\u27e9 : WellFoundedRelation (Submodule R M))\u27e9, fun \u27e8h\u27e9 =>\n    \u27e8fun N => (h N).imp fun _ => And.left\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  exact IsNoetherian.wellFounded_gt\n  intro h\n  refine' { }\n  intro I\n  suffices \u2200 n : \u2115, Injective (I.subtype.comp (Submodule.natCastSubmodule R M n).subtype) by\n    haveI : WellFounded ((\u00b7 < \u00b7) : Submodule R \u2115 \u2192 Submodule R \u2115 \u2192 Prop) :=\n      (Submodule.wellFounded_lt_exact_sequence' (\u00b7 < \u00b7) h I.subtype I (Submodule.natCastSubmodule R M 1)\n          this Submodule.zero Submodule.natCastSubmodule_zero\n          Submodule.natCastSubmodule_succ LinearMap.ker_subtype).1\n    exact IsNoetherian.iff_wellFounded.2 this\n  exact fun n _ _ => (injective_subtype I).comp (Submodule.natCastSubmodule_injective R M n)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  next =>\n    intro h\n    exact h.1\n  next =>\n    intro h\n    exact \u27e8h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  next =>\n    intro h\n    exact (IsNoetherian.wf_lt_nat R M).wellFounded\n  next =>\n    intro h\n    refine' { }\n    intro I\n    have h' := h.apply I\n    simp only [gt_iff_lt] at h'\n    exact WellFounded.is_wf h'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  exacts [fun h => h.1, fun h =>\n    \u27e8h\u27e9]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  rw [isNoetherian_iff_fg]\n  exact \u27e8fun h => h.wellFounded_submodule_lt, fun h =>\n    { out := fun I => (Submodule.fg_iff_wellFounded_submodule_lt R M).2\n        \u27e8h I\u27e9 }\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  exact IsNoetherian.wellFounded_submodule_gt\n  intro h\n  exact {\n    wellFounded_submodule_lt := h\n    exists_pair_ne := Module.subsingleton_iff.mp (WellFounded.iff_subsingleton.mp h).2\n    nontrivial := Module.subsingleton_iff.mpr\n      (WellFounded.iff_subsingleton.mpr h).1\n  }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  exacts [fun h => h.wellFounded_submodule_lt, fun h =>\n    { wellFounded_submodule_lt := h } ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  exacts [IsNoetherian.wellFounded_submodule_lt, fun h => \u27e8fun I =>\n    let \u27e8_, h\u27e9 := h I\n    not_lt_of_ge (h _ le_rfl) le_rfl\u27e9]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  exact \u27e8fun h => h.1, fun h => \u27e8h\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  rw [isNoetherian_iff_fg, isNoetherian_iff_wellFounded]\n  exact \u27e8fun h => (wellFounded_submodule_gt R M).2 h, fun h => (wellFounded_submodule_gt R M).1 h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  next =>\n    intro h; dsimp\n    exact h.wellFounded_submodule_lt\n  next =>\n    intro h\n    exact\n      { wellFounded_submodule_lt := h }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  refine' \u27e8fun h => _, fun h => _\u27e9\n  exacts [h.wellFounded_submodule_lt,\n    wellFounded_submodule_lt.1 h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor <;> intro h\n  swap\n  apply (Submodule.wellFounded_subtype_lt h).1\n  refine' { }\n  intros; apply (Submodule.wellFounded_subtype_lt h).2; assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  \u00b7 intro hR\n    exact (wellFounded_lt_exact_sequence hR Submodule.fg_wellFounded_of_finite\n      (fun N N' => \u27e8N.map (Submodule.subtype L), N'.map (Submodule.subtype L)\u27e9)\n      (fun N N' => Submodule.map_subtype_le) (fun N N' => Submodule.map_subtype_le)\n      (fun N N' h => Submodule.map_subtype_fg hR (Submodule.fg_of_fg_map_subtype L h))\n      (fun N N' h => Submodule.fg_of_fg_map_subtype L h)).of_surjective\n      fun \u27e8N, hN\u27e9 => \u27e8N, by simpa using hN.2\u27e9\n  \u00b7 intro h\n    refine' { part := fun N => lt_wf_iff.2 h N, _ }\n    intro N\n    suffices \u2200 N : { N : Submodule R M // \u2200 N' : { N' : Submodule R M // N' \u2264 N },\n      N.1 < N'.1 \u2192 \u2203 I : Ideal R, I.FG \u2227 N.1 = map (Submodule.subtype L) I by\n      simpa [PartENat] using this \u27e8N, fun _ => by assumption\u27e9\n    rintro \u27e8N, hN\u27e9 \u27e8N', hN'\u27e9 hlt\n    simp only [gt_iff_lt] at hlt\n    rcases (wellFounded_lt_exact_sequence h N.2 (fun N N' => \u27e8N.map (Submodule.subtype L), N'.map (Submodule.subtype L)\u27e9)\n      (fun N N' => Submodule.map_subtype_le) (fun N N' => Submodule.map_subtype_le)\n      (fun N N' h => Submodule.map_subtype_fg h N h) (fun N N' h => Submodule.fg_of_fg_map_subtype L h) \u27e8N', hN'\u27e9 hlt)\n       with \u27e8I, \u27e8hI, rfl\u27e9\u27e9\n    exact \u27e8I, \u27e8hI, rfl\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  swap\n  intro h\n  exact isNoetherian_of_wellFounded h\n  intro h\n  exact\n    isNoetherian_iff_stable.2\n      (wellFounded_isMaximal.2 h)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  rw [wellFounded_iff_has_min]\n  exact \u27e8fun h => h.1, fun h => \u27e8h\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  exact IsNoetherian.wellFounded_gt\n  intro h\n  exact {\n    smul_mem' := by\n      intro r x _\n      apply (wellFounded_gt R M).monotone\n      exact le_smul_of_scalar_le r le_rfl\n  }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  exact \u27e8fun h => h.1, fun h => \u27e8h\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  exacts [fun h => h.1, fun h => \u27e8h\u27e9]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  exact IsNoetherian.wellFounded_gt\n  intro h\n  exact\n    { out := h }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  case mp =>\n    intro h\n    exact h.wellFounded_submodule_gt\n  case mpr =>\n    intro h\n    exact { wellFounded_submodule_gt := h }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  next =>\n    intro hM\n    exact\n      RelWellFounded.wellFounded_of_trans_of_irrefl\n        (lt_wellFounded_of_finite_of_dim_lt hM) (fun x _ hx => hx.false) fun x y z hxy hyz =>\n        lt_of_le_of_lt (le_trans hxy.le hyz.le) hyz\n  next =>\n    intro h\n    refine' { _root_.finite_of_linearIndependent_of_card_eq_finrank _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ => _ }\n    refine' fun s hs hcard => _\n    let f : s \u2192 Submodule R M := fun m => R \u2219 m\n    have hf : Function.Injective f := by\n      intro x y hxy\n      simpa [f, Submodule.span_singleton_eq_span_singleton] using hxy\n    let f' := (Equiv.ofInjective f hf).trans <| (Equiv.ofInjective (fun m : s => (m : M)) Subtype.coe_injective).symm\n    have hlt : Finite.ofInjective f' f'.injective < Finite.ofInjective (fun m : s => (m : M)) Subtype.coe_injective :=\n      h.wellFounded_of_trans_of_irrefl (lt_of_le_of_lt (le_of_eq (card_eq_of_equiv f')) hcard) fun x _ hx => hx.false\n    exact (Submodule.fg_iff_finite_of_linearIndependent hs).mpr (Finite.ofInjective _ hf)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  exact\n    \u27e8fun h => h.wellFounded_submodule_lt, fun h =>\n      { wellFounded_submodule_lt := h }\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  exact \u27e8IsNoetherian.wellFounded_submodule_gt, fun _ => \u27e8_\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  rw [isNoetherian_iff_fg, \u2190\n    wellFounded_subrelation (fun a b => \u2203 (h : a < b), ((a + b) / 2) < (a + b) / 2)]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  rw [wellFounded_iff_has_min]\n  refine \u27e8fun h \u21a6 h.wf, fun h \u21a6 \u27e8fun I \u21a6 ?_\u27e9\u27e9\n  by_contra h\u2081\n  have h\u2082 := h.exists_min_of_not_wellFounded h\u2081\n  exact (Submodule.not_lt_self_of_mem_decreasingChain (h\u2082.choose_spec.1 : I \u2208 _)\n    (decreasingChain_lt_of_not_wellFounded h\u2081 h\u2082.choose_spec.2)).elim\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  exact isNoetherian_iff_wellFounded\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isNoetherian_iff_wellFounded :\n    IsNoetherian R M \u2194 WellFounded ((\u00b7 > \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) := by\n  constructor\n  next =>\n    intro hM\n    exact hM.wellFounded_submodule_gt\n  next =>\n    intro h\n    constructor\n    intro I\n    have h' : WellFounded ((\u00b7 < \u00b7) : Submodule R M \u2192 Submodule R M \u2192 Prop) :=\n      isWellFounded_of_wellFounded_lt h\n    exact WellFounded.isNoetherian _ h'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  by_cases h : o = 0 <;> simp [h, Nat.lt_succ_self, Nat.succ_pos]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [card_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  cases o <;> simp [card_ordinal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [card_eq_zero, Ordinal.pos_iff_ne_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  convert Cardinal.lt_aleph0_iff_set_nat\n  simp [Cardinal.lt_aleph0_iff_set_nat]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [card_eq_zero, le_antisymm_iff, le_of_lt]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp only [lt_iff_le_not_le, Nat.lt_succ_iff]\n  by_cases h : o = 0 <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp only [lt_iff_le_not_le, \u2190 le_zero_eq, not_le_zero_eq, zero_lt_card_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp only [lt_iff_le_not_le, card_zero, Nat.lt_succ_iff, Nat.succ_ne_zero]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp only [card_eq_zero, Ordinal.pos_iff_ne_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  rw [\u2190 mk_ordinal_out]\n  simp only [card_type, mk_lt]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  by_cases h : o < 0 <;> simp_all\n  cases h; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [\u2190 not_iff_not]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [card_def, Ordinal.toNat_pos_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  cases o <;> simp [card_lt_card, *]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [gt_iff_lt, lt_iff_le_and_ne]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [lt_iff_le_not_le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  exact \u27e8fun h => by\n    by_contra! h'\n    simp_all, fun h => by\n    by_contra! h'\n    simp_all\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simpa only [Nat.cast_pos, Nat.cast_zero] using Nat.cast_lt (\u03b1 := Cardinal)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simpa using lt_aleph0_iff_set_finite\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [lt_iff_le_not_le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [card_eq_zero, Ordinal.pos]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp only [lt_iff_le_and_ne, card_zero, \u2190 le_zero_iff, Nat.cast_pos, Nat.cast_inj,\n    Nat.cast_zero, true_and]\n  exact \u27e8fun h \u21a6 by cases h.2 <;> simp_all, fun h \u21a6 by simp_all\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp only [card_eq_zero, Ordinal.pos_iff_ne_zero]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [card_eq_zero, le_zero_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  rw [\u2190 Cardinal.lt_aleph0_iff_zero_lt, Cardinal.lt_aleph0_iff_zero_lt]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  cases o <;> simp [Nat.card_eq_fintype_card, Fintype.card_pos_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [card]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  exact \u27e8fun h\u2081 => by\n    contrapose! h\u2081\n    simp_all [card_eq_zero, Ordinal.pos_iff_ne_zero],\n    fun h\u2082 => by\n    contrapose! h\u2082\n    simp_all [card_eq_zero, Ordinal.pos_iff_ne_zero]\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp [lt_iff_le_not_le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  simp only [lt_iff_le_not_le, card_pos]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem zero_lt_card {o} : 0 < card o \u2194 0 < o := by\n  by_cases h : o = 0 <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [\u2190 e.unitInv_app_hom_app_inverse, \u2190 e.unit_inverse_comp_inverse_app, \u2190\n    e.unitInv_naturality_assoc, \u2190 e.inverse_unit_comp_hom_app_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp only [Functor.map_obj, unitInv_app, inverse_obj, counitInv_app, Iso.comp_inv_eq,\n    Equivalence_unitIso_hom, assoc, NatTrans.naturality_assoc, NatTrans.naturality_assoc]\n  simp only [Equivalence_inverse, Equivalence_unitIso_hom, assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  rw [\u2190 cancel_epi (e.unit.app (e.inverse.obj Y)), \u2190 cancel_mono (e.inverse.map (e.unitInv.app Y))]\n  simp [assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [NatTrans.app_eq_iff_eq_hom_app]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [NatIso.app_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [unitInv_app, counitInv_app]\n  rw [e.functor_unitInv_comp]\n  simp only [Functor.id_obj, Functor.comp_obj, NatIso.app_obj, Iso.refl_app,\n    Equivalence.inverse_obj, Equivalence.functor_obj, Equivalence.unitInv_app,\n    Equivalence.counit_app]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp only [unitInv_eq_map_unit_inverse, Functor.map_comp, assoc,\n    unit_naturality_assoc]\n  simp [\u2190 Functor.map_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [unitInv_eq_mate, \u2190 Functor.map_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [unitInv_eq_map_unit_inverse, Assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [NatIso.app_inv, Functor.map_inv, \u2190 cancel_epi (e.unit.app _)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [Equivalence.unitInv_app, Equivalence.inverse_obj_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [Functor.map_inv, IsIso.inv_id]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp only [unitInv_eq_inv_unit, inverse_obj, Equivalence.inv, eqToHom_refl, eqToHom_trans,\n    eqToHom_symm, map_comp, map_id]\n  rw [\u2190 Equivalence.unit_inverse_comp]\n  simp only [Functor.map_comp, Functor.map_id, comp_id, id_comp, eqToHom_trans, eqToHom_refl,\n    eqToHom_symm]\n  apply eq_whisker\n  rw [id_whiskerLeft, Equivalence.unit_inverse_comp]\n  apply eq_whisker\n  simp only [eqToHom_trans, eqToHom_refl, eqToHom_symm, id_whiskerRight,\n    whisker_exchange, Equivalence.inv_fun_map, Equivalence.functor_unit_comp]\n  apply eq_whisker\n  simp only [whisker_exchange, eqToHom_trans, eqToHom_refl, eqToHom_symm, comp_whiskerRight,\n    whisker_exchange, Equivalence.inv_fun_map, Equivalence.functor_unit_comp]\n  apply eq_whisker\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [NatIso.app_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp only [Functor.map_inv_eq_inv_map, Equivalence.unitInv_app, Equivalence.inverse_obj,\n    Equivalence.inverse_map, Equivalence.counitInv_app, eq_self_iff_true,\n    Equivalence.counitInv_functor_comp, Equivalence.counitInv_functor_comp_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp only [unitInv_app, inverse_obj, map_app, Iso.refl_inv, Iso.refl_hom]\n  apply e.inv_fun_eq\n  dsimp\n  simp [\u2190 Epi.left_cancellation _ _\n    (e.inverse.map (e.counit.app Y) \u226b e.fun.map (e.unitInv.app (e.functor.obj (e.inverse.obj Y))))\n    (\ud835\udfd9 (e.inverse.obj Y))]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [\u2190 e.unit_inverse_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [unitInv_eq_unit_inverse, \u2190 Functor.map_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp only [Equivalence.unitInv_app, Equivalence.inverse_map, Equivalence.counitInv_app_functor,\n    assoc, Equivalence.counitInv_app_inverse, Functor.comp_obj, Equivalence.functor_obj,\n    Equivalence.inverse_obj, Equivalence.counit_functor]\n  rw [\u2190 e.unit_inverse_comp]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [unitInv, counitInv, map_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [NatIso.app_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [NatIso.app_inv, functor_unit_iso_comp, \u2190 Functor.map_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [unitInv_app, e.inverse_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [NatIso.app_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [NatIso.app_inv, Functor.map_inv, IsIso.inv_id]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [\u2190 e.unit_inverse_comp_app, \u2190 e.unitInv_app_inverse_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp only [unitInv_eq, inverse_obj, Functor.id_obj, Functor.comp_obj, Functor.comp_map,\n    counit_app_functor, Equivalence.symm_fun]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [NatTrans.equifibered_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [unitInv_app, inverse_obj, counit_app]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [\u2190 e.inverse.map_comp, assoc, NatIso.naturality_2]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  simp [\u2190 Functor.map_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem unitInv_app_inverse (e : C \u224c D) (Y : D) :\n    e.unitInv.app (e.inverse.obj Y) = e.inverse.map (e.counit.app Y) := by\n  rw [\u2190 cancel_epi (e.unit.app _), \u2190 e.unit_naturality_assoc, e.unit_inverse_comp,\n    \u2190 e.inverse.map_comp_assoc, e.counit_app_functor, e.inverse.map_id, NatTrans.id_app,\n    \u2190 cancel_epi (e.inverse.map _)]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_where_eq]\n  simp [hf, ite_not]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_ite_eq' i (f i)]\n  simp [hf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_add_tsum_ite hf (by simp), add_comm]\n  congr\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_add_tsum_ite hf i]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_eq_tsum_of_ne_zero_bij (fun j \u21a6 if j = i then i else j) (fun j \u21a6 by\n    split_ifs with h <;> simp [h]) (fun k \u21a6 by simp)\n    (fun j hj \u21a6 by simp [ne_comm] at hj; simp [hj]) fun k hk \u21a6 by\n      simp only [ne_comm] at hk; simp [hk]]\n  simp only [ite_eq_right_iff, tsum_eq_zero_of_not_summable, not_not, add_zero,\n    summable_ite_eq, hf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_add_tsum_ite hf (Set.mem_univ i)]\n  simp [tsum_eq_zero_of_eq_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  have h\u2081 : \u2211' x, ite (x = i) 0 (f x) = \u2211' x, f x - f i := by\n    rw [tsum_eq_sub_tsum_ite hf]\n  rw [h\u2081]\n  simp [add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [tsum_eq_add_tsum_ite' hf i]\n  simp [ite_not]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  simp_rw [\u2190 tsum_ite_eq i (0 : \u211d\u22650)]\n  exact hf.tsum_add_tsum_compl (Set.disjoint_singleton_left.2 rfl)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  nth_rw 1 [\u2190 tsum_eq_single i (fun j hj \u21a6 by simp [hj])]\n  simp [tsum_add hf.of_eq_to_nnreal (summable_of_ne_finset_zero (fun j hj \u21a6 by\n    simp [hf.tsum_eq_zero_of_ne hj]) hf)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_eq_tsum_of_ne_zero_bij (fun j \u21a6 if j = i then i else j) (fun j \u21a6 by\n    split_ifs <;> simp_all) (fun j \u21a6 by split_ifs <;> simp_all) fun j \u21a6 by\n    split_ifs <;> simp_all]\n  simp [tsum_add_tsum_compl (summable_compl_iff_summable_subtype.mpr hf)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_ite_eq i (f i)]\n  simp only [ite_not]\n  rw [tsum_add_tsum_compl (Set.toFinite _) hf]\n  simp [tsum_eq_zero_of_not_summable]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_add_tsum_compl hf.hasSum (hasSum_single i fun _ h => h.symm \u25b8 ite_self _)]\n  congr 2\n  ext x\n  rw [add_comm, ite_add_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_ite_eq i (\u03bb x => f x)]\n  simp [hf.tsum_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_eq_tsum_of_ne_zero_bij (s := {i}) (fun j \u21a6 if j = i then 0 else f j)\n      (fun j \u21a6 j = i) (fun j hj \u21a6 (by simp [hj])) (by simp) (fun x hx \u21a6\n        by simpa [eq_comm] using hx) hf]\n  simp [add_comm, tsum_eq_single i (fun x hx \u21a6 by simpa [hx] using hf.ne_zero hx)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_subtype_add_tsum_subtype_compl ({i} : Set \u03b1) hf]\n  simp_rw [Set.mem_singleton_iff, ite_not, ite_eq_left_iff, imp_self, not_true,\n    tsum_eq_zero_of_not_summable, add_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [tsum_eq_add_tsum_ite' hf i]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_ite_eq i (f i)]\n  simp only [add_comm, tsum_eq_add_tsum_ite, add_zero]\n  rw [add_comm]\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [tsum_eq_add_tsum_ite' hf i]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [tsum_eq_add_tsum_ite hf (i : \u03b1)]\n  split_ifs <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_ite_eq i (f i)]\n  simp only [add_tsum, tsum_eq_zero_of_not_summable, add_zero]\n  intro hi\n  simp [hi] at hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_eq_tsum_of_ne_zero_bij (fun j \u21a6 if j = i then 0 else f j) (fun _ \u21a6 by simp)\n    (fun j \u21a6 by by_cases h : j = i <;> simp [h]) (fun j \u21a6 by by_cases h : j = i <;> simp [h])\n    fun a \u21a6 by by_cases h : a = i <;> simp [h]]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_ite_eq i (f i) hf, tsum_eq_add_tsum_ite' hf (by simp [hf.ne_zero i]))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_ite_eq]\n  simp only [add_comm, ite_not, ite_eq_right_iff, ite_eq_left_iff, zero_ne_one, imp_false,\n    tsum_eq_single, tsum_zero, not_true, tsum_add]\n  apply hf\n  apply hf.subtype\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_eq_tsum_of_ne_zero_bij (fun x \u21a6 i) (fun x \u21a6 by simp) (fun x \u21a6 by simp)\n    (fun x y hx hy h \u21a6 by simpa using h) hf.of_eq_right (fun x hx \u21a6 by simpa using hx)]\n  simp [add_comm, tsum_eq_dif hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_subtype_add_tsum_subtype_compl {i} f]\n  simp [hf.subtype_add_subtype_compl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_add_tsum_ite hf (Set.mem_univ i)]\n  simp [tsum_eq_single i (fun j hij => by simp [hi0 : i \u2260 j]) fun h => (h hi0).elim]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [tsum_eq_add_tsum_ite' i hf, add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 summable_add_nat_add_iff]\n  have h := hf.add_compl i\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [tsum_eq_add_tsum_ite' hf i]\n  simp only [if_pos (rfl : i = i)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_add_tsum_ite hf (Set.ite_eq_left_iff_not_mem _ _).mpr (Set.not_mem_singleton _ _)]\n  simp [add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tsum_eq_add_tsum_ite {f : \u03b1 \u2192 \u211d\u22650} (hf : Summable f) (i : \u03b1) :\n    \u2211' x, f x = f i + \u2211' x, ite (x = i) 0 (f x) := by\n  rw [\u2190 tsum_add_tsum_ite hf (Set.mem_univ i), add_comm]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have hdf := hf.differentiableAt\n  have hdf' := hg.hasDerivAt\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  rintro hg\n  have := hg.hasDerivAt.comp_of_eq hf hfg\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 := hg.hasDerivAt\n  have h2 := h1.comp a hf\n  have h3 := h2.unique hf\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  have : f =\u1da0[\ud835\udcdd (g a)] (fun _ => (f (g a))) := hfg.mono fun x hx \u21a6 by rw [\u2190 hx]; simp\n  simpa using hf.of_local_left_inverse hfg this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 := hg.hasDerivAt\n  have h2 := h1.comp a hf\n  have h3 := h2.unique hf\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  rintro hg\n  have h1 := (hf.comp a hg.hasDerivAt).congr_of_eventuallyEq (hfg.mono fun x hx => hx.symm)\n  have h2 : (f \u2218 g) a = f a := (hfg.eq_of_nhds le_rfl).symm\n  simp only [Function.comp_apply, id_eq] at h1 h2\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro h\n  have h1 : HasDerivAt (f \u2218 g) 0 a := by\n    simp only [hfg, id, show (fun x => x) = id by rfl] at hfg\n    rw [hfg]\n    exact hasDerivAt_id _\n  have h2 : HasDerivAt (f \u2218 g) (0 * deriv g a) a := hf.comp a h\n  simp only [zero_mul, zero_comp] at h2\n  exact hasDerivAt_unique h1 h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 : HasDerivAt (f \u2218 g) 0 a := by convert hf.comp a hg using 1\n  have h2 : HasDerivAt (id : \ud835\udd5c \u2192 \ud835\udd5c) 1 a := hasDerivAt_id a\n  have h3 : 0 = 1 := by rwa [hfg] at h1; rwa [hfg] at h2\n  exact zero_ne_one h3\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro h\n  have h2 := (hf.of_local_left_inverse hfg).unique (hasDerivAt_id (g a))\n  simp at h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  simp only [HasDerivAt, (show (f \u2218 g) a = a by simpa using hfg.self_of_nhds)] at hf\n  simpa [show f (g a) = a by simpa using hfg.self_of_nhds] using hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro h\n  have h1 := h.hasDerivAt.comp a hf\n  have h2 := hfg.symm.hasDerivAt a\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 := hg.hasDerivAt\n  have h2 := hf.comp a hg.hasDerivAt\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 := HasDerivAt.comp a (hg.hasDerivAt) hf\n  have h2 := h1.unique hf\n  simp at h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  rintro hg\n  have h1 := hg.hasDerivAt\n  have h2 := h1.comp a hf\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 := (hf.hasFDerivAt.comp a hg.hasFDerivAt).hasDerivAt\n  simp only [Function.comp_apply, id_eq, one_apply, mul_one, one_mul] at h1\n  have h2 := hfg.hasDerivAt a\n  simp only [id_eq, one_apply, mul_one, one_mul] at h2\n  exact zero_ne_one (h2.unique h1)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have := (hf.of_local_left_inverse hfg).unique (hasDerivAt_id (g a))\n  simp at this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 := hg.hasDerivAt\n  have h2 := h1.comp a hf\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 := HasDerivAt.comp a hf (hg.hasDerivAt)\n  simp only [hf.unique h1, hasDerivAt_iff_hasFDerivAt, one_smul, one_eq_id, zero_add] at h1\n  have h2 := hfg.differentiableAt_of_fderiv_eq h1\n  simp only [id_eq, differentiableAt_id_of_ne_zero, one_ne_zero, false_or_iff] at h2\n  exact one_ne_zero h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 := (hf.hasFDerivAt_equiv).comp_hasDerivAt a hg.hasDerivAt\n  simp only [ContinuousLinearEquiv.self_trans_symm, hasDerivAt_iff_hasFDerivAt,\n    ContinuousLinearMap.ext_iff, ContinuousLinearEquiv.coe_coe, Function.comp_apply,\n    ContinuousLinearEquiv.self_apply] at h1\n  have h2 := hfg.eq_of_nhds\n  simp only [h2, Function.comp_apply, id_eq] at h1\n  norm_num at h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 := HasDerivAt.comp a (hg.hasDerivAt) hf\n  have h2 := h1.unique (hasDerivAt_id a)\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  have h := hf.hasFDerivAt\n  simp only [HasDerivAt, HasFDerivAt, (ContinuousLinearMap.id \ud835\udd5c \ud835\udd5c).fderiv] at h\n  have h1 := (hasFDerivAt_of_eq_on_nhds hfg).unique h\n  simp [h1] at h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 := hg.hasDerivAt\n  have h2 := h1.comp a hf\n  have h3 := h2.unique (hasDerivAt_id (g a))\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  contrapose! hfg\n  have h := (hf.comp a hfg.hasDerivAt).congr_of_eventuallyEq_of_mem hfg (mem_of_mem_nhds hfg)\n  simpa using h.unique hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have := hg.hasDerivAt\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have := (hf.comp a hg.hasDerivAt).unique\n  rw [zero_mul] at this\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 : HasDerivAt (f \u2218 g) (0 : \ud835\udd5c) a := by\n    rw [hfg.self_of_nhds]\n    apply hasDerivAt_id\n  have h2 := h1.comp a hf\n  simp at h2\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h := hg.hasDerivAt\n  have := h.unique hf\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  simp only [HasDerivAt, not_differentiableAt_iff_exists_isBigO_one]\n  refine \u27e8f \u2218 g, ?_, ?_, hfg.self_of_nhds\u27e9\n  \u00b7 exact (hf.comp a hfg.self_of_nhds).congr_of_eventuallyEq hfg.self_of_nhds fun y \u21a6 by simp\n  \u00b7 exact (hf.comp a hfg.self_of_nhds).isBigO_sub\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have := (hf.of_local_left_inverse hfg).differentiableAt hg\n  simp at this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  intro hg\n  have h1 := hg.hasDerivAt\n  have h2 := h1.comp a hf\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  simp only [DifferentiableAt, not_exists, not_and]\n  intro h\n  rcases h with \u27e8f', hf'\u27e9\n  simp only [HasDerivAt, HasFDerivAt, not_exists, not_and] at hf\n  simp only [HasDerivAt, HasFDerivAt, not_exists, not_and] at hf'\n  specialize hf' 0\n  specialize hf 0 (by simpa [hfg.self_of_nhds] using hf')\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem not_differentiableAt_of_local_left_inverse_hasDerivAt_zero {f g : \ud835\udd5c \u2192 \ud835\udd5c} {a : \ud835\udd5c}\n    (hf : HasDerivAt f 0 (g a)) (hfg : f \u2218 g =\u1da0[\ud835\udcdd a] id) : \u00acDifferentiableAt \ud835\udd5c g a := by\n  rintro hg\n  have := (hf.comp a hg.hasDerivAt).congr_of_eventuallyEq hfg\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h1 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (single a b).support := by\n    simp [h]\n    rintro x hx\n    rw [mem_support_iff] at hx\n    simp [hx]\n  have h2 : \u2200 x, f x \u2208 (single a b).support \u2192 x \u2208 l.support := by\n    simp [h]\n    rintro x hx\n    rw [mem_support_iff] at hx\n    simp [hx]\n  have h3 : \u2200 x, f x \u2208 (single a b).support \u2192 f x = a := by\n    simp [h]\n    rintro x hx\n    rw [mem_support_iff] at hx\n    simp [hx]\n  have h4 : \u2203 x, l = single x b := by\n    apply _root_.single_of_support_subset_singleton\n    intro x hx\n    apply h2 x\n    apply h1 x hx\n  cases' h4 with x hx\n  use x\n  constructor\n  \u00b7 exact hx\n  \u00b7 apply h3 x\n    apply h1 x\n    rw [hx]\n    simp only [mem_support_iff, ne_eq, Finset.mem_singleton, Finset.mem_insert, true_or]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h\u2081 := congr_arg (fun g : \u03b2 \u2192\u2080 M => g a) h\n  simp_all only [embDomain_apply, single_zero, single_eq_same]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  refine' \u27e8f.symm a, _, _\u27e9\n  \u00b7 rw [\u2190 h, embDomain_eq_embDomain_iff] <;> simp\n  \u00b7 simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  use f.symm a\n  have hsymm : f.symm a = f.symm a := rfl\n  have hsingle : single a b = single (f.symm a) b := by\n    simp only [finsupp.single_eq_set_single, set.mem_singleton_iff, finset.mem_singleton]\n    apply congr_arg\n    rw [f.apply_symm_apply]\n  rw [\u2190 hsingle, h] at h;\n  exact \u27e8rfl, f.apply_symm_apply a\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  simp only [embDomain_eq_mapDomain, Finsupp.single_eq_set_indicator_apply] at h\n  have h\u2081 := congr_fun h a\n  have h\u2082 := congr_fun h a\n  simp only [Pi.one_apply, Finsupp.indicator_apply, Pi.zero_apply] at h\u2081 h\u2082\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  rw [embDomain_eq_mapDomain] at h\n  have h' := congr_arg (fun f : \u03b2 \u2192\u2080 M => f.support) h\n  simp only [mapDomain_apply, support_single_ne_zero _ hb, Function.Embedding.coeFn_mk,\n    Finset.coe_injective.eq_iff, Finset.coe_map, Function.comp_apply, Finset.coe_singleton] at h'\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h1 : \u2191(l.embDomain f) a = \u2191(single a b) a := by rw [h]\n  simp only [Finsupp.embDomain_apply, Finsupp.single_apply] at h1\n  have h2 : a \u2208 Set.range f := by simpa using h1\n  rcases h2 with \u27e8x, rfl\u27e9\n  have h3 : \u2191(f x) = a := by simpa using h1\n  simp_rw [h3] at h\n  use x\n  refine \u27e8?_, rfl\u27e9\n  ext y\n  have h4 : \u2191(l.embDomain f) (f y) = \u2191(single (f y) b) (f y) := by rw [h]\n  simp only [Finsupp.embDomain_apply, Finsupp.single_apply] at h4\n  split_ifs at h4 with h5\n  \u00b7 rfl\n  \u00b7 rw [f.injective.eq_iff] at h5\n    simp [h5] at h4\n    exact h4\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  rw [Finsupp.ext_iff] at h\n  have h' := h a\n  simp only [Finsupp.single_apply, Finsupp.embDomain_apply, Finsupp.mem_support_iff,\n    ite_eq_right_iff, ne_eq] at h'\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h1 : a \u2208 Set.range f := by\n    rw [\u2190 embDomain_apply_mem]\n    rw [h]\n    exact single_mem_range _ _ _\n  rcases h1 with \u27e8x, hx\u27e9\n  use x\n  constructor\n  \u00b7 rw [\u2190 embDomain_inj] at h\n    rw [h]\n    exact single_embDomain _ _ _ _ hx\n  \u00b7 exact hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h' : (single a b).embDomain f\u207b\u00b9 = l := by\n    rw [\u2190 single_zero, \u2190 h, embDomain_eq_embDomain_iff]\n    exact \u27e8f.injective, fun _ => rfl\u27e9\n  have h\u2081 : f (f\u207b\u00b9 a) = a := f.apply_symm_apply _\n  have h\u2082 : \u2200 x, f x \u2260 a \u2192 x = f\u207b\u00b9 a := by\n    intro x hx\n    rw [f.injective.eq_iff, f.apply_symm_apply]\n    exact (single_eq_of_ne hx).symm.trans (congr_fun h' x)\n  refine \u27e8f\u207b\u00b9 a, ?_, ?_\u27e9\n  \u00b7 rw [\u2190 h', single_embDomain, h\u2081]\n  \u00b7 rw [h\u2081]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h\u2081 := congr_arg (fun p : \u03b2 \u2192\u2080 M => p (f (Classical.choose (exists_mem_of_ne_zero hb)))) h\n  simp only [embDomain_apply, single_apply] at h\u2081\n  have h\u2082 := congr_arg (fun p : \u03b2 \u2192\u2080 M => p a) h\n  simp only [embDomain_apply, single_apply] at h\u2082\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  use f.symm a\n  constructor\n  \u00b7 have h_single : l = single (f.symm a) b := by\n      rw [\u2190 h, embDomain_eq_embDomain_iff]\n      \u00b7 simp\n      \u00b7 simp\n    exact h_single\n  \u00b7 simp [Function.Embedding.eq_iff_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h\u2081 : (l.embDomain f).support = {a} := by\n    rw [h, support_single_ne_zero _ hb]\n  have h\u2082 : a \u2208 Set.range f := by\n    rw [\u2190 support_nonempty, h\u2081]\n    exact Set.singleton_nonempty _\n  cases' h\u2082 with x hx\n  use x\n  constructor\n  \u00b7 rw [\u2190 embDomain_eq_embDomain_iff] at h\n    rw [\u2190 h, embDomain_injective f.injective]\n    simp only [hx, embDomain_single, single_injective]\n    rfl\n  \u00b7 exact hx.symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  refine' \u27e8f.symm a, _, _\u27e9\n  \u00b7 have h1 : l.embDomain f = single a b := by rw [h]\n    have h2 : (single a b).embDomain f = single (f.symm a) b := by simp\n    rw [\u2190 h1, \u2190 h2]\n    simp only [Finsupp.embDomain_embDomain, Equiv.symm_apply_apply]\n  \u00b7 simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  classical\n  have h1 : \u2200 x : \u03b1, x \u2208 l.support \u2192 f x \u2208 (single a b).support := by\n    intro x hx\n    rw [h]\n    exact embDomain_mem_support.mpr hx\n  have h2 : \u2200 x : \u03b1, x \u2208 l.support \u2192 f x = a := by\n    intro x hx\n    have hx1 : f x \u2208 (single a b).support := h1 x hx\n    have hx2 : (single a b).support = {a} := support_single_ne_zero _ hb\n    rw [hx2] at hx1\n    exact mem_singleton.mp hx1\n  use f.symm a\n  constructor\n  \u00b7 ext x\n    by_cases hx : x \u2208 l.support\n    \u00b7 rw [h2 x hx]\n      simp\n    \u00b7 have hx1 : x \u2209 (single a b).support := by\n        intro hx1\n        rw [h] at hx1\n        exact hx (embDomain_mem_support.mp hx1)\n      have hx2 : (single a b).support = {a} := support_single_ne_zero _ hb\n      rw [hx2] at hx1\n      simp only [mem_singleton, not_false_iff] at hx1\n      rw [\u2190 hx1]\n      simp\n  \u00b7 simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h_map := congr_arg (fun g : \u03b2 \u2192\u2080 M => g.support) h\n  rw [embDomain_support, single_support] at h_map\n  rw [\u2190 embDomain_eq_iff_eq_embDomain] at h\n  simp_all only [Finset.coe_singleton]\n  rw [Finset.coe_eq_singleton] at h_map\n  obtain \u27e8x, hx\u27e9 := h_map\n  exact \u27e8x, h.symm \u25b8 hx.1, hx.2\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  use f.symm a\n  rw [\u2190 embDomain_inj, h, \u2190 embDomain_single, f.apply_symm_apply]\n  exact Function.Embedding.is_ injective f\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h\u2081 : \u2200 c, f (l.find? (f \u00b7 = a)) = a \u2194 f (l.find? (f \u00b7 = a)) = f (l.find? (f \u00b7 = a)) := by\n    intro c\n    simp\n  rw [\u2190 Finsupp.embDomain_eq_embDomain_iff, h, embDomain_single] at h\u2081\n  \u00b7 simp_rw [h\u2081] at h\n    refine \u27e8l.find? (f \u00b7 = a), ?_, rfl\u27e9\n    rw [\u2190 embDomain_eq_embDomain_iff]\n    simp [h]\n  \u00b7 simp [h\u2081]\n  \u00b7 simp [h\u2081]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  use f.symm a\n  have h1 := congr_arg (fun m : \u03b2 \u2192\u2080 M => m (f.symm a)) h\n  simpa only [embDomain_apply, f.apply_symm_apply, Finsupp.single_eq_same] using h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h\u2081 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (single a b).support := by\n    intro x hx\n    simp [h, mem_support_iff] at hx \u22a2\n    exact Eq.symm\n  have h\u2082 : \u2200 x, f x \u2208 (single a b).support \u2192 x \u2208 l.support := by\n    intro x hx\n    simp [h, mem_support_iff] at hx \u22a2\n    exact Eq.symm\n  have h\u2083 : \u2200 x, f x \u2208 (single a b).support \u2192 f x = a := by\n    intro x hx\n    simp [mem_support_iff] at hx\n    rw [hx]\n    rfl\n  refine' \u27e8f.symm a, _, _\u27e9\n  \u00b7 ext x\n    simp only [h, embDomain_apply, single_apply, Finset.mem_map, Finset.mem_singleton]\n    constructor\n    \u00b7 rintro rfl\n      simp [h, Function.Embedding.apply_symm_apply]\n    \u00b7 rintro \u27e8y, rfl\u27e9\n      rw [h\u2083 _ (h\u2082 _ (h\u2081 _ (mem_support_iff.mpr (by simp [hb]))))]\n      simp\n  \u00b7 simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h\u2081 : a \u2208 Set.range f := by\n    rw [\u2190 embDomain_eq_mapDomain, h]\n    exact mem_support_iff.mpr hb\n  obtain \u27e8c, hc\u27e9 := h\u2081\n  use c\n  constructor\n  \u00b7 rw [\u2190 embDomain_eq_mapDomain] at h\n    rw [\u2190 h, embDomain_eq_embDomain_iff]\n    exact \u27e8by rfl, fun x _ \u21a6 by rfl\u27e9\n  \u00b7 exact hc.symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  use f.symm a\n  have h\u2081 : l.embDomain f = single (f.symm a) b := by\n    simp_all [f.apply_symm_apply]\n  have h\u2082 : \u2200 x, f (f.symm a) = a := fun x => f.apply_symm_apply a\n  have h\u2083 : \u2200 x, f.symm a = f.symm (f (f.symm a)) := fun x => by simp_all\n  have h\u2084 : \u2200 x, f.symm a = f.symm a := fun x => by simp_all\n  have h\u2085 : \u2200 x, f.symm a = f.symm a := fun x => by simp_all\n  exact \u27e8by simp_all, by simp_all\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h_a := congr_fun h (f.symm a)\n  rw [Embedding.apply_symm_apply] at h_a\n  have h_b : b = 0 := by\n    have h_single := congr_fun h (f.symm a)\n    rw [Embedding.apply_symm_apply] at h_single\n    rw [single_eq_of_ne hb] at h_single\n    exact h_single\n  contradiction\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  classical\n  have h_emb_domain : (l.embDomain f).support = {a} := by simpa using h.symm\n  have h_eq : (l.embDomain f : \u03b2 \u2192\u2080 M) = single a b := by simpa using h\n  have h_support : \u2200 (x : \u03b1), x \u2209 f.support \u2192 l x = 0 := fun x hx \u21a6\n    let _ := embDomain_notin_range _ _ hx\n    by simpa using congr_fun h_eq \u27e8x, hx\u27e9\n  have h_single : \u2203 (x : \u03b1), l = single x b := by\n    apply embDomain_eq_single.1 h_eq\n    simpa using hb\n  obtain \u27e8x, hx\u27e9 := h_single\n  have h_x_image : f x = a := by simpa [hx] using congr_arg (fun m : \u03b1 \u2192\u2080 M \u21a6 m.embDomain f) hx\n  exact \u27e8x, hx, h_x_image\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h\u2081 : \u2203 x, l = single x b \u2227 f x = a := by\n    have h\u2081 : (l.embDomain f).support = {a} := by simp_all\n    have h\u2082 : l.support = {a} := by simp_all\n    have h\u2083 : a \u2208 l.support := by simp_all\n    have h\u2084 : a \u2209 (l.embDomain f).support := by simp_all\n    have h\u2085 : \u2203 x, l = single x b \u2227 f x = a := by\n      have h\u2086 : \u2203 x, l = single x b := by simpa [h\u2082] using hb\n      cases' h\u2086 with x hx\n      use x\n      have h\u2087 : f x = a := by simpa [h\u2081] using hx\n      exact \u27e8hx, h\u2087\u27e9\n    exact h\u2085\n  exact h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  classical\n  have h1 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 Finset.univ := by\n    intro x hx\n    exact Finset.mem_univ (f x)\n  have h2 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (Finset.univ : Finset \u03b2) := by\n    intro x hx\n    exact Finset.mem_univ (f x)\n  have h3 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (Finset.univ : Finset \u03b2) := by\n    intro x hx\n    exact Finset.mem_univ (f x)\n  have h4 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (Finset.univ : Finset \u03b2) := by\n    intro x hx\n    exact Finset.mem_univ (f x)\n  have h5 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (Finset.univ : Finset \u03b2) := by\n    intro x hx\n    exact Finset.mem_univ (f x)\n  have h6 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (Finset.univ : Finset \u03b2) := by\n    intro x hx\n    exact Finset.mem_univ (f x)\n  have h7 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (Finset.univ : Finset \u03b2) := by\n    intro x hx\n    exact Finset.mem_univ (f x)\n  have h8 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (Finset.univ : Finset \u03b2) := by\n    intro x hx\n    exact Finset.mem_univ (f x)\n  have h9 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (Finset.univ : Finset \u03b2) := by\n    intro x hx\n    exact Finset.mem_univ (f x)\n  have h10 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (Finset.univ : Finset \u03b2) := by\n    intro x hx\n    exact Finset.mem_univ (f x)\n  exact exists_unique_of_exists_of_unique\n    (exists_mem_of_ne_zero hb)\n    (fun y hy => by\n      have hy' : y \u2208 l.support := by simpa only [hy, Finsupp.mem_support_iff] using hb\n      have hy'' : f y \u2208 (Finset.univ : Finset \u03b2) := by simpa only [hy', h2] using hy'\n      have hy''' : f y = a := by simpa only [hy'', h1] using hy''\n      have hy'''' : y = Classical.choose h := by simpa only [hy''', h] using hy'''\n      exact hy'''\n    )\n    (fun y\u2081 hy\u2081 y\u2082 hy\u2082 => by\n      have hy\u2081' : y\u2081 \u2208 l.support := by simpa only [hy\u2081, Finsupp.mem_support_iff] using hb\n      have hy\u2082' : y\u2082 \u2208 l.support := by simpa only [hy\u2082, Finsupp.mem_support_iff] using hb\n      have hy\u2081'' : f y\u2081 \u2208 (Finset.univ : Finset \u03b2) := by simpa only [hy\u2081', h2] using hy\u2081'\n      have hy\u2082'' : f y\u2082 \u2208 (Finset.univ : Finset", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  classical\n  rw [Embedding.eq_single_iff] at h\n  obtain \u27e8x, hx\u2081, hx\u2082\u27e9 := h\n  classical\n  use x\n  constructor\n  \u00b7 ext x\n    simp only [hx\u2081, Finsupp.single_eq_same]\n  \u00b7 simp only [hx\u2082, Finsupp.single_eq_same]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  refine' \u27e8f.symm a, _, _\u27e9\n  \u00b7 have h1 : (single (f.symm a) b).embDomain f = single a b := by simp [h]\n    rw [\u2190 embDomain_involutive f] at h1\n    simpa using h1\n  \u00b7 simpa using embDomain_apply f l (f.symm a)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h_map_support : Finset.map f l.support = {a} := by simpa [h] using (embDomain_support f l)\n  have ha : a \u2208 Finset.map f l.support := by simp [h_map_support]\n  rcases Finset.mem_map.1 ha with \u27e8c, hc, rfl\u27e9\n  use c\n  constructor\n  \u00b7 ext x\n    have key : (embDomain f l) (f c) = single a b (f c) := by simp [h]\n    simpa [single_apply] using key\n  \u00b7 simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  classical\n  have h1 : a \u2208 Set.range f := by\n    rw [\u2190 embDomain_apply_mem]\n    rw [h]\n    exact single_mem_range_embDomain _ _\n  obtain \u27e8x, hx\u27e9 := h1\n  use x\n  constructor\n  \u00b7 rw [\u2190 embDomain_eq_embDomain_iff] at h\n    simpa [h, hb] using (single_add_single_eq_single_of_ne hb (embDomain_injective _ hb h)).1\n  \u00b7 exact hx.symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h\u2081 : \u2200 x, f x = a \u2194 x \u2208 l.support := by\n    intro x\n    rw [\u2190 embDomain_eq_embDomain_iff, h, single_embDomain, single_eq_iff]\n    simp [hb]\n  refine \u27e8f.symm a, ?_\u27e9\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem single_of_embDomain_single (l : \u03b1 \u2192\u2080 M) (f : \u03b1 \u21aa \u03b2) (a : \u03b2) (b : M) (hb : b \u2260 0)\n    (h : l.embDomain f = single a b) : \u2203 x, l = single x b \u2227 f x = a := by\n  have h1 : \u2200 x, x \u2208 l.support \u2192 f x \u2208 (single a b).support := by\n    intro x hx\n    simp only [mem_support_iff, single_apply]\n    split_ifs with h2\n    \u00b7 apply hb\n      simp only [h, embDomain_apply, Finset.mem_singleton] at hx\n      rw [\u2190 hx]\n      simp [h2, h]\n    \u00b7 simp [h2, h]\n  have h2 : \u2200 x, x \u2208 l.support \u2192 x \u2208 (single b l).support := by\n    intro x hx\n    simp only [mem_support_iff, single_apply]\n    split_ifs with h2\n    \u00b7 simp [h2]\n    \u00b7 simp [h2]\n  have h3 : \u2200 x, x \u2208 l.support \u2192 x \u2208 (single b l).support := by\n    intro x hx\n    simp only [mem_support_iff, single_apply]\n    split_ifs with h2\n    \u00b7 simp [h2]\n    \u00b7 simp [h2]\n  have h4 : \u2200 x, x \u2208 l.support \u2192 x \u2208 (single b l).support := by\n    intro x hx\n    simp only [mem_support_iff, single_apply]\n    split_ifs with h2\n    \u00b7 simp [h2]\n    \u00b7 simp [h2]\n  rcases Finset.mem_singleton.1 (h1 (f.symm a) (by simp)) with \u27e8x, rfl\u27e9\n  use x\n  constructor\n  \u00b7 apply embDomain_injective\n    simp only [h, single_apply, Function.Embedding.apply_symm_apply]\n    split_ifs with h2\n    \u00b7 simp [h2]\n    \u00b7 simp [h2]\n  \u00b7 simp only [h, single_apply, Function.Embedding.apply_symm_apply]\n    split_ifs with h2\n    \u00b7 simp [h2]\n    \u00b7 simp [h2]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  classical\n  induction' s using Finset.induction with a s h\u2080 ih\n  \u00b7 simp [multiplicity.one_right hp.prime.not_unit]\n  \u00b7 rw [Finset.prod_insert h\u2080, Finset.sum_insert h\u2080, ih, multiplicity.mul hp, add_comm]\n    all_goals assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  apply Finset.induction_on s\n  simp [hp.multiplicity_one_right]\n  intro a s has ih\n  simp only [Finset.prod_insert has, Finset.sum_insert has, ih, multiplicity.mul_multiplicity]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  apply Finset.prod_induction _ _ _ _\n  intro a b\n  intro h\n  rw [multiplicity.mul hp h.1 h.2]\n  rw [multiplicity.one_right hp.1]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with a s' ih\n  simp [multiplicity.one_right]\n  simp_all [multiplicity.mul hp, Finset.sum_insert, not_mem_finset_iff_not_mem]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with a s hsa ih\n  simp [multiplicity.one_right]\n  simp_all [multiplicity.mul hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  apply Finset.induction_on s\n  simp [hp.multiplicity_one_right]\n  intro a s has ih\n  simp only [Finset.prod_insert has, Finset.sum_insert has, ih, multiplicity.mul_multiplicity]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  apply Finset.induction_on s\n  simp [multiplicity_one_right]\n  intro a s has ih\n  simp only [Finset.prod_insert has, Finset.sum_insert has, \u2190 ih]\n  rw [multiplicity_mul hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.cons_induction with a s has ih\n  simp only [Finset.sum_empty, Finset.prod_empty, eq_self_iff_true,\n    Finset.sum_cons, Finset.prod_cons]\n  rw [multiplicity.mul hp]\n  rw [ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction s using Finset.induction <;> simp [*]\n  rw [multiplicity.mul hp]\n  simp [add_comm, *]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  match s with\n  | \u2205 => simp\n  | \u2205 => simp\n  | \u2205 => simp\n  | \u2205 => simp\n  | \u2205 => simp\n  | \u2205 => simp\n  | \u2205 => simp\n  | \u2205 => simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with b s hbs ih\n  case empty => simp\n  case insert =>\n    rw [Finset.prod_insert hbs, Finset.sum_insert hbs, ih, \u2190 add_mul]\n    exact multiplicity.mul hp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with a s has ih\n  \u00b7\n    rw [Finset.prod_empty, Finset.sum_empty, multiplicity.mul_one]\n  \u00b7\n    rw [Finset.prod_insert has, Finset.sum_insert has, multiplicity.mul, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with b s' hbs' ih\n  case empty => simp\n  case insert =>\n    simp_all [multiplicity.mul, hp.multiplicity_pow]\n    <;> simp_all [ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with a s has ih\n  \u00b7 simp\n  \u00b7 rw [Finset.prod_insert has, Finset.sum_insert has, \u2190 ih]\n    exact multiplicity.mul hp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction_on with a s has ih\n  \u00b7 simp [multiplicity.one_right]\n  \u00b7 rw [Finset.prod_insert has, Finset.sum_insert has]\n    exact (multiplicity.mul hp (f a) _).symm.trans (add_comm _ _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with a s has ih\n  simp\n  simp only [Finset.prod_insert has, Finset.sum_insert has, ih]\n  rw [multiplicity.mul hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with x s hx IH\n  simp only [Finset.sum_empty, Finset.prod_empty, multiplicity.mul_one_right]\n  rw [Finset.prod_insert hx, Finset.sum_insert hx, multiplicity.mul_right_iff hp.ne_one, IH,\n    multiplicity.mul_right_iff hp.ne_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with a s ha ih\n  simp\n  simp_all [multiplicity.mul' hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  match s with\n  | \u2205 => simp [hp.multiplicity_one_right]\n  | \u2205 => simp [hp.multiplicity_one_right]\n  | (Finset.insert a s) =>\n    simp only [Finset.prod_insert, Finset.sum_insert, Finset.mem_insert, forall_eq_or_imp]\n    rw [hp.multiplicity_mul]\n    simp [hp.multiplicity_one_right, Finset.sum_insert]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with a s ih\n  \u00b7 simp [multiplicity.multiplicity_one_right]\n  \u00b7 rw [Finset.prod_insert, Finset.sum_insert, ih]\n    simp [hp.multiplicity_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with x s hx ih\n  rw [Finset.prod_empty, Finset.sum_empty, multiplicity.one_right]\n  rw [Finset.prod_insert hx, Finset.sum_insert hx]\n  rw [ih]\n  rw [multiplicity.mul hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction_on with a s has hind\n  \u00b7 simp [hp.multiplicity_one_right]\n  \u00b7 rw [Finset.prod_insert has, Finset.sum_insert has, hp.multiplicity_mul, hind]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with a s' ih\n  \u00b7 simp\n  \u00b7 simp_all [multiplicity.mul, hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction_on with x s hx ih\n  simp [multiplicity.mul_finset]\n  simp_all [multiplicity.mul_finset, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  apply Finset.induction_on s rfl\n  intro a s ha ih\n  rw [Finset.prod_insert ha, Finset.sum_insert ha, ih]\n  rw [multiplicity.mul hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction s using Finset.induction with\n  | empty => simp\n  | @insert a s _ h =>\n    rw [Finset.prod_insert h, Finset.sum_insert h, \u2190 h, multiplicity.mul]\n    exact (add_comm _ _).trans (add_assoc _ _ _).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with a s n ih\n  \u00b7 rw [Finset.prod_empty, Finset.sum_empty, multiplicity.one_right]\n  \u00b7 rw [Finset.prod_insert n, Finset.sum_insert n, multiplicity.mul hp, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction s\n  simp only [Finset.sum_empty, Finset.prod_empty, multiplicity.mul_p_of_prime]\n  simp only [Finset.sum_insert, Finset.prod_insert, multiplicity.mul_p_of_prime,\n    hp, Nat.isUnit_iff, not_false_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.cons_induction_on with a s has ih h\n  rw [Finset.prod_cons, Finset.sum_cons, \u2190 ih]\n  rw [hp.multiplicity_mul]\n  apply Finset.sum_congr rfl\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.cons_induction_on with x s hx ih\n  simp only [Finset.prod_cons, Finset.sum_cons, ih]\n  rw [multiplicity.mul hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction_on with a s has ih\n  simp [multiplicity.one_right hp.prime]\n  rw [Finset.prod_insert has, Finset.sum_insert has, ih]\n  simp [multiplicity.mul hp.prime, add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Finset.prod {\u03b2 : Type*} {p : \u03b1} (hp : Prime p) (s : Finset \u03b2) (f : \u03b2 \u2192 \u03b1) :\n    multiplicity p (\u220f x \u2208 s, f x) = \u2211 x \u2208 s, multiplicity p (f x) := by\n  induction' s using Finset.induction with a s has ih\n  rw [Finset.prod_empty, Finset.sum_empty, multiplicity.mul]\n  simp only [Finset.prod_insert has, Finset.sum_insert has, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext\n  cases_swap <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext a b\n  cases a <;> cases b <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext a b\n  cases a <;> cases b <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext a b\n  cases a <;> cases b <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  simp [bitwise_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext a b\n  cases a <;> cases b <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  simp only [bitwise, Function.swap]\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  simp only [bitwise, Function.swap]\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  unfold bitwise\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  ext x y\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  simp [bitwise, Function.swap]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  unfold bitwise\n  funext x y z\n  cases x <;> cases y <;> cases z <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext a b\n  cases a <;> cases b <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  ext x y\n  rcases x with \u27e8\u27e9 <;> rcases y with \u27e8\u27e9 <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  unfold bitwise\n  funext a b\n  cases a <;> cases b <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext a b\n  simp [bitwise_tac]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  simp (config := { unfoldPartialApp := true }) [bitwise, Function.swap]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x z\n  cases x <;> cases z <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  ext x y\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext x y\n  simp [bitwise, Function.swap]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  unfold bitwise\n  funext x y\n  cases x <;> cases y <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext b\n  funext c\n  cases b <;> cases c <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  ext x y\n  simp [bitwise]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext xs ys\n  simp only [Function.swap]\n  rcases xs with \u27e8\u27e9 <;> rcases ys with \u27e8\u27e9 <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem bitwise_swap {f : Bool \u2192 Bool \u2192 Bool} :\n    bitwise (Function.swap f) = Function.swap (bitwise f) := by\n  funext b x\n  cases x <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  simp [range_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  simp only [Functor.range, Set.image_comp, Set.mem_range, Function.comp_apply,\n    Set.mem_setOf_eq, comp_apply]\n  congr\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext x; constructor <;> simp [MonoidHom.mem_range] <;>\n    rintro \u27e8y, rfl\u27e9 <;> exact \u27e8y, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  simp [range_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  rw [range_comp, Set.image_eq_range, Submodule.map_top]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  apply Set.ext\n  intro x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  simp only [range_eq_map, map_map, comp_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext x\n  constructor <;> simp_all [Function.comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext x\n  constructor <;> intro h <;> obtain \u27e8y, hy\u27e9 := h <;> use y <;> simp [hy]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  rw [range_comp, Subgroup.map_comap_eq]\n  exact le_of_eq rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  simp [range_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  simp only [range_eq_iff, map_eq, coe_comp, Set.image_image, comp_app]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  simp only [range_eq_iff, \u2190 map_comp, map_id']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext\n  constructor <;> rintro \u27e8x, hx\u27e9 <;> use x <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  rw [range_comp, Set.image_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext\n  simp [comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  apply Set.ext\n  intro x\n  simp [MonoidHom.mem_range]\n  constructor <;> rintro \u27e8y, rfl\u27e9 <;> exact \u27e8y, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  apply Set.ext\n  intro x\n  constructor <;> simp (config := { contextual := true }) [MonoidHom.mem_range,\n    MonoidHom.mem_map, MonoidHom.mem_range, MonoidHom.mem_map]\n  <;> tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  simp [range, Set.image, comp_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext x\n  simp [Function.comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  simp only [RingHom.range_eq_map, RingHom.comp_apply, RingHom.map_map]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  simp [Filter.range_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  simp [range_comp, Set.image_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  apply le_antisymm <;> simp [Set.range_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  apply le_antisymm <;> simp [MonoidHom.range_eq_map]\n  <;> apply Submonoid.map_le_range\n  <;> intro m hm\n  <;> cases hm\n  <;> simp_all\n  <;> apply Set.mem_univ\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  apply le_antisymm <;>\n  simp (config := { contextual := true }) [MonoidHom.range_eq_map,\n    MonoidHom.map_range_le, MonoidHom.map_map, MonoidHom.comp_assoc,\n    MonoidHom.comp_range_le, MonoidHom.comp_assoc, MonoidHom.comp_range_le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_range : f.range.map g = (g.comp f).range := by\n  ext\n  constructor <;> intro h <;> obtain \u27e8a, ha\u27e9 := h <;>\n    use a <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [\u2190 sub_eq_zero] at h\n  simp only [castHom_apply, Fin.val_eq_val, Fin.cast_mk] at h\n  apply Fin.eq_of_veq\n  norm_num at h\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [ZMod.castHom_apply, ZMod.castHom_apply, ZMod.cast_injective.eq_iff] at h\n  assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  simpa only [ZMod.castHom_apply] using congr_arg (ZMod.cast : ZMod n \u2192 R) h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [\u2190 ZMod.cast_val x, \u2190 ZMod.cast_val y] at h\n  exact ZMod.cast_injective n h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  simpa only [RingHom.injective_iff, eq_self_iff_true, forall_const] using castHom_injective _ R\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [\u2190 cast_id x, \u2190 cast_id y] at h\n  simpa [cast_eq_cast_iff] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y hxy\n  simpa only [ZMod.castHom_apply] using congr_arg ((\u2191) : ZMod n \u2192 R) hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  simpa only [ZMod.castHom_apply] using congr_arg (ZMod.cast n) h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  simpa using ZMod.intCast_eq_intCast_iff_dvd_sub.mp h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  apply Fin.eq_of_veq\n  simpa [ZMod.castHom_apply] using congr_arg Fin.val h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [ZMod.castHom_apply, ZMod.castHom_apply] at h\n  exact ZMod.nat_cast_injective _ _ h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  apply Fin.eq_of_veq\n  simpa [ZMod.castHom_apply] using congr_arg ZMod.val h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  simpa [ZMod.card_zmod] using Nat.cast_injective\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  rintro \u27e8\u27e9 \u27e8\u27e9 h\n  rw [ZMod.castHom_apply] at h\n  exact congr_arg (Int.cast \u2218 ![id]) h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [\u2190 cast_id x, \u2190 cast_id y]\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [\u2190 ZMod.cast_val x, \u2190 ZMod.cast_val y] at h\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  rintro \u27e8k\u27e9 \u27e8i\u27e9 h\n  simpa [ZMod.castHom_apply] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x x' h\n  have : (castHom (dvd_refl n) R) (x % n) = (castHom (dvd_refl n) R) (x' % n) := by\n    simp only [castHom_apply, Int.cast_eq] at h\n    exact h\n  simp_all [Nat.ModEq, Nat.ModEq.rfl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [ZMod.eq_iff_modEq_nat] at h\n  exact ZMod.nat_cast_inj.mp h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  simp only [castHom_apply, RingHom.coe_mk] at h\n  exact Fin.eq_of_val_eq (Fin.eq_of_val_eq h)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [castHom_apply] at h\n  apply_fun (\u00b7 : R) at h\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [\u2190 ZMod.cast_eq_val, \u2190 ZMod.cast_eq_val] at h\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  have h\u2081 : (castHom (dvd_refl n) R) x = (castHom (dvd_refl n) R) y := by\n    exact h\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [ZMod.castHom_apply] at h\n  dsimp [ZMod.castHom] at h\n  rw [\u2190 ZMod.cast_id x, \u2190 ZMod.cast_id y, \u2190 ZMod.castHom_apply, \u2190 ZMod.castHom_apply] at h\n  simp only [Function.Injective] at *\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [ZMod.eq_iff_modEq_nat] at h\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [\u2190 ZMod.cast_id x, \u2190 ZMod.cast_id y] at h\n  simpa [ZMod.cast_eq_val] using congr_arg ZMod.val h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro a b h; simpa using congr_arg (fun k => (k : R)) h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  apply Fin.eq_of_veq\n  simpa [ZMod.castHom_apply] using congr_arg ZMod.val h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [\u2190 sub_eq_zero]\n  rw [\u2190 sub_eq_zero] at h\n  apply_fun (\u00b7 * 2) at h\n  simpa [mul_add, mul_comm, mul_left_comm, mul_assoc, add_comm, add_left_comm, add_assoc] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [\u2190 ZMod.cast_val x, \u2190 ZMod.cast_val y] at h\n  exact ZMod.cast_injective n h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem castHom_injective : Function.Injective (ZMod.castHom (dvd_refl n) R) := by\n  intro x y h\n  rw [ZMod.castHom_injective] at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  rcases l with \u27e8\u27e8l\u27e9, hl\u27e9\n  simp only [lookupFinsupp, AList.lookupFinsupp, AList.lookup, lookup]\n  split_ifs with h\n  \u00b7 rw [(hl.1 h).2]\n  \u00b7 rw [(hl.2 h).2]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  cases' l with l hl\n  simp_rw [lookupFinsupp, dlookup_eq_lookup, Lookup.lookup_toFinmap', Finmap.lookup_toDFinsupp]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  simp only [lookupFinsupp, AList.lookup, Finsupp.zero]\n  cases' h : l.find? a with b\n  \u00b7 simp [h]\n  \u00b7 simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  cases l with | mk l h => cases l with | nil => simp [lookupFinsupp, lookup]\n  | cons a_1 a_2 tl => simp [lookupFinsupp, lookup]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  cases l with | mk s h => cases a <;> simp [lookupFinsupp, AList.lookup, List.dlookup]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  apply AList.induction_on l <;> intro l <;> simp [AList.lookupFinsupp, AList.lookupD]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  cases l with | mk s x =>\n  simp [\u2190 AList.mem_lookup_iff, List.getD_eq_get]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  simp_rw [lookupFinsupp]\n  split_ifs with h <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  simp only [lookupFinsupp, AList.mem_lookup_iff, Option.getD_zero]\n  split_ifs with h\n  next h => rw [\u2190 h, Option.mem_toList]\n  next h => rw [\u2190 h, Option.mem_toList]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  cases l with | mk l c =>\n    cases a <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  dsimp only [lookupFinsupp, lookup]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  rcases l with \u27e8\u27e8l_l, l_r, l_nd\u27e9, _\u27e9\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  rcases l with \u27e8\u27e8_l\u27e9, _h_lookup\u27e9\n  simp only [lookupFinsupp, AList.lookup, dlookup]\n  apply rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  simp [lookupFinsupp, lookup, AList.find?, dite_eq_ite]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  rw [lookupFinsupp]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  simp only [lookupFinsupp, lookup, AList.getD_eq_get]\n  induction l with\n  | nil => rfl\n  | cons a_1 b_1 l\u2081 ih =>\n    by_cases h : a = a_1\n    \u00b7 subst h\n      simp [AList.getD_cons_eq]\n    \u00b7 simp [h, AList.getD_cons_ne, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  simp only [lookupFinsupp, AList.toFinsupp, Finsupp.mem_support_iff, Finset.mem_toFinset]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  rw [lookupFinsupp, AList.dlookupFinsupp, Dlookup_eq_lookup]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  cases' l with l hl\n  dsimp only [lookupFinsupp]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  cases l with | mk s f =>\n   cases a <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  simp [lookupFinsupp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  cases l with | mk s h =>\n  cases a with | mk a_val a_property =>\n  simp [lookupFinsupp, lookup, entry_eq_get]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  simp [lookupFinsupp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  simp [lookupFinsupp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  convert rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  rw [lookupFinsupp]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  rcases l with \u27e8\u27e8arr, harr\u27e9, hlookup\u27e9\n  simp only [lookupFinsupp, AList.lookupFinsupp, AList.lookup, lookupFinsupp_apply]\n  convert rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  cases' l with l hl\n  cases' a with a\n  dsimp only [lookupFinsupp, dlookup]\n  rw [AList.dlookup]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  cases l with | mk s h =>\n    simp only [lookupFinsupp, dlookup_eq_lookup, Lookup.lookup, List.dlookup]\n    cases s.dlookup a <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  conv =>\n    lhs\n    simp only [AList.lookupFinsupp, dlookup_apply_eq_find?, Lookup.dlookup_find?, Option.getD_some]\n  apply Eq.symm\n  apply Eq.symm\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  simp only [lookupFinsupp, dlookup_lookup, Option.getD_some]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem lookupFinsupp_apply [DecidableEq \u03b1] (l : AList fun _x : \u03b1 => M) (a : \u03b1) :\n    l.lookupFinsupp a = (l.lookup a).getD 0 := by\n  rw [\u2190 AList.dlookup_eq_lookup]\n  exact dif_cases (p := _ = _) (hl := l.dlookup_isSome a) (hr := l.dlookup_isSome a)\n    (fun h \u21a6 by simp [h]) (fun h \u21a6 by simp [h])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_subset, symmDiff_eq_union, disjoint_iff_inter_eq_bot, subset_iff,\n    mem_union, mem_inter, mem_bot]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  constructor <;> intro h\n  <;> simp_rw [le_iff_subset] at h\n  <;> simp_rw [disjoint_iff] at h\n  <;> simp_rw [symmDiff_eq_union_sdiff_inf] at h\n  <;> simp_rw [subset_iff] at h\n  <;> simp_rw [Set.mem_union, Set.mem_sdiff, Set.mem_inter_iff] at h\n  <;> tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp_rw [le_iff_subset, subset_iff, le_symmDiff_iff_left, Set.disjoint_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_subset, subset_iff, le_symmDiff_iff_left, SetCoe.exists, exists_prop]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [le_iff_subset, symmDiff_eq_union]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  rw [symmDiff_eq_sup_sdiff_inf]\n  simp [le_sup_iff, Disjoint]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_subset, symmDiff, disjoint_iff]\n  apply Iff.intro <;> intro h <;> simp_all only [subset_empty_iff, inf_eq_empty]\n  <;> simp_all [Set.nonempty_iff_ne_empty]\n  <;> simp_all [Set.nonempty_iff_ne_empty]\n  <;> tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [le_symmDiff_iff, Disjoint, inf_eq_bot_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [le_iff_subset, symmDiff, disjoint_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_lt_or_eq, disjoint_left, symmDiff, lt_iff_le_and_ne, Ne,\n    and_assoc, and_comm, and_left_comm]\n  by_cases ha : a = 0 <;> by_cases hb : b = 0 <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  rw [le_iff_subset]\n  simp [Set.subset_def]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_antisymm_iff, le_symmDiff_iff_left, Disjoint, inf_eq_bot_iff]\n  constructor <;> intro h\n  exact h.1\n  exact \u27e8h, h.symm\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp_rw [le_iff_subset, subset_iff, le_symmDiff_iff_left, SetCoe.forall, val_eq_coe,\n    SymmDiff_apply, Set.mem_union, Set.mem_diff, Set.mem_singleton_iff]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp (config := { contextual := true }) [le_iff_lt_or_eq, disjoint_iff, symmDiff_eq_sup_sdiff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_subset, symmDiff_eq_union, Disjoint, disjoint_iff, subset_def,\n    mem_union, mem_diff, mem_left, not_and, not_not, not_le, Bool.not_eq_false,\n    iff_true]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [le_iff_lt_or_eq, disjoint_iff, symmDiff_iff_lt]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  rw [le_iff_subset]\n  simp [left_symmDiff_eq_union]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_symmDiff_iff, disjoint_iff]\n  refine' \u27e8fun h => h.imp fun ha hb => _, fun h => h.elim (fun ha hb => Or.inl ha) fun ha hb =>\n    Or.inr \u27e8ha, hb\u27e9\u27e9\n  exact hb.sdiff_eq_left.symm.trans ha\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_symmDiff_iff, left_iff_disj_or_eq, disjoint_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_subset, symmDiff, disjoint_iff_inter_eq_bot, subset_def, mem_union,\n    mem_inter, mem_diff, not_and, not_not, and_imp]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [le_iff_subset, subset_iff, disjoint_iff_inf_le, symmDiff_iff_ne]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_subset, symmDiff_eq_sup_sdiff_inf, disjoint_iff, subset_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [le_iff_subset, subset_iff, symmDiff, disjoint_iff]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [le_iff_subset, symmDiff, Disjoint]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_subset, \u2190 disjoint_coe, coe_symmDiff]\n  simp [Set.disjoint_iff, subset_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp_rw [le_iff_subset]\n  simp [\u2190 disjoint_iff, subset_symmDiff_iff_left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  rw [le_iff_subset]\n  simp_rw [SetLike.subset_iff]\n  refine' \u27e8fun h x hx => _, fun h x hx => _\u27e9\n  simp_rw [Set.mem_symmDiff] at h\n  simp_rw [Set.mem_symmDiff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_subset, symmDiff_eq_sup_sdiff_inf, subset_sdiff_iff, disjoint_iff_inf_le]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp [le_iff_lt_or_eq, symmDiff, disjoint_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_subset, subset_iff, le_symmDiff_iff_left, Disjoint, inf_eq_inter,\n    Set.disjoint_iff, Set.mem_inter_iff, not_and]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_subset, symmDiff_eq_sup_sdiff_inf, subset_sdiff_iff, inf_eq_inter, disjoint_iff]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_symmDiff_iff_left : a \u2264 a \u2206 b \u2194 Disjoint a b := by\n  simp only [le_iff_subset, symmDiff, disjoint_iff_inter_eq_empty, subset_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  change f \u2218 g = f \u2218\n    (LinearIsometryEquiv.ofInjective (g : E \u2192L[\ud835\udd5c] E) g.injective).symm \u2218\n    (g : E \u2192L[\ud835\udd5c] E)\n  rw [\u2190 iteratedFDerivWithin_univ]\n  rw [\u2190 iteratedFDerivWithin_univ]\n  rw [\u2190 iteratedFDerivWithin_univ]\n  simp only [ContinuousLinearMap.comp_apply, LinearIsometryEquiv.coe_ofInjective_symm,\n    Function.comp_apply, LinearIsometryEquiv.coe_ofInjective]\n  exact\n    (hf.comp_continuousLinearMap fun _ => g).iteratedFDerivWithin_eq_equiv_comp\n      (uniqueDiffOn_univ _ _) (mem_univ _) hi\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  have hfg : ContDiff \ud835\udd5c n (f \u2218 g) := by\n    rw [ContDiff.comp_linearMap]\n    exacts [hf, contDiff_const]\n  rw [iteratedFDeriv_comp_right hfg x hi]\n  rw [g.iteratedFDeriv_comp_left x hi]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' hi with i hi generalizing x\n  \u00b7 apply iteratedFDeriv_zero_eq_comp\n  \u00b7 have A : (i : \u2115\u221e) < n := lt_of_le_of_lt hi (WithTop.coe_lt_coe.2 (Nat.lt_succ_self i))\n    have B : (i + 1 : \u2115\u221e) \u2264 n := WithTop.coe_le_coe.2 (Nat.succ_le_of_lt A.le)\n    rw [iteratedFDeriv_succ_eq_comp_right, hf.iteratedFDeriv_comp_right g B,\n      iteratedFDeriv_succ_eq_comp_right,\n      ContinuousMultilinearMap.compContinuousLinearMap_symm_compContinuousLinearMap]\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  obtain \u27e8c, rfl\u27e9 := exists_add_of_le hi\n  simp only [iteratedFDeriv_add_const _ _ c, add_sub_cancel_right]\n  rw [hf.iteratedFDeriv_comp_right _ (le_add_left le_rfl)]\n  ext m\n  simp [iteratedFDeriv_succ_apply_right, ContinuousMultilinearMap.compContinuousLinearMap_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  obtain rfl := eq_of_le_of_lt hi (ContDiff.of_le hf.le_of_lt)\n  rw [ContDiff.iteratedFDeriv_comp_right hf g x]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' hi with i hi\n  \u00b7 ext; simp\n  \u00b7 have A : i.succ \u2264 n := by simpa using hi\n    have B : (i : \u2115\u221e) < n := by simpa using A\n    rw [iteratedFDeriv_succ_eq_comp_left, iteratedFDeriv_succ_eq_comp_left,\n      ContinuousLinearMap.comp_compContinuousLinearMap, hi A,\n      (Continuous linear map.iteratedFDeriv_comp_right _ hf.of_le B).compContinuousLinearMap_assoc]\n    congr\n    ext\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' i with i IH generalizing x <;> simp [*] at hi \u22a2\n  have hdg := ContDiff.comp_contDiff_on hf g.contDiff\n  rw [iteratedFDeriv_succ_eq_comp_left,\n    IH (le_of_succ_le hi), iteratedFDeriv_succ_eq_comp_left]\n  refine compContinuousLinearMap_comp g (by assumption) ?_\n  apply hdg.congr'\n  intro y; simp [hf.2]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  have hfg : ContDiff \ud835\udd5c n (f \u2218 g) := by\n    rw [contDiff_iff_contDiffAt] at hf \u22a2\n    exact fun x => (hf (g x)).comp x contDiffAt_id\n  rw [iteratedFDeriv_eq_equiv_comp, iteratedFDeriv_eq_equiv_comp,\n    hfg.iteratedFDeriv_comp_right (contDiffAt_id' x) hi]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  exact\n    @ContDiff.iteratedFDeriv_comp_right G _ _ _ _ _ _ _\n      (contDiff_linearIsometryEquiv \ud835\udd5c g) hf x hi\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  rw [\u2190 comp_iteratedFDeriv_right]\n  simp only [comp_apply]\n  exact (iteratedFDeriv_const_apply (f (g x)) i).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' hi with i hi IH generalizing x\n  \u00b7 simp only [Nat.cast_zero, le_zero_iff] at hi\n    subst hi\n    ext\n    simp\n  \u00b7 have IH' := IH hi.le\n    simp only [Nat.cast_succ] at hi\n    have : (iteratedFDeriv \ud835\udd5c (i + 1) (f \u2218 g) x : (G[\u00d7i + 1]\u2192L[\ud835\udd5c] \ud835\udd5c)) =\n        (iteratedFDeriv \ud835\udd5c i fun y => f (g y) : (G[\u00d7i]\u2192L[\ud835\udd5c] F)).compContinuousLinearMap fun _ =>\n        g := by rw [iteratedFDeriv_succ_comp_right hf.of_le hi.le]\n    simp only [this, IH']\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' hi using le_trans with hi\n  \u00b7 simp [iteratedFDeriv_zero, ContinuousMultilinearMap.compContinuousLinearMap_toContinuousLinearMap]\n  simp only [iteratedFDeriv_succ_apply_right, (hf.of_le hi).contDiff_iteratedFDeriv,\n    ContinuousLinearMap.comp_apply, (ContinuousLinearMap.iteratedFDeriv_comp_right _ hf.of_le hi)]\n  ext m\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  rw [\u2190 iteratedFDerivWithin_univ]\n  simp_rw [iteratedFDerivWithin_univ]\n  exact ContinuousLinearMap.iteratedFDerivWithin_comp_right\n    hf.contDiffOn.contDiffWithinAt g.continuous x hi\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' hi with i hi i hi generalizing x <;> subst i\n  \u00b7 ext\n    simp [iteratedFDeriv_zero_eq_comp]\n  \u00b7 rw [iteratedFDeriv_succ_eq_comp_left]\n    rw [iteratedFDeriv_succ_eq_comp_left]\n    simp_rw [\u2190 comp.assoc]\n    exact congr(h i $hi)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  have h := hf.contDiffAt.iteratedFDeriv_comp_right g.continuousAt hi\n  rw [contDiffAt_iff_continuousAt_differentiableAt] at hf\n  obtain \u27e8hf, hf'\u27e9 := hf\n  rw [iteratedFDeriv_succ_eq_comp_right]\n  rw [iteratedFDeriv_succ_eq_comp_right] at h\n  convert h\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' hi with i hi generalizing x\n  \u00b7 ext\n    simp\n  \u00b7 ext\n    simp only [ContinuousLinearMap.iteratedFDeriv_succ_apply_left, (hf.of_le hi.le).contDiffAt,\n      ContinuousLinearMap.compContinuousLinearMap_apply, ContinuousLinearMap.iteratedFDeriv_succ_apply_right,\n      ContinuousLinearMap.coe_comp', ContinuousLinearMap.coe_coe, Function.comp_apply,\n      ContinuousLinearMap.add_apply]\n    rw [hi_core, \u2190 add_left_inj (fderiv \ud835\udd5c f _ g : G \u2192 E), add_right_inj]\n    congr!\n    simp [iteratedFDeriv_succ_apply_right]\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' i with i ih generalizing x\n  \u00b7 ext\n    simp [ContinuousLinearMap.ext_iff, ContinuousLinearMap.zero_apply]\n  \u00b7 ext\n    simp only [ContinuousMultilinearMap.compContinuousLinearMap_apply,\n      ContinuousLinearMap.coe_comp', Function.comp_apply, iteratedFDeriv_succ_apply_right,\n      ih (f := f) hi, \u2190 ContinuousLinearMap.coe_comp', LinearIsometryEquiv.coe_comp',\n      ContinuousLinearMap.coe_coe]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' hi with i hi IH generalizing x\n  case refl =>\n    ext\n    simp [ContinuousLinearMap.comp_apply, hf.hasFDerivAt.comp_hasFDerivAt]\n  case step i hi IH =>\n    have := IH\n    rw [iteratedFDeriv_succ_eq_comp_left] at this \u22a2\n    rw [this]\n    ext\n    simp [ContinuousLinearMap.comp_apply, ContinuousLinearMap.comp_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' i with i ih generalizing x\n  \u00b7 ext\n    simp\n  \u00b7 have h := hf.differentiableContDiff\n    have h' := h.comp g.continuousLinearMap\n    simp only [h', ContDiff.of_le, le_add_iff_nonneg_right, le_refl, zero_le, forall_const]\n    ext\n    simp only [ih _ le_rfl, LinearIsometryEquiv.map_add, Function.comp_apply,\n      ContinuousMultilinearMap.compContinuousLinearMap_apply,\n      LinearIsometryEquiv.map_smul, Fin.cons_succ, add_equiv_to_addMonoid_hom_coe, one_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' hi with i hi IH generalizing x\n  \u00b7 ext\n    simp\n  \u00b7 ext\n    simp only [IH, Nat.cast_succ, succ_eq_add_one, add_right_inj, ContinuousLinearMap.compContinuousLinearMap_apply,\n      Function.comp_apply, ContinuousLinearMap.add_apply, ContinuousLinearMap.one_apply]\n    refine' (iteratedFDeriv_succ_apply_right _ _ _).trans _\n    congr\n    ext\n    simp [add_apply, one_apply, compContinuousLinearMap_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  rw [\u2190 iteratedFDerivWithin_univ]\n  rw [\u2190 iteratedFDerivWithin_univ]\n  exact\n    ContinuousLinearMap.iteratedFDerivWithin_comp_right g.differentiableOn\n      (fun _ => g) hf.contDiffOn (mem_univ _) hi\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' hi with i hi ih generalizing x\n  \u00b7 simp [Function.iterate_zero, contDiff_zero]\n  \u00b7 have : f = f \u2218 g \u2218 g.symm := by\n      ext x\n      simp\n    rw [this, iteratedFDeriv_comp_left hf.of_le hi.le]\n    congr\n    ext1\n    simp [ContinuousLinearMap.comp_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  rw [\u2190 iteratedFDerivWithin_univ]\n  rw [\u2190 iteratedFDerivWithin_univ]\n  rw [\u2190 iteratedFDerivWithin_univ]\n  rw [\u2190 iteratedFDerivWithin_univ]\n  exact ContinuousLinearMap.iteratedFDerivWithin_comp_right (g := g) (contDiff_iff_contDiffWithin.mp hf) (mem_univ _) hi\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  apply ContinuousMultilinearMap.ext\n  intro a\n  have :=\n    ContinuousMultilinearMap.compContinuousLinearMap_apply (ContinuousMultilinearMap.iteratedFDeriv \ud835\udd5c i f (g x))\n      fun _ : Fin i => g\n      a\n  rw [iteratedFDeriv_comp_right] at this\n  simp_all only [ContinuousMultilinearMap.compContinuousLinearMap_apply,\n    ContinuousMultilinearMap.iteratedFDeriv_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' i with i IH generalizing x\n  \u00b7 ext\n    simp [ContinuousMultilinearMap.ext_iff]\n  \u00b7 have Z := hf.of_le hi\n    have :\n      iteratedFDeriv \ud835\udd5c (i + 1) (f \u2218 g) x =\n        ContinuousMultilinearMap.compContinuousLinearMap\n          (fun _ : Fin (i + 1) => g) (iteratedFDeriv \ud835\udd5c (i + 1) f (g x)) := by\n      ext m\n      rw [iteratedFDeriv_succ_apply_right, (Z.iteratedFDeriv (i + 1)).2]\n      swap\n      \u00b7 rw [\u2190 Function.comp_def]\n        apply Z.continuous_iteratedFDeriv (i + 1)\n      simp only [ContinuousMultilinearMap.compContinuousLinearMap_apply, Function.comp_def]\n      rw [(iteratedFDeriv_succ_apply_right _ _ _).symm]\n    rw [this]\n    ext m\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  rw [\u2190 iteratedFDerivWithin_univ]\n  rw [\u2190 iteratedFDerivWithin_univ]\n  rw [\u2190 iteratedFDerivWithin_univ]\n  exact ContinuousLinearMap.iteratedFDerivWithin_comp_right (mem_univ _) hf.contDiffOn hi\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  exact (hf.contDiffAt.iteratedFDeriv\n    (g x) hi).comp_continuousLinearMap fun _ => g\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  have : (g : G \u2192 E) = fun x => g x := rfl\n  rw [this, Composition.comp_apply, hf.iteratedFDeriv_comp_right_apply]\n  rw [ContinuousMultilinearMap.compContinuousLinearMap_apply]\n  simp only [g.map_smul, Finset.smul_sum, Function.comp_apply,\n    ContinuousMultilinearMap.compContinuousLinearMap_apply,\n    ContinuousMultilinearMap.map_smul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  induction' hi with i hi ih generalizing x\n  \u00b7 simp\n  \u00b7 have := hi.fderiv_comp x hf.differentiable_iteratedFDeriv le_rfl\n    simp only [iteratedFDeriv_succ_eq_comp_left, ih, this, ContinuousMultilinearMap.compContinuousLinearMap_apply]\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  rw [\u2190 one_mul (iteratedFDeriv \ud835\udd5c i f (g x)), \u2190 contDiff_at_one_iff]\n  refine (iteratedFDeriv_comp_right_apply (f := f) (g := g.toLinearMap) ?_ _ _).symm\n  simpa using hf.contDiffAt\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  rw [\u2190 comp_iteratedFDeriv_right, hf.comp_fderivWithin, iteratedFDerivWithin_univ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ContinuousLinearMap.iteratedFDeriv_comp_right (g : G \u2192L[\ud835\udd5c] E) {f : E \u2192 F}\n    (hf : ContDiff \ud835\udd5c n f) (x : G) {i : \u2115} (hi : (i : \u2115\u221e) \u2264 n) :\n    iteratedFDeriv \ud835\udd5c i (f \u2218 g) x =\n      (iteratedFDeriv \ud835\udd5c i f (g x)).compContinuousLinearMap fun _ => g := by\n  have :=\n    ContDiff.comp_contDiffWithinAt hf (ContinuousLinearMap.contDiff _) x\n  rw [iteratedFDerivWithin_univ]\n  rw [iteratedFDerivWithin_univ]\n  exact ContinuousLinearMap.iteratedFDerivWithin_comp_right _ this.contDiffWithinAt uniqueDiffOn_univ hi\n    (mem_univ _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  rw [IsCaratheodory]\n  letI : 0 < 2 := by norm_num\n  exact fun s => \u27e8by simp, by simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  simp [IsCaratheodory, m.empty_eq, Set.inter_empty, Set.diff_empty, measure_le_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  rw [IsCaratheodory]\n  simp [Set.indicator_empty]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  rw [IsCaratheodory]\n  intro s\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp [IsCaratheodory, Set.inter_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  rw [IsCaratheodory]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  rw [IsCaratheodory]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  simp [IsCaratheodory, Measure.sub_self, zero_le']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  simp [IsCaratheodory]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  rw [IsCaratheodory]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  rw [IsCaratheodory]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp [Set.indicator_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp [Set.inter_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp\n  exact \u27e80, by simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp [Set.inter_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  exact fun s _ => by simp [Set.inter_comm, Set.diff_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  exact \u27e80, by simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro t\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro t\n  simp only [Set.subset_empty_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  unfold IsCaratheodory\n  intro s\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp [Set.inter_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp [Set.inter_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  rw [IsCaratheodory, Set.indicator_empty]\n  exact fun t => by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp_rw [Set.inter_comm]\n  exact \u27e80, by simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  rw [IsCaratheodory]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  simp [IsCaratheodory]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp [Set.indicator_apply, mul_zero, mul_one, sub_self]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  intro s\n  simp\n  exact \u27e80, by simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isCaratheodory_empty : IsCaratheodory m \u2205 := by\n  have h : m \u2205 = 0 := by simp [Set.measure_empty]\n  rw [h]\n  intro s\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z h\u2081 h\u2082\n  exact PseudoEqual.trans h\u2081 h\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro fp fq ffp fqf\n  apply Trans.intro ffp\n  apply Trans.intro fqf\n  apply eq_of_pseudo_eq_of_pseudo_eq fp fq ffp fqf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z h1 h2\n  have h3 : (x \u2245 y) \u2245 (x \u2245 z) := Equivalence.trans (Equivalence.symm h1) h2\n  exact h3\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z h\u2081 h\u2082\n  apply Or.intro_right\n  apply And.intro\n  exact h\u2081.1.trans h\u2082.1\n  exact h\u2081.2.trans h\u2082.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z hxy hyz\n  exact PseudoEqual.trans hxy hyz\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z h\u2081 h\u2082\n  apply pseudoEqual_def.mpr\n  exact Eq.trans (pseudoEqual_def.mp h\u2081) (pseudoEqual_def.mp h\u2082)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro f g h a\n  simp_all [PseudoEqual]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro l\u2081 l\u2082 l\u2083 h\u2081 h\u2082\n  simp_all only [PseudoEqual, \u2190 Implication, and_imp]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x\u2081 x\u2082 x\u2083 h\u2081\u2082 h\u2082\u2083\n  cases' h\u2081\u2082 with h\u2081\u2082 h\u2081\u2082 <;> cases' h\u2082\u2083 with h\u2082\u2083 h\u2082\u2083\n  exacts [PseudoEqual.refl _, PseudoEqual.refl _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z hxy hyz\n  cases hxy with\n  | inl hxy =>\n    cases hyz with\n    | inl hyz =>\n      exact Or.inl (PseudoEqual.trans hxy hyz)\n    | inr hyz =>\n      exact Or.inr \u27e8hxy.1.trans hyz.1, hxy.2.trans hyz.2\u27e9\n  | inr hxy =>\n    cases hyz with\n    | inl hyz =>\n      exact Or.inr \u27e8hxy.1.trans hyz.1, hxy.2.trans hyz.2\u27e9\n    | inr hyz =>\n      exact Or.inr \u27e8hxy.1.trans hyz.1, hxy.2.trans hyz.2\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z hxy hyz\n  have h := PseudoEqual.trans hxy hyz\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z h\u2081 h\u2082\n  cases' h\u2081 with a\u2081 b\u2081 c\u2081\n  cases' h\u2082 with a\u2082 b\u2082 c\u2082\n  exact \u27e8a\u2081, b\u2081, c\u2081, c\u2082, rfl, rfl, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z\n  intro hxy hyz\n  exact Congruence.trans hxy hyz\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro A B C h\u2081 h\u2082\n  apply_ext\n  exact h\u2081.trans h\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro [a, b, c] h\u2081 h\u2082\n  simp_all [PseudoEqual]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z h\u2081 h\u2082\n  apply pseudoEqual_iff.mpr\n  exact h\u2081.trans h\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intros a b c hab hbc\n  simp only [PseudoEqual, mul_one, mul_right_inj] at *\n  ext\n  apply hab.1.trans hbc.1\n  apply hab.2.trans hbc.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro c1 c2 c3 h12 h23\n  exact PseudoEqual.trans h12 h23\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z\n  exact fun p\u2081 p\u2082 => Transitive.trans p\u2081 p\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z hxy hyz\n  apply PseudoEqual.trans\n  exact hxy\n  exact hyz\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro A B C h\u2081 h\u2082\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro p\u2081 p\u2082 p\u2083 h\u2081\u2082 h\u2082\u2083\n  cases' h\u2081\u2082 with n\u2081 h\u2081\u2082\n  cases' h\u2082\u2083 with n\u2082 h\u2082\u2083\n  exact \u27e8n\u2081 + n\u2082, h\u2081\u2082.trans h\u2082\u2083\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z hxy hyz\n  exact hxy.trans hyz\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z\n  intro h\u2081\n  intro h\u2082\n  apply Eq.trans\n  exact h\u2081\n  exact h\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z h\u2081 h\u2082\n  let f := fun (X : C) => (PseudoEqual P).comp P h\u2081 X\n  let g := fun (X : C) => (PseudoEqual P).comp P h\u2082 X\n  exact \u27e8fun X => (f X).trans (g X)\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro a b c hab hbc\n  have H : a \u2248 b := hab.1\n  exact \u27e8H.1.trans hbc.1, H.2.trans hbc.2\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z\n  intro hxy hyz\n  exact PseudoEqual.trans hxy hyz\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro a b c h\u2081 h\u2082\n  rw [PseudoEqual] at h\u2081 h\u2082\n  rw [PseudoEqual]\n  exact PseudoEqual.trans h\u2081 h\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z h\u2081 h\u2082\n  exact PseudoEqual.trans x y z h\u2081 h\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z hxy hyz\n  rw [PseudoEqual] at hxy hyz\n  rw [PseudoEqual]\n  exact fun _ => (hxy _).trans (hyz _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z h\u2081 h\u2082\n  apply PseudoEqual.trans h\u2081 h\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pseudoEqual_trans {P : C} : Transitive (PseudoEqual P) := by\n  intro x y z\n  intro h\u2081 h\u2082\n  exact PseudoEqual.trans h\u2081 h\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  <;> simp [hn, padicValNat, dvd_zero]\n  exact (pow_padicValNat_dvd_iff_le_padicValNat.mpr le_rfl).dvd\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  cases' n with n\n  exact Nat.dvd_of_mod_eq_zero <| by simp\n  exact Nat.dvd_of_mod_eq_zero <| by simp [Nat.pow_mod, Nat.mod_eq_of_lt]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rcases eq_or_ne n 0 with (rfl | hn); \u00b7 simp\n  cases' padicValNat.dvd_iff_le.1 (le_of_lt (padicValNat.pos (Nat.pos_of_ne_zero hn))) with k hk\n  use k\n  rw [hk, pow_mul, pow_mul, pow_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  next => simp [hn]\n  exact Nat.pow_padicValNat_dvd (Nat.pos_of_ne_zero hn)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rcases eq_or_ne n 0 with (rfl | hn) <;> simp [hn]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  simp [hn]\n  rw [\u2190 padicValNat.pow_dvd_iff_le_padicValNat w\u2080]\n  exact Nat.dvd_refl _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  \u00b7 rw [hn]\n    simp\n  exact (padicValNat.dvd_iff_le <| Nat.ne_of_gt hp_pos).2 (le_of_lt (lt_pow_self hp_prime.1.one_lt _))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  \u00b7 rw [hn]\n    simp\n  exact Nat.pow_padicValNat_dvd hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rcases eq_or_ne n 0 with (rfl | hn)\n  exacts [by simp, by simpa using padicValNat.dvd hn]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  case pos => simp [hn]\n  case neg =>\n    rw [\u2190 Nat.dvd_prime_pow hp.elim]\n    exact \u27e8_, by simp [hn]\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rcases eq_or_ne n 0 with (rfl | hn)\n  \u00b7 simp\n  \u00b7 rw [\u2190 Nat.mod_add_div n (p ^ padicValNat p n)]\n    simp [hn, pow_padicValNat_dvd_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rcases eq_or_ne n 0 with (rfl | hn)\n  \u00b7 simp\n  exact Nat.pow_dvd_of_le_of_pow_dvd (Nat.le_of_dvd hn (Nat.dvd_refl _)) (by simp [hn])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  classical exact\n    if h0 : n = 0 then by rw [h0]; exact pow_dvd_pow p (by decide)\n    else by\n      rw [pow_padicValNat, \u2190 prod_factors h0, \u2190 factors_eq]\n      exact (Nat.dvd_prod_iff fun _ _ =>\n        Nat.Prime.ne_one (by simp [Nat.prime_of_mem_factors])).2\n        (by simp [h0])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rcases eq_or_ne n 0 with (rfl | hn)\n  \u00b7 simp\n  exact Nat.pow_padicValNat_dvd hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rcases eq_or_ne n 0 with (rfl | hn)\n  simp\n  exact Nat.pow_mod_eq_zero _ _ hn \u25b8 dvd_of_mod_eq_zero (by simp)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  \u00b7 rw [hn]\n    simp\n  rcases eq_or_ne p 1 with (rfl | hp)\n  \u00b7 rw [one_pow]\n    exact one_dvd n\n  exact (padicValNat.dvd_iff_le hp hn).2 (le_of_lt (lt_of_le_of_ne (Nat.zero_le _)\n    (Ne.symm (Nat.eq_zero_of_le_zero (padicValNat.zero_right hp)))))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  \u00b7 simp only [hn, pow_padicValNat_eq_zero, dvd_zero]\n  let f : \u2115 \u2192 \u2115 := fun m => p ^ padicValNat p n\n  apply Nat.dvd_of_mod_eq_zero\n  have hneveqf : \u2200 {k : \u2115}, k \u2260 padicValNat p n \u2192 \u00acf k \u2260 1 := by\n    intro k hk hf\n    have : padicValNat p (n / f k) = 0 := by\n      rw [f, padicValNat.div _ hf, padicValNat.pow _ _\n        (by rw [padicValNat.ne_zero_iff_mem_primeFactors]; aesop)]\n    rw [padicValNat.eq_zero_of_not_dvd (not_dvd_of_pos_of_lt (Nat.pos_of_ne_zero hn)\n      (Nat.lt_of_le_of_ne (Nat.le_padicValNat' hf.bot_lt) (Ne.symm hk)))] at this\n    aesop\n  have hfdivne0 : \u2200 {k : \u2115}, k \u2260 padicValNat p n \u2192 f k \u2260 0 := by\n    aesop\n  rw [\u2190 Nat.mod_add_div n (f (padicValNat p n))]\n  simp only [Nat.mod_eq_zero_of_dvd (dvd_mul_right _ _)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  classical exact\n    if hn : n = 0 then by simp [hn]\n    else by\n      rw [padicValNat, dif_neg hn]\n      exact (Nat.ord_proj_dvd _ _).trans (Nat.ord_proj_dvd _ _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0 <;> simp [hn]\n  apply Nat.pow_dvd_of_le_of_pow_dvd\n  \u00b7 simp [hn]\n  \u00b7 simpa [Nat.pow_succ, mul_comm] using hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases h : n = 0\n  \u00b7 rw [h]\n    simp\n  \u00b7 rw [pow_padicValNat _ h]\n    exact padicValNat.dvd n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rcases eq_or_ne n 0 with (rfl | hn)\n  \u00b7 simp\n  \u00b7 rw [\u2190 padicValNat.dvd_iff_modEq]\n    exact modEq_zero_iff_dvd.2 <| pow_padicValNat_dvd_of_dvd hn dvd_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rcases n.eq_zero_or_pos with (rfl | hn)\n  \u00b7 simp\n  \u00b7 rw [\u2190 padicValNat.dvd_iff_modEq hn]\n    exact padicValNat.dvd _ _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0 <;> simp [hn]\n  exact Nat.pow_padicValNat_dvd n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  cases' n with n\n  \u00b7 simp\n  \u00b7 exact Nat.pow_padicValNat_dvd _ n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  exacts [by simp [hn], by simp [padicValNat.dvd_iff_le, hn]]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rcases eq_or_ne n 0 with (rfl | hn)\n  \u00b7 simp\n  exact Nat.pow_padicValNat_dvd hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  cases n with\n  | zero =>\n    simp [padicValNat]\n  | succ k =>\n    have h := padicValNat.dvd (succ_pos k)\n    exact Nat.dvd_of_mod_eq_zero <| by simpa [pow_succ] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  simp_all\n  rw [\u2190 pow_padicValNat_dvd_iff]\n  apply Nat.dvd_of_mod_eq_zero\n  simp [hn]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  case pos => simp_all\n  case neg => simpa [hn] using padicValNat.dvd_iff_le.mp le_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases hn : n = 0\n  case pos => simp [hn]\n  case neg => exact (padicValNat.dvd_iff_le' <| Nat.pos_of_ne_zero hn).1 le_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  by_cases h : n = 0\n  \u00b7 subst h\n    simp\n  \u00b7\n    rw [\u2190 padicValNat.dvd_iff_modEq]\n    exact Nat.modEq_zero_iff_dvd.1 (Nat.mod_eq_zero_of_dvd (by\n      simpa only [Nat.zero_eq] using h))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pow_padicValNat_dvd {n : \u2115} : p ^ padicValNat p n \u2223 n := by\n  rcases eq_or_ne n 0 with (rfl | hn)\n  simp\n  exact Nat.pow_padicValNat_dvd hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  rw [map_lax_monoidal_functor_\u03c1_inv, \u2190 F.right_unitality, \u2190 LaxMonoidalFunctor.\u03b4_natural_left,\n    LaxMonoidalFunctor.\u03b4_natural_left, \u2190 F.right_unitality]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp only [LaxMonoidalFunctor.right_unitality_inv, \u2190 comp_whiskerRight,\n    LaxMonoidalFunctor.\u03bc_natural, LaxMonoidalFunctor.whiskerLeft_comp,\n    LaxMonoidalFunctor.obj_\u03bc]\n  simp only [\u2190 F.map_comp, Category.assoc, \u2190 LaxMonoidalFunctor.\u03bc_natural,\n    lax_monoidal_functor.whiskerLeft_comp, F.map_comp]\n  simp only [F.map_id, Category.comp_id,\n    lax_monoidal_functor.\u03c1_inv_hom_app_assoc, lax_monoidal_functor.\u03bc_inv_hom_app_assoc]\n  simp only [\u2190 F.map_comp, F.map (\u03c1_ X).inv,\n    lax_monoidal_functor.\u03c1_inv_hom_app_assoc, lax_monoidal_functor.\u03bc_inv_hom_app_assoc]\n  simp only [Category.assoc,\n    lax_monoidal_functor.\u03c1_inv_hom_app, lax_monoidal_functor.\u03bc_inv_hom_app]\n  simp only [F.map_id, Category.id_comp, Category.comp_id]\n  simp only [Category.id_comp, Category.comp_id, lax_monoidal_functor.\u03c1_inv_hom_app,\n    lax_monoidal_functor.\u03bc_inv_hom_app]\n  simp only [F.map_id, Category.id_comp, Category.comp_id, lax_monoidal_functor.\u03c1_inv_hom_app,\n    lax_monoidal_functor.\u03bc_inv_hom_app]\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  rw [LaxMonoidalFunctor.right_unitality]  -- Use the right unitality axiom of the lax monoidal functor\n  simp [assoc, unit_obj, \u03bc_natural, tensor_\u03bc, tensor_obj, tensor_unit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [right_unitality_inv, F.map_\u03c1_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  rw [\u2190 F.map_\u03c1_inv, LaxMonoidalFunctor.right_unitality, Category.assoc, \u2190 F.\u03bc_natural,\n    NatTrans.naturality, MonoidalCategory.right_unitality, F.map_id, LaxMonoidalFunctor.\u03bc_id,\n    \u2190 Category.assoc, \u2190 F.map_comp]\n  simp [\u2190 F.map_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  dsimp [rightUnitor, obj_term, LaxMonoidalFunctor.obj_\u03bc]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  rw [\u2190 cancel_mono (F.\u03b5), \u2190 cancel_epi (F.map (\u03c1_ X).inv)]\n  simp only [F.map_unit, LaxMonoidalFunctor.\u03b4_natural_left, Category.assoc, LaxMonoidalFunctor.right_unitality,\n    LaxMonoidalFunctor.obj_\u03bc]\n  simp only [\u2190 Category.assoc, F.map_associator, LaxMonoidalFunctor.obj_X, F.map_\u03bc,\n    lax_ditorus_assoc, Category.assoc, rightUnitor_naturality_assoc, whisker_exchange_assoc]\n  simp only [\u2190 F.map_comp, rightUnitor_inv_hom_assoc, tensorUnit_leftUnitor_inv_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality, F.map_id]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [tensorHom, LaxMonoidalFunctor.\u03bc_natural, LaxMonoidalFunctor.\u03b4_natural]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [right_unitality_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp only [Iso.inv_hom_id, Category.id_comp, LaxMonoidalFunctor.\u03bc_obj, LaxMonoidalFunctor.map_s]\n  erw [F.toFunctor.map_id]\n  rw [F.map_leftUnitor_inv]\n  simp only [\u2190 F.toFunctor.map_comp, Iso.inv_hom_id, Category.id_comp]\n  erw [F.\u03bc_natural]\n  simp only [Category.comp_id, Category.id_comp]\n  erw [F.\u03b5_natural]\n  simp only [Functor.map_id, Category.comp_id]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [right_unitality, tensorHom_def, map_tensor, tensorHom_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  conv_lhs =>\n    arg 1 =>\n      rw [\u2190 F.toFunctor.map_id]\n    arg 2 =>\n      rw [\u2190 F.toFunctor.map_comp]\n    arg 2 =>\n      rw [\u03c1_X]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality_inv, F.map_id, F.map_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  rw [Iso.inv_comp]\n  simp [F.right_unitality]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality_inv, F.toFunctor.right_unitality_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  rw [hom_inv_id, F.map_id, id_tensor_rightUnitor_inv_assoc, \u2190 F.toFunctor.map_comp]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  rw [F.map_\u03c1_inv, assoc, \u2190 F.toFunctor.map_comp, rightUnitor_inv_naturality,\n    F.toFunctor.map_comp]\n  simp [hom_inv_id]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp only [LaxMonoidalFunctor.right_unitality, MonoidalCategory.whiskerRight_id,\n    MonoidalCategory.whiskerLeft_id, F.map_id]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [tensorHom, laxMonoidalMap_\u03bc, laxMonoidalMap_\u03b5, tensorUnit_def]\n  apply eq_inv_of_hom_eq_id\n  dsimp\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  rw [F.toMonoidalFunctor.right_unitality_inv]\n  have h : F.\u03bc X (\ud835\udfd9_ C) \u226b F.\u03b5 = F.\u03b5 \u226b F.map (\u03c1_ X).inv := by\n    rw [\u2190 F.toFunctor.map_comp, right_unitality, F.toFunctor.map_id]\n  simp [h, assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp only [LaxMonoidalFunctor.right_unitality, Iso.inv_hom_id_assoc]\n  rw [\u2190 F.to_functor.map_id]\n  simp only [Functor.map_id, LaxMonoidalFunctor.\u03b5_natTrans_app, Category.id_comp,\n    LaxMonoidalFunctor.\u03bc_natural, LaxMonoidalFunctor.map_tensor, Category.assoc,\n    LaxMonoidalFunctor.toFunctor_map]\n  simp only [\u2190 F.to_functor.map_comp, Category.id_comp]\n  simp only [Category.comp_id, \u2190 F.to_functor.map_comp]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  rw [\u2190 cancel_epi (F.map (\u03c1_ X).inv)]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LaxMonoidalFunctor.right_unitality_inv (F : LaxMonoidalFunctor C D) (X : C) :\n    (\u03c1_ (F.obj X)).inv \u226b F.obj X \u25c1 F.\u03b5 \u226b F.\u03bc X (\ud835\udfd9_ C) = F.map (\u03c1_ X).inv := by\n  simp [LaxMonoidalFunctor.right_unitality_inv, F.toFunctor.map_d", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor\n  rintro \u27e8_, rfl\u27e9\n  rfl\n  rintro rfl\n  exact \u27e8a.2, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor <;> rintro \u27e8h, rfl\u27e9 <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp [exists_subtype_mk_eq_subtype_mk_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp [exists_prop, eq_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp [exists_subtype_ mk_eq_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor\n  rintro \u27e8h, rfl\u27e9\n  rfl\n  rintro rfl\n  exact \u27e8a.2, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp [exists_subtype_mk_eq_subtype_mk_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp only [@eq_comm _ b, Subtype.mk_eq_mk, exists_eq_left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp [Subtype.ext_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor <;> rintro \u27e8\u27e8\u27e9\u27e9 <;> aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor <;> simp (config := { contextual := true }) [@eq_comm _ b]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor <;> rintro \u27e8\u27e8b, hb\u27e9, rfl\u27e9 <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor <;>\n  simp (config := { contextual := true })\n  <;>\n  aesop\n  <;>\n  exact Subtype.ext_iff.symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor <;> rintro \u27e8h\u2081, rfl\u27e9 <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor\n  \u00b7 rintro \u27e8h, rfl\u27e9\n    rfl\n  \u00b7 exact fun h \u21a6 h \u25b8 \u27e8p h, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp [exists_subtype_mk_eq_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp [exists_subtype_mk_eq_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor\n  rintro \u27e8h, rfl\u27e9\n  exact Subtype.ext rfl\n  rintro rfl\n  exact \u27e8a.2, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor <;> rintro \u27e8hb, rfl\u27e9 <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp [exists_prop, Subtype.ext_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor <;> rintro \u27e8h, rfl\u27e9 <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor\n  rintro \u27e8_, rfl\u27e9\n  rw [Subtype.ext_iff]\n  rintro rfl\n  exact \u27e8a.2, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor <;> rintro \u27e8hb, rfl\u27e9 <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp only [exists_prop, eq_comm, SetCoe.exists, Subtype.coe_mk, Subtype.coe_inj]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp only [exists_prop, eq_comm, Subtype.mk_eq_mk]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  constructor <;>\n    rintro \u27e8hb, rfl\u27e9 <;>\n    simpa using hb\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp only [exists_prop, Subtype.mk_eq_mk, exists_eq_right]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp [exists_subtype_mk_eq_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem _root_.exists_subtype_mk_eq_iff {a : Subtype p} {b : \u03b1} :\n    (\u2203 h : p b, Subtype.mk b h = a) \u2194 b = a := by\n  simp only [exists_subtype_mk_eq_iff, eq_comm, Subtype.exists, exists_prop]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_lt_iff.mpr\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_le_iff.mpr\n  constructor\n  <;> norm_num\n  <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [log_two_lt_287209_div_414355, log_two_gt_287209_div_414355]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [abs_le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply sub_le_iff_le_add.2\n  norm_num\n  <;> decide\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_le_iff.mpr\n  constructor <;> norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [Nat.gcd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply Int.cast_le.1\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_le_iff.mpr\n  constructor <;> norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply le_of_lt\n  norm_num\n  <;> decide\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [log_one, log_mul, Nat.cast_zero, Nat.cast_succ,\n    @Nat.cast_zero \u211d, @Nat.cast_succ \u211d]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply le_of_sub_nonneg\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply le_of_lt\n  norm_num\n  <;> decide\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply le_of_lt\n  norm_num\n  <;> apply_rules [abs_lt, log_lt_iff, one_lt_two, le_of_lt] <;> norm_num\n  <;> apply_rules [abs_lt, log_lt_iff, one_lt_two, le_of_lt] <;> norm_num\n  <;> apply_rules [abs_lt, log_lt_iff, one_lt_two, le_of_lt] <;> norm_num\n  <;> apply_rules [abs_lt, log_lt_iff, one_lt_two, le_of_lt] <;> norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_le_iff.mpr\n  constructor <;> norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply le_of_lt\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_le_iff.mpr\n  constructor\n  all_goals\n    norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_le_iff.mpr; constructor <;> norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [Nat.log, Nat.pow_succ, Nat.pow_two]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply le_of_lt\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [log_le_iff, abs_of_nonneg]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_le_iff.mpr\n  constructor\n  all_goals norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [log_of_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [log_two_gt_d9]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_lt_iff.mpr\n  constructor <;> norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [log_two_lt_half, log_two_gt_sub_three, abs_lt]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_le_iff.mpr\n  constructor\n  <;> norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [abs_le, Real.log]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_le_iff.mpr\n  constructor <;> norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  apply abs_sub_le_iff.mpr\n  constructor <;> norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem log_two_near_10 : |log 2 - 287209 / 414355| \u2264 1 / 10 ^ 10 := by\n  norm_num [abs_sub_le_iff, log_two_lt_d9]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  have h1 : comap f H \u2264 f.ker\u207b\u00b9 := by rwa [f.ker_eq_bot, le_bot_iff]\n  have h2 : map f (comap f H) = H := by simp_all\n  exact h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply Subgroup.ext\n  intro x\n  simp only [mem_map, mem_comap]\n  constructor\n  intro \u27e8y, hy, hxy\u27e9\n  rw [\u2190 hxy]\n  exact hy\n  intro hx\n  use x\n  exact \u27e8hx, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rw [map_comap_eq]\n  exact le_antisymm h (by simp [le_refl])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rw [map_comap_eq, inf_eq_right]\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rw [map_comap_eq]\n  rw [inf_of_le_left h]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rwa [map_comap_eq, inf_eq_right]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rw [\u2190 SetLike.le_def] at h\n  rw [map_comap_eq, inf_eq_right.mpr h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rw [map_comap_eq]\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  ext\n  constructor\n  next =>\n    rintro \u27e8n, hn, rfl\u27e9\n    exact hn\n  next =>\n    exact fun hx => \u27e8_, hx, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rw [map_comap_eq, inf_eq_right]\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply le_antisymm\n  \u00b7 exact Subgroup.map_comap_le\n  \u00b7 exact h.trans (by simp [f.range_eq_map])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply le_antisymm\n  \u00b7 exact le_trans (map_mono (le_top)) (le_of_eq (map_top f))\n  \u00b7 exact le_trans (le_of_eq (comap_map_eq_self h)) (comap_mono (le_top))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rw [map_equiv_eq_comap_symm, comap_equiv_eq_map_symm]\n  simpa [Equiv.symm_symm] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply le_antisymm\n  simp [(Subgroup.map_comap_eq f H).symm, h]\n  simp [Subgroup.le_comap_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rw [map_comap_eq, inf_eq_right]\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  refine' le_antisymm _ (le_map_comap _ _)\n  rintro n (hn : f n \u2208 H)\n  obtain \u27e8x, hx\u27e9 := h hn\n  replace hx : x \u2208 comap f H := by\n    rw [mem_comap]\n    replace hx : f x = n := by\n      rw [\u2190 hx]\n    rw [\u2190 hx]\n    simp\n  replace hx : f x \u2208 H := by\n    rw [mem_comap] at hx\n    exact hx\n  simp [hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply Subgroup.map_comap_eq_self\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  ext\n  simp [MonoidHom.mem_range, mem_map, mem_comap]\n  constructor\n  rintro \u27e8a, ha, rfl\u27e9\n  exact ha\n  intro hx\n  use f.symm \u27e8x, hx\u27e9\n  simp [hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply le_antisymm\n  \u00b7 exact le_trans (le_comap_map _ _) (by simpa using h)\n  \u00b7 exact map_le_of_le_comap _ _ h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply le_antisymm\n  \u00b7 exact map_comap_le\n  \u00b7 exact le_trans map_comap_le h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rw [map_comap_eq]\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  ext x\n  simp [Subgroup.mem_map, Subgroup.mem_comap, h_1]\n  constructor\n  rintro \u27e8x, hx, rfl\u27e9\n  exact hx\n  intro hx\n  use x\n  simp [hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  refine' le_antisymm (le_trans (map_comap_le _ H) h) fun x hx => _\n  obtain \u27e8y, hy, rfl\u27e9 := mem_map.1 (h hx)\n  exact \u27e8y, hy, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply le_antisymm\n  simp [le_def, map_le_iff_le_comap, comap_comap, h]\n  simp [le_def, map_le_iff_le_comap, comap_comap]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  have : H \u2264 MonoidHom.range f := h\n  exact le_antisymm (le_of_eq (map_comap_eq _ _)) (le_trans h (le_of_eq (MonoidHom.range_eq_map _)))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  suffices map f (comap f H) \u2264 H by exact le_antisymm this h\n  exact map_comap_le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply le_antisymm\n  exact map_comap_le.trans (le_of_eq (f.range_eq_map))\n  intro x hx\n  rw [mem_map] at hx \u22a2\n  use f.symm x\n  constructor\n  exact h hx\n  simp only [MonoidHom.apply_symm_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rwa [map_comap_eq, inf_eq_right.mpr]\n  exact le_trans h (le_range_self f)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  rw [map_comap_eq, inf_eq_right]\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply Subgroup.ext\n  intro x\n  constructor\n  intro hx\n  obtain \u27e8x, hx', rfl\u27e9 := Subgroup.mem_map.mp hx\n  exact hx'\n  intro hx\n  exact Subgroup.mem_map.mpr \u27e8x, hx, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  apply le_antisymm\n  \u00b7 exact le_trans (map_mono (le_comap_self)) (le_trans (le_of_eq (map_comap_eq f H)) h)\n  \u00b7 exact le_trans h (le_of_eq (comap_map_eq f H))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem map_comap_eq_self {f : G \u2192* N} {H : Subgroup N} (h : H \u2264 f.range) :\n    map f (comap f H) = H := by\n  have : H \u2264 f.range := h\n  exact le_antisymm (map_comap_le f H) (le_comap_map f H)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  rw [\u2190 sub_eq_zero]\n  rw [\u2190 sub_eq_zero] at *\n  ring_nf at *\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst a; subst b; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst a; subst b; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst c; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem of_eq (_ : (a : R) = c) (_ : b = c) : a = b := by\n  subst_vars\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  norm_num [stirlingSeq, Nat.factorial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  unfold stirlingSeq\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq, Nat.factorial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  constructor\n  <;> norm_num [Real.sqrt_eq_rpow]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq, Nat.factorial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  rw [stirlingSeq]\n  norm_num\n  field_simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  unfold stirlingSeq\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq, Nat.factorial, Nat.sub_self, Nat.zero_eq, Nat.succ_eq_add_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  unfold stirlingSeq\n  field_simp\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp only [stirlingSeq, Nat.factorial, Nat.mul_div_cancel_left, Nat.cast_one, Nat.cast_succ,\n    Nat.cast_zero, Nat.cast_mul]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  norm_num [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq, Nat.factorial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem stirlingSeq_one : stirlingSeq 1 = exp 1 / \u221a2 := by\n  simp [stirlingSeq, Nat.factorial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk_eq_mk_iff, Units.eq_iff, mul_right_inj']\n  simp_rw [Units.eq_iff, mul_right_inj', mul_left_inj', mul_comm I,\n    toPrincipalIdeal_eq_one, FractionalIdeal.one_div]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk, ClassGroup.mk, Units.map_eq_map_iff]\n  simp_rw [MonoidHom.id_apply, exists_prop]\n  exact Iff.symm Submonoid.mk_eq_mk_iff_exists_mk\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  classical\n  refine' \u27e8fun h => _, fun \u27e8x, hx\u27e9 => by rw [\u2190 map_eq_mk_of_coe_eq hx, ClassGroup.mk_eq_mk]\u27e9\n  simp_rw [ClassGroup.mk, MonoidHom.mem_range] at h\n  rcases h with \u27e8\u27e8x\u27e9, hx\u27e9\n  use x\n  rw [\u2190 mul_one I, \u2190 QuotientGroup.mk_mul, \u2190 mul_inv_cancel x.ne_zero, \u2190 mul_assoc, hx,\n    mul_assoc, mul_comm (\u2191x), \u2190 mul_assoc, mul_inv_cancel x.ne_zero, one_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [eq_comm, \u2190 QuotientGroup.eq'']\n  simp [QuotientGroup.eq'', Units.ext_iff, mul_right_cancel_iff,\n    show \u2200 x : (FractionRing R)\u02e3, toPrincipalIdeal R (FractionRing R) x = spanSingleton R\u2070 (1 : FractionRing R) * \u2191x\n    from fun x => by apply coeToPrincipalIdeal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  constructor\n  \u00b7 rw [eq_iff]\n    rintro \u27e8x, hx\u27e9\n    refine \u27e8toPrincipalIdeal R (FractionRing R) x\u207b\u00b9, ?_\u27e9\n    apply Units.ext\n    rw [mul_assoc, \u2190 hx, \u2190 mul_assoc, toPrincipalIdeal_inv,\n      Units.inv_mul, toPrincipalIdeal_one, Units.one_mul]\n  \u00b7 rintro \u27e8x, hx\u27e9\n    refine \u27e8Units.map (canonicalEquiv R\u2070 (FractionRing R) (FractionRing R))\n      (Units.mk0 x (IsFractionRing.injective R (FractionRing R)\n        (mul_ne_zero (ne_zero_of_mul_ne_zero_left (ne_zero_of_mul_ne_zero_right hx))\n          (ne_zero_of_mul_ne_zero_right hx)))).inv, ?_\u27e9\n    rw [eq_comm, canonicalEquiv_canonicalEquiv, toPrincipalIdeal_canonicalEquiv,\n      toPrincipalIdeal_canonicalEquiv, \u2190 mul_assoc, \u2190 hx, Units.inv_mul,\n      canonicalEquiv_one, toPrincipalIdeal_one, Units.one_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk, ClassGroup.mk, Units.map_eq_map]\n  refine' \u27e8fun h => _, fun \u27e8x, hx\u27e9 => \u27e8Units.map (canonicalEquiv R\u2070 (FractionRing R) (FractionRing R))\n    x, hx\u27e9\u27e9\n  obtain \u27e8x', hx'\u27e9 := (FractionalIdeal.canonicalEquiv_eq_map R\u2070 _ _).mp h\n  exact \u27e8x'\u207b\u00b9, by rwa [mul_inv_cancel_right\u2080 (x'.ne_zero)] at hx'\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk, ClassGroup.mk, Units.quotientEquivSigmaFiber_mk,\n    QuotientGroup.eq, Units.ext_iff, Units.val_mul, Units.val_mk0, \u2190 Units.val_inv_eq_inv_val,\n    Units.val_mul, Units.val_mk0]\n  simp only [principal_unit_mul_eq_one, \u2190 Units.val_mul, mul_comm I, Units.val_mul,\n    Units.val_inv_eq_inv_val, inv_mul_eq_one]\n  constructor\n  \u00b7 rintro \u27e8x, hx\u27e9\n    refine \u27e8x, ?_\u27e9\n    convert hx\n    simp\n  \u00b7 rintro \u27e8x, hx\u27e9\n    refine \u27e8\u2191x, ?_\u27e9\n    convert hx\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk_eq_mk_inv]\n  constructor <;> rintro \u27e8x, hx\u27e9 <;> refine' \u27e8x, _\u27e9 <;> convert hx <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  simp only [ClassGroup.mk, map_eq, QuotientGroup.mk_eq_mk_iff_subgroup_and_inv_mem_iff,\n    Subgroup.mem_comap, FractionalIdeal.coe_submonoidClass_of_nonZeroDivisorsToMemNonZeroDivisors,\n    Units.ext_iff, mul_inv_eq_iff_eq_mul, mul_right_inj]\n  refine' \u27e8fun h => \u27e8_, h\u27e9, fun h => _\u27e9\n  obtain \u27e8x, hx\u27e9 := h\n  use x\n  exact hx.symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  constructor <;> intro h\n  \u00b7 rw [ClassGroup.mk, MonoidHom.mem_range] at h\n    rcases h with \u27e8x, hx\u27e9\n    refine \u27e8x, ?_\u27e9\n    rw [\u2190 hx, \u2190 Units.val_mul, mul_comm, toPrincipalIdeal_eq, Units.ext_iff]\n    simp\n  \u00b7 rcases h with \u27e8x, hx\u27e9\n    rw [ClassGroup.mk, MonoidHom.mem_range]\n    refine \u27e8Units.map (canonicalEquiv R\u2070 (FractionRing R) (FractionRing R)) x, ?_\u27e9\n    rw [\u2190 canonicalEquiv_toPrincipalIdeal, \u2190 canonicalEquiv_canonicalEquiv,\n      Units.ext_iff, hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  letI := Classical.decEq \u03b9;\n  letI := Classical.decEq R\u2081;\n  letI := Fintype.card \u03b9;\n  letI := Fintype.card R\u2081;\n  letI := Classical.decEq (ZMod (Fintype.card R\u2081));\n  letI := Classical.decEq (ZMod (Fintype.card \u03b9));\n  constructor\n  \u00b7 intro h;\n    exact\n      (ClassGroup.equivalence.symm\n          (by\n            simpa only [mul_right_inj] using Units.ext (ClassGroup.equiv_eq_one_iff.mp h))).choose_spec\n  \u00b7 rintro \u27e8x, hx\u27e9;\n    rw [\u2190 mul_inv_cancel_right\u2080 (toPrincipalIdeal R <| FractionRing R) J x, \u2190 hx, mul_assoc,\n      mul_inv_cancel\u2080 (toPrincipalIdeal R <| FractionRing R) I, mul_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk_eq_mk_iff]\n  refine \u27e8fun h \u21a6 ?_, fun \u27e8x, hx\u27e9 \u21a6 ?_\u27e9\n  \u00b7 exact \u27e8Units.mapEquiv toPrincipalIdealUnits.addEquiv x, by convert h\u27e9\n  \u00b7 exact \u27e8Units.mapEquiv.symm toPrincipalIdealUnits.addEquiv x, by convert hx\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk_eq_mk]\n  simp [Units.ext_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  constructor\n  \u00b7 intro h\n    rw [\u2190 Classical.choose_spec h]\n    exact \u27e8Classical.choose h, by rfl\u27e9\n  \u00b7 rintro \u27e8x, hx\u27e9\n    apply Classical.choose_spec\n    rw [\u2190 hx]\n    apply Equiv.refl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  constructor\n  \u00b7 intro h; obtain \u27e8x, hx\u27e9 := h; use x; rw [\u2190 hx]; simp\n  \u00b7 rintro \u27e8x, hx\u27e9; rw [\u2190 QuotientGroup.eq]; simpa using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  simp_rw [ClassGroup.mk, QuotientGroup.eq_iff_div_mul_eq_one, div_eq_iff,\n    \u2190 Units.eq_iff, mul_comm]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk, ClassGroup.mk, Units.map_eq_map]\n  constructor\n  \u00b7 rintro \u27e8x, hx\u27e9\n    refine' \u27e8Units.map (toPrincipalIdeal R (FractionRing R)) x, _\u27e9\n    rwa [Units.map_mul] at hx\n  \u00b7 rintro \u27e8x, hx\u27e9\n    refine' \u27e8Units.map (Units.map (toPrincipalIdeal R (FractionRing R))) x, _\u27e9\n    rwa [Units.map_mul, Units.map_mul, toPrincipalIdeal_eq_canonicalEquiv,\n      canonicalEquiv_toPrincipalIdeal, Equiv.refl_symm, Equiv.coe_refl, id_eq] at hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk, ClassGroup.mk, Units.ext_iff, Units.coe_eq_iff, QuotientGroup.mk_eq_mk_iff,\n    Units.val_mul, toPrincipalIdeal_eq, \u2190 Units.eq_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk, ClassGroup.mk, Units.quotient_mk_eq_mk, Units.quotient_mk_eq_mk,\n    QuotientGroup.mk'_eq_mk', QuotientGroup.mk'_eq_mk', eq_iff_exists]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  refine' \u27e8fun h => _, fun \u27e8x, hx\u27e9 => _\u27e9\n  \u00b7 exact\n      let \u27e8u, hu\u27e9 := h\n      \u27e8Units.map (Ideal.mapEquiv (FractionRing.algEquiv R (FractionRing R))).toMonoidHom u, hu \u25b8 rfl\u27e9\n  \u00b7 rw [ClassGroup.mk_eq_mk]\n    refine' \u27e8Units.map (Ideal.mapEquiv _).toMonoidHom x, _\u27e9\n    convert hx\n    rw [\u2190 Units.eq_iff, Units.val_map, Units.val_map, \u2190 RingEquiv.toMonoidHom_eq_coe,\n      \u2190 RingEquiv.toMonoidHom_eq_coe, Ideal.mapEquiv_toMonoidHom, FractionRing.algEquiv_coe]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [\u2190 Units.eq_iff, ClassGroup.mk_eq_mk, Units.eq_iff]\n  constructor <;> rintro \u27e8x, hx\u27e9 <;> refine \u27e8x, ?_\u27e9 <;> rw [\u2190 hx] <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [\u2190 QuotientGroup.eq'', \u2190 mk'_eq_mk, \u2190 QuotientGroup.eq'']\n  simp_rw [QuotientGroup.eq'']\n  constructor\n  \u00b7 rintro \u27e8x, hx\u27e9\n    refine' \u27e8_, mul_right_cancel\u2080 (sub_ne_zero.mpr x.ne_zero) _\u27e9\n    rw [Units.val_mul, mul_assoc, hx, \u2190 mul_assoc, coe_toPrincipalIdeal, mul_inv_cancel\n      (FractionRing.toPrincipalIdealHom R (FractionRing R) x.ne_zero), one_mul]\n  \u00b7 rintro \u27e8x, hx\u27e9\n    refine' \u27e8_, mul_right_cancel\u2080 (sub_ne_zero.mpr x.ne_zero) _\u27e9\n    rw [\u2190 hx, mul_assoc, coe_toPrincipalIdeal, mul_inv_cancel x.ne_zero, mul_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk_eq_mk_iff]; constructor\n  \u00b7 rintro \u27e8x, hx\u27e9; exact \u27e8x, hx\u27e9\n  \u00b7 rintro \u27e8x, hx\u27e9; exact \u27e8x, hx\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  simp only [ClassGroup.mk, Units.ext_iff, eq_iff_true_of_subsingleton]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk_eq_mk, Units.ext_iff, eq_iff_true_of_subsingleton]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  constructor\n  \u00b7 intro h\n    rw [ClassGroup.mk, MonoidHom.mk'_apply] at h\n    obtain \u27e8x, hx\u27e9 := QuotientGroup.eq.1 h\n    refine' \u27e8x, _\u27e9\n    rw [Submonoid.mem_toPrincipalIdeal] at hx\n    simpa only [Units.val_mul, hx] using mul_comm (\u2191I : FractionalIdeal R\u2070 <| FractionRing R) \u2191x\n  \u00b7 rintro \u27e8x, hx\u27e9\n    rw [ClassGroup.mk, MonoidHom.mk'_apply, \u2190 QuotientGroup.eq, \u2190 Submonoid.mem_toPrincipalIdeal,\n      hx, Submonoid.mem_toPrincipalIdeal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  constructor\n  next =>\n    intro h\n    rw [ClassGroup.mk, MonoidHom.mk'_apply] at h\n    obtain \u27e8x, hx\u27e9 := QuotientGroup.eq.mp h\n    refine \u27e8x, ?_\u27e9\n    rw [toPrincipalIdeal, mul_assoc, mul_comm, mul_assoc, hx, mul_inv_self, mul_one]\n  next =>\n    rintro \u27e8x, hx\u27e9\n    rw [ClassGroup.mk, MonoidHom.mk'_apply, \u2190 QuotientGroup.eq]\n    refine (QuotientGroup.eq_one_iff _).mpr (Subgroup.mem_leftCoset_iff.mpr ?_)\n    use (toPrincipalIdeal R (FractionRing R)) x\n    rw [mul_assoc, hx, mul_comm, mul_inv_self, mul_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  constructor <;>\n  rintro \u27e8x, rfl\u27e9\n  \u00b7 exact \u27e8x, by ext; simp\u27e9\n  \u00b7 exact \u27e8Units.map (Ideal.Quotient.mk _).toMonoidHom x, by ext; simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.mk, MonoidHom.mk'_apply, MonoidHom.mk'_apply,\n    Units.quotient_mk_eq_mk, Units.quotient_mk_eq_mk, QuotientGroup.mk_eq_mk_iff_subgroup_and]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  rw [ClassGroup.ext_iff]\n  rw [eq_iff_exists (b\u2081 := 1)]\n  simp_rw [Units.val_one]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  constructor\n  \u00b7 intro h\n    rw [ClassGroup.mk, ClassGroup.mk, MonoidHom.mem_range] at h\n    obtain \u27e8x, hx\u27e9 := h\n    refine \u27e8x, ?_\u27e9\n    rw [\u2190 hx, mul_assoc, toPrincipalIdeal_one, mul_one]\n  \u00b7 rintro \u27e8x, hx\u27e9\n    rw [ClassGroup.mk, ClassGroup.mk, MonoidHom.mem_range]\n    refine \u27e8Units.map (canonicalEquiv R\u2070 <| FractionRing R) x, ?_\u27e9\n    rw [\u2190 hx, canonicalEquiv_mul, canonicalEquiv_canonicalEquiv, canonicalEquiv_one,\n      mul_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ClassGroup.mk_eq_mk {I J : (FractionalIdeal R\u2070 <| FractionRing R)\u02e3} :\n    ClassGroup.mk I = ClassGroup.mk J \u2194\n      \u2203 x : (FractionRing R)\u02e3, I * toPrincipalIdeal R (FractionRing R) x = J := by\n  simp_rw [ClassGroup.mk, QuotientGroup.mk_eq_mk']\n  constructor <;> rintro \u27e8x, hx\u27e9 <;>\n    refine' \u27e8x, _\u27e9 <;>\n    convert hx <;>\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  simp [contDiffOn_top_iff_fderivWithin hs, IsOpen.uniqueDiffOn _ (isOpen_univ.mono s\u2082.subset_univ)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  classical\n  simp only [contDiffOn_top_iff_fderivWithin hs, differentiableOn_univ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  refine' \u27e8fun h => , fun h => _\u27e9\n  \u00b7 exact \u27e8h.differentiableOn le_top, h.contDiffOn_top\u27e9\n  obtain \u27e8h\u2081, h\u2082\u27e9 := h\n  refine' contDiffOn_top.2 fun n => _\n  let m := max n 1\n  have : m \u2264 \u221e := le_top\n  exact ((contDiffOn_succ_iff_derivWithin hs).1 (h\u2082.of_le this)).2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  constructor\n  case mp => exact fun h => \u27e8h.differentiableOn le_top, h.contDiffOn_derivWithin hs\u27e9\n  case mpr =>\n    rintro \u27e8hd, h\u27e9\n    rw [contDiffOn_top_iff_snd_derivWithin hs]\n    refine \u27e8hd, h, ?_\u27e9\n    intro x hx\n    by_cases hx' : DifferentiableWithinAt \ud835\udd5c f\u2082 s\u2082 x\n    case pos => exact (derivWithin_one_of_differentiableWithinAt hx' hs hx).symm\n    case neg =>\n      have hx'' : ContDiffWithinAt \ud835\udd5c 0 f\u2082 s\u2082 x := by\n        simp only [contDiffWithinAt_zero]\n        exact continuousWithinAt_of_not_differentiableWithinAt hx'\n      exact (derivWithin_zero_of_not_differentiableWithinAt hx' hs hx).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  simp only [forall_prop_of_true,\n    {derivWithin f\u2082 s\u2082} \u2286 ({f\u2082} : Set (E \u2192 F)) \u2227 ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194\n    DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  simp only [*, ContDiffOn, fun i => (contDiffOn_succ_iff_derivWithin hs).mp, not_false_eq_true,\n    forall_const]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  constructor\n  intro h\n  exact \u27e8h.differentiableOn le_top, h.contDiffOn_succ le_top\u27e9\n  rintro \u27e8h\u2081, h\u2082\u27e9\n  rw [contDiffOn_top]\n  constructor\n  exact h\u2081.continuousOn\n  intro n\n  exact h\u2082.contDiffOn_succ n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  constructor <;> intro h\n  exact \u27e8h.differentiableOn le_top, (h.contDiffOn_succ le_top).derivWithin hs\u27e9\n  obtain \u27e8h's, h'\u27e9 := h\n  rw [contDiffOn_top_iff_derivWithin hs]\n  exact \u27e8h's, h'.contDiffOn_succ le_top\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  constructor\n  next =>\n    rintro h\n    constructor\n    \u00b7 exact h.differentiableOn le_top\n    \u00b7 exact h.contDiffOn_derivWithin hs\n  next =>\n    rintro \u27e8hd, h\u27e9\n    rw [contDiffOn_top_iff_derivWithin_of_open hs.isOpen]\n    exact \u27e8hd, h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  constructor\n  intro h\n  have h' := h.contDiffOn\n  rw [contDiffOn_top_iff_fderivWithin hs] at h'\n  exact \u27e8h.differentiableOn, h'.2\u27e9\n  rintro \u27e8h\u2081, h\u2082\u27e9\n  rw [contDiffOn_top_iff_fderivWithin hs]\n  exact \u27e8h\u2081, h\u2082.contDiffOn\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  norm_num simp [contDiffOn_succ_iff_derivWithin hs, Nat.le_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  refine' \u27e8fun h => \u27e8h.differentiableOn le_top, _\u27e9, fun h => (contDiffOn_top_iff_derivWithin_iterate\n    hs).2 \u27e8h.1, h.2\u27e9\u27e9\n  obtain \u27e8_, h\u2081\u27e9 := (contDiffOn_top_iff_derivWithin_iterate hs).1 h\n  exact h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  rw [contDiffOn_top_iff_derivWithin_of_uniqueDiffOn hs,\n    and_congr_right_iff]\n  intro h\n  simp_rw [h.differentiableOn_derivWithin]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  simp only [contDiffOn_top_iff_fderivWithin hs, fderivWithin_derivWithin,\n    differentiableOn_derivWithin hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  constructor\n  \u00b7 intro h\n    exact \u27e8h.differentiableOn le_top, contDiffOn_top_iff_derivWithin.1 h.of_le le_top\u27e9\n  \u00b7 rintro \u27e8h\u2081, h\u2082\u27e9\n    rw [contDiffOn_top_iff_derivWithin hs]\n    exact \u27e8h\u2081, h\u2082\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  constructor\n  . intro h\n    refine \u27e8h.differentiableOn le_top, ?_\u27e9\n    convert h.of_le le_top\n    rw [derivWithin_univ]\n  . rintro \u27e8hd, h\u27e9\n    rw [contDiffOn_top_iff_deriv_of_isOpen (isOpen_univ.mono (by simp))]\n    exact \u27e8hd, by simpa using h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  refine' \u27e8fun h => \u27e8h.differentiableOn_iteratedDerivWithin le_top, _, fun n => _\u27e9, fun h => h.2.of_le le_top\u27e9\n  exacts [(h.differentiableOn_iteratedDerivWithin 0).congr (fun x hx => by simp [derivWithin]) fun x hx => by\n    simp [iteratedDerivWithin_succ, hx], contDiffOn_succ_iff_derivWithin.2 \u27e8(h.1.differentiableOn_iteratedDerivWithin\n    (n + 1)).congr fun x hx => (iteratedDerivWithin_succ' x n hx).symm, h.2.differentiableOn_iteratedDerivWithin\n    n le_rfl\u27e9]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  constructor\n  case mp =>\n    intro h\n    exact \u27e8h.differentiableOn le_top, h.contDiffOn_derivWithin_of_uniqueDiffOn hs\u27e9\n  case mpr =>\n    rintro \u27e8h\u2081, h\u2082\u27e9\n    exact h\u2082.contDiffOn_of_differentiableOn_derivWithin h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  constructor <;> intro h\n  exact \u27e8h.differentiableOn le_top, h.contDiffOn_succ le_top\u27e9\n  cases' h with h\u2081 h\u2082\n  rw [contDiffOn_top]\n  intro n\n  induction' n with n ihn\n  exact \u27e8h\u2081, h\u2082.of_le le_top\u27e9\n  exact \u27e8h\u2081.of_le le_top, h\u2082.of_le (Nat.cast_le.2 (Nat.le_succ n))\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  constructor\n  next =>\n    intro h\n    constructor\n    \u00b7 exact h.differentiableOn le_top\n    \u00b7 exact h.contDiffOn_derivWithin_of_uniqueDiffOn hs\n  next =>\n    rintro \u27e8h\u2081, h\u2082\u27e9\n    exact h\u2082.contDiffOn_top_of_derivWithin h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  simp only [contDiffOn_top_iff_fderivWithin hs,\n    differentiableOn_univ,\n    fderivWithin_univ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  simp only [\u2190 contDiffOn_top_iff_fderivWithin hs, \u2190 union_compl_self s\u2082]\n  apply and_congr\n  \u00b7 exact \u27e8fun h => h.1, fun h => \u27e8h, h.2.congr fun x hx => hx.2.2\u27e9\u27e9\n  \u00b7 exact \u27e8fun h => h.2, fun h => \u27e8h.1.differentiableOn, h.2\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  simp only [ContDiffOn, forall_and, forall_eq, derivWithin,\n    ContDiffOn.differentiableOn (show ContDiffOn \ud835\udd5c 1 f\u2082 s\u2082 from contDiffOn_top.1),\n    DifferentiableOn.derivWithin hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  simp_rw [\u2190 deriv_on_univ]\n  refine' \u27e8fun h => \u27e8h.differentiableOn, h.contDiffOn\u27e9, fun h => _\u27e9\n  exact (contDiffOn_succ_iff_derivWithin hs).mpr \u27e8h.2.differentiableOn, h.1.contDiffOn\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  refine \u27e8fun h => ?_, fun h => ?_\u27e9\n  exact \u27e8h.differentiableOn, h.contDiffOn\u27e9\n  exact h.1.contDiffOn.mono h.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  rw [contDiffOn_top_iff_fderivWithin hs]\n  exact \u27e8fun h \u21a6 \u27e8h.1, h.2.of_le le_top\u27e9, fun h \u21a6 \u27e8h.1, h.2.succ\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  refine' \u27e8fun h => \u27e8h.differentiableOn_of_isOpen isOpen_univ, _\u27e9, fun h => _\u27e9\n  \u00b7 rw [derivWithin_univ]\n    exact h.2.of_le le_top\n  \u00b7 refine' ((contDiffOn_top_iff_fderivWithin hs).1 h.1).2.of_le le_top\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  refine' \u27e8fun h => \u27e8h.differentiableOn le_top, contDiffOn_top_iff_derivWithin.1 h.of_le le_top\u27e9,\n    fun h => _\u27e9\n  have h' : ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := h.2\n  have h\u2081 : ContDiffOn \ud835\udd5c \u221e (fun x => f\u2082 x) s\u2082 :=\n    contDiffOn_top_iff_derivWithin.2 \u27e8h.1, h'\u27e9\n  simpa only [contDiffOn_top_iff_derivWithin, h.1, h', true_and_iff] using h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  refine' \u27e8fun h => \u27e8h.differentiableOn, h.contDiffOn_succ.1\u27e9, fun h => _\u27e9\n  obtain \u27e8hf, h'f\u27e9 := h\n  have hf' : \u2200 n : \u2115, DifferentiableOn \ud835\udd5c (fun y : \ud835\udd5c => iteratedDerivWithin n f\u2082 s\u2082 y) s\u2082 :=\n    fun n => (h'f n).differentiableOn\n  rw [contDiffOn_top]\n  intro n\n  have h'f' : \u2200 n : \u2115,\n      ContDiffOn \ud835\udd5c \u2191n (fun y : \ud835\udd5c => iteratedDerivWithin (n + 1) f\u2082 s\u2082 y) s\u2082 := fun n =>\n    (h'f (n + 1)).contDiffOn\n  rw [contDiffOn_succ_iff_derivWithin hs]\n  constructor\n  \u00b7 convert hf' (n + 1) using 1\n    funext x\n    rw [iteratedDerivWithin_succ]\n    simp\n  \u00b7 exact fun m => (h'f' m).2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  refine' \u27e8fun h => \u27e8h.differentiableOn le_top, _\u27e9, fun h => _\u27e9\n  \u00b7 rw [contDiffOn_top_iff_fderivWithin hs] at h\n    exact h.2\n  \u00b7 refine' contDiffOn_top_iff_fderivWithin.mpr \u27e8h.1.differentiableOn le_top, _\u27e9\n    rwa [fderivWithin_derivWithin hs h.1.differentiableOn]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  refine' \u27e8fun h => \u27e8h.differentiableOn le_top, _\u27e9, fun h => (h.2.of_le le_top).congr h.1 fun x hx => _\u27e9\n  exacts [(h.differentiableOn le_top).contDiffOn le_top, (derivWithin_eq_deriv h.1 hx).symm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem contDiffOn_top_iff_derivWithin (hs : UniqueDiffOn \ud835\udd5c s\u2082) :\n    ContDiffOn \ud835\udd5c \u221e f\u2082 s\u2082 \u2194 DifferentiableOn \ud835\udd5c f\u2082 s\u2082 \u2227 ContDiffOn \ud835\udd5c \u221e (derivWithin f\u2082 s\u2082) s\u2082 := by\n  refine \u27e8fun h \u21a6 \u27e8h.differentiableOn le_top, ?_\u27e9, fun h \u21a6 ?_\u27e9\n  exacts [h.2, h.1.contDiffOn_top_derivWithin hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  obtain \u27e8FiniteSingletonOrPlus.inl _\u27e9 : Acc (Discrete.Arrows \u03b9) (Discrete.mk ()) := by\n    simp only [Discrete.arr_mk_left, FiniteSingletonOrPlus.Acc_inl_iff]\n    infer_instance\n  apply isVanKampenColimit_of_isInitial\n  apply FinitaryExtensive.nonempty_isInitial\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  obtain _ | _ | _ := isEmpty_pEmpty\n  obtain _ | _ := isEmpty_pUnit\n  obtain _ | _ | _ | _ := isEmpty_pEmpty\n  exact IsVanKampenColimit.of_isColimit\n    (IsColimit.precomposeInvEq (Discrete.compNatIsoDiscrete _ _) _ hc)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  cases nonempty_fintype \u03b9\n  exact isVanKampenColimit_of_colimit_cocone_isPreconnected _ hc _\n    (fun x \u21a6 FinitaryExtensive.is_preconnected_finiteCoproducts x)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  cases nonempty_fintype \u03b9\n  exact FinitaryExtensive.isVanKampenColimit_finiteCoproducts _ hc\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  apply isVanKampenColimitOfFiniteCoproducts\n  intro J _ _ I _ _ _ hI\n  exact FinitaryExtensive.finite_coproduct_is_van_kampen _ _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  apply FinitaryExtensive.vanKampenColimit\n  exact hc\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  apply FinitaryExtensive.isVanKampenColimit_of_isFiniteCoproduct\n  exacts [hc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  have := FinitaryExtensive.van_kampen' (Functor.uniqueFromDiscrete \u03b9 F)\n  apply IsVanKampenColimit.of_iso _ (NatIso.ofComponents (fun j \u21a6 Iso.refl _)\n    (by fun r s f \u21a6 by aesop_cat))\n  exact this.some\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  rw [isVanKampenColimit_iff]\n  intro F c hc Z F' \u03b1 X \u03c0 h\u03c0\n  have : F' = F \u22d9 Discrete.functor \u03b9 := by\n    apply Functor.hext\n    \u00b7 rintro \u27e8i\u27e9\n      rfl\n    \u00b7 rintro \u27e8i\u27e9 \u27e8i'\u27e9 \u27e8\u27e8rfl\u27e9 | \u27e8\u27e8\u27e9\u27e9\u27e9\n      simp [Discrete.eqToHom_map]\n  simp only [this] at *\n  rcases isEmpty_or_nonempty \u03b9 with h\u03b9|h\u03b9\n  \u00b7 have : F \u22d9 Discrete.functor \u03b9 \u2245 Discrete.functor (@empty \u03b9) :=\n      NatIso.ofComponents (fun _ => eqToIso (by simp)) (by aesop_cat)\n    exact (IsColimit.precomposeInvEquiv this.symm c).isLimitMapConeEquiv.symm.trans\n      ((IsVanKampenColimit.finitaryExtensive_of_isEmpty \u03b9).isLimitMapConeEquiv (hc.precompose\n        (eqToHom (by simp))) h\u03c0)\n  \u00b7 exact (IsVanKampenColimit.finitaryExtensive h\u03b9 hc).isLimitMapConeEquiv.symm.trans\n      ((IsColimit.precomposeInvEquiv (Discrete.natIso fun _ => eqToIso (by simp)) c).isLimitMapConeEquiv\n        h\u03c0)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  classical\n  cases nonempty_fintype \u03b9\n  apply IsVanKampenColimit.of_iso _ (hc.coconePointUniqueUpToIso hc)\n  apply FinitaryExtensive.finiteCoproductsIsVanKampen\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  have := FinitaryExtensive.van_kampen' \u03b9 hc; exact this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  apply isVanKampenColimitOfFiniteCoproducts\n  exact \u27e8\u03b9, inferInstance, F, hc\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  obtain \u27e8l, hl\u27e9 := FinitaryExtensive.fin_coproduct_is_van_kampen _ hc\n  exact \u27e8l, hl.isVanKampenColimit\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  cases nonempty_fintype \u03b9\n  exact hc.isVanKampenColimit\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  apply isVanKampenColimitOfFiniteCoproducts\n  apply FinitaryExtensive.finiteCoproductsIsVanKampen\n  exacts [hc, inferInstance]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  cases nonempty_fintype \u03b9\n  exact FinitaryExtensive.isVanKampenColimit_finiteCoproducts F hc\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  fapply isVanKampenColimitOfFiniteCoproduct (C := C) hc (r := Sum.inr)\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  apply IsVanKampenColimit.of_iso _ (IsColimit.coconePointUniqueUpToIso hc\n    (FinitaryExtensive.finiteCoproductsIso hc).inv)\n  exact FinitaryExtensive.finiteCoproductsIsVanKampen _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  let eqv : \u03b9 \u2243 Fin (Fintype.card \u03b9) := Fintype.equivFin \u03b9\n  apply IsVanKampenColimit.of_iso _ (hc.whiskerEquiv eqv.symm)\n  convert FinitaryExtensive.isVanKampen_finiteCoproducts_of_equiv\n    (Discrete.sumInl : Discrete (ULift (Fin (Fintype.card \u03b9))) \u2964 Discrete \u03b9)\n    (Discrete.sumInr : Discrete (ULift (Fin (Fintype.card \u03b9))) \u2964 Discrete \u03b9)\n    (Discrete.equivalence (ULift.upEquiv.trans eqv)) _ (coproductIsCoproduct _)\n  apply Discrete.ext\n  rintro (a | b)\n  \u00b7 rfl\n  \u00b7 exact Fintype.card_fin (Fintype.card \u03b9)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  apply isVanKampenColimit_of_finiteCoproducts\n  assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  revert hc\n  revert F c\n  intro F c hc\n  revert \u03b9\n  intro \u03b9\n  apply Exists.elim (@FinitaryExtensive.finite_coproduct_colimit _ _ _ _)\n  intro \u03b9' _\n  intro h\n  have h' := h\n  cases h'\n  rw [h.choose_spec]\n  exact IsColimit.isVanKampenColimit _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  have := fun i : \u03b9 => FinitaryExtensive.van_kampen' F (fun i : Discrete \u03b9 => IsTerminal.isInitial)\n  refine IsVanKampenColimit.of_isoStableUnderBaseChange (isVanKampenColimitOfIsColimit _ hc) ?_\n  apply NatIso.isIso_of_isIso_app\n  rintro \u27e8i\u27e9\n  dsimp only [Discrete.functor_obj, Discrete.functor_map] at *\n  infer_instance\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  apply IsVanKampenColimit.of_iso _ (hc.uniq)\n  infer_instance\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  classical\n    cases nonempty_fintype \u03b9\n    have := FinitaryExtensive.finiteCoproducts\n    apply IsVanKampenColimit.of_iso _ (getModelForObject C (Discrete.functor F.obj) c.pt)\n      (Classical.choose_spec (getModelForObject_spec C (Discrete.functor F.obj) c.pt))\n    apply IsVanKampenColimit.of_iso _ (getModelForObject C (Discrete.functor F.obj) c.pt)\n      (Classical.choose_spec (getModelForObject_spec C (Discrete.functor F.obj) c.pt))\n    infer_instance\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  apply FinitaryExtensive.is_van_kampen (f := c) (hc := hc)\n  infer_instance\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  apply FinitaryExtensive.isVanKampenColimit\n  intro \u03b9' F' c' f hf hc'\n  have : F' = F := by\n    apply Functor.hext\n    \u00b7 rintro i\n      rw [Discrete.ext_iff]\n      rfl\n    \u00b7 rintro i j f'\n      rfl\n  cases this\n  rw [hc] at hc'\n  apply hc'.uniq\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  match \u03b9, hc with\n  | _, \u27e8fun _ => FinitaryExtensive.vanKampen_finiteCoproducts _\u27e9 =>\n    infer_instance\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  cases nonempty_fintype \u03b9\n  exact FinitaryExtensive.isVanKampenColimit_finiteCoproducts _ hc\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  revert F\n  revert hc\n  revert c\n  revert F\n  intro F c hc \u03b9 h\u03b9\n  cases nonempty_fintype \u03b9\n  apply (FinitaryExtensive.vanKampen _ hc)\n  intro \u03b9 F\n  haveI : Finite (Discrete \u03b9) := inferInstance\n  exact FinitaryExtensive.finiteCoproducts_of_finite \u03b9 F\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  obtain \u27e8_, -, rfl\u27e9 := FinitaryExtensive.vanKampenColimit_has_finite_coproducts F hc\n  infer_instance\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  revert c hc\n  intro c hc\n  cases nonempty_finite_same \u03b9\n  apply FinitaryExtensive.isVanKampenColimit_finiteCoproducts\n  exact hc\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem FinitaryExtensive.isVanKampen_finiteCoproducts [FinitaryExtensive C] {\u03b9 : Type*}\n    [Finite \u03b9] {F : Discrete \u03b9 \u2964 C} {c : Cocone F} (hc : IsColimit c) : IsVanKampenColimit c := by\n  cases nonempty_fintype \u03b9\n  exact FinitaryExtensive.isVanKampenColimit_finiteCoproducts F hc\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  norm_cast\n  simp [h\u03b8]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos]\n  field_simp [h\u03b8]\n  simp_rw [sin_eq_zero_iff]\n  simp_rw [cos_eq_zero_iff]\n  constructor <;> intro h <;> obtain \u27e8k, hk\u27e9 := h <;> use k <;> simp [hk]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, \u2190 Complex.cos_eq_zero_iff, \u2190 mul_right_inj' (two_ne_zero' \u2102)]\n  simp [h\u03b8, eq_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  simp [h\u03b8, mul_comm, exists_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  simp only [tan_eq_sin_div_cos, h\u03b8, div_eq_zero_iff, push_neg, sin_eq_zero_iff]\n  constructor\n  next =>\n    rintro \u27e8k, rfl\u27e9\n    exact \u27e8k, by rw [mul_comm]\u27e9\n  next =>\n    rintro \u27e8k, rfl\u27e9\n    use k\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  simp [tan_eq_sin_div_cos, h\u03b8, Real.sin_eq_zero_iff, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  simp only [tan_eq_sin_div_cos, h\u03b8, div_eq_zero_iff, sin_eq_zero_iff]\n  constructor <;> rintro \u27e8k, rfl\u27e9 <;> use k <;> simp [h\u03b8]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  simp [cos_eq_zero_iff, h\u03b8, mul_comm, exists_mul_left_eq_mul_right_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  simp only [tan_eq_sin_div_cos, h\u03b8, div_eq_zero_iff, sin_eq_zero_iff, exists_eq_left, exists_eq_right]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  simp [h\u03b8, cos_eq_zero_iff, mul_comm]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  simp [tan_eq_zero_iff, h\u03b8]\n  constructor <;> intro <;> tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos]\n  constructor <;> intro h <;> field_simp [h\u03b8] at h <;> simpa [h\u03b8] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  simp [h\u03b8, sin_eq_zero_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  simp [h\u03b8, sin_eq_zero_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  simp [h\u03b8, sin_eq_zero_iff, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos]\n  field_simp [h\u03b8]\n  constructor\n  next =>\n    rintro h\n    use 0\n    simpa using h\n  next =>\n    rintro \u27e8k, rfl\u27e9\n    rw [sin_int_mul_pi]\n    simp [h\u03b8]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_zero_iff]\n  constructor\n  next =>\n    rintro \u27e8k, rfl\u27e9\n    use k\n  next =>\n    rintro \u27e8k, rfl\u27e9\n    use k\n    simp [Int.cast_inj]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  simp only [tan_eq_sin_div_cos, h\u03b8, div_eq_zero_iff, sin_eq_zero_iff]\n  constructor <;> rintro \u27e8k, rfl\u27e9 <;> use k <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  push_neg\n  constructor <;> rintro \u27e8k, hk\u27e9 <;> use k <;> rw [\u2190 hk]\n  <;> field_simp [h\u03b8]\n  <;> ring\n  <;> apply cos_ne_zero_of_mem_Icc <;>\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  norm_cast\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  simp [tan_eq_zero_iff, h\u03b8, div_eq_iff, mul_comm, exists_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  simp [h\u03b8, sin_eq_zero_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, \u2190 Complex.sin_eq_zero_iff, mul_comm]\n  simp [h\u03b8, eq_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan, div_eq_zero_iff, \u2190 Complex.sin_eq_zero_iff] <;> simp_all [Complex.cos_eq_zero_iff]\n  <;> (try ring_nf) <;> (try linarith) <;> (try linarith) <;> (try linarith) <;> (try linarith)\n  <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  simp_rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff, h\u03b8]\n  simp [Complex.cos, h\u03b8]\n  constructor <;> rintro \u27e8k, rfl\u27e9 <;> use k <;> simp [Complex.cos, Complex.sin]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  simp only [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff, cos_eq_zero_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  refine' \u27e8fun h => _, fun \u27e8k, hk\u27e9 => by rw [hk, tan_eq_zero_iff.mpr]; exact \u27e8k, rfl\u27e9\u27e9\n  refine' \u27e8\u03b8 / \u03c0, _\u27e9\n  field_simp [h\u03b8] at h \u22a2\n  rw [\u2190 Complex.cos_eq_zero_iff] at h\n  simpa [h] using Complex.cos_eq_zero_iff.mp h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  norm_cast\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos]\n  constructor <;> intro h\n  next =>\n    rw [div_eq_zero_iff] at h\n    obtain \u27e8h1, h2\u27e9 := h\n    rw [sin_eq_zero_iff] at h1\n    obtain \u27e8k, hk\u27e9 := h1\n    use k\n    rw [eq_comm, \u2190 sub_eq_zero]\n    have : |(k : \u2102) * \u03c0| = |(k : \u2102) * \u03c0| := rfl\n    rw [\u2190 this]\n    rw [\u2190 ofReal_inj] at hk\n    rw [ofReal_mul, ofReal_intCast, ofReal_mul, ofReal_intCast] at hk\n    rw [\u2190 Complex.abs_ofReal, \u2190 Complex.abs_ofReal] at hk\n    rw [Complex.abs_mul, Complex.abs_intCast, Complex.abs_mul, Complex.abs_intCast] at this\n    norm_cast at this\n    rw [Complex.abs_of_nonneg (le_of_lt pi_pos)] at this\n    rw [Complex.abs_of_nonneg (le_of_lt pi_pos)] at hk\n    norm_cast at hk\n    rw [\u2190 Complex.ofReal_inj] at hk\n    rw [Complex.ofReal_mul, Complex.ofReal_intCast, Complex.ofReal_mul, Complex.ofReal_intCast] at hk\n    norm_cast at hk\n    rw [\u2190 Complex.ofReal_inj] at hk\n    rw [Complex.ofReal_mul, Complex.ofReal_intCast, Complex.ofReal_mul, Complex.ofReal_intCast] at hk\n    norm_cast at hk\n    linarith\n  next =>\n    obtain \u27e8k, hk\u27e9 := h\n    rw [eq_comm] at hk\n    rw [\u2190 hk, tan_eq_sin_div_cos, sin_int_mul_pi, cos_int_mul_pi]\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  norm_cast\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  simp only [tan, h\u03b8, div_eq_zero_iff, mul_eq_zero, exists_or, exists_eq_left, exists_eq_right,\n    sin_eq_zero_iff, cos_eq_zero_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem tan_eq_zero_iff' {\u03b8 : \u2102} (h\u03b8 : cos \u03b8 \u2260 0) : tan \u03b8 = 0 \u2194 \u2203 k : \u2124, k * \u03c0 = \u03b8 := by\n  rw [tan_eq_sin_div_cos, div_eq_zero_iff, sin_eq_zero_iff]\n  simp [h\u03b8, sin_eq_zero_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' \u27e8fun H i hi => IsCoprime.prod_left H hi, fun H => _\u27e9\n  refine' IsCoprime.prod_left fun i hi => H i (mem_of_mem_filter hi)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine \u27e8fun h i hi => ?_, fun h => prod_mem_cancel_left hi fun j hj => ?_\u27e9\n  exact IsCoprime.prod_left _ _ _ h i hi\n  exact IsCoprime.prod_left _ _ _ (h i hi) j hj\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' Finset.induction_on t (by simp) fun b t hbt ih => _\n  simp only [Finset.prod_insert hbt]\n  rw [IsCoprime.mul_left_iff, ih, Finset.forall_mem_insert]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' Finset.induction_on t (by simp) fun b t hbt ih => _\n  rw [Finset.prod_insert hbt]\n  simp only [Finset.forall_mem_insert, ih, IsCoprime.mul_left_iff, and_self_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' Finset.induction_on t (by simp) _\n  intro i s hi ih\n  simp only [hi, Finset.prod_insert, Finset.forall_mem_insert] at ih \u22a2\n  constructor\n  \u00b7 intro h\n    constructor\n    \u00b7 exact IsCoprime.prod_left _ fun j hj => by\n        rwa [Finset.mem_singleton.1 (Finset.mem_insert_of_mem hj)]\n    \u00b7 exact h.of_prod_left\n  \u00b7 intro h\n    exact (IsCoprime.prod_left _ fun j hj => by\n        rwa [Finset.mem_insert.mp (Finset.mem_insert_of_mem hj)]).mul_left (h.1)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  induction t using Finset.induction <;> simp [*]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  induction t using Finset.induction <;> simp [Nat.IsCoprime, *]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' \u27e8fun h i hi => h.of_prod_left _ hi, fun h => _\u27e9\n  obtain \u27e8u, hu\u27e9 := Finset.prod_induction _ _ (fun a => IsCoprime a x)\n    (fun a b => IsCoprime.mul_left) (fun a => (IsCoprime.prod_right <| t.erase_subset hi).symm) h\n  rw [\u2190 hu]\n  exact Finset.prod_erase_mul _ _ _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine \u27e8fun h i hi => ?_, fun h => prod_left (fun i hi => (h i hi).symm) \u27e9\n  rw [\u2190 prod_erase_mul _ _ hi]\n  exact IsCoprime.mul_left (h.of_prod_left _) (h.of_prod_left _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' \u27e8fun h i hi => _, fun h => _\u27e9\n  exact IsCoprime.prod_left h i hi\n  exact IsCoprime.prod_left_iff.mpr h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' \u27e8fun h i hi => _, IsCoprime.prod_left\u27e9\n  rw [\u2190 Finset.prod_erase_mul _ _ hi]\n  exact IsCoprime.mul_left (IsCoprime.prod_left_iff.1 h _ (Finset.mem_erase_of_ne hi)) (s i)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' Finset.induction_on t (by simp) fun a t hat ih => _\n  rw [Finset.prod_insert hat, IsCoprime.mul_left_iff, ih]\n  simp_rw [Finset.forall_mem_insert, IsCoprime.comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine \u27e8fun h i hi \u21a6?_, fun h \u21a6?_\u27e9\n  exact IsCoprime.prod_left_iff.mp h i hi\n  simp_rw [IsCoprime.prod_left_iff] at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' \u27e8fun h i hi => h i hi rfl, fun h => _\u27e9\n  induction' t using Finset.induction_on with b t hbt iht\n  \u00b7 simp_rw [Finset.prod_empty, IsCoprime.one_left_iff] at h \u22a2\n    exact fun _ => h\n  rw [Finset.prod_insert hbt]\n  exact (h b (Finset.mem_insert_self _ _)).mul (iht fun i hi => h i (Finset.mem_insert_of_mem hi))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' \u27e8fun h i hi => h.of_prod_left hi, fun h => _\u27e9\n  rw [IsCoprime, \u2190 Finset.prod_erase_mul _ _ hi, mul_comm]\n  exact (h _ <| Finset.mem_erase_of_ne hi).mul_left (h _ hi)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' Finset.induction_on t (by simp) fun b t hbt ih => _\n  simp only [Finset.prod_insert hbt]\n  rw [\u2190 ih]\n  exact \u27e8fun h i hi => IsCoprime.prod_left_iff.1 h i hi, fun h => IsCoprime.prod_left_iff.2 h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' Finset.induction_on t (iff_of_true isCoprime_one_left fun _ _ => isCoprime_one_left) _\n  intro b t hbt ih\n  simp only [Finset.prod_insert hbt, Finset.forall_mem_insert, ih]\n  exact \u27e8fun h => \u27e8h.of_prod_left, h.of_prod_right\u27e9, fun h => h.1.prod_left h.2.1\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine \u27e8fun h i hi => ?_, fun h => prod_dvd_and_dvd_of_dvd_prod i hi (fun i _ => by simpa)\u27e9\n  exact h.of_prod_left \u27e8i, hi, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  induction t using Finset.induction_on <;> simp_all [Nat.coprime_prod_left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  classical\n  refine' \u27e8fun h i hi => h i hi, fun h => _\u27e9\n  rw [isCoprime_iff_exists]\n  apply Exists.imp\n  intro a ha\n  rw [isCoprime_iff_exists] at h\n  obtain \u27e8b, hb\u27e9 := h\n  refine' \u27e8a * b, _\u27e9\n  simp_rw [Finset.mul_prod_erase _ _ hi, mul_comm (s i), mul_assoc, \u2190 ha, \u2190 hb, mul_comm b]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' \u27e8fun h i hi => h.of_prod_left hi, fun h => _\u27e9\n  rw [isCoprime_iff_gcd_eq_one]\n  refine' (Nat.dvd_one : \u220f i \u2208 t, s i \u2223 1).trans\n    (Finset.prod_dvd_prod_of_subset_of_dvd (Finset.subset_univ t) fun i _ => h i)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine \u27e8fun h i hi => ?_, fun h => ?_\u27e9\n  exact IsCoprime.prod_left hi h\n  exact IsCoprime.prod_left_iff.mpr h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' \u27e8fun h i hi => h.of_prod_left i hi, fun h => _\u27e9\n  exact IsCoprime.prod_left fun i hi => h i (f.mem_range_self i)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine \u27e8fun h i hi => ?_, fun h => prod_dvd_and_dvd_of_dvd_prod h fun i hi => (h i hi).dvd\u27e9\n  obtain \u27e8a, b, ab\u27e9 := h\n  exact \u27e8a, b, Finset.dvd_prod_of_mem _ hi ab\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' \u27e8fun h i hi => h.of_prod_left hi, fun h => _\u27e9\n  refine' Finset.induction_on t (fun _ => isCoprime_one_left) fun b t hbt ih => _\n  rw [Finset.prod_insert hbt]\n  exact (h b (Finset.mem_insert_self _ _)).mul (ih fun i hi => h i (Finset.mem_insert_of_mem hi))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine \u27e8fun h i hi => ?_, fun h => prod_dvd_of_dvd_mem_finset fun i hi => (h i hi).dvd\u27e9\n  rw [\u2190 Finset.prod_erase_mul _ _ hi, IsCoprime, mul_dvd_mul_left] at h\n  exact h.of_mul_right\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' Finset.induction_on t (by simp) _\n  intro b t hbt ih\n  simp only [Finset.prod_insert hbt, Finset.forall_mem_insert, ih]\n  exact \u27e8fun h => \u27e8h.1, IsCoprime.prod_left h.2\u27e9, fun h => \u27e8h.1, IsCoprime.prod_left h.2\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' \u27e8fun h i hi => h.of_prod_left hi, fun h => _\u27e9\n  rw [IsCoprime]\n  rw [isUnit_iff_exists_inv]\n  cases' h with h h\n  suffices \u2203 y, (\u220f i \u2208 t, s i) * y = 1 by\n    exact \u27e8y, by simp_all [mul_comm]\u27e9\n  cases' t with i_fst t_tail; \u00b7 use 1; simp\n  cases' t_tail with i_snd t_tail; \u00b7 simp at h; use h; simp\n  rcases h i_fst (by simp) with \u27e8y_fst, h_fst\u27e9\n  rcases h i_snd (by simp) with \u27e8y_snd, h_snd\u27e9\n  simp_all\n  use y_fst * y_snd\n  rw [mul_assoc]\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' Finset.induction_on t (iff_of_true isCoprime_one_left fun _ _ => isCoprime_one_left) _\n  intro b t hbt ih\n  simp only [Finset.prod_insert hbt, IsCoprime, dvd_mul_left]\n  exact \u27e8fun h i hi => (h.of_mul_left _).imp_right (ih.forall_iff.mp \u27e8i, hi, dvd_refl _\u27e9), fun h =>\n    (IsCoprime.prod_left ih).2 fun i hi => (h i hi).mul_left_iff.mp (hbt.symm \u25b8 dvd_refl _)\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' Finset.induction_on t (by simp) fun b t hbt ih => _\n  rw [Finset.prod_insert hbt]\n  simp [ih, IsCoprime.mul_left_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' \u27e8fun h i hi => _, fun h => _\u27e9\n  exact IsCoprime.prod_left _ hi h\n  exact IsCoprime.prod_left_iff.mpr h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem IsCoprime.prod_left_iff : IsCoprime (\u220f i \u2208 t, s i) x \u2194 \u2200 i \u2208 t, IsCoprime (s i) x := by\n  refine' Finset.induction_on t (by simp) fun b t hbt ih => _\n  simp only [Finset.prod_insert hbt, Finset.forall_mem_insert, ih]\n  rw [isCoprime_mul_left_iff, and_congr_right_iff]\n  intro h\n  rw [isCoprime_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  induction n <;> simp_all [W_ , Nat.pow_succ, mul_comm, Nat.succ_eq_add_one]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_expand]\n  congr 1\n  simp [ZMod, Fin.val_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 expand_contract p, \u2190 contract_expand p, \u2190 expand_contract p]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_expand, expand_char p (W_ (ZMod (p ^ (n + 1))) n)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  simp only [wittPolynomial, map_wittPolynomial, coe_expand, RingHom.coe_comp]\n  apply MvPolynomial.map_injective (Int.castRingHom (ZMod (p ^ (n + 1)))) Int.cast_injective\n  simp only [Int.cast_injective, Int.cast_pow, Int.cast_add, Int.cast_one, Int.cast_mul]\n  rw [expand_unique]\n  simp [WittVector.expand_charP]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_expand (Int.castRingHom <| ZMod (p ^ (n + 1))) p\n      (wittPolynomial p \u2124 (n + 1))]\n  rw [\u2190 map_wittPolynomial (Int.castRingHom <| ZMod (p ^ (n + 1)))\n      (by simp)]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 iterate_comp_exp_charP_X_add_C (ZMod (p ^ (n + 1))) p (n + 1)]\n  congr 1\n  simp [Finset.sum_range_succ, expand_X, \u2190 pow_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_wittPolynomial (Int.castRingHom (ZMod (p ^ (n + 1)))) p (n + 1),\n    \u2190 map_wittPolynomial (Int.castRingHom (ZMod (p ^ (n + 1)))) p n]\n  congr\n  simp only [Int.cast_pow, Int.cast_add, map_expand]\n  apply eval\u2082Hom_congr rfl _ rfl\n  intros\n  simp only [map_natCast, Int.cast_natCast, AlgHom.commutes, Int.cast_pow]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  have := congr_arg (eval 0) (wittPolynomial_zmod_self p (n + 1))\n  simpa [\u2190 expand_pow] using this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_expand, expand_wittPolynomial, \u2190 RingHom.map_pow, pow_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  simp only [W_pow_eq_wittPolynomial, Fin.val_succ]\n  apply wittPolynomial_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [expand_X, add_comm_eq_sub_right, \u2190 tsub_eq_zero_iff_le, \u2190 natCast_inj_iff, natCast_zero]\n  apply Nat.le_of_dvd\n  apply wittPolynomial_dvd_wittPolynomial_sub_one\n  simp only [succ.injEq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_wittPolynomial (Int.castRingHom (ZMod (p ^ (n + 1)))) p (n + 1), wittPolynomial_map_eq_wittPolynomial]\n  rw [\u2190 map_wittPolynomial (Int.castRingHom (ZMod (p ^ (n + 1)))) p n, wittPolynomial_map_eq_wittPolynomial]\n  simp [expand_wittPolynomial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 frobenius_wittPolynomial]\n  simp only [AlgHom.map_wittPolynomial, \u2190 ZMod.cast_eq_aeval_self, map_wittPolynomial,\n    ZMod.castHom_self_comp_castHom]\n  congr 1\n  simp only [eq_self_iff_true, heq_iff_eq, true_and]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 wittPolynomial_zmod_eq_wittPolynomial, \u2190 wittPolynomial_zmod_eq_wittPolynomial]\n  exact wittPolynomial_self (p := ZMod (p ^ (n + 1))) (k := n)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_expand]\n  congr\n  simp [mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  simp [prime_pow_dvd_iff_le (p := p) (k := n + 1), tsub_le_iff_right]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  induction' n with n hn\n  simp\n  rw [wittPolynomial_succ, expand_succ, hn]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_expand, map_wittPolynomial, map_wittPolynomial]\n  simp_rw [expand_X, Nat.cast_ofNat]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_wittPolynomial_hom (ZMod.castHom (dvd_pow_self p (Nat.succ_ne_zero n)))]\n  simp [W_]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_expand, expand_wittPolynomial, map_expand]\n  congr 1\n  rw [pow_succ']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  cases n\n  rw [add_comm]\n  simp [W_]\n  rw [add_comm]\n  simp [W_]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  simp only [map_wittPolynomial, Int.cast_ofNat]\n  apply wittPolynomial_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [WittVector.wittPolynomial, WittVector.wittPolynomial]\n  congr 1\n  simp [Prime.neg_one_pow]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  cases n\n  rfl\n  simp only [add_zero, pow_one, pow_succ, pow_zero, Nat.cast_one, one_mul]\n  have := congr_arg (eval 0) (wittPolynomial_exp_p_sub_one (ZMod (p ^ (n + 1))) (n + 1))\n  simpa [mul_comm, expand_X] using this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_wittPolynomial p (Int.castRingHom (ZMod (p ^ (n + 1)))) (n + 1), wittPolynomial_int_cast,\n    expand_map, \u2190 map_expand, wittPolynomial_zmod_self]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 frobenius_add_charP]\n  congr 1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_expand]\n  congr 1\n  simp [p_zpow]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 wittPolynomial_cast (F := \u211a) (k := p ^ (n + 1))]\n  congr 1\n  simp [pow_succ']\n  rw [cast_pow, cast_p]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_expand, \u2190 hom_map_expand, eq_intCast, map_wittPolynomial]\n  simp [expand_X]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem wittPolynomial_zmod_self (n : \u2115) :\n    W_ (ZMod (p ^ (n + 1))) (n + 1) = expand p (W_ (ZMod (p ^ (n + 1))) n) := by\n  rw [\u2190 map_wittPolynomial (Int.castRingHom (ZMod (p ^ (n + 1)))) n p]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h; apply Nat.le_of_dvd\n  <;> linarith [Nat.pos_of_mem_divisors h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  cases' h with h\u2080 h\u2081\n  exact Nat.le_of_dvd (Nat.pos_of_ne_zero h\u2080) h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  exact (le_of_dvd (Nat.pos_of_ne_zero (Nat.ne_of_gt (Nat.pos_of_mem_divisors h)))\n    (Nat.dvd_of_mem_divisors h))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  exact (Finset.mem_filter.mp h).right\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  simp [divisors] at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  simp [divisors] at h\n  exact (Nat.le_of_dvd (Nat.pos_of_ne_zero (Nat.ne_zero_of_mem_divisors h)) (Nat.dvd_of_mem_divisors h))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h; exact le_of_dvd (nat.pos_of_mem_divisors h) (dvd_of_mem_divisors h)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h;\n  cases' h with k hk;\n  cases' hk with hk hk;\n  subst hk;\n  apply Nat.le_of_dvd (Nat.pos_of_ne_zero (Nat.ne_of_gt (Nat.lt_of_le_of_lt (Nat.zero_le _)\n    (Nat.lt_succ_self _)))) (Nat.dvd_of_mul_right_eq _);\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h; exact\n    Nat.le_of_dvd (Nat.pos_of_ne_zero (Nat.ne_of_mem_divisors h)) (Nat.dvd_of_mem_divisors h)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  simp_all\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  simp_all\n  exact mem_filter.mp h |>.right\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h; apply Nat.le_of_dvd; apply Nat.pos_of_ne_zero; intro hm; rw [hm] at h; simp at h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h;\n  apply Nat.le_of_dvd (Nat.pos_of_ne_zero (Nat.ne_zero_of_mem_divisors h)) (Nat.dvd_of_mem_divisors h)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h;\n  simp [divisors] at h;\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  simp_all [divisors]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h; cases' h with h\u2080 h\u2081\n  exact Nat.le_of_dvd (Nat.pos_of_ne_zero h\u2080) h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  simp only [mem_filter, mem_range_succ_iff, Finset.mem_range] at h\n  exact h.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  apply Nat.le_of_dvd\n  exact Nat.pos_of_ne_zero (Nat.ne_of_mem_divisors h)\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  trivial\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h; apply Nat.le_of_dvd (Nat.pos_of_ne_zero (Nat.ne_of_mem_divisors h))\n  exact Nat.dvd_of_mem_divisors h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  exact (Finset.mem_filter.mp h).right\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  exact List.le_of_mem_factors h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  cases' h with h\u2080 h\u2081\n  exact Nat.le_of_dvd (Nat.pos_of_ne_zero h\u2080) h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  simp_all\n  exact le_of_mem_factors h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  cases' h with k hk\n  cases' hk with hk hk\n  rw [hk]\n  apply Nat.le_of_dvd\n  apply Nat.pos_of_ne_zero\n  intro h\n  rw [h] at hk\n  simp at hk\n  linarith\n  exact hk\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h; apply Nat.le_of_dvd (Nat.pos_of_ne_zero (Nat.ne_of_mem_divisors h))\n  exact Nat.dvd_of_mem_divisors h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  simp_all\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  exact List.le_of_mem_get? h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  apply Nat.le_of_dvd\n  exact Nat.pos_of_mem_divisors h\n  exact Nat.dvd_of_mem_divisors h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h; exact (Nat.le_of_dvd (Nat.pos_of_mem_divisors h) (Nat.dvd_of_mem_divisors h))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  simp only [Finset.mem_filter, Finset.mem_range, Finset.mem_range_succ_iff, true_and] at h\n  exact h.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem divisor_le {m : \u2115} : n \u2208 divisors m \u2192 n \u2264 m := by\n  intro h\n  rw [divisors] at h\n  simp only [Finset.mem_filter, Finset.mem_range, Finset.mem_range_succ_iff] at h\n  exact h.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [h.isoPullback, Iso.symm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [IsPullback.isoPullback]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [isoPullback]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  have := h.isoPullback.hom_inv_id_assoc (pullback.snd)\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp only [isoPullback, Iso.trans_hom, pullbackSymmetry_hom, Iso.symm_hom, Iso.trans_inv,\n    Category.assoc, pullbackIsoPullback_inv, pullback.lift_snd]\n  simp only [Limits.PullbackCone.e_snd, IsPullback.cone_snd, PullbackCone.p_snd,\n    PullbackCone.mk_pt, PullbackCone.mk_\u03c0_app, Category.assoc, Iso.trans_hom, \u2190\n    Category.assoc_assoc, Iso.trans_inv, Iso.symm_hom, pullbackSymmetry_hom, Iso.trans_inv,\n    Category.assoc, pullbackIsoPullback_inv, pullback.lift_snd]\n  simp only [Limits.PullbackCone.e_snd, IsPullback.cone_snd, PullbackCone.p_snd,\n    PullbackCone.mk_pt, PullbackCone.mk_\u03c0_app, Category.assoc, Iso.trans_hom, \u2190\n    Category.assoc_assoc, Iso.trans_inv, Iso.symm_hom, pullbackSymmetry_hom, Iso.trans_inv,\n    Category.assoc, pullbackIsoPullback_inv, pullback.lift_snd]\n  apply pullback.lift_snd\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [h.isoPullback]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [h.isoPullback]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  have := h.isoPullback.hom_inv_id\n  simp only [\u2190 this, Category.assoc, Iso.hom_inv_id_assoc, Iso.hom_inv_id, Category.id_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [h.isoPullback]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [IsPullback.isoPullback]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [IsPullback.isoPullback, pullback.snd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp only [isoPullback, Iso.trans_hom, Iso.symm_hom, Iso.refl_hom,\n    asIso_hom, mk_hom, CommRingCat.ofHom_comp, CommRingCat.ofHom_id, Category.comp_id,\n    Subsingleton.elim, eqToHom_refl, Category.comp_id, Category.assoc,\n    Subsingleton.elim]\n  simp [asIso_hom]\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp only [IsPullback.isoPullback, IsPullback.lift, pullback.lift, pullback.snd, pullback.fst_assoc,\n    Category.assoc]\n  rw [Iso.hom_inv_id_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp only [isoPullback, Iso.trans_hom, asIso_inv, Iso.symm_hom, IsPullback.conePointUniqueUpToIso_hom_inv,\n    IsPullback.conePointUniqueUpToIso_inv_hom, assoc, IsPullback.isoOfIsomorphisms_hom_assoc,\n    IsPullback.isoOfIsomorphisms_inv_assoc_assoc, IsPullback.isoOfIsomorphisms_inv_assoc,\n    IsPullback.isoOfIsomorphisms_hom_assoc_assoc]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [isoPullback, pullback.lift, h.w]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp only [IsPullback.isoPullback, Iso.trans_hom, Iso.app_hom, Iso.refl_hom, id_comp,\n    Iso.symm_hom, NatIso.spec_inv_app, NatIso.is_iso_inv_app, IsPullback.cone,\n    Limits.Pullback.cone, and_true]\n  simp only [const_app_eq_of_natIso, Category.comp_id]\n  apply pullback.hom_ext <;> simp [h.w]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  rw [\u2190 Iso.eq_comp_inv]\n  simp [h.isoPullback]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [isoPullback, pullback.lift, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [h.isoPullback, pullback.snd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [h.isoPullback, pullback.snd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [Iso.comp_inv_eq, IsPullback.isoPullback, pullback.lift_snd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp only [isoPullback, Iso.trans_hom, asIso_hom, Iso.symm_hom,\n    pullbackIsPullback_conePointUniqueUpToIso_hom_comp]\n  apply pullback.hom_ext <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [pullback.snd, \u2190 Iso.eq_comp_inv]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simpa using h.isoPullback.inv_snd\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  dsimp [isoPullback, IsPullback.cone]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  let I := h.isoPullback\n  dsimp [I]\n  simp only [Iso.trans_hom, Iso.symm_hom, pullback.lift_snd]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  rw [isoPullback, \u2190 Iso.eq_inv_comp]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  have := h.isoPullback.hom_inv_id; simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [isoPullback]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  rw [Iso.comp_inv_eq]\n  simp only [pullback_snd_eq, IsoPullback.inv, IsPullback.lift, IsoPullback.hom,\n    Category.assoc]\n  simp_rw [IsPullback.condition]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  simp [Iso.comp_inv_eq, IsPullback.isoPullback, pullback.lift_snd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isoPullback_hom_snd (h : IsPullback fst snd f g) [HasPullback f g] :\n    h.isoPullback.hom \u226b pullback.snd = snd := by\n  have := h.isoPullback.hom_inv_id.symm\n  rw [Iso.hom_inv_id_assoc] at this\n  simp [this]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, _\u27e9\n  <;> simp [zsmul_eq_mul, Int.cast_mul, mul_div_cancel_left\u2080 _ ha.ne', Int.floor_le, Int.lt_ceil]\n  <;> intro k hk; simp_all only [sub_lt_iff_lt_add', sub_nonneg, Int.cast_add, Int.cast_one,\n    add_le_add_iff_right]\n  <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b\n  refine' \u27e8by\n    norm_num\n    exact \u27e8by linarith [Int.floor_le (g / a)], by linarith [Int.lt_floor_add_one (g / a)]\u27e9,\n    fun k h => by\n    have : 0 < a := ha\n    -- calculate the difference of the floor of (g/a) and k\n    have : (\u230ag / a\u230b : \u03b1) - k \u2264 1 := by\n      nlinarith [Int.lt_floor_add_one (g / a)]\n    have : (\u230ag / a\u230b : \u03b1) - k < 2 := by\n      linarith\n    have : (\u230ag / a\u230b : \u03b1) - k = 0 := by\n      linarith\n    linarith\n  \u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, _\u27e9\n  \u00b7 exact \u27e8by simp [le_floor, div_lt_iff ha], by simp [floor_lt, lt_div_iff ha]\u27e9\n  rintro k \u27e8h\u2081, h\u2082\u27e9\n  exact (floor_eq_iff.mpr \u27e8h\u2081, h\u2082\u27e9).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, fun k hk => _\u27e9\n  \u00b7 simp [ha, Int.floor_le, Int.lt_ceil]\n  \u00b7 have h1 := hk.1\n    have h2 := hk.2\n    have : k = \u230ag / a\u230b := by\n      apply Int.eq_of_sub_eq_zero\n      linarith [Int.sub_floor_div_mul_nonneg g a, Int.sub_floor_div_mul_lt g a]\n    simp [this]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b\n  constructor\n  simp only [and_assoc, and_imp, exists_prop, eq_self_iff_true, true_and_iff]\n  simp [div_lt_iff ha, le_div_iff ha, le_of_lt ha]\n  rintro k hk\n  simp only [and_imp, exists_prop, eq_self_iff_true, true_and_iff] at hk\n  simp [div_lt_iff ha, le_div_iff ha, le_of_lt ha, hk]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, _\u27e9\n  \u00b7 exact \u27e8by rcases le_or_lt 0 (g / a) with hg | hg <;> simp [Int.floor_le, hg, ha.le, Int.le_floor.2 hg], _\u27e9\n    exact (Int.sub_floor_div_mul_nonneg ha _).trans_lt ((Int.sub_floor_div_mul_lt ha _).trans ha)\n  \u00b7 rintro k \u27e8h\u2081, h\u2082\u27e9\n    simp only [sub_eq_iff_eq_add, Int.cast_add, Int.cast_mul, Int.cast_ofNat] at h\u2081 h\u2082\n    have h\u2083 : (k : \u03b1) = \u230ag / a\u230b := by\n      rw [Int.cast_inj]\n      simpa [ha.ne'] using eq_add_of_sub_eq h\u2081\n    rw [h\u2083]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, \u27e8_, _\u230b, fun k h => _\u27e9\u27e9\n  exacts [\u27e8zsmul_nonneg ha.le _, sub_lt_iff_lt_add.mpr (Int.lt_floor_add_one _)\u27e9,\n    by rintro rfl; simp [Int.floor_int_cast, ha.ne']]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b\n  refine' \u27e8by\n    simp_all [Int.floor_eq_iff]\n    constructor <;> linarith\n  , _\u27e9\n  rintro k hk\n  simp_all [Int.floor_eq_iff]\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u2308g / a\u2309\n  simp [ha, le_of_lt ha]\n  constructor\n  <;> intro k h\n  <;> simp_all\n  <;> linarith [Int.lt_ceil.2 h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, fun k hk \u21a6 _\u27e9\n  \u00b7 obtain \u27e8h\u2081, h\u2082\u27e9 := exists_int_int_abs_sub_abs_lt_iff.mp (exists_int_abs_sub_abs_lt_iff.mpr ha)\n    exact \u27e8by linarith, by linarith\u27e9\n  \u00b7 obtain \u27e8h\u2081, h\u2082\u27e9 := hk\n    have h\u2083 := sub_lt_iff_lt_add'.mp h\u2082\n    have h\u2084 := lt_sub_iff_add_lt'.mp h\u2081\n    norm_cast at h\u2083 h\u2084\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b\n  refine' \u27e8by simp [Int.floor_le, Int.lt_ceil, ha.le, Int.cast_nonneg, sub_nonneg],\n    fun k h => by\n    have h1 : g / a - \u230ag / a\u230b \u2264 k := by\n      linarith [h.1]\n    have h2 : k \u2264 g / a := by\n      linarith [h.2]\n    have h3 : g / a - \u230ag / a\u230b = 0 := by linarith\n    have h4 : \u230ag / a\u230b = g / a := by linarith\n    have h5 : (g / a : \u03b1) = \u230ag / a\u230b := by linarith\n    have h6 : k = \u230ag / a\u230b := by linarith\n    exact h6\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, _\u27e9\n  swap\n  \u00b7 rintro _ \u27e8h\u2081, h\u2082\u27e9\n    obtain \u27e8k, rfl\u27e9 := Int.floor_eq_iff.mp rfl\n    exact (Int.cast_inj.mp (by linarith)).symm\n  refine' \u27e8by linarith [Int.floor_le (g / a)], by linarith [Int.lt_floor_add_one (g / a)]\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e80, \u27e8by simp, _\u27e9, _\u27e9\n  exact Int.cast_mono.1 (by linarith)\n  rintro k \u27e8h\u2081, h\u2082\u27e9\n  simpa [ha.ne'] using Int.cast_inj.2 (by linarith)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, _\u27e9\n  \u00b7 norm_num\n    exact \u27e8by linarith [Int.floor_le (g / a)], by linarith [Int.lt_floor_add_one (g / a)]\u27e9\n  \u00b7 exact fun k hk => by\n      have h2 := hk.1\n      have h3 := hk.2\n      norm_num at h2 h3\n      exact by\n        have h4 := Int.floor_le (g / a)\n        have h5 := Int.lt_floor_add_one (g / a)\n        linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, _\u27e9\n  \u00b7 simp [floor_le, ha, div_lt_iff ha]\n  \u00b7 intro k hk\n    simp only [sub_eq_iff_eq_add, sub_eq_iff_eq_add'] at hk\n    rw [\u2190 sub_nonneg] at hk\n    obtain rfl := eq_of_sub_eq_zero (floor_eq_iff.2 \u27e8by linarith, by linarith\u27e9)\n    simpa [ha.ne'] using hk.1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, _\u27e9\n  \u00b7 exact \u27e8by linarith [Int.floor_le (g / a)], by linarith [Int.lt_floor_add_one (g / a)]\u27e9\n  rintro k \u27e8h\u2081, h\u2082\u27e9\n  have h\u2083 : 0 \u2264 g / a - k := by linarith\n  have h\u2084 : g / a - k < 1 := by linarith\n  have h\u2085 : g / a - k = 0 := by linarith\n  have h\u2086 : g / a = k := by linarith\n  have h\u2087 : k = \u230ag / a\u230b := by linarith [Int.floor_eq_iff.mpr \u27e8h\u2086, h\u2084.le\u27e9]\n  exact h\u2087\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, fun k hk => _\u27e9\n  \u00b7 simp [Int.floor_le, Int.lt_floor_add_one, sub_lt_iff_lt_add, add_comm, ha.le]\n  \u00b7 have h := hk.1\n    rw [\u2190 sub_nonneg] at h\n    rw [le_antisymm_iff, Int.le_floor_iff (div_nonneg hk.1.le ha.le)]\n    refine'\n      \u27e8by rw [Int.cast_le]; exact hk.2.le.trans <| by rw [Int.cast_le]; exact h, fun n hn => _\u27e9\n    have : 0 < a := ha\n    rw [le_sub_comm] at hn\n    have h2 := hk.2.trans_le hn\n    rw [\u2190 sub_lt_iff_lt_add] at h2\n    rw [lt_sub_iff_add_lt] at h\n    norm_cast at h2 h\n    rw [\u2190 Int.cast_add] at h2\n    rw [\u2190 Int.cast_add] at h\n    omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b\n  simp [ha, floor_le, le_of_lt, sub_lt_iff_lt_add, Int.cast_add, Int.cast_lt, Int.cast_add,\n    Int.cast_lt, Int.cast_add, Int.cast_lt, Int.cast_add, Int.cast_lt, Int.cast_add, Int.cast_lt]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, \u27e8_, _\u27e9, _\u27e9\n  \u00b7 exact \u27e8by exact?", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b\n  simp [ha, floor_le, le_floor_add_one]\n  intro k hk\n  linarith [mul_le_mul_of_nonneg_left hk.1 (Int.cast_nonneg.2 (Int.ofNat_zero_le _))]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, _\u27e9\n  exact \u27e8by rcases le_total 0 (g / a) with h | h <;> simp [floor_le, ha.le, div_lt_iff ha, h], by\n    rintro k \u27e8h\u2081, h\u2082\u27e9\n    simp_all only [sub_lt_iff_lt_add, zero_lt_iff, add_zero, zero_add, le_div_iff ha,\n      div_lt_iff ha, zero_lt_one, and_imp, zero_lt_two]\n    omega\n  \u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, _\u230b\n  <;> simp [Int.floor_le, Int.lt_floor_add_one, ha, mul_comm]\n  <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, \u27e8_, _\u27e9, _\u27e9\n  \u00b7 exact \u27e8by rcases le_or_lt g a with hg | hg =>\n      [((Int.floor_le (g / a)).trans hg).rfl; ((Int.sub_le _ _).trans_lt (Int.lt_floor_add_one _)).trans_le hg];\n    ((Int.lt_sub_iff_add_lt' (Int.floor_le _)).trans_le (Int.le_of_lt (Int.fract_lt_one _))).trans_le ha\u27e9\n  \u00b7 intro k hk\n    rw [Int.floor_eq_iff, Int.cast_sub, Int.cast_smul, Int.cast_sub, sub_smul, one_smul] at hk\n    exact Int.cast_injective <| by\n      rcases hk with \u27e8h\u2081, h\u2082\u27e9\n      rw [sub_le_iff_le_add, lt_sub_iff_add_lt] at h\u2081 h\u2082\n      linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u2308g / a\u2309, _, _\u27e9\n  \u00b7 refine' \u27e8_, _\u27e9\n    \u00b7 exact Int.le_ceil _\n    \u00b7 exact Int.ceil_lt_add_one _\n  \u00b7 intro k hk\n    have h1 := hk.1\n    have h2 := hk.2\n    rw [\u2190 @Int.cast_lt \u03b1, Int.cast_ceil] at h2\n    omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, _, _\u27e9\n  \u00b7 simp [floor_le, ha, le_of_lt ha]\n  \u00b7 intro k hk\n    simp only [Int.cast_inj] at hk\n    rw [eq_comm, \u2190 sub_eq_zero]\n    have hk' : 0 < a := by linarith\n    have hk'' : 0 \u2264 g - k \u2022 a := by linarith\n    have hk''' : g - k \u2022 a < a := by linarith\n    have hk'''' : \u230ag / a\u230b = k := by\n      apply Int.floor_eq_iff.2\n      constructor\n      \u00b7 linarith\n      \u00b7 linarith\n    rw [hk'''']\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b\n  refine' \u27e8by\n    simp_rw [sub_zsmul]\n    refine' \u27e8_, _\u27e9\n    \u00b7 rw [le_sub_comm, \u2190 zero_sub a]\n      exact (zsmul_le_zsmul_iff ha).mpr (Int.floor_le _)\n    \u00b7 rw [lt_sub_comm, \u2190 neg_sub]\n      exact (zsmul_lt_zsmul_iff ha).mpr (Int.lt_floor_add_one _), _\u27e9\n  intro k hk\n  rw [sub_eq_iff_eq_add] at hk\n  have hk' : 0 < a := ha\n  have hk'' : 0 < g - k \u2022 a := by\n    rw [\u2190 hk, sub_pos]\n    exact lt_add_of_le_of_pos (Int.cast_le.mp hk.1) hk'\n  rw [eq_comm, \u2190 sub_eq_zero]\n  refine' Int.cast_injective.eq_iff.mp (_ : (0 : \u03b1) = _)\n  rw [\u2190 sub_add, add_comm, \u2190 sub_sub, sub_eq_zero, Int.cast_inj]\n  refine' (Int.eq_floor_of_lt _).mp (_ : k = _)\n  \u00b7 rw [\u2190 hk, sub_add_cancel]\n    exact hk''.le\n  \u00b7 rw [Int.cast_sub, sub_lt_iff_lt_add, \u2190 hk, add_comm, sub_add_cancel]\n    exact hk''.trans_le (le_add_of_nonneg_right ha.le)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b, \u27e8by linarith [Int.floor_le (g / a), Int.lt_floor_add_one (g / a)],\n    by linarith [Int.lt_floor_add_one (g / a)]\u27e9\n  rintro k \u27e8h\u2081, h\u2082\u27e9\n  apply (Int.floor_eq_iff (gc := g / a)).2\n  constructor <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b\n  constructor\n  simp [ha.le, ha.le.trans_lt (div_lt_one ha)]\n  exact fun k hk \u21a6 by\n    simp only [\u2190 @sub_eq_iff_eq_add, sub_lt_iff_lt_add', le_sub_iff_add_le] at hk\n    norm_cast\n    rw [Int.floor_le, Int.lt_floor_add_one]\n    exact \u27e8by linarith, by linarith\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b\n  refine' \u27e8by\n    simp_all [Int.floor_eq_iff]\n    linarith, _\u27e9\n  rintro k hk\n  simp_all [Int.floor_eq_iff]\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b\n  refine' \u27e8by\n    simp_all [Int.floor_le, Int.lt_floor_add_one, Int.cast_nonneg, sub_nonneg, sub_lt_iff_lt_add],\n    fun k h => by\n    simpa [sub_eq_iff_eq_add, sub_lt_iff_lt_add, Int.floor_eq_iff] using h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  refine' \u27e8\u230ag / a\u230b, \u27e8_, _\u27e9, _\u27e9\n  \u00b7 rw [sub_nonneg, div_le_iff_of_pos ha]\n    apply Int.floor_le\n  \u00b7 rw [sub_lt_iff_lt_add, lt_div_iff ha, Int.cast_lt]\n    apply Int.lt_floor_add_one\n  rintro k \u27e8h\u2081, h\u2082\u27e9\n  rw [\u2190 @Int.cast_inj \u03b1, Int.cast_floor]\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem existsUnique_zsmul_near_of_pos' {a : \u03b1} (ha : 0 < a) (g : \u03b1) :\n    \u2203! k : \u2124, 0 \u2264 g - k \u2022 a \u2227 g - k \u2022 a < a := by\n  use \u230ag / a\u230b\n  constructor\n  exact \u27e8by linarith [Int.floor_le (g / a), Int.lt_floor_add_one (g / a)], by linarith [Int.floor_le (g / a)]\u27e9\n  rintro k \u27e8h\u2081, h\u2082\u27e9\n  exact (Int.floor_eq_iff.mpr \u27e8by linarith, by linarith\u27e9).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [isUnit_iff_eq_one, one_eq_mk_one]\n    _ \u2194 IsUnit a := associates_mk_one_eq_isUnit\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [isUnit_iff_eq_one, one_eq_mk_one, eq_comm]\n    _ \u2194 IsUnit a := by rw [isUnit_iff_eq_one, isUnit_iff_eq_one, one_eq_mk_one, eq_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff]\n    _ \u2194 IsUnit a := by rw [associated_one_iff_isUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff_associated]\n    _ \u2194 IsUnit a := by rw [associated_one_iff_isUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [\u2190 Associates.one_eq_mk_one, Associates.isUnit_iff]\n    _ \u2194 IsUnit a := by rw [IsUnit.mk0.symm]; exact Iff.rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by simp [IsUnit_iff_eq_one]\n    _ \u2194 IsUnit a := by rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff_associated]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff_associated]\n    _ \u2194 IsUnit a := by rw [associated_one_iff_isUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n        rw [isUnit_iff_eq_one]\n        apply Iff.intro\n        \u00b7 rintro \u27e8u, rfl\u27e9\n          exact show a * u = 1 from Eq.symm (one_mul a)\n        \u00b7 intro h\n          exact \u27e8\u27e8_, h\u27e9, rfl\u27e9\n    _ \u2194 IsUnit a := by\n        rw [isUnit_iff_eq_one]\n        apply Iff.intro\n        \u00b7 intro h\n          exact \u27e8\u27e8_, h\u27e9, rfl\u27e9\n        \u00b7 rintro \u27e8u, rfl\u27e9\n          exact show u * a = 1 from Eq.symm (one_mul a)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_exists_inv]\n      constructor\n      \u00b7 rintro \u27e8b, hb\u27e9\n        rw [\u2190 Associates.mk_mul_mk, hb, Associates.mk_one] at hb\n        exact hb.symm\n      \u00b7 rintro h\n        use 1\n        rw [Associates.mk_one, h]\n    _ \u2194 IsUnit a := by rw [isUnit_iff_exists_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, isUnit_iff_eq_one]\n      exact \u27e8fun h => Associates.mk_eq_one.1 h, fun h => Associates.mk_eq_one.2 h\u27e9\n    _ \u2194 IsUnit a := by rw [isUnit_iff_eq_one, isUnit_iff_eq_one, one_eq_top, eq_comm,\n                            Associates.mk_eq_one, isUnit_iff_eq_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, isUnit_iff_eq_one, right_associated_iff_eq]\n    _ \u2194 IsUnit a := by rw [isUnit_iff_eq_one, isUnit_iff_eq_one, Iff.comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff]\n    _ \u2194 IsUnit a := by rw [isUnit_iff_eq_one, one_eq_mk_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff_associated]\n    _ \u2194 IsUnit a := by rw [associated_one_iff_isUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [\u2190 Associates.isUnit_iff_eq_one]\n    _ \u2194 IsUnit a := Iff.intro\n        (fun h : a ~\u1d64 1 => by\n          have : a = 1 := by\n            apply Eq.symm\n            apply Eq.symm\n            exact h.symm\n          simp [this, IsUnit.one])\n        (fun h : IsUnit a => by\n          have : a = 1 := by\n            apply Eq.symm\n            apply Eq.symm\n            exact h.unit.val_inv\n          simp [this, IsUnit.one])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by simp [IsUnit]\n    _ \u2194 \u2203 b, b * a = 1 := by simp [Associated]\n    _ \u2194 IsUnit a := by simp [IsUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one_of_associated]\n      exact Iff.rfl\n    _ \u2194 IsUnit a := by\n      rw [isUnit_iff_eq_one_of_associated]\n      exact Iff.rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, isUnit_iff_eq_one]\n      exact \u27e8fun h => Associates.mk_eq_mk_iff_associated.1 h, fun h => Associates.mk_eq_mk_iff_associated.2 h\u27e9\n    _ \u2194 IsUnit a := by rw [associated_one_iff_isUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [\u2190 Associates.mk_one, IsUnit.mk_iff]\n    _ \u2194 IsUnit a := by\n      rw [isUnit_iff_exists_inv]\n      constructor\n      \u00b7 rintro \u27e8b, hb\u27e9\n        rw [\u2190 Associates.mk_eq_one, \u2190 Associates.mk_mul_mk, hb, Associates.mk_one]\n        exact Associates.mk_eq_mk_of_associated (associated_of_dvd_dvd\n          (one_dvd _) (one_dvd _))\n      \u00b7 intro h\n        obtain \u27e8b, hb\u27e9 := isUnit_iff_exists_inv.mp h\n        exact \u27e8b, by rw [\u2190 Associates.mk_mul_mk, hb, Associates.mk_one]\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff_associated]\n    _ \u2194 IsUnit a := by rw [associated_one_iff_isUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [IsUnit_iff_eq_one, IsUnit_iff_eq_one]\n      exact Associates.mk_eq_one_iff\n    _ \u2194 IsUnit a := by\n      rw [isUnit_iff_exists_inv]\n      constructor\n      \u00b7 rintro \u27e8c, eq\u27e9\n        use c\n        rw [eq]\n        rfl\n      \u00b7 rintro \u27e8c, eq\u27e9\n        use c\n        rw [eq]\n        rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff]\n    _ \u2194 IsUnit a := by rw [isUnit_iff_eq_one, associated_one_iff_isUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [IsUnit.iff_exists_inv]\n      constructor\n      \u00b7 rintro \u27e8b, hb\u27e9\n        refine' associated_of_dvd_dvd (one_dvd _) (hb \u25b8 dvd_mul_right _ _)\n      \u00b7 intro h\n        exact \u27e8Associates.mk a, (mk_eq_mk_iff_associated _ _).2 h\u27e9\n    _ \u2194 IsUnit a := by simp only [associated_one_iff_isUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, isUnit_iff_eq_one]\n      exact Iff.rfl\n    _ \u2194 IsUnit a := by rw [isUnit_iff_eq_one, isUnit_iff_eq_one, Iff.rfl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff_associated]\n    _ \u2194 IsUnit a := by rw [associated_one_iff_isUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff]\n    _ \u2194 IsUnit a := by rw [isUnit_iff_eq_one, one_eq_mk_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff_associated]\n    _ \u2194 IsUnit a := by rw [associated_one_iff_isUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [IsUnit.mk_iff]\n      exact Iff.rfl\n    _ \u2194 IsUnit a := by\n      rw [\u2190 Associates.one_eq_top]\n      exact Associates.mk_eq_one\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, isUnit_iff_eq_one]\n      exact Associates.mk_eq_one\n    _ \u2194 IsUnit a := by\n      rw [one_eq_mk_one, mk_eq_mk_iff_associated]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff]\n    _ \u2194 IsUnit a := by rw [isUnit_iff_eq_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [isUnit_iff_eq_one, one_eq_mk_one, mk_eq_mk_iff_associated]\n    _ \u2194 IsUnit a := by rw [associated_one_iff_isUnit]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by rw [IsUnit.iff_exists_inv]\n    _ \u2194 \u2203 b, b * a = 1 := Iff.rfl\n    _ \u2194 IsUnit a := by simp [isUnit_iff_exists_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isUnit_mk {a : \u03b1} : IsUnit (Associates.mk a) \u2194 IsUnit a :=\n  calc\n    IsUnit (Associates.mk a) \u2194 a ~\u1d64 1 := by\n      rw [IsUnit_iff_eq_one]\n      constructor\n      \u00b7 intro h; rwa [one_eq_mk_one] at h\n      \u00b7 intro h; rw [h]; exact mk_one\n    _ \u2194 IsUnit a := by\n      rw [isUnit_iff_eq_one]\n      constructor\n      \u00b7 exact fun h => h\n      \u00b7 exact fun h => h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by cases a <;> cases b <;>\n    simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem and_eq_true_eq_eq_true_and_eq_true (a b : Bool) :\n    ((a && b) = true) = (a = true \u2227 b = true) := by\n  cases a <;> cases b <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  rw [Matrix.lieConj, LinearEquiv.trans_apply, LieSubalgebra.mem_lieSpan_singleton]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, linearMap_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, conj_eq_mul_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, Matrix.lieConj_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, Matrix.mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  rw [Matrix.lieConj, LieEquiv.trans_apply, LieEquiv.symm_apply_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, Matrix.mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, Matrix.lieTranspose, Matrix.mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, Matrix.lieConj_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  rw [Matrix.lieConj, LieRing.of_associative_ring_to_endomorphism_apply]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, Matrix.mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, Matrix.mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, invOf_eq_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, LinearEquiv.conj_apply, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, LieRing.of_associative_ring_to_endomorphism]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, Matrix.mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Matrix.lieConj_apply (P A : Matrix n n R) (h : Invertible P) :\n    P.lieConj h A = P * A * P\u207b\u00b9 := by\n  simp [Matrix.lieConj, LinearEquiv.conj_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp only [finSuccEquiv_eq, Polynomial.C_eq_algebraMap, algebraMap_X]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv, Polynomial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv_apply, Polynomial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp only [finSuccEquiv_apply, Fin.castSucc_succ, Polynomial.C_eq_algebraMap, Algebra.id.map_eq_id,\n    RingHom.id_apply, AlgEquiv.coe_trans, Fin.castSucc_zero, AlgEquiv.coe_algHom,\n    AlgEquiv.coe_algHom_refl, Function.comp_apply, AlgEquiv.coe_algHom_comp, Polynomial.map_X,\n    Polynomial.map_C, Polynomial.map_mul, Polynomial.map_add, Polynomial.map_pow, Polynomial.map_neg,\n    Equiv.coe_trans, Equiv.coe_fn_mk, Function.comp_apply, mul_one, add_zero]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp_all [finSuccEquiv, Polynomial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp only [finSuccEquiv_apply, Polynomial.finSuccEquiv_eq, Polynomial.map_X]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp_all [finSuccEquiv, Polynomial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv_X_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp_all [finSuccEquiv, Polynomial.C, Polynomial.X, Polynomial.monomial,\n    Fin.succAbove, Fin.predAbove]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv_apply, Polynomial.C_eq_nat_cast]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv, Polynomial.C, Polynomial.X, Fin.not_lt]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv, Polynomial.C, Polynomial.X]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp_all [finSuccEquiv, Polynomial.C]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv, Polynomial.C]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv, Polynomial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  rw [finSuccEquiv_X, Fin.castSucc_castSucc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv_apply, Polynomial.C]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv, Polynomial.C]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp only [finSuccEquiv_apply, Polynomial.C_eq_algebraMap, X_pow_eq_monomial, one_mul]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv, Polynomial.C, Polynomial.X]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv, Polynomial.C_eq_intCast]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp_all [finSuccEquiv, Polynomial.C, Polynomial.X, Equiv.symm_apply_eq]\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp_all [finSuccEquiv, Polynomial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv, Polynomial.C, Polynomial.X, Fin.succAbove_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  rw [finSuccEquiv_apply]\n  cases j\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  show (Polynomial.mk (Fin.cases Polynomial.C (fun i => Polynomial.C (X i)) j.succ)) = Polynomial.C (X j)\n  simp [Fin.cases_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp only [finSuccEquiv_apply, Polynomial.C_injective.eq_iff, Polynomial.coeff_C_succ,\n    Polynomial.coeff_X_succ, Fin.ext_iff, add_right_eq_self, and_true]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp [finSuccEquiv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finSuccEquiv_X_succ {j : Fin n} : finSuccEquiv R n (X j.succ) = Polynomial.C (X j) := by\n  simp_all [finSuccEquiv, Polynomial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp only [adjMatrix, dotProduct]\n  rw [Finset.sum_filter, Finset.sum_ite_eq']\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp_rw [dotProduct, neighborFinset_eq_filter, Finset.sum_filter]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp_rw [dotProduct, neighborFinset_eq_filter, Finset.sum_filter]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  rw [dotProduct]\n  simp [neighborFinset_eq_filter]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  apply Eq.symm\n  apply Eq.symm\n  simp [dotProduct, neighborFinset_eq_filter, Finset.sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, sum_filter]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  apply Finset.sum_congr rfl\n  intros x hx\n  rw [\u2190 neighborFinset_eq_of_mem hx, Finset.sum_neighbor_finset_eq_sum_neighborSet]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, Finset.sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, Finset.sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  rw [dotProduct]\n  simp [Finset.sum_neighborFinset_eq_sum_neighborSet]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [neighborFinset_eq_filter, dotProduct, sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  rw [adjMatrix, dotProduct]\n  simp_rw [Finset.sum_filter]\n  split_ifs with h <;> simp [h]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp_rw [dotProduct, sum_ite, sum_const, nsmul_eq_mul, mul_boole, \u2190 sum_filter]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp only [adjMatrix_apply, dotProduct, Finset.sum_apply, Pi.one_apply, mul_one,\n    Finset.sum_const, nsmul_eq_mul, mul_comm]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, sum_ite, Finset.filter_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, Finset.sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, sum_neighborFinset_eq_sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  rw [dotProduct]\n  simp_rw [Finset.sum_eq_sum_neighborFinset_of_symmetric G.symm v]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp only [adjMatrix, dotProduct, neighborFinset_eq_filter, Finset.sum_filter]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp [dotProduct, neighborFinset_eq_filter, Finset.sum_filter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  simp only [adjMatrix, dotProduct, neighborFinset_eq_filter, filter_eq', Finset.sum_filter]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem adjMatrix_dotProduct [NonAssocSemiring \u03b1] (v : V) (vec : V \u2192 \u03b1) :\n    dotProduct (G.adjMatrix \u03b1 v) vec = \u2211 u \u2208 G.neighborFinset v, vec u := by\n  rw [adjMatrix, dotProduct, neighborFinset]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, neg_nonpos, log_le_iff_le_exp (by positivity), exp_zero]\n  norm_num\n  exact \u27e8fun h \u21a6 by gcongr, fun h \u21a6 by gcongr\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff (log_pos hb), neg_nonpos, mul_comm, \u2190 le_div_iff (log_pos hb)]\n  exact \u27e8fun h => by rwa [\u2190 log_le_log_iff (by positivity) hx, log_one], fun h => by\n    rwa [\u2190 log_le_log_iff (by positivity) hx, log_one] at h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff (log_pos hb), mul_comm, \u2190 le_div_iff (log_pos hb), div_self (log_pos hb).ne.symm]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  simp [logb, hx, le_div_iff (by positivity : 0 < b), mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, neg_le_iff_add_nonneg, div_add_cancel\u2080 (log_ne_zero.mpr hb), div_eq_mul_inv, mul_comm,\n    \u2190 mul_le_mul_left (show 0 < b by linarith), mul_inv_cancel (show b \u2260 0 by linarith), mul_one]\n  exact \u27e8fun h => by linarith, fun h => by linarith\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff_of_neg (log_neg b_pos b_lt_one)]\n  simp [log_pos_iff b_pos b_lt_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff_of_neg (log_neg b_pos b_lt_one), neg_nonpos, log_le_iff_le_exp (-x), exp_zero]\n  simp [b_pos, b_lt_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff (log_pos hb), neg_nonpos, \u2190 log_le_log_iff hx zero_lt_one]\n  <;> field_simp\n  <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, neg_eq_nonpos, log_le_iff_le_exp (-x), exp_zero]\n  norm_num\n  exact \u27e8fun h => by linarith, fun h => by linarith\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, neg_nonpos]\n  field_simp [hx, hb]\n  rw [log_le_iff_le_exp_neg (by positivity) (by positivity)]\n  field_simp [exp_ne_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, neg_nonpos]\n  simp [div_le_iff (show 0 < 1 - b by linarith), le_div_iff (show 0 < 1 - b by linarith), sub_pos,\n    sub_lt_zero]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb_nonpos_iff (by norm_num : 0 < b), div_le_one (by positivity : 0 < x)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff_of_neg (log_neg b_pos b_lt_one), neg_nonpos, log_le_iff_le_exp (by positivity)]\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, neg_nonpos]\n  simp [exp_log_eq_id, hx]\n  rw [\u2190 log_le_log_iff, log_one]\n  all_goals \n    linarith\n  all_goals \n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff_of_neg (log_neg b_pos b_lt_one), neg_nonpos, log_le_iff_le_rpow_of_base_lt_one b_pos b_lt_one]\n  exact \u27e8fun h \u21a6 by rw [\u2190 rpow_one b] at h; exact (rpow_le_rpow_iff_of_base_lt_one b_pos b_lt_one one_pos).mp h,\n    fun h \u21a6 by rw [\u2190 rpow_one b] at h; exact (rpow_le_rpow_iff_of_base_lt_one b_pos b_lt_one one_pos).mpr h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, neg_le_iff_add_nonneg, add_comm]\n  norm_num\n  rw [\u2190 log_inv_base]\n  rw [\u2190 log_one_base]\n  rw [log_le_iff_le_log _ _ hx]\n  norm_num\n  all_goals\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff_of_neg (log_neg b_pos b_lt_one), neg_nonpos, log_le_iff_le_exp (by positivity)]\n  rw [exp_zero]\n  exact \u27e8fun h \u21a6 by linarith, fun h \u21a6 by linarith\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff_of_neg (log_neg b_pos b_lt_one), neg_nonpos, log_le_iff_le_rpow_of_base_lt_one b_pos b_lt_one]\n  exact \u27e8fun h => by rw [\u2190 log_rpow b_pos x, \u2190 log_rpow b_pos b] at h; exact (log_le_log rpow_pos_of_pos hx (rpow_pos_of_pos b_pos (rpow_pos_of_pos b_pos x))).mp h, fun h => by rw [\u2190 log_rpow b_pos x, \u2190 log_rpow b_pos b]; exact (log_le_log rpow_pos_of_pos (rpow_pos_of_pos b_pos x) hx).mpr h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, neg_le_iff_add_nonneg, log_nonneg_iff_of_base_lt_one b_pos b_lt_one hx]\n  ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff_of_neg (log_neg b_pos b_lt_one), neg_nonpos, log_le_iff_le_exp (-1),\n    exp_zero]\n  exact \u27e8fun h => by rwa [\u2190 log_le_iff_le_exp hx] at h, fun h => by rwa [log_le_iff_le_exp hx]\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  simp [logb, hx, le_div_iff (by positivity : 0 < 1), mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, neg_nonpos]\n  simp [log_le_iff_le_exp_neg, hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  constructor <;> intro h <;> simp_all [hx]\n  <;> apply le_of_pow_le_pow_left <;> norm_num\n  <;> simp_all [hx]\n  <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff_of_neg (log_pos hb)]\n  field_simp [hx]\n  rw [\u2190 log_le_log_iff (by positivity) hx, log_one]\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, neg_nonpos]\n  simp [\u2190 div_eq_mul_inv, div_le_iff (by positivity : 0 < b), le_div_iff (by positivity : 0 < b),\n    div_le_iff (by positivity), le_div_iff (by positivity)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff_of_neg (log_neg b_pos b_lt_one)]\n  simp [log_pos_iff_of_base_lt_one b_pos b_lt_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, neg_le_iff_add_nonneg, \u2190 le_div_iff hx]\n  simp [add_comm, le_div_iff hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb, div_le_iff_of_neg (log_pos hb)]\n  exact \u27e8fun h \u21a6 by rw [\u2190 log_one] at h; exact log_le_log_iff_of_base_lt_one hb hx (by linarith),\n    fun h \u21a6 by rw [\u2190 log_one] ; exact log_le_log_iff_of_base_lt_one hb hx h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb_eq_log, log_le_iff_le_exp] <;> simp [hx.le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [logb_nonpos_iff hb hx]\n  exact \u27e8fun h => by rw [\u2190 one_div_one_div b]; exact one_div_le_one_div_of_le (one_div_pos.mpr hb) h,\n    fun h => by rw [one_div_one_div b] at h; exact one_div_le_one_div_of_le hb h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [\u2190 logb_one]\n  simp [logb_le_iff_le_rpow_of_base_lt_one b_pos b_lt_one hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x \u2264 0 \u2194 1 \u2264 x := by\n  rw [\u2190 logb_le_logb_iff_of_base_lt_one b_pos b_lt_one hx zero_lt_one]\n  simp [logb_zero, logb_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card, \u2190 toNat_lift.{u}, \u2190 finrank_eq_rank, \u2190 h.mk_range_eq_rank,\n    Nat.cast_toNat_of_lt (lift_lt.mpr <| cardinal.lt_aleph0_of_finite _)]\n  apply congr_arg toNat\n  rw [lift_mk_eq']\n  use (equiv_fun_basis h)\n  constructor <;> intro i j <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  haveI : Finite \u03b9 := finite_of_basis h\n  rw [Nat.card_eq_fintype_card]\n  exact (finrank_eq_card_basis h).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n    rw [finrank, \u2190 Nat.card_eq_fintype_card]\n    exact Eq.symm (Nat.card_eq_of_equiv (Basis.indexEquiv \u03b9 h))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n  rw [finrank, \u2190 card_univ (\u03b1 := \u03b9), \u2190 rank_eq_card_basis h]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n  rw [Nat.card_eq_fintype_card]\n  rw [Basis.finrank_eq_card_basis h]\n  simp only [Nat.card_eq_fintype_card]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n  rw [finrank, \u2190 Nat.card_toFinset { x | LinearIndependent R ((\u2191) : \u03b9 \u2192 M) },\n    \u2190 Finsupp.total_equivFun_range_dom_of_basis h, Nat.card_eq_fintype_card,\n    Fintype.card_of_equiv (Finsupp.totalEquiv _ _ _)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n  rw [finrank_eq_card_basis h]\n  rw [Nat.card_eq_fintype_card]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Basis.finrank_eq_card_basis h]\n  simp_rw [Nat.card_eq_fintype_card]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card_eq_fintype_card]\n  exact\n    finrank_eq_card_basis h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card_eq_fintype_card, \u2190 finrank_eq_rank, h.mk_eq_dim, \u2190 finrank_eq_rank,\n    dim_eq_card_basis h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  cases subsingleton_or_nontrivial R\n  <;> simp_all [Nat.card_eq_fintype_card, finrank_eq_card_basis]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card_eq_fintype_card]\n  exact h.mk_eq_dim.symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  have := h.mk_vector_basis_eq\n  rw [finrank, \u2190 Nat.card_eq_fintype_card, \u2190 Matrix.Nat.card_eq_fintype_card]\n  congr\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card_eq_fintype_card]\n  exact (finrank_eq_card_basis h).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n  simp [finrank_eq_card_basis h, Cardinal.natCast_inj]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [finrank, \u2190 Nat.card_eq_fintype_card]\n  congr\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card_eq_fintype_card]\n  rw [\u2190 finrank_eq_card_basis h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n  rw [finrank, \u2190 Nat.card_eq_fintype_card]\n  exact (Nat.card_eq_of_bijective _ h.injective h.surjective).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card_eq_fintype_card]\n  rw [\u2190 finrank_eq_card_basis h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card_eq_fintype_card]\n  rw [\u2190 Fintype.card_fin (finrank R M)]\n  rw [\u2190 finrank_eq_card_basis h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  have := h.mk_finset_basis_eq_card\n  simp_all only [Nat.card_eq_fintype_card, finrank_eq_card_basis]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n  letI : Fintype \u03b9' := Fintype.ofFinite \u03b9\n  haveI := h.fintype\n  rw [finrank_eq_card_basis h, Fintype.card_congr (Equiv.refl \u03b9)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n  rw [Nat.card, \u2190 toNat_lift.{v}, \u2190 (Basis.mk h.linearIndependent h.span_eq).mk_eq_dim, mk_toNat_eq_card,\n    Fintype.card_of_subtype]\n  letI := h.fintype\n  congr\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [finrank_eq_card_basis h]\n  rw [Nat.card_eq_fintype_card]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card_eq_fintype_card]\n  rw [FiniteDimensional.finrank_eq_card_basis h]\n  rw [Nat.card_eq_fintype_card]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card_eq_fintype_card, \u2190 finrank_eq_card_basis h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n  rw [Nat.card_eq_fintype_card]\n  rw [\u2190 h.mk_finrank_eq_card]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card : Nat.card \u03b9 = Cardinal.toNat (Cardinal.mk \u03b9)]\n  rw [Cardinal.toNat_cast]\n  have : Finite \u03b9 := Finite.of_basis h\n  have h_fin := (Basis.finite_index_finite_of_finite_spans (h.span_eq \u25b8 Set.subset_univ _) this)\n  rw [finrank, (Basis.mk h_fin h).mk_eq_rank_of_fin]].\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n  rw [finrank, \u2190 Nat.card_eq_fintype_card]\n  exact Eq.symm (Nat.card_eq_of_bijective _ h.bijective)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n    exact (finrank_eq_card_basis h).trans (Nat.card_eq_fintype_card \u03b9)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  classical\n    rw [finrank, \u2190 Nat.card_toFinset_eq_iff, \u2190 LinearMap.finrank_eq_card_basis,\n      Basis.map_basis_eq_of_injective _ h.injective]\n    \u00b7 congr\n    simp [LinearMap.finrank_eq_card_basis, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finrank_eq_nat_card_basis (h : Basis \u03b9 R M) :\n    finrank R M = Nat.card \u03b9 := by\n  rw [Nat.card_eq_fintype_card]\n  rw [\u2190 finrank_eq_card_basis h, Nat.card_eq_fintype_card]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  rw [\u2190 h.preimage_symm, \u2190 h.isometry_toFun.preimage_sphere (h.symm (h x)) r,\n    h.apply_symm_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  simp [\u2190 h.preimage_symm, h.toEquiv.preimage_image]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  rw [\u2190 Equiv.preimage_eq_iff_eq_image]\n  simp [h.preimage_sphere]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  simp [Metric.sphere, h.isometry.preimage_ball]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [dist_eq_norm, \u2190 h.isometry.dist_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [h.dist_eq]\n  constructor <;> intro h <;> obtain \u27e8z, hz, hz'\u27e9 := h <;> subst hz' <;> exact \u27e8z, hz, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  have := h.isometry.dist_eq x\n  simp [*, Set.ext_iff, Metric.mem_sphere]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp only [mem_image, mem_sphere, \u2190 h.symm.dist_eq_dist]\n  constructor\n  \u00b7 rintro \u27e8z, hz, rfl\u27e9\n    simpa using hz\n  \u00b7 rintro rfl\n    exact \u27e8h.symm y, by simp, by simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [h.dist_eq]\n  constructor <;> intro h <;>\n    simp_all [Equiv.toFun_as_coe, Equiv.invFun_as_coe]\n  exacts [h.symm, h.symm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  simp [Metric.sphere, h.preimage_symm_eq, h.symm_preimage_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [dist_eq_norm, \u2190 h.symm.preimage_ball, \u2190 h.symm.preimage_sphere, h.symm_symm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  rw [\u2190 h.preimage_symm, h.symm.preimage_sphere]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  simp [\u2190 h.preimage_symm, symm_symm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [h.dist_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [\u2190 h.dist_eq, \u2190 h.symm_apply_apply y]\n  constructor <;> intro <;>\n    simp_all [IsometryEquiv.symm_apply_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [h.dist_eq]\n  constructor\n  rintro \u27e8w, hw, rfl\u27e9\n  rw [\u2190 h.apply_symm_apply y, h.symm_apply_apply]\n  simp [hw]\n  rintro (rfl : y = _)\n  use h.symm y\n  simp [h.symm_apply_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [h.dist_eq]\n  constructor <;> intro h' <;> obtain \u27e8z, hz, rfl\u27e9 := h' <;>\n    simp_all [IsometryEquiv.symm_apply_apply, IsometryEquiv.apply_symm_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [h.isometry.dist_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp only [mem_image, mem_sphere, dist_comm]\n  constructor\n  exacts [fun \u27e8x, hx, hy\u27e9 => by rw [\u2190 hy, h.dist_eq x x]; exact hx, fun hy =>\n    \u27e8h.symm y, by simp [h.symm.dist_eq, hy], by simp [h.dist_eq]\u27e9]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp only [Set.mem_image, Set.mem_sphere, dist_eq_norm]\n  exact \u27e8fun \u27e8a, b\u27e9 => by rw [\u2190 h.apply_symm_apply a, \u2190 h.symm_apply_apply a, h.symm_apply_apply a] at b; exact b,\n    fun b => \u27e8h.symm y, by rw [h.symm_apply_apply, b]\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  rw [\u2190 h.preimage_symm, \u2190 h.isometry_toFun.preimage_sphere, symm_symm, preimage_symm,\n    h.toEquiv.preimage_image]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [dist_eq_norm, \u2190 h.symm.apply_eq_iff_eq, \u2190 h.apply_eq_iff_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [h.dist_eq]\n  constructor\n  intro \u27e8z, \u27e8hz, hy\u27e9\u27e9\n  rw [\u2190 hy]\n  exact h.isometry z x hz\n  intro \u27e8z, \u27e8hz, hy\u27e9\u27e9\n  use h.symm z\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  simp [Metric.sphere, h.preimage_ball]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [\u2190 h.dist_eq, \u2190 h.symm_apply_apply y, h.symm_apply_apply x]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [Metric.mem_sphere, h.symm.dist_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  rw [\u2190 h.preimage_symm, \u2190 h.isometry.preimage_sphere, h.symm_symm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [Metric.mem_sphere, h.dist_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [h.dist_eq, \u2190 h.symm_symm, Equiv.symm_apply_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  rw [\u2190 h.preimage_symm, h.symm.preimage_sphere]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp [h.dist_eq, \u2190 h.symm_apply_eq]\n  constructor\n  intro \u27e8z, hz, hz'\u27e9\n  rw [\u2190 hz']\n  exact h.isometry.dist_eq _ _\n  intro h'\n  use h.symm y, h.symm_apply_mem_iff.2 h'\n  simp [h.apply_symm_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem image_sphere (h : \u03b1 \u2243\u1d62 \u03b2) (x : \u03b1) (r : \u211d) :\n    h '' Metric.sphere x r = Metric.sphere (h x) r := by\n  ext y\n  simp only [mem_image, mem_sphere, dist_eq_iff_dist_eq]\n  refine \u27e8?_, fun h\u2082 \u21a6 \u27e8_, h.symm.apply_symm_apply y, h\u2082.symm\u27e9\u27e9\n  rintro \u27e8x', hx', rfl\u27e9\n  simpa using hx'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  let A : (E \u2192 \u03b2) \u2192 (E \u2192 \u03b2) \u2192 Set E \u2192 \u03b2 := fun f g t => (f \u207b\u00b9' t) \u2229 g \u207b\u00b9' t\n  simpa [ConvexOn] using hf.2.translate_left A @fun f hf => hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  simpa only [\u2190 Pi.smul_def, smul_eq_mul, Function.comp_def, \u2190 vadd_eq_add (f := f)] using\n    hf.comp_affineMap (AffineEquiv.addRight c).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  exact hf.comp_left (convex_add_left c hf.1) fun x hx y hy a b ha hb hab => by\n    simp_rw [add_assoc, add_left_comm y c, \u2190 add_assoc, hf.1.add_smul ha hb hab]\n    exact hf.2 hx hy ha hb hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  intro x hx y hy a b ha hb hab\n  have hx' : x + c \u2208 s := by\n    simpa only [\u2190 Pi.add_apply, add_right_inj] using hx\n  have hy' : y + c \u2208 s := by\n    simpa only [\u2190 Pi.add_apply, add_right_inj] using hy\n  simp only [Function.comp_apply, add_assoc, add_left_comm y, add_comm c]\n  exact hf.2 hx' hy' ha hb hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  simp_rw [ConvexOn, (Set.preimage_inf_preimage_distrib (fun z => c + z) s s).symm]\n  intro x hx y hy a b ha hb hab\n  rw [Function.comp_apply, Function.comp_apply, \u2190 add_assoc]\n  refine' hf (by simpa using add_pos_of_nonneg_of_pos hx.1 hb) (by simpa using add_pos_of_nonneg_of_pos hy.1 ha)\n    (show 0 \u2264 b * a by positivity) hab\n  simp [mul_add, add_mul, mul_comm, mul_assoc, mul_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  rw [\u2190 add_comm]\n  exact hf.translate_right _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  simp only [ConvexOn, (Preimage.mono Subset.rfl : _ \u2264 _), Function.comp_apply, Pi.smul_apply]\n  refine' \u27e8hf.1, fun x hx y hy a b ha hb hab => _\u27e9\n  rw [\u2190 add_left_comm c, smul_add, smul_add, add_assoc, add_assoc]\n  exact hf.2 hx hy ha hb hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  simp_rw [\u2190 neg_add_eq_sub]\n  refine hf.translate_linear (LinearIsometryEquiv.neg \ud835\udd5c) ?_\n  simp_rw [Function.comp, LinearIsometryEquiv.neg_apply, neg_add_eq_sub, preimage_sub_const_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1, fun x hx y hy a b ha hb hab => _\u27e9\n  rw [Function.comp_apply, \u2190 map_add]\n  refine' hf.2 hx hy ha hb hab\n  simp [\u2190 add_assoc, add_comm, add_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  exact\n  hf.translate_left (fun z => z + c) (fun z hz => hz) (fun x hx y hy a b ha hb hab => by\n    simpa only [Function.comp_apply, Pi.add_apply, add_assoc, add_left_comm,\n      add_comm (c + (a \u2022 x + b \u2022 y))] using hf.2 hx hy ha hb hab)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  intro x hx y hy a b ha hb hab\n  simp only [Function.comp_apply, add_right_comm]\n  refine' hf.2 hx hy ha hb hab _\n  rw [\u2190 add_assoc]\n  exact add_mem_add hx hy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  intro x hx y hy a b ha hb hab\n  simp only [Function.comp_apply, add_assoc, add_left_comm y c, \u2190 add_assoc]\n  refine' hf hx hy ha hb hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1, fun x hx y hy a b ha hb hab => _\u27e9\n  rw [comp_apply, add_right_comm]\n  refine' hf.2 hx hy ha hb hab |>.congr_of_eventuallyEq _ _\n  \u00b7 have h : \u2200 z : E, z + c + c = z + (c + c) := fun z => by rw [add_assoc]\n    rw [Filter.EventuallyEq.fun_comp hf.1 (show (fun z => f (z + c)) = f \u2218 fun z => z + c by rfl)]\n    filter_upwards [(hf.1.add_left c).mem_of_mem hx hy] with z hz\n    rw [h z] at hz\n    exact hz\n  \u00b7 have h : \u2200 z : E, z + c + c = z + (c + c) := fun z => by rw [add_assoc]\n    rw [Filter.EventuallyEq.fun_comp hf.1 (show (fun z => f (z + c)) = f \u2218 fun z => z + c by rfl)]\n    filter_upwards [(hf.1.add_left c).mem_of_mem hx hy] with z hz\n    rw [h z] at hz\n    exact hz\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  intro x hx y hy a b ha hb hab\n  rw [comp_apply, \u2190 add_assoc]\n  refine' hf.2 hx hy ha hb hab _\n  rw [\u2190 add_assoc, add_comm c, add_assoc]\n  exact hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1, fun x y hx hy a b ha hb hab => _\u27e9\n  rw [Function.comp_apply, Pi.add_apply, add_assoc, add_comm _ x, \u2190 add_assoc,\n    \u2190 add_assoc]\n  refine' hf.2 hx hy ha hb hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1.translate_preimage_right _, fun x hx y hy a b ha hb hab => _\u27e9\n  rw [Function.comp_apply, Pi.add_def]\n  simp_rw [add_assoc]\n  refine' hf.2 hx hy ha hb hab _\n  rw [\u2190 add_assoc, \u2190 add_assoc]\n  exact add_mem_add hx (hf.1.smul_mem_add_smul_mem ha hb hy)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1, fun x hx y hy a b ha hb hab => _\u27e9\n  rw [comp_apply, map_add]\n  refine' hf.2 hx hy ha hb hab _ _\n  rw [add_assoc, add_comm c, \u2190 add_assoc]\n  exact hf.1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  simpa only [add_comm c] using hf.translate_right c\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1, fun x hx y hy a b ha hb hab => _\u27e9\n  have hx' : x + c \u2208 s := by simpa using hx\n  have hy' : y + c \u2208 s := by simpa using hy\n  exact hf.2 hx' hy' ha hb hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  exact hf.translate_left (by simp [add_assoc, add_comm, add_left_comm])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1, fun x\u2081 hx\u2081 x\u2082 hx\u2082 a b ha hb hab => _\u27e9\n  have h := hf.2 (c + x\u2081) (c + x\u2082) hx\u2081 hx\u2082 ha hb hab\n  simp_rw [Function.comp_apply, Pi.add_apply, add_assoc, add_left_comm c,\n    add_right_comm c] at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8fun x hx => _, fun x y a b ha hb hab => _\u27e9\n  \u00b7 rw [Set.mem_preimage, Pi.add_apply] at hx\n    exact hf.1 hx\n  \u00b7 rw [Set.mem_preimage, Pi.add_apply] at ha hb\n    simp_rw [Pi.add_apply]\n    exact hf.2 ha hb hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1, fun x y hx hy a b ha hb hab => _\u27e9\n  have h := hf.2 hx hy ha hb hab\n  simp_rw [f.map_add, Pi.add_apply, Function.comp_apply, add_assoc] at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  intro x hx y hy a b ha hb hab\n  rw [\u2190 add_left_inj c]\n  simp_rw [comp_apply, add_assoc, \u2190 add_smul]\n  refine' hf.2 hx hy ha hb hab _\n  rw [\u2190 add_smul, smul_add, add_left_comm, hab, one_smul, add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1, fun x hx y hy a b ha hb hab => _\u27e9\n  rw [Function.comp_apply, \u2190 map_add]\n  refine' hf.2 hx hy ha hb hab\n  simp_rw [add_right_comm _ c] at hx hy\n  exact add_mem_add hx hy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  simpa only [add_comm c] using hf.translate_right c\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  intro x hx y hy a b ha hb hab\n  have h := hf (x + c) (by simpa using hx) (y + c) (by simpa using hy) a b ha hb hab\n  simpa [add_add_add_comm, add_smul, smul_add] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1, fun x hx y hy a b ha hb hab => _\u27e9\n  rw [comp_apply, add_right_comm]\n  refine' hf.2 hx hy ha hb hab (add_left_comm c x y)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  -- Unfold the definition of ConvexOn\n  unfold ConvexOn\n  intro x hx y hy a b ha hb hab\n  -- Rewrite the composition of functions\n  rw [\u2190 add_right_inj c]\n  rw [Function.comp_apply, Function.comp_apply]\n  rw [add_right_comm]\n  rw [add_comm]\n  -- Apply the convexity property of f\n  exact hf hx hy ha hb hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1, fun x hx y hy a b ha hb hab => _\u27e9\n  rw [comp_apply, \u2190 hf.2 (by simpa using hx) (by simpa using hy) ha hb hab, add_assoc]\n  rw [add_comm]\n  simp_rw [add_assoc]\n  exact hf.2 hx hy ha hb hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine' \u27e8hf.1, fun x hx y hy a b ha hb hab => _\u27e9\n  rw [comp_apply, \u2190 le_sub_iff_add_le] at hf\n  simp_rw [sub_eq_add_neg] at hf\n  simp_rw [Function.comp_apply, Pi.add_apply, add_right_comm, add_comm]\n  refine' hf hx hy ha hb hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ConvexOn.translate_left (hf : ConvexOn \ud835\udd5c s f) (c : E) :\n    ConvexOn \ud835\udd5c ((fun z => c + z) \u207b\u00b9' s) (f \u2218 fun z => z + c) := by\n  refine'\n    \u27e8hf.1.translate_preimage_right _, fun x hx y hy a b ha hb hab =>\n      (hf.2 hx hy ha hb hab).translate_preimage_right c\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h; exact (ord_eq_ord a).1 h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro x y h; exact mod_cast h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro z1 z2 h\n  simpa [ord] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro i j h\n  rw [\u2190 eq, \u2190 eq] at h\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro z1 z2 h\n  rw [ord_def] at h\n  exact eq_of_abs_eq_abs (by simpa using h)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro i j h\n  exact (ord_eq_ord i).1 (h \u25b8 rfl)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  rw [\u2190 eq_ord_ord a, \u2190 eq_ord_ord b, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h; apply Eq.symm; apply Eq.symm; apply Eq.symm; simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  rw [Ordinal.ext_iff] at h\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro x y h\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro p q h\n  rw [\u2190 eq_iff_le_not_le] at h\n  cases' h with h\u2081 h\u2082\n  rw [le_antisymm_iff]\n  exact \u27e8h\u2081, h\u2082.1\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intros a b h\n  have h\u2081 := congr_arg (ord a : Cardinal) h\n  have h\u2082 := congr_arg (ord b : Cardinal) h\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  rw [\u2190 eq_ord_ord_iff_eq] at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro x y h; exact (ord_inj h).1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro z1 z2 h\n  exact to_int_inj.mp (by simpa using h)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro k\n  intro h\n  have : Nat.ord k = Nat.ord k := rfl\n  rw [h] at this\n  exact Nat.ord_injective this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro k l h; rw [\u2190 eq_iff_le_not_le] at h \u22a2; aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro c\u2081 c\u2082 h\n  rw [\u2190 card_ord c\u2081, \u2190 card_ord c\u2082, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro ctl1 ctl2 h\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h; exact (ord_leftInverse_inj h).1 rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro z1 z2 h\n  apply eq_of_in_range h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  apply eq_of_in_ord\n  rw [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h; rw [ord_eq_ord, ord_eq_ord] at h; exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  rw [Ordinal.ord_eq_inf, Ordinal.ord_eq_inf] at h\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  simpa [le_antisymm_iff] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  rw [ord_eq_inf a, ord_eq_inf b] at h\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  simpa [ord] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro x y h\n  simp [ord, Nat.ofDigits] at h\n  assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  rw [Ordinal.ext_iff] at h\n  simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro z1 z2 h\n  simpa [ord_eq_0, Nat.succ_le_iff] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro c1 c2 h\n  simpa [ord] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ord_injective : Injective ord := by\n  intro a b h\n  apply Eq.symm\n  apply Eq.symm\n  simpa [h] using ord_inj\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp [birthday, Nat.find_eq_iff, Nat.succ_le_iff, Nat.zero_lt_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  decide\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp [birthday, Nat.card_eq_fintype_card]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp [birthday, Nat.find_eq_iff, Nat.succ_le_iff, Nat.zero_lt_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp [birthday, Nat.truncate, Nat.pow]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp [birthday, Nat.find_eq_iff, Nat.find_eq_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  rw [birthday]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  rw [birthday, mk_nat]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp [birthday, Nat.find_eq_iff, Nat.succ_le_succ_iff, Nat.zero_le, Nat.succ_pos,\n    Nat.one_ne_zero, Nat.succ_inj']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  unfold birthday\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp [birthday, Nat.card, mk_out]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp only [birthday, Nat.find_eq_iff, Nat.pow_eq, Nat.pow_eq, Nat.pow_eq, Nat.pow_eq]\n  norm_num\n  decide\n  <;> decide\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp [birthday, Nat.find_eq_iff]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  simp [birthday, complexity, ceil_add_one, Nat.add_comm, Nat.add_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem birthday_half : birthday (powHalf 1) = 2 := by\n  rw [birthday]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  simp only [finAddFlip, Fin.natAdd_def, Fin.castAdd_def, Fin.cast_def]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rcases k with \u27e8k, hk\u27e9\n  simp_all [FinAddFlip, Fin.natAdd_castAdd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  induction m <;> simp_all [Fin.natAdd, Fin.castAdd,\n    Nat.succ_eq_add_one, finAddFlip]\n  <;> try { simp_all [Fin.natAdd, Fin.castAdd, Nat.succ_eq_add_one, finAddFlip] }\n  <;> try { rw [Nat.succ_eq_add_one] }\n  simp_all [Fin.natAdd, Fin.castAdd, Nat.succ_eq_add_one, finAddFlip]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  simp [finAddFlip, Fin.natAdd, Fin.castAdd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rw [finAddFlip_apply]\n  simp [Nat.add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rcases k with \u27e8k, hk\u27e9\n  simp_all [finAddFlip, Nat.add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rw [finAddFlip_apply, natAdd_comm, Fin.natAdd_castAdd]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rw [finAddFlip_apply]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  apply Eq.symm\n  simp [Fin.natAdd_comm, Fin.natAdd_eq_add, Fin.add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  simp [finAddFlip, Fin.natAdd_castAdd, Fin.castAdd_castAdd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  simp [finAddFlip]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  simp [finAddFlip, Fin.natAdd_comm, Fin.natAdd_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  cases n\n  all_goals simp [Fin.natAdd, Fin.castAdd, finAddFlip]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  induction m <;> simp [*, Fin.natAdd_succ, finAddFlip_succ, Fin.castAdd_castAdd, -Fin.cast_eq_cast]\n  <;> try { rfl }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  cases k\n  simp [finAddFlip_apply, Fin.natAdd_mk]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rcases k with \u27e8k, hk\u27e9\n  simp_all [Fin.natAdd, Fin.castAdd, finAddFlip]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rw [finAddFlip_apply, natAdd_comm, Fin.castAdd_castAdd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rcases k with \u27e8k, hk\u27e9\n  simp [finAddFlip, Fin.natAdd, Fin.castAdd, Nat.add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rcases k with \u27e8k, hk\u27e9\n  simp_all [Fin.natAdd, Fin.castAdd, finAddFlip]\n  have h : k + m < n + m := by\n    linarith\n  simp [finAddFlip, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rcases k with \u27e8k, hk\u27e9; ext; simp [Fin.natAdd_def, Nat.add_comm, Nat.add_left_comm, hk]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rcases k with \u27e8k, hk\u27e9\n  simp [finAddFlip, Fin.natAdd, Nat.add_comm, Nat.add_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rcases k with \u27e8k, hk\u27e9\n  simp_all [finAddFlip, Fin.natAdd_eq_castAdd, Fin.castAdd_val]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rcases k with \u27e8k, hk\u27e9\n  rcases Nat.lt_or_le n (m + k) with (h1 | h1)\n  \u00b7 simp [Fin.natAdd, Fin.castAdd, Nat.add_comm]\n  \u00b7 simp [Fin.natAdd, Fin.castAdd, Nat.add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rcases k with \u27e8k, hk\u27e9\n  simp [finAddFlip, Fin.natAdd_mk, Fin.castAdd_mk]\n  <;> simp_all [Fin.cast_mk, Fin.castAdd_mk]\n  <;> simp [Fin.natAdd_mk]\n  <;> simp [Nat.add_comm, Nat.add_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  apply Eq.symm\n  simp [finAddFlip_apply_eq_cast, Nat.add_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  induction m <;> simp_all [Fin.natAdd, Fin.castAdd,\n    Nat.add_succ, Nat.succ_add, Nat.add_zero, Nat.zero_add]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  simp [finAddFlip, Fin.natAdd_comm, Fin.castAdd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem finAddFlip_apply_natAdd (k : Fin n) (m : \u2115) :\n    finAddFlip (Fin.natAdd m k) = Fin.castAdd m k := by\n  rw [finAddFlip_apply, Nat.add_comm, Fin.natAdd_comm, Fin.castAdd_castAdd]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, cond_eq_ite, ite_eq_left_iff, and_imp]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, cond, Pairwise, hr.iff]\n  simp only [forall_eq_apply_imp_iff, forall_eq]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, cond_eq_ite, ite_eq_left_iff, forall_eq]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, cond_eq_ite, ite_true, ite_false, hr.iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, Symmetric, Bool.forall_bool, eq_comm, cond_true, cond_false]\n  exact \u27e8fun h => h true false hr, fun h _ _ hr => hr h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, Bool.forall_bool, cond_true, cond_false, hr.iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, cond]\n  exact \u27e8fun h => h.of_refl _, fun h _ _ => hr h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, cond_comm, cond_apply, hr.iff]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, cond, true_and_iff, Pairwise, Symm, hr.iff]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, cond, Pairwise, forall_apply_eq_imp_iff\u2082, hr, implies_true]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp [Pairwise, hr, cond]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, cond, Pairwise, hr.iff, forall_eq_or_imp, forall_apply_eq_imp_iff\u2082]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, Bool.forall_bool, cond_true, cond_false]\n  exact \u27e8fun h => h false true hr, fun h => h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Bool.forall_bool, onFun, hr.iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, cond]\n  exact \u27e8fun h => h.1, fun h => Pairwise.pairwise fun i j hij => by aesop\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, Bool.forall_bool, cond_false, cond_true, hr.eq,\n    forall_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  cases a <;> cases b <;> simp (config := {contextual := true}) [Symmetric, Pairwise]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, Pairwise, cond]\n  simp_rw [hr.eq]\n  by_cases h : a = b <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, cond, and_imp, or_imp, forall_eq_or_imp,\n    forall_eq]\n  exact \u27e8fun h => h _ _, fun h _ _ => hr h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, cond_eq_ite, ite_eq_left_iff, not_true, imp_false,\n    Symmetric, not_forall]\n  simp [hr]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, cond, Pairwise, forall_apply_eq_imp_iff\u2082, hr.iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, cond]\n  simp only [Pairwise, forall_eq_or_imp, forall_eq]\n  exact hr\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, cond, Pairwise, Symm, hr, forall_eq_or_imp, eq_self_iff_true,\n    imp_true_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, Bool.forall_bool, cond_true, cond_false]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  constructor <;> intro h <;> simp_all [Function.onFun]\n  exact h _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, cond_eq_ite, ite_eq_left_iff, hr.iff]\n  by_cases h : a = b <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, Symmetric, cond]\n  constructor <;> intro <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, cond, Pairwise, hr.iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Function.onFun, cond, Pairwise, SymmDiff, hr.iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, cond_eq_ite, ite_true, ite_false]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by simp [Pairwise, hr.iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_on_bool (hr : Symmetric r) {a b : \u03b1} :\n    Pairwise (r on fun c => cond c a b) \u2194 r a b := by\n  simp only [Pairwise, Function.onFun, cond_eq_ite, ite_eq_left_iff, hr.eq, forall_eq']\n  aesop\n"]