["\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one, v.map_lt_map_iff h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one, v.map_lt_map_iff h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one]\n  apply Valuation.one_lt_val_iff v\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one]\n  rw [\u2190 v.map_inverse]\n  rw [Valuation.map_lt_map_iff]\n  \u00b7 simp\n  \u00b7 simp [h]\n  \u00b7 simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  constructor <;> intro h' <;> simpa using h'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_inv x]\n  constructor\n  intro h'\n  rw [Valuation.one_lt_iff] at h' \u22a2\n  exact (Valuation.map_lt v h).mp h'\n  intro h'\n  rw [Valuation.one_lt_iff] at h' \u22a2\n  exact (Valuation.map_lt v h).mpr h'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_inv x]\n  rw [Valuation.map_lt]\n  exact \u27e8fun h' => by simpa using h', fun h' => by simpa using h'\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 one_locus_eq_bot]\n  refine'\n    \u27e8fun hx =>\n      -- Porting note: replaced ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one, v.map_lt_map_iff h, one_mul, v.map_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_inv x, lt_iff_not_le]\n  simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  constructor <;> intro h' <;> simpa [h] using Valuation.map_inv v x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one]; exact v.map_lt_one_iff h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 inv_lt_one v, \u2190 Valuation.map_inv]\n  split_ifs with h'\n  simp [h, h']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 Valuation.map_inv v h, Units.lt_inv_iff, Units.val_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 Valuation.map_inv v x]\n  rw [Valuation.one_lt_iff]\n  exact \u27e8fun h' => by\n    apply lt_of_le_of_ne (Valuation.map_inv v x)\n    rw [Valuation.map_inv] at h'\n    exact h'\n  , fun h' => by\n    apply lt_of_le_of_ne (Valuation.map_inv v x)\n    rw [Valuation.map_inv] at h'\n    exact h'\n  \u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one]; exact v.one_lt_valuation_iff h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  constructor <;> intro h' <;> simpa [h] using Valuation.map_inv v x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_inv x, lt_iff_lt h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one]\n  rw [\u2190 Valuation.map_inv v x]\n  split_ifs with hx\n  all_goals simp only [hx, Valuation.map_one, Valuation.map_mul, Valuation.map_inv,\n    Valuation.map_irreducible, \u2190 Valuation.map_pow]\n  all_goals\n    nlinarith [v.map_one, v.map_mul, v.map_pow, v.map_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 one_lt_iff_ne_zero v h]\n  rw [\u2190 one_lt_iff_ne_zero v (inv_ne_zero h)]\n  field_simp\n  rw [Valuation.map_inv v]\n  rw [Units.val_lt]\n  rw [Units.val_lt]\n  rw [inv_lt_one_iff_of_pos (zero_lt_one' \u0393\u2080)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [Valuation.one_lt_val_iff v]; simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  constructor <;> intro h\u2081 <;> rw [\u2190 inv_inv x] at h\u2081 <;>\n    rw [\u2190 Valuation.map_inv v] at h\u2081 <;>\n    exact Valuation.one_lt_val_iff_inv_lt v h.symm h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one, v.map_lt_one_iff]\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 one_lt_val_iff v (inv_ne_zero h), Valuation.map_inv]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one, Valuation.lt_iff_lt h]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 Valuation.map_inv v, lt_inv, Valuation.map_one]\n  exact LinearOrderedCommGroupWithZero.lt_inv (v x) one_ne_zero\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one, v.map_lt_iff h, \u2190 mul_inv_cancel h]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [lt_iff_not_le]; rw [lt_iff_not_le]; constructor <;> intro H <;>\n    simpa [Valuation.map_one, Valuation.map_mul, Valuation.map_inv, h] using H\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one, v.map_lt_map_iff h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  rw [\u2190 v.map_one, v.map_lt_one_iff h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  constructor <;> intro h <;>\n  rw [\u2190 v.map_one] at h <;>\n  rw [\u2190 v.map_mul] at h <;>\n  simp at h <;>\n  rw [\u2190 v.map_one] at h <;>\n  rw [\u2190 v.map_mul] at h <;>\n  simp at h <;>\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem one_lt_val_iff (v : Valuation K \u0393\u2080) {x : K} (h : x \u2260 0) : 1 < v x \u2194 v x\u207b\u00b9 < 1 := by\n  constructor <;> intro h' <;> simp [\u2190 v.map_one, Valuation.map_inv _ h] at h' \u22a2 <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  exact \u27e8\u03b9, rfl, #\u03b9, rfl, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq]\n  exact mk_list_le_max (lsub f)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof]\n  apply csInf_le'\n  exact fun a => Ordinal.mk_ordinal_out (lsub.{u, u} f)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [\u2190 succ_le_iff]\n  have H : \u2200 a < lsub.{u, u} f, succ (succOrder.succ a) \u2264 lsub.{u, u} f := by\n    intro a ha\n    exact succ_le_of_lt (lt_lsub_of_lt ha)\n  apply ciSup_le'\n  intro i\n  apply H (f i)\n  apply lt_lsub\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [lsub]\n  exact Order.cof_bsup_le #\u03b9 f\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [\u2190 mk_univ]\n  apply mk_le_of_injective\n  intro a b h\n  simp only [mem_univ, @iInf_of_empty \u03b9 (fun _ => Ordinal.succ (Ordinal.lsub.{u, u} f))\n    (@Set.univ \u03b9).isEmpty, iInf_const] at h\n  have := congr_arg (fun x : Ordinal => x.succ) h\n  simpa only [succ_inj] using this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq]\n  apply csInf_le'\n  rw [isRegular_iff]\n  exact \u27e8lsub.{u, u} f, Set.mem_range_self rfl, le_cof_iff_lsub.2 (le_refl _)\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  apply le_of_not_lt\n  intro h\n  have h' : #(Type u) < (#(Type u) : Cardinal) := by\n    calc\n      #(Type u) < #(\u03a3 _ : \u03b9, \u2115) := mk_sigma_lt_mk_sigma_of_forall_mk_lt h\n      _ = (#\u03b9) * \u2135\u2080 := mk_sigma_eq_sum_mk\n      _ \u2264 #\u03b9 * #(Type u) := mul_le_mul_left' (aleph0_le_mk_type u) _\n      _ \u2264 #(Type u) * #(Type u) := mul_le_mul_right' (mk_le_aleph0 (Type u)) _\n      _ \u2264 #(Type u) := self_le_add_left _ _\n  exact (lt_irrefl _ (lt_of_le_of_lt (self_le_add_right _ _) h')).elim\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  rw [\u2190 mk_ord_out (lsub.{u, u} f)]\n  exact \u27e8_, mk_ord_out (lsub.{u, u} f)\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  rw [\u2190 mk_ord_out (lsub.{u, u} f)]\n  exact \u27e8_, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [Cardinal.le_mk_iff_exists_set]\n  exact \u27e8_, lsub_typein_lt f\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  have : Cardinal.lift.{v, u} #\u03b9 \u2264 Cardinal.lift.{u, u} (cof (lsub f)) := by\n    rw [\u2190 lsub_const]\n    apply lift_le_lsub_lift\n    intro i\n    exact Cardinal.mk_coe_le_aleph0\n  -- The following line is a placeholder for Lean 4's linarith.\n  rcases this with this\n  exact Cardinal.lift_le.1 this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  rw [\u2190 lifting_mk_eq\n    (show Cardinal.lift.{u, u} #\u03b9 = Cardinal.lift.{max (u + 1) (u + 1), _} #\u03b9 by rfl)]\n  exact \u27e8f, fun a => by rw [lift_id]\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq]\n  apply csInf_le'\n  apply le_of_not_lt\n  intro h\n  have : lsub.{u, u} o < lsub.{u, u} f :=\n    lt_lsub_of_lt (lt_irrefl _ h)\n  exact\n    this.not_le (le_lsub f (cof_ord_le (lsub.{u, u} f)).1)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq]\n  apply csInf_le'\n  exact \u27e8_, lsub_typein_lt.{u, u} f\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  apply le_of_forall_lt\n  intro a\n  rw [\u2190 succ_le_iff]\n  intro h\n  have : \u2203 i, succ (cof (f i)) < a := by\n    contrapose! h\n    apply (ordConnected_lt a).out\n    rw [lt_succ_iff, le_iff_forall_lt] at h\n    exact fun i => h _ (cof_pos _)\n  apply exists_lt_of_lt_ciSup this\n  use 0\n  rw [succ_zero, ciSup_const]\n  apply succ_le_of_lt\n  apply mk_ordConnectedComponent_cof_lt\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [lsub, cof_sup]\n  apply le_trans _ (lift_id_le.trans (lift_umax.{u, 0}.le))\n  apply ciSup_le'\n  intro i\n  exact \u27e8_, mk_ne_zero i\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq]\n  apply mk_le_of_injective\n  exact fun _ _ h => bot_unique (by rw [h]; apply lsub_le)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  unfold is_lsub\n  exact \u27e8_, rfl, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq]\n  apply csInf_le'\n  use \u2205\n  rw [\u2190 lsub_empty]\n  exact lsub_le_lsub_leftof f (fun _ => 0)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq]\n  apply mk_subtype_le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  simpa\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  simpa only [blsub_eq_lsub, lt_succ_iff] using le_lsub f\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  rw [\u2190 card_type]\n  exact \u27e8f, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  cases' isEmpty_or_nonempty \u03b9 with h h\n  \u00b7 rw [mk_eq_zero_iff.2 h]\n    apply zero_le\n  rw [\u2190 card_type]\n  apply def_le_def'\n  exact \u27e8Cofinal.preImage (familyOfBFamily f) _\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  rw [\u2190 mk_ord_out (lsub.{u, u} f)]\n  exact \u27e8_, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  apply le_of_eq\n  rw [mk_ord_out (lsub.{u, u} f)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof]\n  apply csInf_le'\n  exact fun i => \u27e8typein ((\u00b7 < \u00b7) : f i \u2192 f i \u2192 Prop), typein_lt_self _\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_lsub]\n  rw [\u2190 brange_eq_range_family]\n  apply mk_le_of_injective\n  intro a b h\n  simpa using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_succ_lsub]\n  exact succ_le_of_lt (lt_of_le_of_lt (mk_list_le_max \u03b9) (max_lt_of_lt_sup.{u, u} (fun i => lsub_not_lt.{u, u} f i)))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  rw [cof_eq_sInf_lsub]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cof_lsub_le {\u03b9} (f : \u03b9 \u2192 Ordinal) : cof (lsub.{u, u} f) \u2264 #\u03b9 := by\n  rw [cof_eq_sInf_lsub]\n  apply csInf_le'\n  simpa only [cof_eq_sInf_lsub, lt_succ_iff] using le_lsub f\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right])\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ \u2264 (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ = 0 := by rw [inf_inf_distrib_left])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ \u2264 z := by sdiff_incl)\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_left]\n      _ \u2264 (x \u2293 z \u2293 x \\ z) \u2293 (y \u2293 z \u2293 y \\ z) := by simp only [inf_assoc, inf_comm, inf_left_right_swap,\n        gt_iff_lt, lt_inf_iff, and_imp, and_assoc, inf_eq_inter]\n      _ = \u22a5 := by rw [inf_inf_sdiff, inf_inf_sdiff, inf_bot_eq])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 (z \u2294 x) \u2294 x \\ z) \u2293 (x \u2293 y \u2293 (z \u2294 y) \u2294 y \\ z) := by rw [sup_inf_right, sup_inf_right]\n      _ = (x \u2293 (y \u2293 (z \u2294 x)) \u2294 x \\ z) \u2293 (y \u2293 (x \u2293 (z \u2294 y)) \u2294 y \\ z) := by ac_rfl\n      _ = (x \u2293 (y \u2293 (x \u2294 z)) \u2294 x \\ z) \u2293 (y \u2293 (x \u2293 (y \u2294 z)) \u2294 y \\ z) := by rw [sup_comm z]\n      _ = (x \u2293 y \u2293 (x \u2294 z) \u2294 x \\ z) \u2293 (y \u2293 x \u2293 (y \u2294 z) \u2294 y \\ z) := by ac_rfl\n      _ = (x \u2293 y \u2293 x \u2294 x \\ z) \u2293 (y \u2293 x \u2293 y \u2294 y \\ z) := by rw [sup_inf_right, sup_inf_right]\n      _ = (x \u2293 (y \u2293 x) \u2294 x \\ z) \u2293 (y \u2293 (x \u2293 y) \u2294 y \\ z) := by ac_rfl\n      _ = (x \u2293 (x \u2293 y) \u2294 x \\ z) \u2293 (y \u2293 (y \u2293 x) \u2294 y \\ z) := by rw [inf_comm y]\n      _ = (x \u2293 y \u2294 x \\ z) \u2293 (y \u2293 x \u2294 y \\ z) := by rw [inf_inf_self, inf_inf_self]\n      _ = (x \u2293 y \u2294 x \\ z) \u2293 (x \u2293 y \u2294 y \\ z) := by ac_rfl\n      _ = x \u2293 y \u2293 (z \u2294 (x \\ z \u2294 y \\ z)) := by rw [inf_sup_right]\n      _ = x \u2293 y \u2293 (z \u2294 (x \\ y \u2294 x \\ z)) := by rw [sup_comm, sdiff_sup_sdiff']\n      _ = x \u2293 y \u2293 (x \\ y \u2294 (z \u2294 x \\ z)) := by ac_rfl\n      _ = x \u2293 y \u2293 (x \\ y \u2294 (x \\ z \u2294 z)) := by rw [sup_comm]\n      _ = x \u2293 y \u2293 (x \\ y \u2294 x \\ z \u2294 z) := by ac_rfl\n      _ = x \u2293 y \u2293 (x \\ z \u2294 x \\ y \u2294 z) := by ac_rfl\n      _ = x \u2293 y \u2293 (x \\ z \u2294 (x \\ y \u2294 z)) := by ac_rfl\n      _ = x \u2293 y \ufffd", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := rfl\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n    )\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_right]\n      _ = x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) := rfl\n    )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = \u22a5 := by\n        sdiff_disjoint\n        (calc\n          x \u2293 y \u2293 z = (x \u2293 y) \u2293 z := by rw [inf_assoc]\n          _ \u2264 x \u2293 (y \u2293 z) := by rw [inf_assoc]\n          _ \u2264 \u22a5 := by\n            simp [Order.import_lemma4]\n      _ \u2294 (x \\ z \u2293 y \\ z) = x \\ z \u2293 y \\ z := by rw [sup_bot_eq]\n    )\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 y \\ z := by rw [inf_assoc]\n      _ \u2264 (x \u2293 x \\ z) \u2293 y \\ z := by rw [inf_assoc]; exact inf_le_inf_left _\n        (inf_le_inf_left _ (inf_le_right.trans le_sup_right))\n      _ = (x \u2293 (x \\ z)) \u2293 (y \\ z : \u2115) := by rw [inf_assoc]\n      _ = \u22a5 := by\n        sdiff_bot\n        (calc\n          x \u2293 x \\ z = x \u2293 (x \\ z) := by rw [inf_assoc]\n          _ \u2264 \u22a5 := by\n            simp [Order.import_lemma4]\n      _ \u2294 (x \\ z \u2293 y \\ z) = x \\ z \u2293 y \\ z := by rw [bot_sup_eq]\n    )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = (x \u2293 y) \\ z := by rw [sup_inf_right])\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = x \u2293 y \u2293 z \u2293 x \\ z \u2293 y \\ z := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 z \u2293 x \\ z \u2293 y \\ z := by rw [inf_assoc]\n      _ = \u22a5 := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 z \u2293 x \\ z \u2293 y \\ z := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 z \u2293 x \\ z \u2293 y \\ z := by rw [inf_assoc]\n      _ = \u22a5 := by rw [inf_sdiff])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by exact inf_le_inf le_sup_left le_sup_right\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by exact inf_le_inf le_sup_left le_sup_right\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by exact inf_le_inf le_sup_left le_sup_right\n      _ = x \\ z \u2293 y \\ z := by rw [sup_inf_right])\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rfl\n      _ \u2264 (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by exact inf_le_inf inf_le_left inf_le_right\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rfl\n      _ \u2264 (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by exact inf_le_inf inf_le_left inf_le_right\n      _ = 0 := by rw [inf_inf_sdiff]\n      )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \u2293 y) \u2293 (z \u2294 x \\ z) \u2293 (x \u2293 y) \u2293 (z \u2294 y \\ z) := by rw [inf_sup_left, inf_sup_left]\n      _ = x \u2293 y \u2293 x \u2293 y \u2293 (z \u2294 x \\ z \u2294 y \\ z) := by rw [sup_inf_right, sup_inf_right]\n      _ = x \u2293 y \u2293 (z \u2294 x \\ z \u2294 y \\ z) := by simp [inf_assoc]\n      _ \u2264 x \u2293 y \u2293 (z \u2294 x \\ z) := by simp [sup_assoc, sup_sdiff_left, sup_sdiff_right]\n      _ = x \u2293 y \u2293 z \u2294 x \u2293 y \u2293 x \\ z := by rw [inf_sup_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y := by ac_rfl\n    )\n    (calc\n      x \u2293 y \u2293 (z \u2294 x \\ z) \u2293 (z \u2294 y \\ z) = x \u2293 y \u2293 (z \u2294 x \\ z) \u2293 (z \u2294 y \\ z) := by rfl\n      _ = (x \u2293 y) \u2293 (z \u2294 x \\ z) \u2293 (z \u2294 y \\ z) := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 (z \u2294 x \\ z) \u2293 (z \u2294 y \\ z) := by rfl\n      _ \u2264 x \u2293 y \u2293 (z \u2294 x \\ z) := by simp [inf_assoc, sup_sdiff_left, sup_sdiff_right]\n      _ = x \u2293 y \u2293 z \u2294 x \u2293 y \u2293 x \\ z := by rw [inf_sup_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y := by ac_rfl\n    )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n    )\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = x \u2293 y \u2293 z \u2293 x \\ z \u2293 y \\ z := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 z \u2293 (y \\ z \u2293 x \\ z) := by ac_rfl\n      _ = x \u2293 y \u2293 z \u2293 (z \\ x \u2293 z \\ y) := by rw [inf_comm (t := x \\ z), inf_sdiff]\n      _ = x \u2293 y \u2293 z \u2293 (z \\ x \u2293 z \\ y) := by rw [inf_sdiff]\n      _ = \u22a5 := by rw [inf_sdiff]\n    )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x) \u2293 (x \u2293 y \u2293 z \u2294 y) := by gcongr <;> apply inf_le_left\n      _ = x \u2293 y \u2293 (z \u2294 1) \u2293 (x \u2294 y) := by abel\n      _ = x \u2293 y := by simp\n    ) (by\n      calc\n        x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z \u2264 x \u2293 y \u2293 z \u2294 x \u2293 y := by\n          gcongr\n          simp\n        _ = x \u2293 y := by simp)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = x \\ z \u2293 y \\ z := by rw [inf_sdiff])\n    (calc\n      x \u2293 y \\ z \u2264 x \\ z := by simp\n      _ \u2264 x \\ z \u2293 y \\ z := by simp)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ \u2264 z \u2293 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        simp only [le_inf_iff, inf_sup_right, sup_inf_right, sup_inf_left, sup_comm,\n          sup_left_comm, sup_assoc]\n        simp only [inf_assoc, inf_comm, inf_left_comm]\n        tauto\n      _ = z \u2293 ((x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z)) := by\n        rw [inf_assoc]\n      _ = z \u2293 (x \u2293 y \u2293 (z \u2293 z) \u2294 (x \\ z \u2293 x \\ z) \u2294 (y \\ z \u2293 y \\ z)) := by\n        simp only [inf_sup_right, sup_inf_right, sup_inf_left, sup_comm, sup_left_comm,\n          sup_assoc, inf_assoc, inf_comm, inf_left_comm]\n        tauto\n      _ = z \u2293 (x \u2293 y \u2293 (z \u2293 z) \u2294 (x \\ z \u2293 x \\ z) \u2294 (y \\ z \u2293 y \\ z)) := by\n        simp only [inf_sup_right, sup_inf_right, sup_inf_left, sup_comm,\n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \u2293 y) \u2293 (z \u2294 x \\ z) \u2293 (z \u2294 y \\ z) := by rw [sup_inf_left, sup_inf_left]\n      _ = (x \u2293 y) \u2293 z \u2293 (z \u2294 x \\ z \u2293 y \\ z) := by rw [inf_sup_right, inf_sup_right, inf_assoc,\n        inf_assoc]\n      _ = (x \u2293 y) \u2293 z \u2293 (x \\ z \u2293 y \\ z) := by rw [sup_inf_inf_sdiff]\n      _ \u2264 (x \u2293 y) \\ z := by rw [inf_assoc, inf_sdiff])\n    (calc\n      x \u2293 y \\ z \u2264 x := inf_le_left\n      _ \u2264 x \u2293 y := by rw [inf_le_inf_iff]; exact \u27e8le_rfl, le_sdiff.mpr le_rfl\u27e9\n      _ \u2264 x \u2293 y \u2293 z := by rw [inf_le_inf_iff]; exact \u27e8le_rfl, inf_le_right\u27e9\n      _ \u2264 z := inf_le_right)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y) \u2293 (z \u2294 (x \\ z \u2294 y \\ z)) := by simp only [inf_sup_right, sdiff_sup_self, inf_assoc]\n      _ = (x \u2293 y) \u2293 z := by rw [sup_sdiff_self, inf_sup_assoc_of_le, inf_sdiff_self, inf_idem])\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_assoc, inf_assoc]\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_assoc, inf_assoc]\n      _ \u2264 (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_assoc, inf_assoc]\n      _ = \u22a5 := by rw [inf_sdiff_self_left, inf_sdiff_self_left, inf_bot_eq]\n      )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y) \\ z \u2294 (x \\ z \u2293 y \\ z) := by rw [sup_inf_right, sdiff_sup_sdiff_cancel (inf_le_left : x \u2293 y \u2264 x),\n        sdiff_sup_sdiff_cancel (inf_le_right : x \u2293 y \u2264 y)]\n      _ = (x \\ z \u2294 y \\ z) \u2293 (x \u2293 y) := by ac_rfl\n      _ \u2265 (x \u2293 y) \\ z := by rw [sup_inf_right]; exact inf_le_left)\n    (calc\n      x \\ z \u2293 y \\ z \u2264 (x \u2293 y) \\ z := by\n        rw [inf_sdiff]; apply inf_le_inf_right _ sdiff_le\n      _ \u2264 x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z :=\n        calc\n          x \u2293 y \\ z \u2264 x \u2293 y \u2293 z \u2294 x \u2293 y \\ z := le_sup_left\n          _ \u2264 x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]; exact sup_le_sup_left sdiff_le _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \\ z \u2293 y \\ z := by simp\n      _ = x \\ z \u2293 y \\ z := by simp)\n    (calc\n      x \u2293 y \u2293 z = (x \u2293 y) \u2293 z := by rw [inf_assoc]\n      _ = (x \u2293 y) \u2293 z := by rw [inf_assoc]\n      _ = (x \u2293 y) \u2293 z := by rw [inf_assoc]\n      _ = (x \u2293 y) \u2293 z := by rw [inf_assoc]\n      _ = (x \u2293 y) \u2293 z := by rw [inf_assoc]\n      _ = (x \u2293 y) \u2293 z := by rw [inf_assoc]\n      _ = (x \u2293 y) \u2293 z := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 z := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 z := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 z := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 z := by rw [inf_assoc])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = 1 := by rw [sup_inf_sdiff])\n    (by rw [inf_sup_left])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf]\n      _ = (x \u2293 y \u2294 x \\ z) \u2293 (x \u2293 y \u2294 y \\ z) := by rw [sup_inf]\n      _ = (x \u2293 y \u2294 x \\ z) \u2293 (x \u2293 y \u2294 x \\ z) := by rw [sup_comm y \\ z x \\ z]\n      _ = x \u2293 y \u2294 x \\ z := by rw [inf_sup_self]\n      _ = x \u2293 y \u2294 x \\ z := rfl)\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf]\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 y \\ z) := by rw [inf_comm y \\ z x \\ z]\n      _ = (x \u2293 y \u2293 x \\ z) \u2293 (x \u2293 y \u2293 y \\ z) := by rw [inf_assoc]\n      _ = (x \u2293 y) \u2293 (x \\ z \u2293 y \\ z) := by rw [inf_assoc]\n      _ \u2264 x \u2293 y \u2293 \u22a5 := by rw [inf_assoc]; rw [inf_sdiff_self]; rw [inf_bot_eq]\n      _ = \u22a5 := by rw [inf_bot_eq])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = 1 := by\n        simp only [inf_sup_left, sup_inf_cancel_right, inf_inf_sdiff, sdiff_sdiff_left,\n          sup_inf_sdiff, inf_top_eq]\n      _ = x \\ z \u2293 y \\ z \u2294 x \u2293 y \u2293 z := by ac_rfl)\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_right]\n      _ = (x \u2293 (y \u2293 z \u2293 x \\ z)) \u2293 (y \u2293 (x \u2293 z \u2293 y \\ z)) := by ac_rfl\n      _ = 0 := by\n        simp only [inf_inf_sdiff, inf_assoc, inf_sdiff_self_right, inf_bot_eq]\n      _ = x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) := by ac_rfl)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \\ z \u2293 y \\ z \u2294 x \u2293 y \u2293 z := by ac_rfl\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_right]\n      _ = x \u2293 y", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by simp\n      _ = x \u2293 y \u2293 z := by simp\n    )\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by\n        rw [inf_inf_left]\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by simp\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by simp\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by simp\n      _ = \u22a5 := by simp\n    )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n    )\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ = \u22a5 := by rw [inf_inf_sdiff]\n    )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z) \u2293 (x \u2293 y \u2293 z) \u2294 x \\ z \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [inf_sup_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_sdiff])\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ = \u22a5 := by rw [inf_sdiff_self_right, inf_sdiff_self_left, inf_bot_eq])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        simp only [sup_inf_left, sup_inf_right, sup_assoc, sup_comm, sup_left_comm]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ \u2264 z := sup_inf_sdiff _ _ _)\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        simp only [sup_inf_left, sup_inf_right, sup_assoc, sup_comm, sup_left_comm]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ \u2264 x \u2293 y := sup_inf_sdiff _ _ _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 (z \u2293 z) \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [inf_idem]\n    )\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = x \u2293 y \u2293 z \u2293 x \\ z \u2293 y \\ z := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) := by rw [inf_assoc]\n      _ = \u22a5 := by rw [inf_sdiff_right]\n    )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        rw [sup_inf_left]\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        rw [sup_inf_left]\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rfl\n      _ = x \\ z \u2293 y \\ z \u2294 x \u2293 y \u2293 z := by\n        rw [sup_inf_right]\n    )\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by\n        rw [inf_inf_left]\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rfl\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rfl\n      _ = 0 := by\n        rw [inf_sdiff_self_left, inf_sdiff_self_left, inf_bot_eq]\n    )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        rw [sup_inf_left]\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x) \u2293 (x \u2293 y \u2293 z \u2294 y) := by\n        apply inf_le_inf <;>\n          apply\n            sup_le_sup_right <;>\n              apply\n                le_sup_of_le_left <;>\n                  apply inf_le_left\n      _ = x \u2293 y \u2293 z \u2294 x \u2293 y := by rw [sup_inf_right]; rw [sup_inf_right]\n      _ = x \u2293 y := by rw [sup_inf_self])\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        rw [sup_inf_left]\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x) \u2293 (x \u2293 y \u2293 z \u2294 y) := by\n        apply inf_le_inf <;>\n          apply\n            sup_le_sup_right <;>\n              apply\n                le_sup_of_le_left <;>\n                  apply inf_le_left\n      _ = x \u2293 y \u2293 z \u2294 x \u2293 y := by rw [sup_inf_right]; rw [sup_inf_right]\n      _ = x \u2293 y := by rw [sup_inf_self])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z := by rw [inf_sup_right, inf_sup_right, inf_sup_right]\n    )\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ = (x \u2293 y \u2293 z \u2293 x \\ z) \u2293 (x \u2293 y \u2293 z \u2293 y \\ z) := by rw [inf_inf_distrib_left]\n      _ = \u22a5 := by rw [inf_inf_sdiff, inf_inf_sdiff, inf_bot_eq]\n    )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by\n        rw [sup_inf_right]\n      _ \u2264 (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ \u2264 x \u2293 y \u2293 (z \u2294 (x \\ z \u2294 y \\ z)) := by rw [\u2190 inf_sup_left]\n      _ = x \u2293 y \u2293 (z \u2294 (x \\ z)) \u2294 x \u2293 y \u2293 (z \u2294 (y \\ z)) := by rw [inf_sup_right]\n      _ = x \u2293 y \u2293 (z \u2294 (x \\ z)) \u2294 x \u2293 y \u2293 (z \u2294 (y \\ z)) := by rw [inf_sup_right]\n      _ \u2264 x \u2293 y \u2293 (z \u2294 (x \\ z)) \u2294 x \u2293 y \u2293 (z \u2294 (y \\ z)) := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 (z \u2294 (x \\ z)) \u2294 x \u2293 y \u2293 (z \u2294 (y \\ z)) := by rw [sup_inf_left]\n      _ \u2264 x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by\n        rw [inf_sdiff, inf_sdiff, inf_sdiff, inf_sdiff]\n        simp only [inf_assoc, sup_assoc, sup_comm, sup_left_comm, inf_left_comm]\n        rw [sup_inf_left, sup_inf_left, sup_inf_left, sup_inf_left]\n        simp only [inf_assoc, sup_assoc, sup_comm, sup_left_comm, inf_left_comm]\n        rw [sup_inf_left, sup_inf_left, sup_inf_left, sup_inf_left]\n        simp only [inf_assoc, sup_assoc, sup_comm, sup_left_comm, inf_left_comm]\n        rw [sup_inf_left, sup_inf_left, sup_inf_left, sup_inf_left]\n        simp only [inf_assoc, sup_assoc, sup_comm, sup_left_comm, inf_left_comm]\n         )\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 y \u2293 z) \u2293 (x \\ z \u2293 y \\ z) := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 z \u2293 x \\ z \u2293 y \\ z := by rw [inf_assoc]\n      _ = x \u2293 y \u2293 z \u2293 x \\ z \u2293 y \\ z := by rw [inf_assoc]\n      _ \u2264 x \u2293 y \u2293 z \u2293 x \\ z \u2293 y \\ z := by rw [inf_sdiff, inf_sdiff, inf_sdiff, inf_sdiff]\n      _ = x \u2293 y \u2293 z \u2293 x \\ z \u2293 y \\ z := by\n        simp only [inf_assoc, sup_assoc, sup_comm, sup_left_comm,", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ \u2264 z := by\n        simp only [inf_sup_left, sup_inf_cancel_right, sup_inf_right, sup_sdiff_self,\n          inf_sdiff_sup_left, inf_sdiff_sup_right, inf_assoc, sup_assoc, inf_comm,\n          inf_inf_sdiff, inf_sup_left, sup_inf_right, sup_sdiff_self, inf_sdiff_sup_left,\n          inf_sdiff_sup_right, inf_assoc, sup_assoc, inf_comm, inf_inf_sdiff]\n        aesop)\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ \u2264 z := by\n        simp only [inf_sup_left, sup_inf_cancel_right, sup_inf_right, sup_sdiff_self,\n          inf_sdiff_sup_left, inf_sdiff_sup_right, inf_assoc, sup_assoc, inf_comm,\n          inf_inf_sdiff, inf_sup_left, sup_inf_right, sup_sdiff_self, inf_sdiff_sup_left,\n          inf_sdiff_sup_right, inf_assoc, sup_assoc, inf_comm, inf_inf_sdiff]\n        aesop)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_left]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z \u2293 x \\ y) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \\ y \u2293 x) \u2293 (y \\ z \u2293 y) := by rw [inf_sup_right, inf_sup_left, inf_comm]\n      _ = (x \\ y) \u2293 (y \\ z) := by rw [inf_comm, inf_inf_sdiff, inf_comm, inf_inf_sdiff]\n      _ = (x \\ z) \u2293 (y \\ z) := by rw [inf_comm, inf_sdiff_assoc]\n    )\n    (calc\n      x \u2293 y \u2293 z \u2293 (x \\ z \u2293 y \\ z) = (x \u2293 z \u2293 (x \\ z)) \u2293 (y \u2293 z \u2293 (y \\ z)) := by rw [inf_inf_right, inf_inf_left]\n      _ = (x \u2293 z \u2293 x) \u2293 (y \u2293 z \u2293 y) := by rw [inf_sdiff]\n      _ = \u22a5 := by rw [inf_inf_self, inf_inf_self]\n    )\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem inf_sdiff : (x \u2293 y) \\ z = x \\ z \u2293 y \\ z :=\n  sdiff_unique\n    (calc\n      x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = (x \u2293 y \u2293 z \u2294 x \\ z) \u2293 (x \u2293 y \u2293 z \u2294 y \\ z) := by rw [sup_inf_right]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      _ = x \u2293 y \u2293 z \u2294 x \\ z \u2293 y \\ z := by rw [sup_inf_left]\n      (x \\ z \u2293 y \\ z) \u2264 (x \u2293 y) \\ z := by\n        rw [le_inf_iff]\n        constructor <;>\n          exact\n            sdiff_le_sdiff_right <| le_inf_iff.1 le_rfl).2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil =>\n    rfl\n  | cons x xs ih =>\n    cases x with\n    | mk x_fst x_snd =>\n      simp [List.toFinmap, List.dlookup, Finsupp.update, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  cases' s with s_hd s_tl\n  simp [List.toFinmap]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  rw [List.toFinmap, lookup_toFinmap, dlookup_list_toFinmap']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  rw [List.toFinmap, lookup_toFinmap, dlookup_list_toFinmap']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => rfl\n  | cons x xs ih =>\n    cases x with\n    | mk a\u2081 b\u2081 =>\n      simp [a\u2081, b\u2081, ih]; cases a\u2081 <;> simp [List.dlookup]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => simp\n  | cons x xs ih =>\n    cases x with\n    | mk y z =>\n      by_cases h : a = y\n      \u00b7 simp [h]\n      \u00b7 rw [List.toFinmap, Finmap.lookup, bvlookup_cons, ih]\n        simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  cases s\n  rfl\n  rfl\n  <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  simp only [List.toFinmap, lookup_toFinmap, dlookup_eq_none]\n  induction' s with s_hd s_tl s_ih\n  \u00b7 simp\n  \u00b7 cases' s_hd with a' b'\n    simp_all [List.toFinmap, lookup_toFinmap, dlookup_eq_none]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => simp\n  | cons x xs ih =>\n    cases x with\n    | mk a' b' =>\n      by_cases h : a = a'\n      . subst h\n        simp [List.dlookup, List.lookup]\n      . simp [h, List.dlookup, List.lookup, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => simp\n  | cons x xs ih =>\n    cases x with\n    | mk y z =>\n      by_cases h : a = y\n      . simp [h, List.dlookup, ih]\n      . simp [h, List.dlookup, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil =>\n    rfl\n  | cons x xs ih =>\n    cases x with | @\u27e8a', b\u27e9 =>\n    cases a' with\n    | mk a' a'' ha'' =>\n      by_cases h : a = a'\n      . subst h\n        simp [List.toFinmap, dlookup, lookup, ha'']\n      . simp [List.toFinmap, dlookup, lookup, ih, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => rfl\n  | cons x xs ih =>\n    cases x with\n    | mk a' b =>\n      simp only [List.toFinmap, List.dlookup, List.mem_cons]\n      split_ifs <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => rfl\n  | cons b t h =>\n    cases a_1 with\n    | inl a_1 =>\n      simp [*]\n    | inr a_1 =>\n      simp [*]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil =>\n    simp [List.toFinmap, lookup, dlookup]\n  | cons _ _ tl =>\n    cases h : dlookup a tl with\n    | none =>\n      rw [List.toFinmap, lookup, dlookup] at h\n      have h2 : (\u27e8a, 0\u27e9 : Sigma \u03b2) \u2209 tl := by\n        intro h3\n        rw [List.mem_toFinmap] at h3\n        contradiction\n      simp [h, h2]\n    | some v =>\n      simp [List.toFinmap, lookup, dlookup] at h\n      have h2 : a = _root_.head (Sigma \u03b2) tl := by\n        rw [List.mem_toFinmap] at h\n        have h3 := dlookup_is_some.1 (Exists.intro h)\n        simp at h3\n        cases tl with\n        | nil => contradiction\n        | cons x xs => simp [x.1, x.2] at h3\n      rw [h2, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  rcases s with \u27e8\u27e9\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => simp\n  | cons x xs ih =>\n    cases x\n    simp [List.toFinmap, *]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  cases s\n  \u00b7 rfl\n  \u00b7 rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => simp\n  | cons x xs ih =>\n    cases x\n    simp [List.toFinmap, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => simp\n  | cons _ tl ih =>\n    cases h : a == (tl.head?.map Sigma.fst).getD default <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s <;> simp [*]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction' s with s_hd s_tl s_ih\n  next => simp\n  next => cases' s_hd with a' b'\n           simp only [List.toFinmap, lookup_toFinmap, dlookup_cons, s_ih]\n           split_ifs\n           \u00b7 rfl\n           \u00b7 apply Finmap.lookup_eq_none.mpr\n             intro h\n             rw [Finmap.mem_lookup_iff, List.mem_toFinmap] at h\n             rw [Finmap.mem_lookup_iff, List.mem_toFinmap] at h_1\n             contradiction\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  cases' s with s_hd s_tl; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => simp\n  | cons x xs ih =>\n    cases x with\n    | mk a' b' =>\n      by_cases h : a = a'\n      simp [h, List.dlookup]\n      simp [h, List.dlookup, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => simp\n  | cons b l ih =>\n    cases b\n    simp [Finmap.lookup, List.dlookup, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => simp\n  | cons x xs ih =>\n    cases x\n    simp [ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => rfl\n  | cons x xs ih =>\n    cases x with\n    | mk a' b' =>\n      cases a' with\n      | mk s e =>\n        simp only [List.toFinmap, List.dlookup, lookup_toFinmap]\n        split_ifs <;> simp [ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  simp [List.toFinmap]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction' s with x xs IH generalizing a\n  \u00b7 rfl\n  \u00b7 cases x with | _ _ y =>\n    by_cases h : a = y\n    \u00b7 subst h\n      rfl\n    \u00b7 rw [List.toFinmap, lookup_toFinmap, dlookup_cons_ne _ h, IH]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => rfl\n  | cons a_1 a_2 s_1 ih =>\n    cases h : a_1.1 with\n    | mk a =>\n      simp only [List.toFinmap, lookup_toFinmap, dlookup_cons_eq, Finmap.lookup_cons_eq,\n        Fin.val_mk]\n      cases a_1.1.beq_eq a with\n      | inl h' => rw [h', ih]\n      | inr h' => rw [Finmap.lookup_cons_ne, dlookup_cons_ne, ih]\n        assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => simp\n  | cons x xs ih =>\n    cases x with\n    | mk y z =>\n      cases a with\n      | mk y' z' =>\n        simp only [List.toFinmap, lookup_toFinmap, dlookup_cons, cons.injEq, heq_eq_eq]\n        split_ifs\n        <;> simp [*]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => rfl\n  | cons _ _ _ => simp [*, List.toFinmap]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem dlookup_list_toFinmap (a : \u03b1) (s : List (Sigma \u03b2)) : lookup a s.toFinmap = s.dlookup a := by\n  induction s with\n  | nil => simp\n  | cons x xs ih =>\n    cases x with\n    | mk y z =>\n      by_cases a = y\n      . subst h\n        simp [List.dlookup, *, lookup_toFinmap]\n      . simp [List.dlookup, *, lookup_toFinmap, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  exact extend_apply x t f hf _ _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp only [sieveExtend, if_pos hf, if_neg (hf.ne)]\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [sieveExtend, extend]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp only [sieveExtend, extend, Function.extend_apply, dif_pos]\n  rw [t]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [Sieve.extend_eq, t]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [sieveExtend, t.inter_agree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  apply ext\n  intro Y f f_in\n  induction' f_in with Y g _ Y g _ Y g h Y g h\u2081 h\u2082 IH\u2081 IH\u2082\n  \u00b7 rfl\n  \u00b7 rfl\n  \u00b7 rfl\n  \u00b7 rw [x.sieveExtend_of_mem _ h\u2081, x.sieveExtend_of_mem _ h\u2082, IH\u2081, IH\u2082]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [sieveExtend, Function.extend_apply, t.1 f hf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [sieveExtend, \u2190 Classical.choose_spec (t _)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  symm\n  rw [\u2190 extend_iff, \u2190 t.familyOfElements_eq_sieveExtend]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  have : x.sieveExtend f (le_generate R Y hf) = Agree.extend (t _ hf) (x f hf) := rfl\n  simp [this]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  apply (t hf hf _ _ (le_generate R Y hf) (le_generate R Y hf)).choose_spec.choose_spec\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  rw [sieveExtend, extend]\n  dsimp\n  rw [t]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  rw [sieveExtend]\n  rw [ExtendOfFamily.mk_coe]\n  simp only [Opens.coe_of, mk_coe]\n  f_cases f; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [sieveExtend, FamilyOfElements.\n    generate_of_mem, t.IsCompatible.is_locality _ hf, t.IsCompatible.is_pullback hf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [sieveExtend, extendAlongLE, t _ _ _ hf hf (\ud835\udfd9 _)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp only [sieveExtend, Iso.app_hom, extend_to_inf_eq, eqToHom_app, homOfElement_app]\n  congr 1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  have h := x.Compatible_iff.mp t\n  simp [sieveExtend, h _ hf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [sieveExtend, extend]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [FamilyOfElements.sieveExtend, t]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  have := t _ _ hf\n  simp only [FamilyOfElements.sieveExtend, this]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  dsimp only [sieveExtend]\n  simp only [t.extend_agrees hf, if_true, hf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  funext E\n  change (x.sieveExtend _ _) E = x _ _\n  dsimp only [sieveExtend, extend]\n  rw [restrict_eq]\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [FamilyOfElements.sieveExtend, hf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [sieveExtend, extend, t.mk_agree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [sieveExtend, hf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  refine extend_apply_self P R hf _ ?_\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  simp [sieveExtend, extend, Function.extend_apply, @t f]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem extend_agrees {x : FamilyOfElements P R} (t : x.Compatible) {f : Y \u27f6 X} (hf : R f) :\n    x.sieveExtend f (le_generate R Y hf) = x f hf := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor <;> intro h\n  exact Submodule.mem_span_iff_exists_finsupp.mp h\n  obtain \u27e8c, hc1, hc2\u27e9 := h; exact Submodule.mem_span_iff_exists_finsupp.mpr \u27e8c, hc1, hc2\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 intro h\n    obtain \u27e8S, hS, hm\u27e9 := (Submodule.mem_span_iff_exists_sum _ _).mp h\n    refine \u27e8\u2211 i \u2208 hS.toFinset, Finsupp.single i (1 : R), ?_\u27e9\n    refine \u27e8by simpa [Finsupp.sum] using hS, ?_\u27e9\n    simp only [Finsupp.sum, Finset.sum_toFinset_eq_sum, Finset.mem_coe,\n      Finset.sum_single_index, one_smul, Finset.sum_const, Finset.card_univ,\n      Fintype.card_of_finset, mul_one, Finset.sum_congr, Finset.sum_subset]\n    refine Eq.trans ?_ hm\n    exact Finset.sum_subset Finset.subset_univ _\n  \u00b7 rintro \u27e8c, hc, rfl\u27e9\n    exact Submodule.sum_mem _ fun x _ => Submodule.smul_mem _ _ <| Submodule.subset_span hc (by simp)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  exact \u27e8fun h => \u27e8_, _, h\u27e9, fun \u27e8_, _, h\u27e9 => h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor <;> intro h <;> induction h <;>\n      simp_all [Submodule.span, Finsupp.sum, Finset.sum_subset]\n  \u00b7 exact \u27e80, by simp\u27e9\n  \u00b7 rcases h with \u27e8c, hc, rfl\u27e9\n    exact \u27e8c, hc, rfl\u27e9\n  \u00b7 rcases h with \u27e8c, hc, rfl\u27e9\n    exact \u27e8c, hc, rfl\u27e9\n  \u00b7 rcases h with \u27e8c, hc, rfl\u27e9\n    rcases h_ih_n with \u27e8c', hc', rfl\u27e9\n    refine \u27e8c + c', Finset.coe_subset.2 (Finset.add_subset_add hc hc'), ?_\u27e9\n    rw [Finsupp.sum_add_index' (add_smul _ _) (zero_smul _ _)]\n  \u00b7 rcases h with \u27e8c, hc, rfl\u27e9\n    rcases h_ih_n with \u27e8c', hc', rfl\u27e9\n    refine \u27e8c + c', Finset.coe_subset.2 (Finset.add_subset_add hc hc'), ?_\u27e9\n    rw [Finsupp.sum_add_index' (add_smul _ _) (zero_smul _ _)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  refine' \u27e8fun h => _, fun \u27e8c, hc, hsum\u27e9 => _\u27e9\n  \u00b7 exact\n      span_induction h\n        (fun x hx => \u27e8Finsupp.single x 1, by simpa using hx\u27e9)\n        (\u27e80, by simp\u27e9) (fun x y \u27e8cx, hcx, hx\u27e9 \u27e8cy, hcy, hy\u27e9 =>\n          \u27e8cx + cy, by simpa [add_smul] using hx.symm \u25b8 hy.symm \u25b8 add_mem\u27e9)\n        fun r x \u27e8c, hc, hx\u27e9 =>\n          \u27e8r \u2022 c, by simpa [smul_smul] using hx\u27e9\n  \u00b7 rw [\u2190 hsum]\n    refine' sum_mem fun i hi => _\n    refine' smul_mem _ _ (subset_span _)\n    simpa using hc hi\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  classical\n  rw [Submodule.mem_span]\n  constructor\n  \u00b7 intro h\n    exact \u27e8\u27e8s, h\u27e9, rfl\u27e9\n  \u00b7 rintro \u27e8c, rfl\u27e9\n    exact Finsupp.sum_mem _ fun m _ => Submodule.smul_mem _ _ (c.mem_span_support _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  refine' \u27e8fun h => _, fun \u27e8c, hc, hm\u27e9 => _\u27e9\n  \u00b7 refine' Finsupp.span_eq_range_total.symm.trans _\n    rw [\u2190 Set.image_univ, Finsupp.mem_span_image_iff_total] at h\n    rcases h with \u27e8l, hl, rfl\u27e9\n    exact \u27e8l, by simp [hl]\u27e9\n  \u00b7 rw [\u2190 hm]\n    refine' sum_mem fun mi cmi => _\n    have : mi \u2208 (c.support : Set M) := hc cmi\n    exact smul_mem _ _ (subset_span this)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  apply Iff.intro <;> intro h <;> induction h <;>\n  \u00b7 obtain \u27e8c, hc1, hc2\u27e9 := H\n    use c\n    constructor\n    \u00b7 exact hc1.trans Set.subset_union_left\n    \u00b7 rw [Finsupp.sum_add_index']\n      \u00b7 rw [Finsupp.sum_add_index']\n        \u00b7 simp_all\n        \u00b7 intros; simp\n      \u00b7 intros; simp\n  \u00b7 use 0\n    constructor\n    \u00b7 simp\n    \u00b7 simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  next =>\n    intro h\n    induction' h with y hy y _ y _ hy\u2081 hy\u2082 _ _ ihy\u2081 ihy\u2082\n    \u00b7 exact \u27e80, by simp\u27e9\n    \u00b7 obtain \u27e8c, hc\u2081, hc\u2082\u27e9 := hy\n      refine \u27e8c, ?_, ?_\u27e9\n      \u00b7 exact hc\u2081.trans (Set.subset_insert y s)\n      \u00b7 simp [hc\u2082]\n    \u00b7 obtain \u27e8c, hc\u2081, hc\u2082\u27e9 := hy\u2081\n    \u00b7 obtain \u27e8c', hc'\u2081, hc'\u2082\u27e9 := hy\u2082\n      refine \u27e8c + c', ?_, ?_\u27e9\n      \u00b7 simp [hc\u2081, hc'\u2081]\n      \u00b7 simp [hc\u2082, hc'\u2082, add_smul]\n  next =>\n    rintro \u27e8c, hc\u2081, hc\u2082\u27e9\n    exact sum_mem fun mi hmi => smul_mem _ _ (subset_span hc\u2081 hmi)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  refine' \u27e8fun h => _, fun \u27e8c, hc, hm\u27e9 => _\u27e9\n  \u00b7 refine' Submodule.span_induction h _ _ _ _\n    \u00b7 intro m hm; exact \u27e8_, by simpa using hm\u27e9\n    \u00b7 exact \u27e80, by simp\u27e9\n    \u00b7 rintro m\u2081 m\u2082 \u27e8c\u2081, hc\u2081, rfl\u27e9 \u27e8c\u2082, hc\u2082, rfl\u27e9\n      refine' \u27e8c\u2081 + c\u2082, by simpa using hc\u2081.union hc\u2082, _\u27e9\n      simp only [add_smul, Finsupp.sum_add_index, add_zero, Finsupp.sum_single_index,\n        zero_add, add_assoc, add_left_inj, zero_mul, Finset.sum_const, Finset.card_univ,\n        smul_eq_mul, mul_one]\n      rw [hm]\n    \u00b7 rintro a m' \u27e8c, hc, rfl\u27e9\n      refine' \u27e8a \u2022 c, by simpa using hc, _\u27e9\n      simp [\u2190 Finset.mul_sum, hm, smul_sum, smul_smul]\n  \u00b7 exact mem_span_set_iff.mpr \u27e8c, hc, hm\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  exact \u27e8fun h => by\n    obtain \u27e8c, rfl\u27e9 := mem_span_iff.1 h\n    refine' \u27e8c, by simp [support_sum_eq_biUnion, Finset.mem_coe], _\u27e9\n    simp_rw [Finset.sum_coe_finset, Finsupp.sum]\n    rfl, fun \u27e8c, hc\u27e9 => by\n    rw [mem_span_iff]\n    refine' \u27e8c, rfl\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  rw [\u2190 Submodule.mem_span_iff_exists_sum]\n  refine' exists_congr fun c => Iff.rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  apply Iff.intro\n  \u00b7 intro h\n    refine \u27e8(\u27e8s, fun x \u21a6 x \u2208 m\u27e9 : R[M] \u2192\u2080 R), ?_\u27e9\n    simp only [Finset.coe_sort_coe, Submodule.mem_span, Submodule.mem_toAddSubmonoid,\n      Finsupp.mem_supported, Finsupp.sum, AddSubmonoid.mem_iSup, Set.mem_range,\n      Finsupp.mem_support_iff, ne_eq, not_false_eq_true]\n    aesop\n  \u00b7 intro h\n    obtain \u27e8c, hc, hc'\u27e9 := h\n    rw [\u2190 hc']\n    rw [Submodule.mem_span]\n    intro h'\n    specialize h' _ hc\n    simpa [hc] using h'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  apply Iff.intro\n  \u00b7 intro h\n    exact \u27e8(Submodule.mem_span_iff_exists_sum _ _).1 h, by simp\u27e9\n  \u00b7 rintro \u27e8c, hc, rfl\u27e9\n    exact (Submodule.mem_span_iff_exists_sum _ _).2 \u27e8c, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  refine' \u27e8fun h => _, fun \u27e8c, hc, hm\u27e9 => _\u27e9\n  \u00b7 refine'\n      Submodule.span_induction (p := fun x => \u2203 c \u2208 \ud835\udcd5(M), (c.support : Set M) \u2286 s \u2227 c.sum = x) h _ _ _\n      _\n    \u00b7 intro m hm\n      exact \u27e8Finsupp.single m (1 : R), by simpa using hm\u27e9\n    \u00b7 exact \u27e80, \u27e80, by simp\u27e9\u27e9\n    \u00b7 rintro m\u2081 m\u2082 \u27e8c\u2081, hc\u2081, h\u2081\u27e9 \u27e8c\u2082, hc\u2082, h\u2082\u27e9\n      refine'\n        \u27e8c\u2081 + c\u2082, add_mem hc\u2081 hc\u2082, _, _\u27e9 <;>\n        simp only [h\u2081, h\u2082, Finsupp.sum_add_index, add_smul, zero_add, Finsupp.support_add]\n      conv_rhs => rw [Finset.sum_union <| disjoint_iff.2 hc\u2081]\n      simp [\u2190 h\u2081, \u2190 h\u2082]\n    \u00b7 rintro (a : M) _ \u27e8c, hc, h\u27e9\n      refine' \u27e8a \u2022 c, _, _, _\u27e9 <;>\n        simp only [h, Finsupp.sum_smul_index, smul_smul, zero_smul, Finsupp.support_smul]\n      conv_rhs => rw [Finset.smul_sum]\n      simp [Finsupp.sum_smul_index, smul_zero]\n  \u00b7 simp_rw [\u2190 hm]; apply Submodule.sum_mem\n    intro m hm\n    apply Submodule.smul_mem\n    apply Submodule.subset_span\n    exact hc hm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  refine \u27e8fun hm => ?_, fun \u27e8c, hcs, hc\u27e9 => ?_\u27e9\n  induction hm using Submodule.span_induction with\n  | mem_self x hx =>\n    exact \u27e8Finsupp.single x 1, by simp [Finset.subset_iff, hx], by simp\u27e9\n  | zero =>\n    refine \u27e80, by simp [Finset.subset_iff]\u27e9\n  | add x y hx hy =>\n    obtain \u27e8cx, hcx, hcx'\u27e9 := hx\n    obtain \u27e8cy, hcy, hcy'\u27e9 := hy\n    refine \u27e8cx + cy, ?_, ?_\u27e9\n    \u00b7 rw [Finsupp.support_add hcx.left hcy.left]\n      exact Set.union_subset hcx.right hcy.right\n    \u00b7 rw [Finsupp.sum_add_index' (fun _ => by simp) (fun _ _ _ => by simp), hcx', hcy']\n  | smul r x hx =>\n    obtain \u27e8c, hcs, hc\u27e9 := hx\n    refine \u27e8r \u2022 c, ?_, ?_\u27e9\n    \u00b7 rw [Finsupp.support_smul]\n      exact Set.subset_smul_finset_image _ _ hcs\n    \u00b7 rw [Finsupp.sum_smul_index' (fun _ => by simp), hc, Finsupp.smul_sum]\n      simp_rw [Finsupp.smul_single, smul_eq_mul, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 intro h\n    refine \u27e8LinearMap.toSpanSingleton R M m, ?_, ?_\u27e9\n    \u00b7 intro m hm\n      rw [LinearMap.mem_span_singleton] at hm\n      obtain \u27e8r, hr\u27e9 := hm\n      obtain \u27e8sm, sm_eq, rfl\u27e9 := Submodule.mem_span_singleton.mp hr\n      rw [sm_eq, SetLike.mem_coe]\n      exact sm.prop\n    \u00b7 rw [Finsupp.sum_fintype _ _ (fun m => zero_smul R m), Submodule.coe_mk]\n  \u00b7 rintro \u27e8c, hc, rfl\u27e9\n    exact Submodule.sum_mem _ fun m hm => Submodule.smul_mem _ _ (hc hm)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 intro h\n    refine' \u27e8\u27e8s, _\u27e9, _, _\u27e9 <;> aesop\n  \u00b7 rintro \u27e8c, hc, rfl\u27e9\n    exact Submodule.sum_mem _ fun x hx =>\n      Submodule.smul_mem _ _ (Submodule.subset_span (hc hx))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 intro h\n    induction' h with x hx x y hx hy x y hx hy\n    \u00b7 exact \u27e80, by simp\u27e9\n    \u00b7 exact \u27e8Finsupp.single x 1, by simp\u27e9\n    \u00b7 rcases hy with \u27e8c, hc1, hc2\u27e9\n      rcases hx with \u27e8c', hc'1, hc'2\u27e9\n      refine' \u27e8c + c', by simp [hc1, hc'1], by simp [hc2, hc'2, Finsupp.sum_add_index]\u27e9\n    \u00b7 rcases hx with \u27e8c, hc1, hc2\u27e9\n      refine' \u27e8c, by simp [hc1], by simp [hc2, Finsupp.sum_smul_index]\u27e9\n  \u00b7 rintro \u27e8c, hc1, hc2\u27e9\n    exact\n      Submodule.sum_mem _ fun mi hmi =>\n        smul_mem _ _ <| Submodule.subset_span <| hc1 hmi\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 intro h\n    refine' \u27e8LinearMap.toSpanSingleton R M m, _, _\u27e9\n    \u00b7 simpa only [LinearMap.toSpanSingleton_support, Set.subset_def, Finset.mem_coe,\n        Finsupp.single_apply, ne_eq, zero_ne_one, false_or_iff, forall_eq']\n    \u00b7 simp [h]\n  \u00b7 rintro \u27e8c, hc, rfl\u27e9\n    exact Submodule.sum_mem _ fun m _ =>\n      Submodule.smul_mem _ _ <| Submodule.subset_span (hc (c.mem_support_toFun _))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor <;> intro h\n  case mp =>\n    induction h with\n    | zero => exact \u27e80, by aesop, by simp\u27e9\n    | basic _ hx =>\n      exact \u27e8Finsupp.single _ 1, by simpa, by simp\u27e9\n    | add _ _ _ _ _ ih\u2081 ih\u2082 =>\n      obtain \u27e8c\u2081, hc\u2081, rfl\u27e9 := ih\u2081\n      obtain \u27e8c\u2082, hc\u2082, rfl\u27e9 := ih\u2082\n      refine' \u27e8c\u2081 + c\u2082, by simpa using add_subset hc\u2081 hc\u2082, _\u27e9\n      simp [Finsupp.sum_add_index, add_smul]\n    | smul _ _ _ _ ih =>\n      obtain \u27e8c, hc, rfl\u27e9 := ih\n      refine' \u27e8c.smul _, by simpa using smul_subset hc, _\u27e9\n      simp [Finsupp.sum_smul_index, Finset.smul_sum, smul_smul]\n  case mpr =>\n    obtain \u27e8c, hcs, rfl\u27e9 := h\n    exact Submodule.sum_mem _ fun _ => Submodule.smul_mem _ _ (Submodule.subset_span (hcs (by\n      simp only [Finsupp.mem_support_iff, Finsupp.mem_coe, Finsupp.mem_support_iff]\n      aesop)))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor <;> intro h\n  case mp =>\n    rcases h with \u27e8c, hc\u27e9\n    exact \u27e8c, hc.1, hc.2\u27e9\n  case mpr =>\n    rcases h with \u27e8c, hc, hm\u27e9\n    exact \u27e8c, hm\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  apply SetLike.mem_coe.trans\n  simp [Finsupp.mem_span_image_iff_total]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  apply Iff.intro\n  \u00b7 intro h\n    exact \u27e8Finsupp.mem_span_image_iff_total.mp h, by rfl\u27e9\n  \u00b7 rintro \u27e8c, hc, rfl\u27e9\n    exact Finsupp.sum_mem _ fun x hx => by apply Submodule.smul_mem <;> solve_by_elim\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  refine' \u27e8fun h => _, fun \u27e8c, hc1, hc2\u27e9 => _\u27e9\n  \u00b7 obtain \u27e8f, hf\u27e9 := Finsupp.mem_span_image_iff_total.1 h\n    refine' \u27e8f, _, hf.2\u27e9\n    simpa using hf.1\n  \u00b7 exact (Submodule.mem_span_iff_exists_sum _ _).2 \u27e8c, hc2, hc1\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 intro h\n    change \u2203 c : M \u2192\u2080 R, c.support \u2286 s \u2227 Finsupp.sum c (fun a b \u21a6 b \u2022 a) = m at h\n    refine' \u27e8Finsupp.embDomain (fun a : M \u21a6 a) (LinearMap.id : R \u2192\u2097[R] R) h, _, _\u27e9\n    \u00b7 intro a ha\n      exact h.1 (Finsupp.mem_embDomain.mp ha)\n    \u00b7 exact h.2\n  \u00b7 rintro \u27e8c, hc, hm\u27e9\n    rw [Finsupp.mem_span_image_iff_total]\n    exact \u27e8c, hc, hm\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 intro h\n    refine' \u27e8\u27e8s, fun _ => 0\u27e9, _\u27e9\n    simpa using h\n  \u00b7 rintro \u27e8c, hc, rfl\u27e9\n    exact Submodule.sum_mem _ fun m _ => Submodule.smul_mem _ _ (Submodule.subset_span hc (by simp))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  apply Iff.intro <;> intro <;>\n  obtain \u27e8c, hc\u27e9 := \u2039_\u203a\n  <;> use c\n  <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  rw [\u2190 Submodule.mem_span_iff_exists_sum]\n  simp_rw [Finsupp.sum, Finset.sum_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor <;> intro h <;>\n    exact\n      \u27e8by\n        exact \u27e8fun _ => 0, by simpa using h\u27e9,\n        by simpa using h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  refine \u27e8fun h \u21a6?_, fun \u27e8c, hs, hc\u27e9 \u21a6?_\u27e9\n  induction h <;>\n  use \u27e8(fun i \u21a6 if i = x then 1 else 0), (by aesop)\u27e9\n  <;> aesop\n  induction hs\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mem_span_set {m : M} {s : Set M} :\n    m \u2208 Submodule.span R s \u2194\n      \u2203 c : M \u2192\u2080 R, (c.support : Set M) \u2286 s \u2227 (c.sum fun mi r => r \u2022 mi) = m := by\n  constructor\n  \u00b7 intro h\n    exact\n      \u27e8(Submodule.mem_span_iff_exists_sum _ _).1 h, by\n        convert_to\n          sum ((span R s).subtype.toIntLinearMap.toAddMonoidHom.toFun\n                ((\u2191) : span R s \u2192 M) \u2218\n              fun x =>\n                \u2191x)\n              _ = _\n        \u00b7 simp\n        \u00b7 rfl\n        \u00b7 simp\u27e9\n  \u00b7 rintro \u27e8c, hc\u27e9\n    rw [\u2190 hc.2]\n    exact c.sum_mem_span hc.1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction l with\n  | nil => apply Subset.nil\n  | cons x xs ih => apply Subset.cons x; exact ih\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  cases l <;> apply Subset.refl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  simp only [Lists'.Subset, true_and]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l_tl l_ih\n  simp\n  simp only [subset_def, mem_cons, exists_eq_or_imp, and_true]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l' IH\n  case cons =>\n    simp only [Subset.refl, true_and, Lists'.any, Lists'.mem_cons, exists_eq_or_imp,\n      and_true, Subset.refl, imp_true_iff, exists_eq_left]\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  simp only [Subset.refl, Lists'0.sup, List.Subset.refl, true_and, eq_self_iff_true, and_self]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with _ _ IH\n  case atom => simp\n  case cons => simp\n  case nil => simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l' ih\n  simp only [Subset.refl, cons.injEq, true_and]\n  exact Subset.cons a (Subset.cons a ih)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction l with\n  | nil => apply Subset.nil\n  | cons x xs ih => apply Subset.cons x _ ih\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with _ _ _ _ l_ih; simp [Lists'.Subset.refl]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l _\n  simp\n  simp only [subset_iff, Lists'.mem_cons]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l IH\n  simp\n  simp only [Lists'.subset_cons]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l IH\n  case nil => simp\n  case cons =>\n    simp only [List.cons_subset, Lists'.Subset.nil_subset]\n    simp [IH]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  rw [Lists'.subset_iff]\n  intro x; intro h\n  exact \u27e8x, rfl, h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  cases' l with _ _ _ l_l_subset_l\n  trivial\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  cases' l with a l IH\n  simp [Subset.refl]\n  exact fun x h \u21a6 \u27e8x, h, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l IH\n  simp [Subset.refl]\n  simp only [subset_iff, Lists'.mem_cons]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l' IH; exact Subset.nil;\n  apply Subset.cons; assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l_tl l_ih\n  simp [Lists'.Subset.refl]\n  cases a\n  simp\n  simp [l_ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l IH\n  case h\u2081 => simp\n  case h\u2082 =>\n    simp only [subset_def, mem_cons]\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  revert l\n  intro l\n  simp only [subset_def, mem_def, Lists'.equiv]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  cases l <;> constructor <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l IH\n  simp\n  simp only [subset_iff, cons_subset, and_imp, forall_apply_eq_imp_iff\u2082, IH]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  cases' l with a l IH; clear l\n  induction a <;> simp_all [Subset.refl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  cases' l with a as h\n  simp\n  exact Subset.refl as h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction l <;> simp [*]\n  <;> intro\n  <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  simp only [Subset.def, Lists'.mem_def, true_and]\n  exact fun a h \u21a6 \u27e8h, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l IH\n  case nil => simp\n  case cons =>\n    simp only [subset_cons, true_or, eq_self_iff_true, and_self_iff]\n    exact IH\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with a l_tl l_ih\n  case h => apply Subset.refl\n  case tail =>\n    apply Subset.tail\n    exact l_ih\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  simp [Subset.refl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Subset.refl {l : Lists' \u03b1 true} : l \u2286 l := by\n  induction' l with _ l IH; simp_all\n  exact Subset.skip _ IH\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  refine' \u27e8fun h k => _, fun h => _\u27e9\n  exacts [(h k).isCompactElement, isSupFiniteCompact_of_all_elements_compact h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  intros H k\n  apply H.1\n  intros H\n  refine \u27e8fun _ \u21a6 H _\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  refine' \u27e8fun h k => _, fun h => \u27e8fun s => _\u27e9\u27e9\n  exacts [h.elim k, h _]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  simp [IsSupFiniteCompact, IsCompactElement, eq_comm]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  intro h k\n  exact (h k).isCompactElement\n  intro h\n  exact isSupFiniteCompact_of_all_elements_compact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  exact \u27e8fun h k => h.1 k, fun h => \u27e8fun k => (h k).isSupFiniteCompact\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor <;> intro h\n  next =>\n    refine' fun k => \u27e8k, \u27e8fun s h' => le_of_eq _\u27e9, fun s h' => le_of_eq _\u27e9 <;>\n    rw [h.eq_of_le h'] <;> rfl\n  next =>\n    refine' \u27e8fun s => _\u27e9\n    have h' : (sSup s, sSup s) \u2264 _ := h (sSup s) s fun k => And.left\n    rcases h' with \u27e8t, ht\u27e9\n    refine' \u27e8t, _\u27e9\n    simp_rw [ht, Prod.mk.inj_iff]\n    exact \u27e8le_antisymm (le_sSup ht.1) (sSup_le ht.2), Subset.antisymm (Subset.trans ht.2 ht.1)\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  next =>\n    exact fun h k => (h.1 k).1\n  next =>\n    intro h\n    exact \u27e8fun s => \u27e8\u27e8sSup s, h s.toFinset\u27e9, fun _ => IsLUB.sSup_mem \u27e8_, _\u27e9\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor <;> intro h k <;>\n  simpa using h {k}\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  intro h \u03b1\n  infer_instance\n  intro h\n  exact isSupFiniteCompact_of_all_elements_compact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor <;> intro H\n  case mp =>\n    intro k\n    apply H.1\n  case mpr =>\n    apply \u27e8H k\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor <;> intro H k\n  \u00b7 exact (H k).isCompactElement\n  \u00b7 apply IsSupFiniteCompact.of_isCompactElement\n    exact H k\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor <;> intro h\n  exact fun k => h k\n  exact fun s => h s.toDual\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor <;> intro H\n  exact fun k => isCompactElement_iff_le_of_directed_sSup_le.2 fun hc hd => H _ hc hd\n  exact \u27e8fun t hc hd => H _\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  intro h\n  intro k\n  rw [isCompactElement_iff_le_of_directed_sSup_le]\n  exact fun d dne hk => h d dne hk\n  intro h\n  intro s sne hk\n  haveI : Nonempty \u03b1 := nonempty_of_ne_empty sne\n  obtain \u27e8k, hk'\u27e9 := h (sSup s)\n  have : sSup s \u2264 k := hk' s (le_refl _)\n  exact \u27e8k, this\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  refine' \u27e8fun H => _, fun H => \u27e8fun s => _\u27e9\u27e9\n  case refine'_1 =>\n    exact fun k => H.1 k\n  case refine'_2 =>\n    obtain \u27e8a, rfl\u27e9 := H s\n    exact isCompactElement_of_isCompact_singleton a\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  intro h k\n  exact h.isCompactElement k\n  intro h\n  exact \u27e8fun s =>\n    let \u27e8k, hk\u27e9 := h (sSup s)\n    \u27e8k, hk.symm \u25b8 isCompactElement_sSup_of_mem_compactElement h\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  exact fun h k => h.1 k\n  intro h; constructor\n  exact fun k => h k\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  intro h \u03b1\n  apply h\n  intro h s\n  apply h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  intro _ k\n  exact (IsSupFiniteCompact.isCompactElement k).isCompactElement\n  intro h\n  exact isSupFiniteCompact_of_all_elements_compact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  intro h k\n  exact h.isCompactElement k\n  intro h\n  exact \u27e8fun s => h s.toDual\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  intro h k\n  exact h.isCompactElement k\n  intro h\n  constructor\n  intro s\n  apply isCompact_of_finite\n  intro t\n  apply isCompactElement_finset\n  intro k\n  apply h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  next =>\n    intro h k\n    exact h.isCompactElement k\n  next =>\n    intro h\n    exact \u27e8fun s => (h s.toDual).isCompactElement\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  exact\n    \u27e8fun hS => hS.all, fun h => \u27e8h\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  intro h k\n  exact (h k).1\n  intro h\n  constructor\n  exact fun k => \u27e8h k, fun _ => isCompactElement_of_isCompact_element _\u27e9\n  intro s hne h\n  obtain \u27e8k, hk\u27e9 := hne.exists_mem\n  exact \u27e8k, hk, h k\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor <;> intro <;> intros <;> apply IsCompactElement.of_isSupFiniteCompact <;>\n    assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor <;> intro h\n  <;> intro k\n  <;> apply h.isCompactElement\n  <;> apply isSupFiniteCompact_of_all_elements_compact\n  <;> intro k'\n  <;> apply h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  refine \u27e8fun _ k \u21a6 by infer_instance, fun h \u21a6 \u27e8fun s \u21a6 ?_\u27e9\u27e9\n  obtain \u27e8t, ht\u27e9 := h (sSup s)\n  have hts : t \u2286 s := by\n    refine fun x hx \u21a6 by_contra fun hs \u21a6 ?_\n    have : \u00ac (x : \u03b1) \u2264 sSup s := by simpa [Set.mem_sSup_iff] using hs\n    exact this (ht.1 hx)\n  have htsup : sSup s \u2264 sSup t := sSup_le_sSup hts\n  have htsup' : sSup t \u2264 sSup s := le_sSup_of_le ht.2 (le_refl _)\n  exact le_antisymm htsup htsup'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  next => exact fun h k => (h.isCompactElement k).1\n  next => exact fun h => \u27e8fun s => \u27e8h s.sSup, isCompactElement_sSup s\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  simp [IsSupFiniteCompact, IsCompactElement, CompleteLattice.isCompactElement_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor\n  next => exact IsSupFiniteCompact.isCompactElement\n  next => exact fun h => \u27e8fun s => (h s.toDual.toOrderIso.symm).isCompactElement\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem isSupFiniteCompact_iff_all_elements_compact :\n    IsSupFiniteCompact \u03b1 \u2194 \u2200 k : \u03b1, IsCompactElement k := by\n  constructor <;> intro h\n  intro k\n  specialize h {k}\n  simp only [isCompactElement_iff, exists_prop, Set.union_singleton, isSupFiniteCompact_iff] at h\n  obtain \u27e8s, hs\u27e9 := h\n  simp_all\n  intro s\n  apply isCompactElement_iff.mpr\n  specialize h s\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have : 0 < 1 := by norm_num\n  have : 0 < Module.rank R M := lt_trans this h\n  obtain \u27e8y, hy\u27e9 := exists_ne (0 : M)\n  refine \u27e8y, linearIndependent_fin2 ?_ ?_\u27e9\n  exacts [fun c hc => hy (eq_zero_of_zero_eq_one R M hc),\n    fun c hc => hx (hy (eq_zero_of_zero_eq_one R M (hc \u25b8 (add_right_eq_self.mp hc).symm))]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8n, hn\u27e9 := le_rank_iff_exists_linearIndependent.1 h.le\n  obtain \u27e8f, hf, hfx\u27e9 := (linearIndependent_empty_type (M := M)).1 hn\n  refine \u27e8f 0, ?_\u27e9\n  let g : Fin 2 \u2192 M := ![x, f 0]\n  refine hf.comp g (fun i \u21a6 ?_)\n  fin_cases i <;> simp [g, hfx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have : Nontrivial M := by rwa [nontrivial_iff_exists_ne (0 : M)]\n  obtain \u27e8y, hxy\u27e9 := exists_ne x\n  refine \u27e8y, linearIndependent_of_ne ?_ ?_\u27e9\n  \u00b7 aesop\n  \u00b7 aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have hx' : Submodule.span R {x} < \u22a4 := by\n    rw [lt_top_iff_ne_top, Ne]\n    intro e\n    rw [eq_top_iff, \u2190 e, Module.rank_le_one_iff] at h\n    exact hx (h x (Submodule.mem_span_singleton_self x))\n  obtain \u27e8y, hy\u27e9 := exists_mem_ne_zero_of_lt_rank (lt_trans hx' h)\n  refine \u27e8y, linearIndependent_iff.mpr fun c h => ?_\u27e9\n  simpa [hx'] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have c := (strongRankCondition_iff_exists_basis R M).mp \u2039_\u203a\n  obtain \u27e8B, hB\u27e9 := c\n  haveI := FiniteDimensional.of_finite_basis B hB\n  let \u03b9 := B.indexSet\n  let \u03b9' : Finset \u03b9 := {B.repr x}\n  let \u03b9'' := \u03b9 \\ \u03b9'\n  have h' : LinearIndependent R (B.coord \u2218 (\u2191) : \u03b9'' \u2192 M) :=\n    B.linearIndependent.comp _ Subtype.coe_injective fun h =>\n      hx <| B.repr_eq_zero_iff.mp h.symm\n  obtain \u27e8y, hy\u27e9 :=\n    B.linearIndependent.repr.surjective (h'.repr \u27e8x, by\n      simpa only [\u03b9'', Finset.mem_sdiff, Finset.mem_singleton] using Ne.symm hx\u27e9)\n  refine' \u27e8y, B.linearIndependent.repr.injective _\u27e9\n  ext \u27e8i, hi\u27e9\n  refine' Fin.cases _ _ i <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have h1 : 1 < Module.rank R M := h\n  have h2 : 0 < Module.rank R M := by\n    rw [\u2190 zero_lt_one]\n    exact h1.trans_le (by norm_num)\n  obtain \u27e8y, hy\u27e9 := exists_ne (0 : M)\n  use y\n  apply Fintype.linearIndependent_iff.2\n  intro g hg\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8x', hx', h\u27e9 := exists_lt_rank_lt_of_one_lt_rank h hx\n  refine \u27e8x', ?_\u27e9\n  refine Fintype.linearIndependent_iff.2 fun c hc \u21a6 ?_\n  have h' : (c 0 \u2022 x \u2260 c 1 \u2022 x') \u2192 c 0 = 0 \u2227 c 1 = 0 := by\n    intro hc'\n    simpa [hc] using h.lt_of_le (Submodule.span_le.mpr fun i hi \u21a6 by simp [hi])\n  by_cases hc'' : c 0 \u2022 x = c 1 \u2022 x' <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8x', hx', hy\u27e9 := Fintype.exists_ne_map_eq_of_card_lt (fun x => x)\n    (by simpa only [Fintype.card_fin, Fintype.card_fin, Fintype.card_fin] using h)\n  refine \u27e8x', ?_\u27e9\n  refine hx'.linearIndependent fun i => ?_\n  match i with\n  | 0 => exact hx\n  | 1 => simpa [hx'] using hy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8y, hy\u27e9 := exists_ne x\n  have : LinearIndependent R ![x, y] := by\n    rw [Fintype.linearIndependent_iff]\n    intro g hg\n    simp only [Fin.sum_univ_succ, Matrix.cons_val_zero, Matrix.cons_val_succ,\n      Fin.succ_zero_eq_one, Fin.succ_one_eq_two, Matrix.cons_val_two, Matrix.head_cons] at hg\n    have hy\u2080 : y \u2260 0 := hy\n    rw [eq_comm, \u2190 sub_eq_zero] at hg\n    obtain \u27e8hg\u2081, hg\u2082\u27e9 := eq_zero_or_eq_zero_of_smul_eq_zero (M := R) (smul_eq_zero.mp hg)\n    refine' Fintype.linearIndependent_iff.mp (linearIndependent_singleton hx) _ hg\u2081\n    refine' Fintype.linearIndependent_iff.mp (linearIndependent_singleton hy\u2080) _ hg\u2082\n  exact \u27e8y, this\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8y, hy\u27e9 := (rank_pos_iff_exists_ne_zero' M).1 (h.trans_le one_le_rank)\n  refine \u27e8y, linearIndependent_fin2_of_ne ?_ ?_ ?_ ?_\u27e9 <;> simp [hy, hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8y, hy\u27e9 := exists_ne (0 : M)\n  refine \u27e8y, LinearIndependent.of_comp _ ?_\u27e9\n  rw [LinearMap.linearIndependent_iff, Finsupp.linearIndependent_iff]\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have h' : lift (Cardinal.rank R) (1 : Cardinal) < Cardinal.lift (Cardinal.rank R) M := by\n    simpa [Cardinal.lift_one] using h\n  have h'' : Cardinal.lift _ \u2264 Cardinal.lift _ := by\n    apply Cardinal.lift_le.2\n    apply Cardinal.rank_le_of_submodule\n    apply Submodule.span_le_self\n  obtain \u27e8y, hy\u27e9 := Cardinal.lift_le.1 (h'.trans h'')\n  refine \u27e8y, fun c hc \u21a6 ?_\u27e9\n  simp only [Pi.single_eq_same, Fin.sum_univ_succ, Fin.val_zero, pow_zero, one_mul, hc,\n    Fin.succ_val, Fin.val_one, pow_one, mul_one, add_comm, Nat.cast_one] at hy\n  simpa [hx] using hy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8n, h\u27e9 := h\n  have := h.1\n  obtain \u27e8y, hxy\u27e9 := exists_ne_zero (R := R) (M := M) (N := N)\n    (fun y \u21a6 LinearIndependent R ![x, y]) (N := N)\n  refine \u27e8y, ?_\u27e9\n  rw [linearIndependent_iff'] at hxy \u22a2\n  simpa [hx, hxy] using h.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have hx' : 1 \u2264 Module.rank R M := h.le\n  have hx'' : 1 \u2264 #R := by\n    rw [\u2190 Cardinal.lift_one.{v}]\n    exact Cardinal.lift_le.2 hx'\n  have : \u2203 (y : M), \u2203 (_ : y \u2260 0), LinearIndependent R ![x, y] := by\n    have hx''' : #R \u2264 #R ^ #R := Cardinal.mk_le_of_injective (NoZeroSMulDivisors.injective_of_left R M)\n    have : Cardinal.one < #R ^ #R := by\n      apply Cardinal.one_lt_power_iff.2\n      \u00b7 contrapose! hx\n        simpa [\u2190 Cardinal.lift_one.{v}] using Cardinal.lift_mk_le.1 hx\n      \u00b7 exact Cardinal.mk_ne_zero.{v} M\n    obtain \u27e8y, hy\u27e9 := Cardinal.exists_not_mem_of_length_lt (\u03b9 := Fin 2)\n      (by simpa using this) (fun i => LinearIndependent R ![x, y])\n    use y\n    use hy.1\n    simpa using hy.2 0\n  obtain \u27e8y, hy\u27e9 := this\n  exact \u27e8y, hy.2\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8y, hy\u27e9 := exists_lt_rank_lt_one_lt_rank h hx\n  refine \u27e8y, linearIndependent_iff.2 fun c hc \u21a6 ?_\u27e9\n  rw [Fin.sum_univ_succ, add_eq_zero_iff_eq_neg] at hc\n  rw [neg_eq_iff_eq_neg] at hc\n  obtain \u27e8hc0, hcy\u27e9 := exists_eq_zero_of_lt_rank_lt_one_lt_rank hy hc.1\n  obtain \u27e8hc1, hcx\u27e9 := exists_eq_zero_of_lt_rank_lt_one_lt_rank (lt_of_le_of_lt hy h) hc.2\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8n, hn\u27e9 := h.exists_le_card_basis\n  have hn0 : 1 \u2264 n := hn \u25b8 (zero_lt_one.trans h).le\n  obtain \u27e8y, hxy\u27e9 := exists_isOrtho_basis_of_one_lt_rank hx h\n  refine \u27e8y, linearIndependent_of_ne_zero_of_isOrtho ?_ ?_ hxy\u27e9\n  case refine_1 => exact fun i \u21a6 by simp [hn0 (i.2.trans hn.le).le]\n  case refine_2 => exact fun i j hij \u21a6 by simp [hij]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  use (1 : R) \u2022 x\n  rw [Fintype.linearIndependent_iff]\n  simp [hx, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8_, _, h\u27e9 := exists_lt_finrank_lt h hx\n  refine \u27e8_, linearIndependent_fin_cons.2 \u27e8hx, ?_\u27e9\u27e9\n  rw [linearIndependent_fin_cons] at h\n  exact h.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  nontriviality R\n  have h' : 1 < Module.rank R M := h\n  obtain \u27e8y, hy\u27e9 := (rank_add_rank_le_rank_of_subset_of_subset (subset_univ\n    (S := Fin 2)) (subset_univ (S := Fin 2)) :\n    Module.rank R ![x, y] \u2264  Module.rank R M).lt_of_ne' h'\n  refine \u27e8y, fun h \u21a6 ?_\u27e9\n  have h'' : Module.rank R ![x, y] < 2 := by\n    simpa only [Fin.succ_mk, Fin.last, Fin.castSucc_zero, Matrix.rank, rank, h] using hy\n  simp at h''\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have h' : 1 < Module.rank R M := h\n  have h'' : 1 < Module.rank R M := h\n  refine \u27e8(Basis.ofVectorSpace R M).repr.symm (Fin.tail (fun _ => x) 0), ?_\u27e9\n  rw [LinearIndependent]\n  simp only [repr_eq_single, Fin.tail_cons, Pi.single_eq_of_ne (Fin.succ_ne_zero _).symm]\n  exact (Basis.ofVectorSpace R M).linearIndependent\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8y, hy\u27e9 := exists_ne_zero (R := R) (M := M)\n  refine \u27e8y, linearIndependent_iff.mpr ?_\u27e9\n  rintro a \u27e8rfl, rfl\u27e9\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8y, hy\u27e9 := exists_ne x\n  refine \u27e8y, LinearIndependent.fin2 fun i \u21a6 ?_\u27e9\n  obtain rfl | rfl := Fin.eq_zero_or_eq_one i\n  exacts [hx, hy]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  use (1 : M)\n  apply Fintype.linearIndependent_iff.2\n  intro g hg\n  simp_all [Fin.sum_univ_succ, -one_smul, -add_smul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  cases' exists_lt_lt h with h h\n  refine \u27e8(h.choose : M), ?_\u27e9\n  apply Fintype.linearIndependent_iff.2\n  simp [hx, Fintype.fin_two]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8x', hx'\u27e9 := exists_ne (0 : M)\n  refine \u27e8x', ?_\u27e9\n  rw [Fintype.linearIndependent_iff]\n  simp only [Fin.forall_fin_two, Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.head_cons]\n  by_contra! h'\n  have h'' : x = 0 := by\n    apply hx\n    rw [\u2190 one_smul R x]\n    replace h' := h' 1\n    simpa [hx'] using h'\n  exact one_lt_rank_of_nontrivial_of_finrank_pos (ne_of_gt h) h'' hx'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8y, hy\u27e9 := (rank_lso R M).out.2 h\n  refine \u27e8y, linearIndependent_fin2 ?_ ?_ ?_\u27e9 <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8n, hn\u27e9 := h\n  obtain \u27e8y, hy\u27e9 := exists_is_basis_one_more R M n\n  refine \u27e8y 0, ?_\u27e9\n  refine IsEmpty.linearIndependent_iff.mpr \u27e8by simpa using hy.1, fun i => ?_\u27e9\n  fin_cases i <;> assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8y, hy\u27e9 := exists_ne (0 : M)\n  use y\n  apply Fintype.linearIndependent_iff.2\n  rintro f (h : f 0 \u2022 x + f 1 \u2022 y = 0)\n  have f0 : f 0 = 0 := by\n    by_contra hf\n    have hf0 : f 0 \u2022 x \u2260 0 := by\n      rw [Ne, \u2190 sub_eq_zero] at hf\n      exact zero_ne_one.symm.trans_lt ((sub_pos.2 hf).trans_le (le_add_left 1))\n    rw [add_comm] at h\n    have hy0 : f 1 \u2022 y = 0 := by\n      rw [\u2190 sub_eq_zero] at h\n      exact sub_eq_zero.1 h\n    exact hy (smul_eq_zero.1 hy0).1\n  have f1 : f 1 = 0 := by\n    by_contra hf\n    have hf0 : f 1 \u2022 y \u2260 0 := by\n      rw [Ne, \u2190 sub_eq_zero] at hf\n      exact zero_ne_one.symm.trans_lt ((sub_pos.2 hf).trans_le (le_add_right 1))\n    rw [add_comm] at h\n    have hx0 : f 0 \u2022 x = 0 := by\n      rw [\u2190 sub_eq_zero] at h\n      exact sub_eq_zero.1 h\n    exact hx (smul_eq_zero.1 hx0).1\n  simp [f0, f1]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  have hx' : 0 < Module.rank R M := lt_trans zero_lt_one h\n  have hy : x \u2208 (\u22a4 : Submodule R M) := Submodule.mem_top\n  have : Module.Finite R M := .of_finite R M\n  obtain \u27e8y, hy, hxy\u27e9 := exists_ne_zero_of_one_lt_rank hx' hx hy\n  use y\n  apply LinearIndependent.fin_cons\n  simp [hy, hxy]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8y, hy\u27e9 := exists_ne x\n  refine \u27e8y, LinearIndependent.of_comp (linearIndependent_fin2 R M).comp _ ?_\u27e9\n  simp [hy]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8_, y, hy, hxy\u27e9 := Fintype.exists_lt_of_one_lt_card (by simp [h, Nat.succ_le_iff])\n  refine \u27e8y, ?_\u27e9\n  rw [Fintype.linearIndependent_iff]\n  simp_all only [Fin.forall_fin_two, Matrix.cons_val_zero, Matrix.cons_val_one,\n    Matrix.head_cons]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem exists_linearIndependent_pair_of_one_lt_rank [StrongRankCondition R]\n    [NoZeroSMulDivisors R M] (h : 1 < Module.rank R M) {x : M} (hx : x \u2260 0) :\n    \u2203 y, LinearIndependent R ![x, y] := by\n  obtain \u27e8y, hy\u27e9 := exists_ne (0 : M)\n  refine \u27e8y, linearIndependent_of_ne_zero_of_finrank_succ ?_ h\u27e9 <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  have h := ODE_solution_unique_of_mem_Icc\n    (mem_Icc_of_Ioo ht)\n    (fun t ht => (hf t ht).1) (fun t ht => (hg t ht).1) heq\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  apply HasDerivAt.unique_of_eventuallyEq_of_mem (hf t ht).1 (hg t ht).1\n  exact heq \u25b8 (hf t\u2080 ht).2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  have hf' : HasDerivAt f (v t (f t)) t := (hf t ht).1\n  have hg' : HasDerivAt g (v t (g t)) t := (hg t ht).1\n  apply HasDerivAt.unique (hf' t ht) (hg' t ht)\n  exact heq\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  have h_deriv : HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t := hf t ht\n  have h_deriv' : HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t := hg t ht\n  exact HasDerivAt.unique (h_deriv.1.hasDerivAt) (h_deriv'.1.hasDerivAt)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro x hx\n  have h := hf x hx\n  have h' := hg x hx\n  have h\u2081 := h.2\n  have h\u2082 := h'.2\n  have h\u2083 := h.1\n  have h\u2084 := h'.1\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  have hf' : HasDerivAt f (v t (f t)) t := (hf t ht).1\n  have hg' : HasDerivAt g (v t (g t)) t := (hg t ht).1\n  have hfg' : HasDerivAt f (v t (g t)) t := (hf t ht).2 \u25b8 hf'\n  exact HasDerivAt.unique (hfg'.has_deriv_at_of_has_deriv_at_of_ne (hg' .has_deriv_at_of_has_deriv_at_of_ne (ht.2.ne)))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro x hx\n  have := ODE_solution_unique_of_mem_Icc ht hf hg heq (Ioo_subset_Icc_self hx)\n  exact this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro x hx\n  apply HasDerivAt.unique_of_eventuallyEq (hf x hx).1 (hg x hx).1\n  exact heq \u25b8 (hf t\u2080 ht).2.self_of_nhds (hg t\u2080 ht).2.self_of_nhds\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  apply eq_of_has_deriv_right_eq_zero (hf t ht).1 (hg t ht).1 heq\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht'\n  apply te\n  exact ht'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  apply ODE_solution_unique_of_mem_Icc hf hg heq <;>\n    (first\n      | apply Set.mem_of_mem_Ioo ht\n      | apply Set.mem_of_mem_Ioo ht)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  have heq' : f t = g t := by\n    apply eqOn_of_hasDerivAt_eq_of_eqOn (fun t _ \u21a6 (hf t \u2039_\u203a).1) (fun t _ \u21a6 (hg t \u2039_\u203a).1)\n    exact heq\n    intro t _\n    exact (hf t \u2039_\u203a).2.inter (hg t \u2039_\u203a).2\n  exact heq' t \u2039_\u203a\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht'\n  apply HasDerivAt.unique_of_eventuallyEq (hf t ht').1 (hg t ht').1\n  exact heq\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  exact fun t ht' \u21a6 by\n    have h := hf t ht'\n    have h\u2081 := hg t ht'\n    have h\u2082 := heq\n    simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  have h := hf t ht\n  have h\u2081 := hg t ht\n  have h\u2082 : f t = g t := by\n    apply HasDerivAt.unique_of_eventuallyEq h h\u2081\n    rw [heq]\n    apply eventually_of_mem (Ioo_mem_nhds ht.1 ht.2)\n    intro x hx\n    apply heq\n  exact h\u2082\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro x hx\n  apply ODE_solution_unique_of_mem_Icc _ _ hx ht heq\n  intro u hu\n  exact hf u hu\n  intro u hu\n  exact hg u hu\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  have h := (hf t ht).2\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  apply HasDerivAt.unique_of_eventually\n  exacts [hf t ht, hg t ht, heq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro x hx\n  have h :=\n    unique_diff_on_Ioo a b ht hf hg heq x hx\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro x hx\n  apply eq_of_has_deriv_at_eq_of_eq_initial_condition\n    <;> simp_all [Heading.on.eq_on]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro x hx\n  have h := g.closed_ball_solutions_subset_of_is_solution ht hf hg heq x hx\n  convert h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht'\n  apply UniqueDiffWithinAt.eq_on_Ioo _ (hf _ ht'.1).1 (hg _ ht'.2).1\n  exacts [heq, fun t' ht' => (hf _ ht'.1).2, fun t' ht' => (hg _ ht'.2).2]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  apply eqOn_of_hasDerivAt_eq_of_lt_of_le heq\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  apply HasDerivAt.unique\n  <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  refine' fun t ht' =>\n    (hf t ht').2.eq_of_same_deriv (hg t ht').2 (continuousOn_iff_continuous_restrict.1 hf.1 t ht')\n      (continuousOn_iff_continuous_restrict.1 hg.1 t ht') heq\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro x hx\n  have h := hf x hx\n  have h\u2081 := hg x hx\n  have h\u2082 := hf t\u2080 ht\n  have h\u2083 := hg t\u2080 ht\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro x hx\n  have h := (hf x hx).1.unique (hg x hx).1 heq\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  have h := hf t ht\n  have h' := hg t ht\n  apply HasDerivAt.unique (h.1.snd) (h'.1.snd)\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht_mem\n  apply ODE_solution_unique_of_mem_Icc _ _ _\n  <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht'\n  have h_deriv : HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t := hf t ht'\n  have h_deriv' : HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t := hg t ht'\n  apply HasDerivAt.unique_of_eventuallyEq\n    h_deriv.1 h_deriv'.1\n    (hf t ht').1 (hg t ht').1\n    (heq \u25b8 (hf t ht').2) (heq \u25b8 (hg t ht').2)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro x hx\n  have hf' : \u2200 x \u2208 Ioo a b, HasDerivAt f (v x (f x)) x \u2227 f x \u2208 s x := by\n    intro x hx\n    exact hf x hx\n  have hg' : \u2200 x \u2208 Ioo a b, HasDerivAt g (v x (g x)) x \u2227 g x \u2208 s x := by\n    intro x hx\n    exact hg x hx\n  have hfg : HasDerivAt f (v x (f x)) x \u2227 f x \u2208 s x := hf' x hx\n  have hgg : HasDerivAt g (v x (g x)) x \u2227 g x \u2208 s x := hg' x hx\n  exact HasDerivAt.unique (hfg.1.hasDerivAt.congr_of_eventuallyEq heq.symm hx) hgg.1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem ODE_solution_unique_of_mem_Ioo\n    (ht : t\u2080 \u2208 Ioo a b)\n    (hf : \u2200 t \u2208 Ioo a b, HasDerivAt f (v t (f t)) t \u2227 f t \u2208 s t)\n    (hg : \u2200 t \u2208 Ioo a b, HasDerivAt g (v t (g t)) t \u2227 g t \u2208 s t)\n    (heq : f t\u2080 = g t\u2080) :\n    EqOn f g (Ioo a b) := by\n  intro t ht\n  apply HasDerivAt.unique_of_eventuallyEq (hf t ht).1 (hg t ht).1\n  exact (hf.1 t ht).eventuallyEq_of_mem (hg.1 t ht) heq\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n  simp [Int.floor_eq_iff]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num [Int.floor_eq_iff, Int.cast_le]\n  exact \u27e8by omega, by omega\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num [Int.floor_eq_iff, div_lt_iff (show (0 : \u211a) < d by norm_num), mul_lt_mul_right (show (0 : \u211a) < d by norm_num)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num [Int.floor_eq_iff]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num [Int.floor_eq_iff, Rat.le_div_iff_mul_le (show (0 : \u211a) < \u2191d by norm_cast; omega)]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n  rw [Int.floor_eq_iff]\n  norm_cast\n  simp [mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n  rw [Int.floor_eq_iff]\n  constructor <;> norm_cast\n  <;> simp [div_eq_mul_inv, mul_comm]\n  <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  exact_mod_cast Int.floor_eq_iff.2 \u27e8(Int.le_div_iff_mul_le' (by positivity)).2 n.cast_nonneg,\n    (Int.div_lt_iff_lt_mul' (by positivity)).2 (Int.floor_lt (n / \u2191d)).le\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num\n  exact_mod_cast Int.floor_eq_iff.mpr \u27e8by exact_mod_cast n / d * d \u2264 n, by exact_mod_cast n < (n / d + 1) * d\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  rw [Int.floor_eq_iff]\n  norm_cast\n  simp [div_lt_iff, lt_div_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num [Int.floor_eq_iff, mul_comm]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num [Int.floor_eq_iff, Int.cast_div, Int.cast_natCast, Nat.cast_pos,\n    Int.natCast_pos, Nat.cast_nonneg, Nat.pos_iff_ne_zero]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n  exact_mod_cast Int.floor_div_nat n d\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n  apply floor_eq_iff.mpr\n  simp\n  norm_cast\n  constructor <;> norm_cast <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  rw [Int.cast_natCast]\n  simp [Int.floor_eq_iff, Int.cast_natCast]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  simp_all [Int.floor_eq_iff, Rat.cast_div, Rat.cast_intCast]\n  norm_cast\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num\n  exact_mod_cast Int.floor_eq_iff.mpr \u27e8by exact_mod_cast le_rfl, by exact_mod_cast lt_one_add _\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n  simp [Int.floor_eq_iff, Int.cast_div, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num [Int.floor_eq_iff, Int.cast_commute]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_num\n  rw [Int.floor_eq_iff]\n  simp\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n  rw [Int.floor_eq_iff, Int.cast_div]\n  norm_cast\n  simp [Int.ofNat_lt]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  simp_all [Int.floor_eq_iff]\n  norm_num\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  simp [Int.floor_eq_iff, Int.cast_div, Int.cast_id]\n  norm_cast\n  simp [div_eq_mul_inv, mul_comm]\n  norm_cast\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  simp_all [Int.cast_natCast]\n  norm_cast\n  apply Eq.symm\n  rw [Int.cast_eq_intCast_iff_dvd_sub, Int.cast_sub, Int.cast_mul, Int.cast_one]\n  norm_cast\n  apply Eq.symm\n  rw [Int.cast_eq_intCast_iff_dvd_sub]\n  apply Int.mod_add_div\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  rw [Int.floor_eq_iff, Int.cast_div]\n  simp [div_lt_iff, lt_div_iff, Int.cast_pos]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n  rw [Int.floor_int_div_nat_eq_div]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_int_div_nat_eq_div {n : \u2124} {d : \u2115} : \u230a(\u2191n : \u211a) / (\u2191d : \u211a)\u230b = n / (\u2191d : \u2124) := by\n  norm_cast\n  rw [Int.floor_eq_iff]\n  simp [div_lt_iff, lt_div_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  constructor <;> intro hp <;> simp_rw [Set.Pairwise] at hp \u22a2 <;> intro i j hij <;>\n    specialize hp i j (h.directedOn.directedOn_iUnion_of_chain hij.le) hij <;>\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun hr n => hr.mono (iUnion_subset_iff.mp <| subset_iUnion f n), fun hr => _\u27e9\n  rintro x hx y hy hxy\n  simp only [mem_iUnion, SetCoe.exists, exists_prop] at hx hy\n  obtain \u27e8n, hnx\u27e9 := hx\n  obtain \u27e8m, hmy\u27e9 := hy\n  obtain \u27e8p, hpn, hnp\u27e9 := h n m\n  exact @hr p \u27e8hnx, hnp \u25b8 hnx\u27e9 \u27e8hmy, hnp.trans hmy\u27e9 hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun h\u2081 n => h\u2081.mono (iUnion_subset_iff.2 fun m => (h.exists.choose_spec m n).1),\n    fun h\u2081 _ _ h\u2082 => h\u2081 _ _ fun _ _ => h\u2082 _ _\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun h1 n => h1.mono (iUnion_subset_iff.2 fun m _ => (h m n).subset), _\u27e9\n  intro H u\u2081 u\u2082 _ hu\n  rcases h.directedOn (Set.mem_iUnion.1 hu.1) (Set.mem_iUnion.1 hu.2) with \u27e8n, hn\u27e9\n  exact (H n).mono (fun x hx y hy => hu.2 \u27e8x, hn hx, rfl\u27e9 \u27e8y, hn hy, rfl\u27e9)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  constructor <;> intro h\u2081 n <;> apply Pairwise.mono h\u2081 <;> exact h.subset_mem _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun hr n => _, fun hr => _\u27e9\n  \u00b7 exact hr.subset (subset_iUnion _ _)\n  \u00b7 exact iUnion_mono fun n => hr n\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine \u27e8fun h\u2081 n \u21a6 h\u2081.mono (Set.subset_iUnion _ _), fun h\u2081 _ _ hxy \u21a6 ?_\u27e9\n  rw [Set.mem_iUnion] at *\n  obtain \u27e8n, rfl\u27e9 := hxy.exists_ge\n  exact h\u2081 n _ (h.subset hxy.fst_le) _ (h.subset hxy.snd_le)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun hr n => hr.subset (subset_iUnion _ n), fun hr x hx y hy hxy => hr _ _\u27e9\n  obtain \u27e8nx, hnx\u27e9 := mem_iUnion.mp hx\n  obtain \u27e8ny, hny\u27e9 := mem_iUnion.mp hy\n  obtain \u27e8nz, hnz\u27e9 := h nx ny nz\n  exact hr nz (hnz hnx) (hnz hny) hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun hr n => hr.mono <| iUnion_subset_iff.2 fun m => (h.exists_ge m n).imp fun _ hmn => hmn.1,\n    fun hr => pairwise_iUnion_of_chain h hr\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun h1 n => h1.mono <| subset_iUnion _ _, fun h1 _ _ hxy => h.elim _ _ hxy fun i j => _ =>\n    (h1 i).mono (subset_iUnion _ _) (h1 j).mono (subset_iUnion _ _)\u27e9\n  exacts [le_iUnion\u2082_of_le i le_rfl, le_iUnion\u2082_of_le j le_rfl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun H n => H.mono <| iUnion_subset_iff.2 fun m _ => _, fun H => (iUnion_mono fun _ => H _).pairwise_of_refl rfl\u27e9\n  exact (refl_on_subset _ <| subset_iUnion _ m)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine \u27e8fun h1 n \u21a6?_, fun h1 n m h2 h3 \u21a6?_\u27e9\n  exacts [h1.mono (Set.subset_iUnion _ _), h1 n m h2 (h h3)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine \u27e8fun h' n \u21a6?_, fun h' \u21a6 ?_\u27e9\n  exacts [(h'.mono <| iUnion_subset_of_subset _ le_rfl),\n    (h'.iUnion h)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  constructor\n  \u00b7 intro h1 n\n    exact Pairwise.mono (subset_iUnion _ _) h1\n  \u00b7 intro h1 _ _ h2\n    obtain \u27e8n, h3, h4\u27e9 := h h2\n    exact (h1 n).mono h3 h4\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun hr n => (hr.subset <| subset_iUnion _ _).mono, _\u27e9\n  intro H s t hs ht hst\n  obtain \u27e8c, hc\u27e9 := h.nonempty\n  rcases mem_iUnion.1 (hs hc) with \u27e8m, hm\u27e9\n  rcases mem_iUnion.1 (ht hc) with \u27e8n, hn\u27e9\n  rcases h m n with \u27e8x, hc, hc'\u27e9\n  exact H n hn hm (hst.mono hc' subset_rfl)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun h\u2081 n => h\u2081.mono (Set.subset_iUnion _ _), fun h\u2081 => _\u27e9\n  rcases h with \u27e8g, hg : \u2200 n, f (g n) \u2286 f n\u27e9\n  rw [Set.iUnion_subset_iff] at *\n  intro n m n_ne\n  exact h\u2081 (g n) (g m) (hg n) (hg m) (h n m n_ne)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun h' n => h'.mono <| subset_iUnion _ _, fun hr => _\u27e9\n  simp_rw [Set.Pairwise, iUnion_forall]\n  intro x hx y hy hxy\n  rcases h.exists_ge_ge with \u27e8z, hzx, hzy\u27e9\n  exact hr z hzx <| hx.mono <| subset_iUnion _ _ hzx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  constructor\n  \u00b7\n      intro H i j hij\n      apply H\n      exact mem_iUnion_of_mem i (h.subset_mem hij)\n  \u00b7\n      rintro H _ \u27e8i, rfl\u27e9 _ \u27e8j, rfl\u27e9 hij\n      exact H i hij\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun h\u2081 n => h\u2081.mono (Set.subset_iUnion _ _), fun h\u2081 _ _ hxy => _\u27e9\n  obtain \u27e8n, hn\u27e9 := h.directedOn (Set.Nonempty.image _ (Set.nonempty_of_mem hxy))\n  exact (h\u2081 n).mono (Set.inter_subset_inter_left _ hn) (Set.inter_subset_inter_right _ hn) hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun h\u2080 n => h\u2080.mono (iUnion_subset_iff.2 fun m => _), fun h\u2080 _ _ h\u2081 => _\u27e9\n  \u00b7 exact subset_iUnion _ _\n  exact h\u2080 _ h\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine \u27e8fun hr n \u21a6?_, fun hr x hx y hy hxy \u21a6?_\u27e9\n  exacts [hr n n (Subset.refl _),\n    let \u27e8k, hk\u27e9 := h.exists_ge_ge x hx y hy\n    (hr k k (Subset.refl _)).mono (hk.1.trans <| hk.2.trans <| hxy.le_bot) ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun H n => (H.mono <| subset_iUnion _ _).set_pairwise trivial, fun H n m hnm => _\u27e9\n  rcases h n m hnm with \u27e8k, hkn, hkm\u27e9\n  exact (H k).mono (subset_iUnion _ _) (subset_iUnion _ _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine \u27e8fun h\u2080 n _ m _ hnm \u21a6 (h n m hnm).eventuallyEq.symm \u25b8 h\u2080 n m (h n m hnm), fun h\u2080 n m _ \u21a6 ?_\u27e9\n  exact (h n m).directedOn (fun na \u21a6 h\u2080 n na) fun mb \u21a6 h\u2080 m mb\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun H n => H.subset (subset_iUnion _ _), fun H _ _ hkl hik => _\u27e9\n  rcases mem_iUnion.1 hkl with \u27e8n, hkl\u27e9\n  rcases mem_iUnion.1 hik with \u27e8m, hik\u27e9\n  rcases h n m with \u27e8k, hkn, hkm\u27e9\n  exact H k (hkl.trans hkn) (hik.trans hkm)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  constructor <;> intro H n <;> apply Pairwise.mono _ (H n) <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine \u27e8fun h_pairwise i j hij \u21a6 ?_, fun h_pairwise i j hij \u21a6 ?_\u27e9\n  \u00b7 exact h_pairwise i j (iUnion_subset_iff.mpr (fun k \u21a6 (h.1 i k).subset_union_left) hij)\n  \u00b7 obtain \u27e8k, hik, hjk\u27e9 := h i j\n    exact h_pairwise k i (hik hij)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  exact \u27e8fun H n => H.mono (subset_iUnion _ _), fun H _ _ => h.elim (fun _ _ _ => empty_subset _)\n    fun _ _ _ hmn => hmn.mono_left (subset_iUnion _ _)\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine \u27e8fun hf i j hij \u21a6 ?_, fun hf i j hij \u21a6 ?_\u27e9\n  \u00b7 exact hf hij (mem_iUnion.2 \u27e8i, hij.1\u27e9) (mem_iUnion.2 \u27e8j, hij.2\u27e9)\n  \u00b7 obtain \u27e8k, hik, hjk\u27e9 := h.directedOn_range.exists_ge \u27e8i, hij.1\u27e9 \u27e8j, hij.2\u27e9\n    exact hf hik (hf hjk)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine \u27e8fun hrf n => ?_, fun hrf => hrf.iUnion h\u27e9\n  exact hrf.mono (iUnion_subset_iff.mp le_rfl)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun H i j hij => _, fun H i j hij => _\u27e9\n  \u00b7 exact H (mem_iUnion.2 \u27e8i, hij\u27e9) (mem_iUnion.2 \u27e8j, rfl\u27e9)\n  \u00b7 obtain \u27e8k, hik, hjk\u27e9 := h i j\n    exact (H k).mono (hik.trans <| subset_iUnion f i) (hjk.trans <| subset_iUnion f j) hij\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  constructor <;> simp only [Set.Pairwise, Set.mem_iUnion, exists_imp, and_imp]\n  \u00b7 intro h_pairwise n x hx y hy h_ne\n    obtain \u27e8k, hk\u27e9 := h n k\n    exact h_pairwise k (by simp_all)\n  \u00b7 intro h_pairwise k x hx y hy h_ne\n    obtain \u27e8n, m, hn, hm, h_eq\u27e9 := h k k\n    simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem pairwise_iUnion {f : \u03ba \u2192 Set \u03b1} (h : Directed (\u00b7 \u2286 \u00b7) f) :\n    (\u22c3 n, f n).Pairwise r \u2194 \u2200 n, (f n).Pairwise r := by\n  refine' \u27e8fun hr n => hr.mono <| iUnion_subset_iff.2 fun m hnm => _, fun hr x hx y hy hxy => _\u27e9 <;>\n    simp_rw [\u2190 not_imp_not]\n  exacts [h _ _ hnm, hx hy hxy]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  ext\n  simp [hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  rw [e.restr_toPartialEquiv]\n  ext\n  simp [hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  cases e\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  cases e\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  ext\n  simp [hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  exact restr_toPartialEquiv _ _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  cases e\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  cases e\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  unfold Set.instMembership.mem\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  cases e\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  ext\n  simp [hs, hs.mem_nhdsSet]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  rw [Set.prod_eq]\n  ext\n  simp [hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  unfold Restr\n  congr\n  simp [hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  simp [e.restr_def, hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  ext\n  simp [hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  cases e\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  cases e\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  ext\n  unfold Set.mem_restr\n  simp [e.map_source, hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  cases e\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  rw [RESTRICT, RESTRICT, Equiv.Set.image_eq_preimage e.toEquiv s,hs.exists_open_ball_subset (isOpen_univ : IsOpen (univ : Set X))]\n  simp [Equiv.eq_symm_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  apply Subsingleton.elim\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  ext x\n  simp [hs, e.isOpen_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  cases e\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  simp [Set.preimage_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  ext x\n  simp [hs, e.mem_restr]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  ext x\n  simp [hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  subst e\n  simp only [restr_toPartialEquiv, isOpen_univ, Set.univ_inter]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  ext x\n  simp only [Set.mem_preimage, toPartialEquiv_asEquiv, restr_asEquiv, Equiv.coe_trans,\n    Equiv.symm_symm, Set.preimage_id', Set.preimage_preimage, Equiv.symm_apply_apply]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  cases e\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  exact restr_toPartialEquiv _ _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    simp [ih, bind_map, map_bind, Function.comp, append_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction' l\u2081 with a l\u2081 IH\n  simp\n  simp only [cons_append, sublists_cons, IH, bind_map, Function.comp, map_bind, bind_assoc]\n  congr 1\n  funext x\n  congr 1\n  funext y\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    simp_all [bind_assoc, bind_map, map_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih => simp_all [sublists_append]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    simp_all only [List.sublists_cons, List.bind_map, List.map_map, List.bind_bind,\n      List.map_bind, List.append_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 IH =>\n    simp_all only [sublists_cons, append_eq_bind, bind_bind, map_bind, Function.comp_apply,\n      Function.comp]\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081' ih =>\n    simp_all only [sublists_cons, map_bind, bind_bind, map_map, Function.comp]\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    simp_all only [sublists_cons, bind_map, map_bind, pure_bind, bind_assoc, map_pure,\n      bind_pure_bind]\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    rw [List.append_cons, sublists_cons, ih]\n    simp [List.bind, List.map, List.bind_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction' l\u2081 with a l\u2081 IH <;> simp_all [sublists_append, bind_assoc]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    simp_all only [sublists_cons, bind_sublists_append, map_sublists_append]\n    simp [List.bind_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    simp_all only [sublists_cons, bind_map, map_map]\n    simp [bind_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    simp only [List.cons_append, sublists_cons, map_bind, bind_bind, map_map, append_assoc]\n    simp [ih, bind_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    simp [ih, bind_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih => simp [ih, bind_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction' l\u2081 with a l\u2081 ih\n  simp only [Nil_append, sublists_nil, bind_eq_bind, map_eq_bind, nil_bind, cons_append,\n    sublists_cons, bind_eq_bind, map_eq_bind, append_nil]\n  rw [ih]\n  simp only [bind_eq_bind, map_eq_bind, append_bind, nil_bind, cons_bind, append_assoc,\n    append_right_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 IH => simp_all (List.bind_assoc)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    rw [List.append_cons, sublists_cons, ih, bind_map, map_bind]\n    simp [List.bind, List.map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081' ih => simp [ih, bind_assoc, Function.comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 IH =>\n    rw [List.cons_append, sublists_cons, IH, bind_map]\n    simp [List.map_bind, List.bind_assoc, List.bind_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    simp_all only [sublists_cons, bind_map, map_bind, sublists_nil, bind_nil, map_nil,\n      nil_bind, cons_bind, map_cons, bind_cons, cons_append, cons_left_comm,\n      cons_right_comm]\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    simp_all [sublists_cons, bind_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction' l\u2081 with h\u2081 t\u2081 ih\n  case nil => simp\n  case cons =>\n    simp_all only [sublists_append, sublists_cons, sublists_nil, bind_eq_bind, map_eq_map,\n      Function.comp_apply, append_assoc, append_nil]\n    bind_assoc\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    rw [List.append_eq, sublists_cons, bind_map, ih]\n    simp [map_bind, bind_assoc, Function.comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  simp only [sublists, sublistsAux, sublistsAux.equations._eqn_1, bind_eq_bind, map_eq_bind,\n    bind_bind, Function.comp_apply, bind_assoc]\n  congr\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  simp only [sublists, bind_eq_bind, map_eq_bind, Function.comp, bind_bind, bind_map,\n    map_bind, append_bind]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih => simp [ih, bind_assoc, map_id]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction' l\u2081 with a l\u2081 IH\n  \u00b7 simp [map_id]\n  simp only [cons_append, sublists_cons, bind_eq_bind, map_eq_bind]\n  rw [bind_assoc, IH]\n  simp [Function.comp, bind_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081' ih =>\n    simp only [cons_append, sublists_cons, bind_eq_bind, map_eq_bind, bind_assoc,\n      bind_fun_comp, map_eq_bind_pure_comp, bind_pure_comp, bind_assoc]\n    simp [ih, \u2190 bind_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    rw [List.append_cons, List.bind_map]\n    simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil => simp\n  | cons a l\u2081 ih =>\n    simp_all only [List.map, List.bind, List.append_eq, Function.comp_apply]\n    simp [List.bind, List.map, List.append_eq, Function.comp_apply, ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sublists_append (l\u2081 l\u2082 : List \u03b1) :\n    sublists (l\u2081 ++ l\u2082) = (sublists l\u2082) >>= (fun x => (sublists l\u2081).map (\u00b7 ++ x)) := by\n  induction l\u2081 with\n  | nil =>\n    simp_all [sublists, bind_eq_bind, map_eq_bind]\n  | cons a l\u2081 ih =>\n    simp_all [sublists, bind_eq_bind, map_eq_bind]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_Iic]\n  intro x\n  have := hf x\n  rwa [\u2190 preimage_compl, compl_Ici] at this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_preimage_measurableSet]\n  intro s hs\n  have : f \u207b\u00b9' s = \u22c3 x \u2208 s, f \u207b\u00b9' Ici x := by\n    ext y\n    simp [hs]\n  rw [this]\n  apply MeasurableSet.biUnion s\n  intro x _\n  exact hf x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_Ioi]\n  intro x\n  convert hf x using 1\n  ext y\n  simp only [mem_Ioi, mem_Ici, le_iff_lt_or_eq, lt_iff_le_and_ne, and_comm, @and_assoc, @and_left_comm]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [\u2039MeasurableSpace \u03b4\u203a.measurable_eq]\n  exact measurable_of_Ioi fun x => (hf x).compl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_Ici]\n  intro x\n  apply hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_Ici]\n  exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_Ici]\n  exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_Ioi]\n  intro x\n  convert hf x using 1\n  ext y\n  simp only [mem_Ioi, mem_Ici, lt_iff_le_and_ne, and_comm, \u2190 le_iff_lt_or_eq, neg_neg]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  exact measurable_of_isClosed (fun s h \u21a6 by simpa [isClosed_iff_nhds] using hf _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_Ici]\n  exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_Ici]\n  exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [\u2190 measurable_iff_Ici]\n  exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_Ici]\n  exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  exact measurable_of_Ioi fun x => by simpa only [preimage_Ioi] using hf x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [\u2190 generateFrom_Ici \u03b1]\n  exact measurable_generateFrom hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [\u2039MeasurableSpace \u03b1\u203a.measurable_eq]\n  exact measurable_of_Ioi fun x => (hf x).compl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_def]\n  intro s hs\n  have : \u22c3 x \u2208 s, f \u207b\u00b9' Ici x = f \u207b\u00b9' s := by\n    ext y\n    simp [hs]\n  rw [this]\n  exact MeasurableSet.iUnion fun x => hf x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  exact measurable_of_Ioi fun x => by simpa using hf x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  refine' measurable_of_Ioi _ fun x => _\n  convert hf x using 1\n  ext y\n  simp only [Ioi_def, Ici_def, Set.mem_preimage, Set.mem_setOf_eq]\n  constructor <;> intro h <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  refine' measurable_of_Ioi fun x => _\n  simpa using hf x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_def]\n  intro s hs\n  have : f \u207b\u00b9' s = \u22c3 x \u2208 s, f \u207b\u00b9' Ici x := by\n    ext y\n    simp only [mem_preimage, mem_iUnion, mem_Ici, and_imp]\n    exact \u27e8fun hy => \u27e8f y, hy, le_rfl\u27e9, fun \u27e8x, hx, hxy\u27e9 => hxy.trans_le hx\u27e9\n  rw [this]\n  exact .iUnion (fun x _ => hf x) s hs\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_Ici]\n  exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  apply measurable_of_Ioi\n  intro x\n  convert hf x using 1\n  rw [preimage_Ioi, Ioi_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [\u2039_\u203a] at hf\n  exact measurable_of_Ioi fun x => (hf x).inter (measurableSet_singleton x)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  refine' measurable_of_Ioi fun x => _\n  specialize hf x\n  have : f \u207b\u00b9' Ici x = { a : \u03b4 | x \u2264 f a } := rfl\n  rw [this] at hf\n  exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [\u2039MeasurableSpace \u03b4\u203a.measurable_eq]\n  exact measurable_of_Ici_le hf fun x => x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [\u2039_\u203a, measurableSpace_eq]\n  exact measurable_generateFrom hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_def]\n  intro I\n  specialize hf (f \u207b\u00b9' I)\n  rw [\u2190 preimage_preimage] at hf\n  exact hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_iff_Ici]\n  intro x\n  exact hf x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [\u2039MeasurableSpace \u03b1\u203a.measurable_eq]\n  exact measurable_of_Ioi fun x => (hf x).inter (\u2039MeasurableSpace \u03b4\u203a.measurableSet_Ioi x)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [\u2039MeasurableSpace \u03b1\u203a.measurable_eq]\n  exact measurable_of_Ici' hf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem measurable_of_Ici {f : \u03b4 \u2192 \u03b1} (hf : \u2200 x, MeasurableSet (f \u207b\u00b9' Ici x)) : Measurable f := by\n  rw [measurable_def]\n  intro s hs\n  have h_eq : s = \u22c3 (x : \u03b1), f \u207b\u00b9' Ici x := by\n    ext y\n    simp only [mem_iUnion, mem_Ici, SetCoe.exists, Subtype.coe_mk, exists_prop]\n    constructor\n    \u00b7 intro hy\n      exact \u27e8f y, hy\u27e9\n    \u00b7 intro \u27e8x, hx\u27e9\n      exact hx\n  rw [h_eq]\n  exact MeasurableSet.iUnion (fun x => hf x)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma, Complex.Gamma_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma_eq_integral]\n  norm_num [GammaIntegral]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma_eq_integral]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma, Nat.factorial_zero, Nat.cast_one, one_mul, one_mul,\n    lim_const]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma, Complex.Gamma_nat_eq_factorial, Nat.factorial_one, Nat.cast_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp [GammaAux]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma, Complex.Gamma_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp only [one_ne_zero, if_false, Gamma_nat_eq_factorial, Nat.factorial_one,\n    eq_self_iff_true, and_self_iff, one_div]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp [GammaAux]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma_eq_integral]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma_eq_GammaAux, GammaAux]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp [GammaAux]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma_eq_integral]\n  simp [GammaIntegral, integrable_on_const]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma_eq_integral, integrable_on_const, measure_univ, lt_of_le_of_lt]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma_eq_integral]\n  simp [GammaIntegral]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma, Gamma_eq_integral]\n  simp [GammaIntegral, IntegrableOn, measurable_exp, MeasurableSet.Ioi]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  simp [Gamma]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  unfold Gamma\n  simp [GammaAux, Nat.factorial]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma, Complex.Gamma_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp [GammaAux]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp [GammaAux]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Gamma_one : Gamma 1 = 1 := by\n  rw [Gamma]\n  simp only [Complex.ofReal_one, Complex.one_re, Complex.exp_zero, mul_one, div_one,\n    Complex.ofReal_eq_one]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableAt_of_differentiableWithinAt_of_mem\n  apply DifferentiableWithinAt.comp i (differentiable_pi.differentiableWithinAt)\n  apply DifferentiableWithinAt.snd\n  apply DifferentiableWithinAt.prod <;> apply differentiable_pi.differentiableWithinAt\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  intro hf; convert hf.hasFDerivWithinAt.differentiableWithinAt using 1\n  exact (hasFDerivWithinAt_pi.hasFDerivAt hf).differentiableWithinAt\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableWithinAt_pi.mp\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableWithinAt.comp i (differentiable_pi.mp (by simp)).differentiableWithinAt\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableWithinAt_pi.mp\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableAt.differentiableWithinAt\n  apply differentiableAt_apply\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableAt.differentiableWithinAt\n  apply differentiableAt_apply\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableWithinAt_pi.mp\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableWithinAt_pi.mp\n  exact differentiableWithinAt_id\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply (differentiableAt_apply i f).differentiableWithinAt\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableWithinAt.comp (differentiable_lambda i)\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableWithinAt_pi.1 (f := f) |>.2 i\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  have h : HasFDerivWithinAt f (Pi.single i 1) s' f := by\n    apply HasFDerivWithinAt.congr_of_eventuallyEq (Pi.hasFDerivAt i)\n    simp [show f = f by rfl]\n  exact h.differentiableWithinAt\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableWithinAt.apply\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableWithinAt.comp i\n    (differentiable_pi.differentiableWithinAt fun j => by apply Differentiable.differentiableWithinAt)\n    (differentiableWithinAt_id)\n    (mapsTo_univ _ _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableAt.differentiableWithinAt\n  apply differentiableAt_apply\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  exact differentiableAt_apply i f\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  have h1 : \u2200 i, HasFDerivWithinAt (fun f : \u2200 i, F' i => f i) (ContinuousLinearMap.proj i) s' f :=\n    fun i \u21a6 (ContinuousLinearMap.proj i).hasFDerivWithinAt\n  exact differentiableWithinAt_of_continuousLinearMap h1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableAt.differentiableWithinAt\n  apply differentiable_pi.mp\n  exact differentiable_pi.mpr fun i \u21a6 differentiable_id\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableWithinAt_pi.mp\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableAt.differentiableWithinAt\n  apply differentiableAt_apply\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  exact differentiableWithinAt_id\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableWithinAt_pi.mp\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply\n    (DifferentiableAt.differentiableWithinAt (DifferentiableAt.comp i (differentiable_pi\n      _) (differentiableAt_id))).congr_fderiv\n  simp [f]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableWithinAt.comp i (fun f : \u2200 i, F' i => f i) _\n    (differentiable_pi.fun_prop i).differentiableWithinAt\n  exact differentiableWithinAt_id\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableWithinAt_pi.mp\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableWithinAt_pi.mp\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableWithinAt_pi.mp\n  exact differentiableAt_apply i f\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableAt_apply\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply differentiableAt_apply i\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  intro _\n  refine' (differentiableAt_apply i f).differentiableWithinAt\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem differentiableWithinAt_apply (i : \u03b9) (f : \u2200 i, F' i) (s' : Set (\u2200 i, F' i)) :\n    DifferentiableWithinAt (\ud835\udd5c:=\ud835\udd5c) (fun f : \u2200 i, F' i => f i) s' f := by\n  apply DifferentiableWithinAt.comp i (differentiable_id.differentiableWithinAt)\n  exact differentiableWithinAt_id\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hp, hq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases hp.eq_or_lt with rfl | hp\n  \u00b7 simp\n  \u00b7 simp [hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rw [\u2190 coe_toNNRat (p * q), \u2190 coe_toNNRat p, \u2190 coe_toNNRat q]\n  norm_cast\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases lt_trichotomy p 0 with (hp | rfl | hp) <;>\n    rcases lt_trichotomy q 0 with (hq | rfl | hq) <;>\n      simp_all [mul_nonneg, mul_nonpos_of_nonpos_of_nonneg]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hq, hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases lt_trichotomy p 0 with (hp | rfl | hp) <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hp, hq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases hp.eq_or_lt with (rfl | h)\n  all_goals simp\n  exact (toNNRat_eq_top.mpr h.le).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases lt_trichotomy p 0 with (hp | rfl | hp) <;> simp_all [mul_nonneg_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases lt_trichotomy p 0 with (h | h | h) <;>\n  rcases lt_trichotomy q 0 with (h' | h' | h') <;>\n  simp_all [mul_neg, mul_pos, mul_nonneg, toNNRat, h.le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rw [\u2190 coe_inj, coe_mul, coe_mul, coe_toNNRat, coe_toNNRat]\n  rcases le_total 0 q with hq | hq <;> simp [hp, hq, mul_nonneg]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hp, hq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hp, hq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases hp.lt_or_eq with (hp | rfl) <;> simp [toNNRat, *]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total p 0 with (hp | hp) <;> rcases le_total q 0 with (hq | hq) <;> simp_all\n  all_goals\n    \u00b7 simp_all [mul_nonneg, hp, hq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases hp.eq_or_lt with (rfl | hp)\n  all_goals simp [toNNRat, \u2190 mul_le_mul_left (lt_of_le_of_ne hp.le $ by simp)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hp, hq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hp, hq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases hp.eq_or_lt with (rfl | h\u2081)\n  all_goals simp [toNNRat, \u2190 mul_assoc, mul_toNNRat, toNNRat, \u2190 mul_assoc, mul_toNNRat, toNNRat]\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hp, hq, mul_nonneg]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hq, hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rw [\u2190 coe_inj]\n  simp [mul_def, hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases hp.lt_or_eq with (h | rfl)\n  all_goals simp [toNNRat, h.le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases hp.eq_or_lt with (rfl | hp)\n  simp\n  simp [toNNRat, hp.le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq\n  all_goals\n    simp [hq, hp, toNNRat, mul_nonneg, coe_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq\n  all_goals simp [toNNRat, hp, hq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hq, hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hp, hq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hq, hp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases hp.eq_or_lt with (rfl | hp)\n  <;> simp [hp]\n  <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rcases le_total 0 q with hq | hq <;> simp [hp, hq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem toNNRat_mul (hp : 0 \u2264 p) : toNNRat (p * q) = toNNRat p * toNNRat q := by\n  rw [toNNRat_eq_max, toNNRat_eq_max, toNNRat_eq_max, max_mul_mul_left, max_eq_left hp]\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  simp [place]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  simp only [conjugate, place, MonoidHom.coe_comp, Function.comp_apply]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  simp [conjugate, place, MonoidHom.mk_coe]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  simp only [conjugate, place_of_algHom, map_id, AlgHom.coe_id, id_eq]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext\n  simp [place_apply_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  simp only [conjugate, place]\n  ext; rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext z\n  simp [place]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  rcases place_eq_or_eq_inv with h | h <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext z\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext; simp [place_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  unfold place\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext1 x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  rw [conjugate]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext\n  simp [conjugate, place]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext x\n  simp only [conjugate_eq, place_eq_norm, norm_eq, norm_eq_abs, ring_nf, map_ofAdd,\n    ev_of_vector_sum, map_add, map_intCast, Complex.norm_int]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext z\n  simp only [conjugate, place_apply, RingHom.map_mul, Complex.abs_conj, mul_comm,\n    Complex.abs_ofReal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  apply DFunLike.ext\n  intro x\n  simp [conjugate, place_apply, apply_symm_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  simp [place]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext z\n  simp [place, norm_eq_abs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext z\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  refine' congr_arg\u2082 _ rfl rfl\n  ext x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  simp [place_eq_one, isReal_conj_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  simp only [conjugate, place, MonoidHom.comp_apply, RingEquiv.coe_toRingHom, RingEquiv.coe_toMonoidHom,\n    MonoidHom.coe_comp, Function.comp_apply]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  simp [place]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  exact place_conjugate \u03c6\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  simp only [place, DFunLike.coe, MonoidHom.coe_comp, Function.comp_apply, map_one,\n    MonoidHom.coe_mk, OneHom.coe_mk]\n  ext z\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  ext x\n  simp only [place_apply, norm_eq_abs, map_apply, conjugate_coe_eq, ring_hom_class.coe_coe]\n  apply congr_arg\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem place_conjugate (\u03c6 : K \u2192+* \u2102) : place (conjugate \u03c6) = place \u03c6 := by\n  rcases Subsingleton.elim \u2102 \u211d with rfl\n  rcases Subsingleton.elim K \u211d with rfl\n  simp [conjugate, place, norm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  constructor\n  intro h\n  rw [le_iff_disjoint_right]\n  exact h\n  intro h\n  rw [le_iff_disjoint_right] at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  rw [le_iff_subset, subset_iff]\n  simp [Set.disjoint_iff, not_imp_not]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, compl_eq_top, le_iff_subset]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, compl_le_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, compl_le_iff, le_compl_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, compl_le_iff_disjoint]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, le_iff_inf_le, compl_le_iff_disjoint_left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  rw [disjoint_iff, inf_compl_eq_bot_iff]\n  exact \u27e8fun h => by simpa using h, fun h => by simpa using h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  rw [\u2190 le_compl_iff_disjoint_right]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, compl_le_iff_compl_le, le_antisymm_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  constructor\n  rintro h\n  rw [le_iff_subset]\n  intro z hz\n  have h1 : z \u2208 x \u2229 y\u1d9c := mem_inter hz (h.out hz)\n  simp_all\n  intro h\n  rw [disjoint_iff]\n  rw [h.eq_bot]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, le_compl_iff_disjoint_right, compl_inf, compl_le_iff_compl_le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, le_compl_iff_disjoint_right]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  rw [disjoint_iff, inf_compl_eq_bot_iff]\n  exact \u27e8fun h \u21a6 by rwa [\u2190 compl_le_compl_iff_le], fun h \u21a6 by rwa [compl_le_compl_iff_le]\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  constructor\n  intro h\n  simp_rw [Set.disjoint_iff, Set.le_eq_subset] at h \u22a2\n  rw [Set.compl_subset_iff_union] at h\n  exact h.trans (Set.union_subset_left _ _)\n  intro h\n  simp_rw [Set.disjoint_iff, Set.le_eq_subset] at h \u22a2\n  rw [Set.compl_subset_iff_union]\n  exact h.trans Set.subset_union_right\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, compl_eq_top]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, compl_inf, compl_le_iff_compl_compl_le, le_compl_iff_disjoint_left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [mem_compl_iff, mem_singleton_iff, disjoint_iff]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  constructor\n  intro h\n  rw [le_iff_disjoint_right]\n  exact h\n  intro h\n  rw [le_iff_disjoint_right] at h\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  rw [\u2190 le_compl_iff_disjoint_right]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, hnot_le_iff_codisjoint_right]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, compl_eq_bot]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  rw [disjoint_iff, inf_compl_eq_bot_iff]\n  simp [le_antisymm_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [Disjoint, le_compl_iff_disjoint_right]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, compl_le_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  rw [le_iff_subset, disjoint_iff_inf_le, compl_le_iff_disjoint_right]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, compl_le_iff_disjoint_left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [Disjoint, le_compl_iff_disjoint_right]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [disjoint_iff, le_iff_inf_le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  simp [le_def, disjoint_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem disjoint_compl_right_iff : Disjoint x y\u1d9c \u2194 x \u2264 y := by\n  rw [\u2190 le_compl_iff_disjoint_right]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [MvPolynomial.totalDegree, MvPolynomial.degreeOf, Finsupp.single_pos]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [MvPolynomial.totalDegree, MvPolynomial.degreeOf]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  apply le_antisymm <;> simp [totalDegree, Finsupp.sum] <;>\n  exact Finset.sum_le_sum_of_subset_of_nonneg (by simp) (by simp)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  classical exact (monomial_eq _).symm \u25b8 one_add_one_eq_two \u25b8 rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp only [totalDegree, support_X]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  classical\n    rw [MvPolynomial.totalDegree, Finsupp.sum_fintype]\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp only [totalDegree, degrees_X]\n  rw [Multiset.count_singleton_self]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp only [totalDegree, maxDegree, Finsupp.sum_single_index, mem_support_iff, ne_eq,\n    Finsupp.single_eq_zero, ite_eq_left_iff, ite_eq_right_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  apply le_antisymm _ (MvPolynomial.one_le_totalDegree_X _)\n  simp only [Finsupp.sum, add_zero]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  apply le_antisymm <;> simp_all [totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp only [totalDegree, supDegree, X, mul_one]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [MvPolynomial.totalDegree, MvPolynomial.degreeOf, Finsupp.single_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp only [totalDegree, X, Finsupp.sum, toAddMonoidMVP_apply, AddMonoidAlgebra.single_mul_single,\n    add_left_inj, max_eq_right, one_add_one_eq_two]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  classical\n  rw [totalDegree_def]\n  simp only [Finsupp.sum, X_pow, toReduce, sum_boole, Finset.sum_ite_eq', Finset.mem_univ,\n    ite_true, max_eq_right]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp only [totalDegree, X, Finsupp.sum, addHom_apply, AddMonoidHom.map_nsmul,\n    OneMemClass.coe_one, map_one, one_nsmul]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  rw [totalDegree, support_X]\n  simp only [Finset.sup_singleton, X_pow_eq_monomial, add_zero, Finset.sup_image]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  rw [totalDegree]\n  simp only [Finsupp.sum, X_def, ite_eq_right_iff, ne_eq, one_ne_zero, not_false_eq_true]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  classical\n    simp only [totalDegree, supDegree, Finsupp.support_single_ne_zero _ one_ne_zero,\n      Finset.sup_singleton]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  apply le_antisymm\n  apply MvPolynomial.totalDegree_monomial\n  apply Finset.card_singleton\n  apply le_trans _ (MvPolynomial.totalDegree_X s)\n  apply le_of_eq\n  apply Eq.symm\n  apply Eq.symm\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  simp only [X, totalDegree, IsEmpty.forall_iff, maxVar, Finset.sup_singleton]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_X {R} [CommSemiring R] [Nontrivial R] (s : \u03c3) :\n    (X s : MvPolynomial \u03c3 R).totalDegree = 1 := by\n  rw [MvPolynomial.totalDegree]\n  simp [Finsupp.sup]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp only [Finset.mem_union, Finset.mem_sdiff, Finset.mem_inter, Finset.mem_compl,\n    Finset.mem_singleton]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_union, Finset.mem_inter, Finset.mem_sdiff, h, not_or]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_union]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_union, Finset.mem_sdiff, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp (config := { contextual := true }) only [and_imp, not_or, mem_union, mem_sdiff,\n    mem_compl, mem_neighborFinset, mem_inter, mem_singleton]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_union, Finset.mem_compl, Finset.mem_inter, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp only [Finset.mem_union, Finset.mem_compl, Finset.mem_inter, Finset.mem_singleton,\n    Finset.mem_sdiff, not_or, and_and_and_comm, and_true]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp only [Finset.mem_union, Finset.mem_sdiff, Finset.mem_inter, Finset.mem_compl,\n    Finset.mem_singleton]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_union, Finset.mem_sdiff, Finset.mem_inter, Finset.mem_singleton]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_union, Finset.mem_inter, Finset.mem_sdiff, h, not_or]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext z\n  simp only [Finset.mem_union, Finset.mem_compl, Finset.mem_inter, Finset.mem_sdiff,\n    Finset.mem_singleton]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp only [Finset.mem_inter, Finset.mem_sdiff, Finset.mem_union, Finset.mem_compl,\n    Finset.mem_singleton]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp (config := { contextual := true }) [h, Finset.mem_union, Finset.mem_inter, Finset.mem_compl,\n    Finset.mem_singleton, Finset.mem_sdiff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_compl, Finset.mem_inter, Finset.mem_union, Finset.mem_singleton,\n    and_assoc, and_comm, and_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp only [Finset.mem_union, Finset.mem_sdiff, Finset.mem_compl, Finset.mem_neighborFinset,\n    Finset.mem_inter, Finset.mem_singleton, Finset.mem_insert]\n  by_cases hvw : v = w <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp only [Finset.mem_union, Finset.mem_sdiff, Finset.mem_inter, Finset.mem_compl,\n    Finset.mem_singleton]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_union, Finset.mem_sdiff, Finset.mem_inter]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp only [Finset.mem_union, Finset.mem_sdiff, Finset.mem_inter, Finset.mem_compl,\n    Finset.mem_singleton]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp (config := { contextual := true }) [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp [h, Finset.mem_union]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_union, Finset.mem_inter, Finset.mem_sdiff, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp only [Finset.mem_union, Finset.mem_sdiff, Finset.mem_compl, Finset.mem_inter,\n    Finset.mem_singleton, Finset.mem_coe, and_imp, not_and, not_forall, not_not,\n    and_imp, and_assoc, and_comm, and_left_comm]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_union, Finset.mem_inter, Finset.mem_sdiff, h, and_imp]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp only [Finset.mem_union, Finset.mem_compl, Finset.mem_inter, Finset.mem_sdiff,\n    Finset.mem_singleton]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp only [mem_union, mem_sdiff, mem_compl, mem_neighborFinset, ne_eq, mem_inter]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_union, Finset.mem_sdiff, Finset.mem_inter, Finset.mem_singleton]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp (config := { contextual := true }) [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext\n  simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sdiff_compl_neighborFinset_inter_eq {v w : V} (h : G.Adj v w) :\n    ((G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c) \\ ({w} \u222a {v}) =\n      (G.neighborFinset v)\u1d9c \u2229 (G.neighborFinset w)\u1d9c := by\n  ext x\n  simp [Finset.mem_inter, Finset.mem_union, Finset.mem_compl, Finset.mem_sdiff]\n  aesop\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq, associator_inv_app, exp.ev]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq, (exp.ev A).app_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry, exp.ev]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq, Exponentiable.isUniversal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp only [uncurry_eq, eqToHom_refl, comp_id_assoc]\n  rw [eq_comm, \u2190 YonedaLemma.ev_app_eq]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp only [uncurry_eq, id_eq]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq, (exp.ev A).app_id]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  ext Y f\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  symm\n  erw [uncurry_eq (exp.ev A).app X]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  dsimp [uncurry]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  erw [uncurry_eq]\n  rw [id_app, comp_id]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp [uncurry_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem uncurry_id_eq_ev (A X : C) [Exponentiable A] : uncurry (\ud835\udfd9 (A \u27f9 X)) = (exp.ev A).app X := by\n  simp only [uncurry_eq, id_eq, NatTrans.id_app]\n  rw [exp.ev_app]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp only [strictMono_comp, strictMono_ofDual, strictAnti_comp, strictAnti_toDual,\n    iff_self_iff]\n  exact forall_congr' fun _ => forall_congr' fun _ => forall_congr' fun _ => Iff.comm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  refine' \u27e8fun h a b hab => _, fun h a b hab => _\u27e9 <;>\n    -- Apply the strict monotonicity of the composed function to the given order relation.\n    simpa [ofDual_le_ofDual, toDual_le_toDual] using h hab\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono, Function.comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono, Function.comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono, OrderDual.toDual_le_toDual, OrderDual.ofDual_le_ofDual]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp only [StrictMono, comp_apply, forall_swap]\n  exact forall_congr' fun _ => forall_congr' fun _ => imp_congr_right fun _ => Iff.rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  constructor <;> intro h x y hxy\n  exact h hxy\n  exact h hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono, Function.comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  refine' \u27e8fun h a b hab => _, fun h a b hab => _\u27e9\n  exacts [h (\u03b2 := \u03b1\u1d52\u1d48) hab, h (\u03b2 := \u03b1\u1d52\u1d48) hab]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp only [strictMono_def, forall_swap]\n  exact forall\u2082_congr fun x y => by simp [le_of_lt]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono, Function.comp_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp only [strictMono_def, forall_swap]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  refine \u27e8fun h a b hab => ?_, fun h a b hab => ?_\u27e9\n  exacts [h (ofDual.lt_iff_lt.mpr hab), h (ofDual.lt_iff_lt.mp hab)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp only [strictMono_def, lt_iff_le_not_le]\n  simp only [Function.comp_apply, toDual_le_toDual, ofDual_le_ofDual]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono, OrderDual.toDual_le_toDual, OrderDual.ofDual_le_ofDual]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp only [StrictMono, forall_forall_index, toDual_le_toDual, ofDual_le_ofDual,\n    forall_forall_index, implies_true]\n  exact \u27e8fun h a b h' \u21a6 by simpa [h'] using h b a, fun h a b h' \u21a6 by simpa [h'] using h b a\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  constructor <;> intro h <;>\n  exact fun a b hab => h (by exact hab)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono, forall_swap]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  refine' \u27e8fun h x y hxy => _, fun h x y hxy => _\u27e9 <;>\n    simpa only [toDual_lt_toDual, ofDual_le_ofDual] using h hxy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono, forall_swap]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  rw [strictMono_comp, strictMono_comp]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono, Function.comp]\n  exact forall_swap\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  rw [strictMono_comp_ofDual_iff, strictMono_comp_toDual_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp only [StrictMono, lt_iff_le_not_le]\n  simp only [Function.comp_apply, lt_iff_le_not_le]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  rw [StrictMono, StrictMono]\n  simp only [toDual_le_toDual, ofDual_le_ofDual, comp_le_comp_iff, forall_const]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  constructor <;>\n  {\n    intro h x y hxy\n    have := h hxy\n    simp only [Function.comp_apply, toDual_lt_toDual, ofDual_lt_ofDual] at this\n    exact this\n  }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp only [strictMono_def, toDual_lt_toDual, Function.comp_apply]\n  exact forall_swap\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono, forall_swap]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem strictMono_dual_iff : StrictMono (toDual \u2218 f \u2218 ofDual : \u03b1\u1d52\u1d48 \u2192 \u03b2\u1d52\u1d48) \u2194 StrictMono f := by\n  simp [StrictMono, Function.comp]\n  exact forall_swap\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 trim_tac s\n  \u00b7 refine' le_trim_iff.2 fun t ht => _\n    rw [restrict_apply, trim_measurableSet_apply \u03bc ht,\n      restrict_apply, inter_comm]\n    exact le_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' le_trim.2 fun t ht => _\n    rw [OuterMeasure.restrict_apply ht]\n    exact trim_mono (measure_mono Set.inter_subset_inter_left)\n  \u00b7 rw [le_restrict_iff (MeasurableSet.inter hs ht)]\n    refine' le_trim.2 fun t ht => _\n    rw [\u2190 @OuterMeasure.restrict_apply _ _ (t \u2229 s)]\n    \u00b7 exact OuterMeasure.mono (trim_le (measure_le_trim _ _)) _ Subset.rfl\n    \u00b7 exact ht\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' le_trim_iff.mpr fun t ht => _\n    simp only [Set.inter_comm]\n    refine' trim_le (\u03bc := \u03bc.restrict s) _\n    exact restrict_apply_le\n  \u00b7 refine' le_trim_iff.mpr fun t ht => _\n    simp only [Set.inter_comm]\n    refine' trim_le (\u03bc := \u03bc.restrict s) _\n    exact restrict_apply_le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' le_iff.2 fun t ht => _\n    rw [HT_apply_measurable ht, trim_eq_infi ht.1]\n    exact\n      le_infi fun f\n        => le_trans (measure_mono <| inter_subset_inter Subset.rfl (Subset.refl _))\n          (le_of_eq (restrict_trim hf ht))\n  \u00b7 refine' le_iff.2 fun t ht => _\n    rw [restrict_apply ht, trim_eq_infi ht, HT_apply_measurable ht]\n    exact\n      le_infi fun f =>\n        le_trans (measure_mono <| inter_subset_inter Subset.rfl (Subset.refl _))\n          (le_of_eq (trim_eq_infi hf ht))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' trim_le.2 fun t ht => _\n    rw [OuterMeasure.restrict_apply hs]\n    exact (trim_mono (by exact restricted_le_outerMeasure.1)).1 ht\n  \u00b7 refine' trim_le.2 fun t ht => _\n    rw [OuterMeasure.restrict_apply hs]\n    exact OuterMeasure.mono (by exact restricted_le_outerMeasure.1) ht\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  ext t ht\n  simp [hs, trim_measurableSet_eq ht]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 exact trim_mono.2 (le_restrict_subset hs le_rfl)\n  \u00b7 exact trim_le.2 (le_trim_iff.2 (fun _ ht => restrict_mono ht.1 le_rfl))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' trim_le.2 fun t ht \u21a6 _\n    rw [OuterMeasure.restrict_apply (ht.inter hs)]\n    exact\n      (trim_mono <| le_of_eq <| inter_comm t s).trans\n        (OuterMeasure.trim_mono (le_of_eq <| inter_comm t s) _)\n  \u00b7 refine' trim_le.2 fun t ht \u21a6 _\n    rw [OuterMeasure.restrict_apply ht]\n    exact (trim_mono <| le_of_eq inter_comm).trans (OuterMeasure.trim_mono (le_of_eq inter_comm) _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' trim_eq_of_le_trim (fun t ht => _) (fun t ht => _)\n  \u00b7 simp only [trim, ht, restrict_apply, dite_true, le_rfl]\n  \u00b7 simp only [trim, ht, restrict_apply, dite_true, le_rfl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  ext t ht\n  simp [trim_eq_iInf, hs, ht, restrict_apply, iInf_congr_Prop]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' trim_le_trim_of_subset (Subset.refl _) fun t ht => _\n    rw [restrict_apply ht]\n    exact trim_mono (subset_refl _) (restrict_apply ht)\n  \u00b7 refine' le_trim_iff.2 fun t ht => _\n    rw [restrict_apply ht]\n    refine' le_trim_iff.2 fun u hu => _\n    rw [restrict_apply hu, trim_eq_infi]\n    refine' infi\u2082_le_of_le {u \u2229 s} _ (infi\u2082_le_of_le (hu.inter hs) _ rfl)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm (trim_mono.2 _) _ <;> simp (config := { contextual := true }) [hs]\n  <;> rintro t \u27e8u, h1, h2\u27e9\n  <;> rw [\u2190 h2]\n  <;> exact trim_measurableSet_eq (hs.inter h1) _\n  <;> exact trim_measurableSet_eq (hs.inter h1) _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm (le_trim.2 fun t ht => _) _\n  \u00b7 have := trim_measurableSet_le (s := t)\n    have := restrict_le_self\n    linarith\n  \u00b7 refine' trim_le.2 fun t ht => _\n    rw [restrict_apply ht]\n    exact trim_mono (measure := \u03bc) (inter_subset_inter_left t (subset_refl s))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  ext t ht\n  simp only [trim_eq_iInf, restrict_apply, ht, indicator_inter_of_measurable,\n    MeasurableSet.iUnion, MeasurableSet.inter, hs, true_and_iff]\n  congr 1\n  ext1 i\n  congr 1\n  ext1 j\n  congr 1\n  refine' iUnion_congr fun i => iUnion_congr fun j => _\n  by_cases hij : i = j\n  \u00b7 rw [hij]\n  \u00b7 rw [inter_comm]\n    simp [hij]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' trim_le.2 fun t ht \u21a6 _\n    rw [restrict_apply ht]\n    exact trim_mono (subset_inter (Subset.refl s) subset_rfl) _\n  \u00b7 refine' trim_le.2 fun t ht \u21a6 _\n    rw [restrict_apply ht]\n    exact trim_mono (subset_inter (Subset.refl s) subset_rfl) _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _ <;> refine' trim_le_trim_of_subset (Subset.refl _) _ <;>\n    exact fun t ht => measure_mono (Subset.refl s)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  ext t ht\n  simp only [trim_eq_iInf, restrict_apply, MeasurableSet.iUnion, MeasurableSet.inter_iUnion,\n    inter_iUnion]\n  simp_rw [\u2190 Set.inter_assoc]\n  congr with h\n  simp only [@Set.inter_comm _ t, True_and]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' le_of_forall_apply_le fun t ht => _\n    rw [trim_eq_infi]\n    refine' infi_le_of_le (t \u2229 s) <| le_of_eq _\n    rw [restrict_apply, Set.inter_comm]\n  \u00b7 rw [trim_eq_infi]\n    refine' le_infi fun t => _\n    refine' le_of_forall_apply_le fun u hu => _\n    rw [trim_eq_infi]\n    refine' infi_le_of_le (u \u2229 t) <| le_of_eq _\n    rw [restrict_apply, Set.inter_comm, \u2190 Set.inter_assoc, Set.inter_self, Set.inter_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' trim_le_trim_iff.2 fun t ht => _\n    rw [restrict_apply ht]\n    exact trim_mono (by exact restrict_apply ht).le\n  \u00b7 rw [\u2190 trim_eq_trim_iff]\n    refine' trim_mono (by rw [restrict_trim hs])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm (le_trim_iff.2 fun t ht => _) (le_trim_iff.2 fun t ht => _) <;>\n  simp only [restrict_apply, imp_true_iff]\n  \u00b7 calc\n      trim (s \u2229 t) \u03bc \u2264 \u03bc (s \u2229 t) := trim_le (s \u2229 t) \u03bc\n      _ \u2264 \u03bc.trim (s \u2229 t) := OuterMeasure.mono _ _ le_rfl\n  \u00b7 calc\n      trim (s \u2229 t) \u03bc.trim \u2264 \u03bc.trim (s \u2229 t) := trim_le (s \u2229 t) _\n      _ \u2264 \u03bc (s \u2229 t) := OuterMeasure.mono _ _ le_rfl\n      _ = \u03bc.restrict s (s \u2229 t) := by rw [restrict_apply hs]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' trim_le.2 fun t ht \u21a6 _\n    rw [OuterMeasure.restrict_apply hs]\n    exact trim_mono (measure_mono (Set.inter_subset_inter_right t ht))\n  \u00b7 refine' trim_le.2 fun t ht \u21a6 _\n    rw [OuterMeasure.restrict_apply hs]\n    exact measure_mono (Set.inter_subset_inter_right t ht)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' trim_le.2 fun t ht => _\n    rw [OuterMeasure.restrict_apply hs]\n    exact (trim_le.1 le_rfl t ht).trans (le_trim_iff.1 le_rfl t ht)\n  \u00b7 rw [\u2190 trim_eq_trim_iff]\n    refine' le_trim_iff.2 fun t ht => _\n    rw [\u2190 trim_eq_trim_iff] at ht\n    rw [OuterMeasure.restrict_apply hs, \u2190 trim_eq_trim_iff, le_trim_iff]\n    rw [ht]\n    exact le_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  ext t ht\n  rw [trim_eq_iInf, trim_eq_iInf]\n  simp_rw [iInf_apply, restrict_apply hs]\n  congr 1\n  exact measure_congr (iInf_congr fun _ => measure_congr (iInf_congr fun _ => rfl))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _ <;> refine' trim_le_trim_iff.2 fun t ht => _ <;> simp only [ht.inter_sets,\n    restrict_apply, trim_eq_infi]\n  <;> refine' infi_le_of_le (t \u2229 s) (le_inf <| le_refl _)\n  <;> refine' inf_le_of_left_le _\n  <;> exact trim_mono (inter_subset_right _ _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  ext t ht\n  simp [trim_eq, hs, ht, restrict_apply, Set.indicator_inter_right, inter_comm t s]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' trim_le.2 fun t ht => _\n    rw [le_iff_exists_add]\n    exact \u27e8\u03bc (t \u2229 s), by rw [add_comm, restrict_apply (ht.inter hs)]; rfl\u27e9\n  \u00b7 rw [le_trim, le_restrict_iff (MeasurableSet.univ.inter hs)]\n    intro t ht\n    rw [\u2190 trim_eq_trim_iff]\n    refine' le_trans ((trim_mono _).trans _) le_rfl\n    rw [Set.inter_comm]\n    exact measurableSet_inter_of_measurableSet_left ht\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm (trim_le.2 fun t ht \u21a6 _) (le_trim_iff.2 fun t ht \u21a6 _)\n  \u00b7 rw [OuterMeasure.restrict_apply hs ht]\n    exact (trim_mono (subset_univ _) (measure_eq_trim_of_measurable ht)).ge.trans_eq trim_eq_self.symm\n  \u00b7 rw [OuterMeasure.restrict_apply_univ] at ht\n    exact (trim_mono ht (measure_eq_trim_of_measurable hs)).ge.trans_eq trim_eq_self.symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  exact trim_mono.trans_eq (restrict_trim_subset _ _)\n  refine' le_trans _ (trim_mono.trans_eq <| by rw [trim_eq_self])\n  exact restrict_le_self.trans (le_trim_iff.2 fun t ht \u21a6 by simpa [Set.inter_assoc] using ht.inter hs)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' trim_le.2 fun t ht => _\n    rw [OuterMeasure.restrict_apply]\n    refine' trim_mono (measure_mono (Set.inter_subset_inter_left _))\n    exact \u27e8ht, measure_le_trim _ hs\u27e9\n  \u00b7 refine' trim_le.2 fun t ht => _\n    rw [OuterMeasure.restrict_apply]\n    exact measure_le_trim _ ht\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' le_trim_iff.2 fun t ht => le_of_eq _\n    rw [trim_measurableSet_eq ht hs, restrict_apply, restrict_apply,\n      inter_comm t s, Measure.inter_comm]\n  \u00b7 refine' trim_le_trim_iff.2 fun t ht => _\n    rw [restrict_apply _ ht, restrict_apply _ ht, inter_comm t s, Measure.inter_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' trim_le_trim_iff.2 fun t ht => _\n    rw [restrict_apply ht, restrict_apply ht]\n    refine' trim_mono (subset_inter (subset.refl _) _)\n    exact (inter_subset_left : t \u2229 s \u2286 t)\n  \u00b7 rw [\u2190 trim_eq_trim_iff]\n    refine' le_trim_iff.2 fun t ht => _\n    rw [restrict_apply ht, trim_eq_inf, restrict_apply ht]\n    exact inf_le_inf_right _ (le_trim_iff.1 le_rfl _ ht)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem restrict_trim {\u03bc : OuterMeasure \u03b1} {s : Set \u03b1} (hs : MeasurableSet s) :\n    (restrict s \u03bc).trim = restrict s \u03bc.trim := by\n  refine' le_antisymm _ _\n  \u00b7 refine' fun t ht => (trim_eq_infi_of_measurableSet ht hs).symm.trans _\n    refine' infi_le_of_le (t \u2229 s) _\n    rw [ofFunction_apply]\n    refine'\n      le_of_eq\n        (_root_.trans\n          (trim_ofFunction _ _)\n          (congr_arg OuterMeasure.ofFunction _))\n    rw [\u2190 inter_assoc, inter_self]\n  \u00b7 refine' fun t ht => le_trim _ _ (subset_refl _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h]\n  constructor <;> intro h <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne']\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  rw [\u2190 mul_le_mul_iff_right b, inv_mul_cancel (ne_of_gt h), mul_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  rw [mul_comm, mul_inv_le_iff h, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne']\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne', mul_comm]\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne']\n  ring_nf\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp\n  norm_num\n  constructor <;> intro h\u2080\n  linarith\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  rw [\u2190 mul_le_mul_left h, mul_inv_cancel (ne_of_lt h).symm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne', mul_comm]\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h]\n  constructor <;> intro <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp\n  constructor <;> intro h <;> nlinarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne']\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor <;> intro H <;> field_simp at H \u22a2 <;> nlinarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne']\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  rw [\u2190 mul_le_mul_left h, mul_inv_cancel (ne_of_gt h), mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  rw [mul_comm, \u2190 div_eq_mul_inv]\n  exact (div_le_iff h).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne']\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne']\n  constructor <;> intro h <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h]\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor <;> intro h\u2080\n  all_goals\n    field_simp at h\u2080\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne']\n  constructor <;> intro h\u2080 <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne']\n  constructor <;> intro h <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  constructor <;> intro h\u2080 <;> linarith [mul_inv_cancel_right\u2080 h.ne' b]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  rw [\u2190 mul_le_mul_left h, mul_inv_cancel_right\u2080 (ne_of_gt h)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  rw [\u2190 mul_le_mul_left h, \u2190 mul_assoc, mul_inv_cancel (ne_of_gt h), mul_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h]\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp [h.ne']\n  constructor <;> intro h <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem mul_inv_le_iff (h : 0 < b) : a * b\u207b\u00b9 \u2264 c \u2194 a \u2264 b * c := by\n  field_simp\n  constructor <;> intro h' <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  refine' isLittleO_iff_exists_eq_mul.2 \u27e8fun h => 1, by norm_num, ?_\u27e9\n  filter_upwards [self_mem_nhdsWithin] with h hh_pos\n  gcongr\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  refine' Asymptotics.isLittleO_iff.mpr fun c hc => _\n  obtain \u27e8d, h0d, hd\u27e9 := exists_between hc\n  obtain \u27e8u, v, hxu, hxv, huv, H\u2081, H\u2082\u27e9 := TaylorRemainderTheorem.mean_value_inequality_of_hasFDerivWithinAt\n    (fun (t : \u211d) => f (x + t \u2022 v + t \u2022 w)) (fun t => f' (x + t \u2022 v) w) (fun t => f'' (x + t \u2022 v) w)\n    (fun t => f'' v w) (fun t => f'' w w) (fun t => hv.mono (by mfld_set_tac))\n    (fun t => hd.1.trans h0d.lt.le) v w ((by norm_num : (0 : \u211d) < 1).trans h0d.lt)\n    (fun t ht => by\n      simp only [norm_neg, norm_smul, Real.norm_eq_abs, abs_of_nonneg ht.le] at H\u2081 H\u2082\n      rw [\u2190 neg_add_rev] at H\u2082\n      exact \u27e8H\u2081, H\u2082.le\u27e9)\n  simp only [mul_one, mul_div_cancel_left\u2080 _ two_ne_zero, neg_mul] at H\u2081\n  have H\u2082 := le_of_lt (lt_of_le_of_lt (abs_neg _ \u25b8 neg_le_neg (H\u2082 v w huv)) hd)\n  simp only [mul_one, mul_div_cancel_left\u2080 _ two_ne_zero, neg_mul] at H\u2082\n  filter_upwards [eventually_gt_atTop (0 : \u211d), self_mem_nhdsWithin] with _ _ h\n  simpa only [smul_eq_mul, mul_neg, neg_add_rev, \u2190 sub_eq_add_neg] using\n    mul_le_mul_of_nonneg_left (lt_of_le_of_lt (max_le (H\u2081 v w huv) H\u2082) h0d) h.le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  have hw' : x + v + w \u2208 interior s := hw\n  have hv' : x + v \u2208 interior s := hv\n  refine (isBigO_iff.2 \u27e8\u2016w\u2016 ^ 2, ?_\u27e9).trans_isLittleO (isLittleO_pow_id _)\n  filter_upwards [eventually_nhdsWithin_pos_mem]\n  intro h h0\n  rw [\u2190 sub_nonpos]\n  ring_nf\n  nlinarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  exact\n    Asymptotics.IsLittleO.add_isLittleO <| by apply fderiv_isLittleO; assumption\n      |>.neg_left.add_isLittleO <| by apply fderiv_isLittleO; assumption\n        |>.neg_left.add_isLittleO <| by apply fderiv_isLittleO; assumption\n          |>.neg_left.add_isLittleO <| by apply fderiv_isLittleO; assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simpa using f.isBigO_taylor_approx_segment hv hw two_ne_zero\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  apply Asymptotics.IsLittleO.congr_of_eventuallyEq_zero\n  <;> strip\n  <;> simp only [zero_add, zero_mul, zero_smul, add_zero, mul_zero, zero_sub, neg_neg]\n  <;> norm_num\n  <;> apply Asymptotics.IsBigO.eventuallyLE\n  <;> simp only [mul_one, mul_neg, mul_assoc, mul_left_comm]\n  <;> norm_num\n  <;> apply Asymptotics.IsBigO.mul\n  <;> simp only [add_assoc, add_left_comm, add_neg_cancel_right, add_neg_cancel_left]\n  <;> norm_num\n  <;> apply Asymptotics.IsBigO.add\n  <;> simp only [neg_add_rev, neg_add_cancel_right, neg_neg, neg_mul, neg_sub, neg_zero]\n  <;> norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  apply Asymptotics.IsLittleO.zero_right\n  simp [norm_smul, mul_assoc, mul_comm, mul_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  apply Asymptotics.IsBigO.trans_isLittleO _ (isLittleO_one_iff _)\n  have := (f'' v w).isBigO_one\n  have := (f'' w w).isBigO_one\n  replace := (f'' v (w + w)).isBigO_one\n  norm_num at *\n  all_goals\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  have : (0 : \u211d) < 1 := zero_lt_one\n  have : (0 : \u211d) < 2 := by norm_num\n  simp_all only [zero_lt_one, zero_lt_two, gt_iff_lt]\n  apply Asymptotics.IsLittleO.add\n  \u00b7 apply IsLittleO.add\n    \u00b7 apply IsLittleO.add\n      \u00b7 exact isLittleO_const_const_of_tendsto (by simp)\n        (tendsto_zero_iff_norm_tendsto_zero.mpr tendsto_const_nhds)\n      exact isLittleO_id_const_of_tendsto (by simp)\n        (tendsto_zero_iff_norm_tendsto_zero.mpr tendsto_const_nhds)\n    \u00b7 exact isLittleO_id_const_of_tendsto (by simp)\n      (tendsto_zero_iff_norm_tendsto_zero.mpr tendsto_const_nhds)\n  \u00b7 apply IsLittleO.add\n    \u00b7 exact isLittleO_id_const_of_tendsto (by simp)\n      (tendsto_zero_iff_norm_tendsto_zero.mpr tendsto_const_nhds)\n  \u00b7 exact isLittleO_id_const_of_tendsto (by simp)\n    (tendsto_zero_iff_norm_tendsto_zero.mpr tendsto_const_nhds)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  apply Asymptotics.IsLittleO.congr_of_eventuallyEq_zero _ _\n  \u00b7 exact eventually_of_forall fun h => by simp\n  \u00b7 have :\n        \u2200\u1da0 (h : \u211d) in \ud835\udcdd[>] 0,\n          f (x + h \u2022 v + h \u2022 w) - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w =\n            0 :=\n      ((isLittleO_iff_pow_mul_norm_tendsto_zero _ one_ne_zero).1\n            (h.taylor_approx_three_segment hv hw)).bound'\n    refine this.mono fun h => ?_\n    simp only [sub_eq_zero, sub_sub, sub_right_inj] at h\n    simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  refine' Asymptotics.IsLittleO.sub_add_sub_cancel _ _ _\n  refine'\n    IsLittleO.add\n      (IsLittleO.add (IsLittleO.add (isLittleO_sub_pow_div_sub_pow_div _ one_ne_zero two_ne_zero) _)\n        (isLittleO_sub_pow_div_sub_pow_div _ one_ne_zero two_ne_zero))\n      (IsLittleO.add (IsLittleO.add (isLittleO_sub_pow_div_sub_pow_div _ one_ne_zero two_ne_zero) _)\n        (isLittleO_sub_pow_div_sub_pow_div _ one_ne_zero two_ne_zero))\n  refine' IsLittleO.add (IsLittleO.add _ _) _\n  all_goals\n    set_option tactic.skipAssignedInstances false in\n    norm_num\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp_rw [sub_eq_add_neg, \u2190 neg_mul]\n  refine Asymptotics.IsBigO.neg_left ?_\n  simp_rw [neg_mul, mul_assoc]\n  refine ((Asymptotics.IsBigO.rfl.add ?_).add ?_).add ?_\n  all_goals\n    refine (IsLittleO.of_neg ?_).def' ?_\n    \u00b7 aesop (add safe Classical.propDecidable)\n    \u00b7 aesop (add safe Classical.propDecidable)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  apply Asymptotics.IsLittleO.congr' _ (eventually_of_forall fun h => by ring)\n  have := f'.isBigO_comp_rev (f'.isBigO_id.add (f''.isBigO_id.add f''.isBigO_id))\n  obtain \u27e8q, hq, C, hC\u27e9 := this.exists_eq_mul_norm_add_mul_norm_add_mul_norm\n    f' f'' hv hw\n  refine \u27e8q, hq, C * ((\u2016v\u2016 + \u2016w\u2016) * (\u2016v\u2016 + \u2016w\u2016)), ?_\u27e9\n  filter_upwards [eventually_ge_atTop 0] with h h\u2080\n  rw [mul_assoc]\n  nlinarith [hC h\u2080]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  apply Asymptotics.IsLittleO.cancel_right_of_lift_norm_isBigO\n  \u00b7 refine (isBigO_refl _ ?_).isBigO\n    rw [\u2190 sub_add_cancel x (x + v), add_assoc] at hv hw\n    exact calc\n      _ = \u2016f (x + v + w) - f (x + v) - f' x w\u2016 := by\n        rw [norm_sub_rev, norm_sub_rev (f'' _ _)]\n        congr! 4 <;> simp\n        simp only [smul_smul, one_mul]\n        abel\n      _ \u2264 \u2016fderivWithin \u211d f (interior s) (x + v + w) - fderivWithin \u211d f (interior s) (x + v) -\n            fderivWithin \u211d (fderiv \u211d f) (interior s) v\u2016 * \u2016w\u2016 :=\n        norm_image_sub_le_of_norm_hasFDerivWithin_le\n          (fun y hy =>\n            ((fderiv_within_subset ?_ ?_).trans ?_).norm_le_of_mem (fun z hz => ?_) ?_).trans <|\n          mul_norm_le_mul_norm_of_le le_rfl (norm_nonneg w) ?_\n        <;> assumption\n      _ =O[\ud835\udcdd[interior s] 0] fun h : \u211d => h ^ 2 := by\n        refine ((fderiv_within_subset isOpen_interior <| isOpen_interior.mem_nhds ?_).trans\n          (fderiv_within_subset isOpen_interior <| isOpen_interior.mem_nhds ?_)).norm_le_of_mem\n          (fun z hz => ?_) ?_\n        \u00b7 rw [\u2190 sub_add_cancel x (x + v), add_assoc] at hv\n          exact (interior_subset hv).2\n        \u00b7 rw [\u2190 sub_add_cancel x (x + v + w), add_assoc] at hw\n          exact (interior_subset hw).2\n        \u00b7 simpa using norm_image_sub_le_of_norm_hasFDerivWithin_le\n            (fun y hy =>\n              ((fderiv_within_subset ?_ ?_).trans ?_).norm_le_of_mem (fun z hz => ?_) ?_)\n            .trans (mul_norm_le_mul_norm_of_le le_rfl (norm_nonneg w) ?_)\n          <;> assumption\n        \u00b7 intro h\n          exact (fderiv_fderivWithin _).symm\n  refine (isBigO_refl _ ?_).trans ?_\n  \u00b7 exact ((nlinarith [hv, hw, (zero_add v).symm, (add_zero w).symm]).eventually\n    (lt_mem_nhds zero_lt_one)).filter_mono inf_le_left\n  \u00b7 refine (isBigO_refl _ ?_).trans ?_\n    \u00b7 exact\n        ((nlinarith [hv, hw, (zero_add v).symm, (add_zero w).symm]).eventually\n            (lt_mem_nhds zero_lt_one)).filter_mono inf_le_left\n    \u00b7 refine (isBigO_refl _ ?_).trans (isLittleO_refl _ _)\n      norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp only [pow_two]\n  simp (config := { unfoldPartialApp := true }) only [zero_add, zero_mul, zero_sub, mul_zero,\n    sub_zero, smul_zero, add_zero, one_mul, sub_neg_eq_add, neg_neg, neg_zero, neg_add_rev,\n    neg_mul_eq_neg_mul, neg_sub, add_assoc]\n  refine Asymptotics.IsBigO.neg_left ?_\n  refine Asymptotics.IsBigO.add ?_ ?_\n  \u00b7 exact (IsBigO.norm_left _).trans_isLittleO (IsLittleO.norm_left (f := _))\n  \u00b7 refine ((_root_.isBigO_refl (fun h => h ^ 2) _).smul_isBigO (f := _)).trans_isLittleO\n      (IsLittleO.norm_left (f := _))\n  \u00b7 refine (IsBigO.norm_left _).trans_isLittleO (IsLittleO.norm_left (f := _))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp (config := { unfoldPartialApp := true }) only [add_assoc] at hv hw\n  refine Asymptotics.IsBigO.trans_isLittleO (fourier_helper hv) ?_\n  refine Asymptotics.IsLittleO.add_isLittleO ?_ (Asymptotics.IsLittleO.const_mul_left\n    (Asymptotics.IsLittleO.const_mul_right ?_ one_ne_zero) _)\n  refine Asymptotics.isLittleO_sub_self_mul_id_sq.comp_tendsto ?_\n  refine (hasDerivAt_iff_tendsto_slope.mp (k.hasDerivAt I' <| x + I')) ?_\n  exact (tendsto_id.add (tendsto_const_nhds.smul mercury_trivialization.closed_embedding.continuous.continuousAt)).smul mercurial_trivialization.closed_embedding.continuous.continuousAt\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  apply Asymptotics.IsLittleO.of_pow\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  apply Asymptotics.IsLittleO.of_neg\n  filter_upwards [eventually_nhdsWithin_iff.mp (eventually_mem_nhds.mpr hv),\n    eventually_nhdsWithin_iff.mp (eventually_mem_nhds.mpr hw)] with _ h\u2081 h\u2082\n  norm_num\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  refine' Asymptotics.IsLittleO.congr' _ (isLittleO_one_iff _).2 <|\n    calc\n      _ =\u1da0[\ud835\udcdd[>] 0] fun h => h * (f v - f' x v - f' x w - f'' x v (2 * w)\n        + (1 / 2) * (f'' v v + f'' w w + 2 * f'' v w)) := by\n        apply EventuallyEq.sub\n        rw [show\n            _ = (fun h : \u211d => h \u2022 v + h \u2022 w) \u2218 fun h : \u211d => x + h \u2022 v + h \u2022 w\n            by ext1 h; simp]\n        apply ((isLittleO_refl _ _).add_isBigO (_ /\u2098\u2080 _)).congr' _ rfl\n        refine' Eventually.mono\n          (Set.Ioi_mem_nhds (by norm_num : (0 : \u211d) < 0)) fun h h0 =>\n          _\n        rw [zero_mul] at h0; rw [h0.choose_spec]; simp\n      _ =\u1da0[\ud835\udcdd[>] 0] fun h => h * |v + w| * |f (x + v)\n        - f x - f' x v - f' x (v + w) - f'' x v (2 * w + v)| := by\n        have : \u2200\u1da0 h in \ud835\udcdd[>] 0, 0 < |v + w| := by\n          apply (continuous_const.add continuous_const).norm.eventually_nhdsWithin_pos\n        refine' Eventually.mono this fun h h0 => _\n        simp only [norm_smul, Real.norm_eq_abs, mul_assoc]\n        congr 2\n        simp only [sub_eq_add_neg, add_assoc, neg_add_eq_sub]\n        rw [add_comm]\n        congr 2\n        have : f'' x v (2 * w + v) = v \u2022 f'' x (v + w) + 2 * w \u2022 f'' x v := by\n          rw [add_smul, \u2190 mul_smul, \u2190 mul_smul, add_comm,\n            show (2 * w : E) = w + w --TODO: norm_num fired on this\n            by rw [two_smul, add_comm]]\n          rw [fderiv_fderiv_aux1]\n        rw [this, add_smul]\n        have : (w + v) \u2022 f'' x (v + w) = w \u2022 f'' x (v + w) + v \u2022 f'' x (v + w) := by\n          rw [add_comm]; simp only [add_smul, smul_comm]\n        rw [this, add_assoc, add_assoc, add_left_comm, add_comm (f'' x v (2 * w)), \u2190\n          add_assoc, \u2190 add_assoc]\n      _ =\u1da0[\ud835\udcdd[>] 0] fun h => h * (2 * |v + w|) *\n          |f' (x + v) w - f' (x + v) 0 - f'' x w w - f'' v 0\n            - f'' (x + v) (v + w) v + (1 / 2) *\n            (f'' w w + f'' v v + 2 * f'' w v)| := by\n        have : \u2200\u1da0 h in \ud835\udcdd", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  have := fderiv_const_add x (f w) v\n  have := fderiv_const_add x (f v) w\n  simp [fderiv_const_add, fderiv_const_add, fderiv_const_add] at this\n  apply Asymptotics.IsLittleO.add\n  \u00b7 apply Asymptotics.IsLittleO.add\n    \u00b7 apply Asymptotics.IsLittleO.add\n      \u00b7 apply Asymptotics.IsLittleO.add\n        \u00b7 apply isLittleO_pow_pow\n          norm_num\n        \u00b7 apply isLittleO_const_const\n          norm_num\n      \u00b7 apply isLittleO_const_const\n        norm_num\n    \u00b7 apply isLittleO_const_const\n      norm_num\n  \u00b7 apply isLittleO_const_const\n    norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  suffices (fun h : \u211d => f (x + h \u2022 v + h \u2022 w) - f (x + h \u2022 v)) =o[\ud835\udcdd[>] 0] fun h => h ^ 2 by\n    refine (IsLittleO.add ?_ (IsLittleO.add ?_ ?_)).congr' (fun _ => by simp) (fun _ => by simp)\n    \u00b7 refine this.add ?_\n      exact (isBigO_refl _ _).mul_isLittleO (isLittleO_pow_id _)\n    \u00b7 exact (isBigO_refl _ _).mul_isLittleO (isLittleO_pow_id _)\n    \u00b7 exact (isBigO_refl _ _).mul_isLittleO (isLittleO_pow_id _)\n  have := fderiv_within_of_mem_nhds (interior_subset (by rwa [\u2190 segment_eq_image] at hw))\n    (differentiableWithinAt_of_mem (by rwa [segment_eq_image] at hw)) v\n  have := fderiv_within_of_mem_nhds (interior_subset (by rwa [\u2190 segment_eq_image] at hv))\n    (differentiableWithinAt_of_mem (by rwa [segment_eq_image] at hv)) w\n  refine (HasFDerivWithinAt.isLittleO_sub_linear_isBigO this).congr' ?_ (fun _ => rfl)\n  have : \u2200\u1da0 (_ : \u211d) in \ud835\udcdd[>] 0, \u2200 x : \u211d, x \u2208 Set.Ioi 0 \u2192\n      f (x + v + w) - f (x + v) =\n        fderivWithin \u211d f (x + v) w + fderivWithin \u211d f (x + v) w := by\n    filter_upwards [self_mem_nhdsWithin] with h _\n    clear! h\n    intro x hx\n    simp only [add_assoc, add_left_comm, add_comm, add_right_comm]\n    apply Convex.add_sub_sub_cancel\n    aesop\n  refine this.mono fun h h' => ?_\n  simpa only [neg_mul, one_mul, add_neg_cancel_right,\n    fderivWithin_const_add, fderivWithin_const_add, add_assoc, add_left_comm, add_comm,\n    add_right_comm] using h' (x + v + w) (add_pos hx hx)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  have : (0 : \u211d) \u2208 interior s := by\n    rw [mem_interior_iff_mem_nhds] at hv hw; exact mem_interior_iff_mem_nhds.mpr (mem_of_superset\n      (inter_mem hv hw) (inter_subset_left (s := interior s)))\n  refine Asymptotics.isLittleO_iff.2 fun c hc => ?_\n  filter_upwards [self_mem_nhdsWithin] with h hh using le_of_lt ?_\n  have hv' : (0 : \u211d) \u2208 interior s := by\n    rw [mem_interior_iff_mem_nhds] at hv hw; exact mem_interior_iff_mem_nhds.mpr (mem_of_superset\n      (inter_mem hv hw) (inter_subset_left (s := interior s)))\n  have hw' : (0 : \u211d) \u2208 interior s := by\n    rw [mem_interior_iff_mem_nhds] at hv hw; exact mem_interior_iff_mem_nhds.mpr (mem_of_superset\n      (inter_mem hv hw) (inter_subset_left (s := interior s)))\n  simp_all only [zero_smul, zero_add, zero_pow, zero_mul, add_zero, pow_one]\n  nlinarith [mul_nonneg hh.le (norm_nonneg (f' x w)), mul_nonneg hh.le (norm_nonneg (f'' v w)),\n    mul_nonneg hh.le (norm_nonneg (f'' w w))]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  apply Asymptotics.IsLittleO.congr' _ ((fun h \u21a6 by ring) : _)\n  refine' IsLittleO.add (IsLittleO.add (IsLittleO.add _ _) _) _\n  all_goals\n    apply (IsBigO.of_bound ?_ ?_).isLittleO\n    <;> apply eventually_nhdsWithin_of_forall\n    <;> intro h\n    <;> simp only [norm_one, mul_one, mul_zero, zero_add, sub_zero, zero_sub,\n      neg_neg, neg_mul, sub_neg_eq_add]\n    <;> apply le_of_eq\n    <;> ring\n  <;> norm_num\n  <;> apply le_of_eq\n  <;> ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp_rw [\u2190 zero_add (1 : \u211d), \u2190 add_assoc]\n  set t := interior s with ht\n  have := fderivWithin_of_mem_nhds (add_mem_nhds hv hw)\n  have := (fderivWithin_of_mem_nhds (add_mem_nhds hv (add_mem_nhds hw this)) : _) <|\n    antilipschitzWith_one \u211d _ <| mem_interior.1 hw\n  have := (fderivWithin_of_mem_nhds (add_mem_nhds (add_mem_nhds hv hw) this) : _) <|\n    antilipschitzWith_one \u211d _ <| mem_interior.1 hv\n  simp_all only [add_zero, zero_add, zero_smul, zero_mul, one_smul, one_mul, add_assoc]\n  simp_all only [add_zero, zero_add, zero_smul, zero_mul, one_smul, one_mul, add_assoc]\n  apply Asymptotics.IsLittleO.add_isBigO <;> apply IsBigO.of_bound <;>\n    use 1  <;> simp [norm_smul, Real.norm_of_nonneg, abs_of_nonneg]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp_rw [\u2190 sub_sub, sub_eq_add_neg, \u2190 neg_mul, \u2190 sub_eq_add_neg, neg_sub]\n  refine Asymptotics.IsBigO.sub_isLittleO (Asymptotics.isBigO_const_mul_self 2 ?_) ?_\n  \u00b7 exact f'.isBigO_comp\n  \u00b7 refine ((f''.isBigO_comp (\ud835\udd5c := \ud835\udd5c) fun h : \u211d => h \u2022 v + h \u2022 w).trans ?_).neg\n    refine (isBigO_of_le _ fun h => ?_).trans ?_\n    \u00b7 exact (norm_add_le _ _).trans (le_of_eq (by ring))\n    \u00b7 exact isBigO_const_const _ (2 : \u211d) Real.norm_of_nonneg (sq_nonneg _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  exact (convex_interior s).taylor_approx_two_segment hv hw f\n      (fun z => f' x z) (fun z => f'' x z) (fun z => f'' z z)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  refine'\n    isLittleO_iff.2 fun c =>\n      ((one_mul c).symm \u25b8\n        (isLittleO_iff.mp (f'.isBigO_sub (f''.isBigO_comp _ D_block_diagonal).2) c).nat_pow\n          2).congr_left\n        fun h => by\n        simp only [Function.comp_apply, Pi.one_apply, one_mul, one_pow, sub_add_cancel,\n          mul_neg, mul_one, neg_mul, neg_neg]\n        abel\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  rw [Asymptotics.isLittleO_iff]\n  intro c hc\n  rw [Filter.Eventually, Asymptotics.IsLittleO, IsBigOWith]\n  use 0\n  intro h_h\n  simp [norm_eq_abs, mul_assoc]\n  nlinarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  apply Asymptotics.IsLittleO.congr_of_sub (f := fun h => h ^ 2) (g := fun h =>\n    (f (x + h \u2022 v + h \u2022 w) - f (x + h \u2022 v)) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - h ^ 2 / 2 \u2022 f'' w w)\n  \u00b7 ext h\n    simp [sq]\n  \u00b7 refine (IsLittleO.add_isBigO ?_ ?_).add_isBigO ((IsLittleO.add_isBigO ?_ ?_).add_isBigO ?_)\n    \u00b7 apply isLittleO_sub_self\n    \u00b7 refine IsBigO.of_bound 1 (Eventually.mono (fun h => ?_) fun h => ?_)\n      \u00b7 exact eventually_nhdsWithin_of_forall (le_abs_self \u00b7)\n      \u00b7 simp [mul_assoc, mul_comm, mul_left_comm]\n    \u00b7 refine IsBigO.of_bound (\u2016f'' v\u2016 + 1) (Eventually.mono (fun h => ?_) fun h => ?_)\n      \u00b7 exact eventually_nhdsWithin_of_forall (le_abs_self \u00b7)\n      \u00b7 simp [mul_assoc, mul_comm, mul_left_comm]\n    \u00b7 refine IsBigO.of_bound (\u2016f'' w\u2016 + 1) (Eventually.mono (fun h => ?_) fun h => ?_)\n      \u00b7 exact eventually_nhdsWithin_of_forall (le_abs_self \u00b7)\n      \u00b7 simp [mul_assoc, mul_comm, mul_left_comm]\n    \u00b7 norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simpa only [neg_mul_eq_mul_neg, mul_assoc, neg_mul_eq_mul_neg, \u2190 neg_add, neg_neg, \u2190\n    mul_add, \u2190 pow_two] using (isBigO_refl (fun h : \u211d => h ^ 2) _).add (isLittleO_exp_neg_mul_sq _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  apply Asymptotics.IsLittleO.add\n  \u00b7 apply Asymptotics.IsLittleO.add\n    \u00b7 apply Asymptotics.IsLittleO.add\n      \u00b7 apply isLittleO_pow_pow.comp_tendsto\n        simpa using tendsto_id\n      \u00b7 apply isLittleO_const_left.2\n        apply tendsto_pow_atTop_nhds_0_of_lt_1\n        norm_num\n    \u00b7 apply isLittleO_const_left.2\n      apply tendsto_pow_atTop_nhds_0_of_lt_1\n      norm_num\n  \u00b7 apply isLittleO_const_left.2\n    apply tendsto_pow_atTop_nhds_0_of_lt_1\n    norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem Convex.taylor_approx_two_segment {v w : E} (hv : x + v \u2208 interior s)\n    (hw : x + v + w \u2208 interior s) :\n    (fun h : \u211d => f (x + h \u2022 v + h \u2022 w)\n        - f (x + h \u2022 v) - h \u2022 f' x w - h ^ 2 \u2022 f'' v w - (h ^ 2 / 2) \u2022 f'' w w) =o[\ud835\udcdd[>] 0]\n      fun h => h ^ 2 := by\n  simp only [add_assoc]\n  refine (isLittleO_pow_id (2 : \u2115) ?_ 0).congr_left fun h => ?_ \u25b8 (by ring)\n  positivity\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Set.pair_comm] at h\n  exact\n    \u27e8_,\n      cospherical_of_two_zsmul_oangle_eq_of_not_collinear h.symm\n        (by rwa [Set.pair_comm] at hn),\n      Set.mem_insert _ _, Set.mem_insert_of_mem _ (Set.mem_insert _ _), Set.mem_insert_of_mem _ (Set.mem_insert_of_mem _ (Set.mem_singleton _))\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [cospherical_iff_exists_sphere]\n  use \u27e8p\u2081, dist p\u2081 p\u2082 + dist p\u2082 p\u2083 + dist p\u2083 p\u2084 + dist p\u2084 p\u2081\u27e9\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  apply cospherical_of_dist_eq\n  \u00b7 repeat'\n    apply And.intro <;> simp_all <;>\n    linarith [fact_finite_int_angle hn]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [cospherical_iff_exists_sphere]\n  use (2 : \u211d) \u2022 \u2221 p\u2081 p\u2082 p\u2084\n  simp [h, hn]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Cospherical]\n  refine' \u27e8_, _\u27e9\n  exact ((2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084).center\n  exact ((2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084).is_cospherical_of_mem hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  apply cospherical_of_dist_eq\n  \u00b7 aesop\n  \u00b7 aesop\n  \u00b7 aesop\n  \u00b7 aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Set.coe_insert, Set.coe_insert, Set.coe_insert, Set.coe_singleton] at hn\n  exact\n    \u27e8\u27e8(2 : \u211d) / normSq (2 : \u211d) \u2022 (2 / normSq (2 : \u211d) \u2022 (2 / normSq (2 : \u211d) \u2022 p\u2081 + 0 \u2022 p\u2082 + 0 \u2022 p\u2083 + 0 \u2022 p\u2084)),\n      by simpa using h\u27e9,\n      by simpa using hn\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  refine' \u27e8midpoint \u211d p\u2081 p\u2084, 2 * dist p\u2081 p\u2084, _\u27e9\n  simp_all only [Set.mem_insert_iff, Set.mem_setOf_eq, exists_prop, exists_eq_left,\n    exists_eq_right, dist_eq_norm_vsub, mul_eq_mul_left_iff, mul_eq_mul_right_iff,\n    or_false_iff, false_or_iff, two_ne_zero, forall_eq_or_imp, forall_exists_index]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Cospherical]\n  refine' \u27e8circumcenter {p\u2081, p\u2082, p\u2083, p\u2084}, (Set.PairwiseDisjoint _).elim _ _\u27e9\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Set.insert_eq_of_mem (Set.mem_insert p\u2081 _), Set.insert_eq_of_mem (Set.mem_insert p\u2081 _),\n    Set.insert_eq_of_mem (Set.mem_insert p\u2081 _)]\n  exact cospherical_of_two_zsmul_oangle_eq_of_not_collinear h hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  apply cospherical_of_dist_eq\n  <;> (try decide)\n  <;> (try apply h)\n  <;> (try apply h.symm)\n  <;> (try apply h.trans)\n  <;> (try apply h.of_symm)\n  <;> (try apply h.of_trans)\n  <;> (try apply h.left_of_symm)\n  <;> (try apply h.right_of_symm)\n  <;> (try apply h.1_of_symm)\n  <;> (try apply h.2_of_symm)\n  <;> (try apply hn)\n  <;> (try apply hn.of_collinear)\n  <;> (try apply hn.of_not_collinear)\n  <;> (try apply hn.of_collinear_of_mem)\n  <;> (try apply hn.of_not_collinear_of_mem)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  have hs : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084 := h\n  simp_all only [mul_comm (2 : \u2124), mul_left_comm (2 : \u2124), mul_assoc (2 : \u2124)]\n  cospherical_of_collinear_of_two_zsmul_oangle_eq\n    (by simpa [hs, hn] using hn)\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  exact cospherical_of_two_zsmul_oangle_eq_of_not_collinear h hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Set.pair_comm] at h\n  exact cospherical_of_two_zsmul_oangle_eq_of_not_collinear h hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [cospherical_iff_exists_sphere]\n  exact \u27e8_, \u27e8dist_sq_eq_dist_sq_of_two_zsmul_oangle_eq_of_not_collinear h hn, rfl\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [cospherical_iff_exists_eq_sphere]\n  exact \u27e8\u27e8(univ : Finset P), by tauto\u27e9, by tauto\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  have : \u2221 p\u2081 p\u2082 p\u2084 = \u2221 p\u2081 p\u2083 p\u2084 := by linarith\n  exact cospherical_of_two_zsmul_oangle_eq_of_not_collinear h hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Cospherical, cospherical_of_dist_eq]\n  <;> simp_all only [mul_comm, mul_left_comm, mul_assoc, mul_one, mul_neg, mul_zero, neg_mul,\n    zero_mul, neg_neg, zero_add, add_zero, sub_eq_add_neg]\n  <;> try decide\n  <;> tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [\u2190 smul_eq_zero_iff_eq] at h\n  exact cospherical_of_two_zsmul_oangle_eq h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Cospherical]\n  exact\n    \u27e8(midpoint \u211d p\u2081 p\u2082), (midpoint \u211d p\u2081 p\u2083), (midpoint \u211d p\u2081 p\u2084), (midpoint \u211d p\u2082 p\u2084),\n      (midpoint \u211d p\u2083 p\u2084), by\n      simp_all only [mem_insert_iff, mem_singleton_iff, Set.insert_nonempty, true_iff,\n        not_false_iff]\n      norm_num\n      exact\n        \u27e8dist_midpoint_midpoint_eq_of_dist_eq h,\n          dist_midpoint_midpoint_eq_of_dist_eq (two_zsmul_oangle_eq_two_zsmul_oangle_of_ne_of_ne h)\u27e9 :\n      \u2200\n        x \u2208 ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P), \u2203 y \u2208 ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P), \u2203 z : \u211d,\n        dist x z = dist y z \u2227 \u2203, y \u2208 ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P)\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [collinear_iff_of_mem (Set.mem_insert p\u2081 {p\u2082, p\u2083, p\u2084})] at hn\n  exact cospherical_of_two_zsmul_oangle_eq_of_not_collinear\u2081 h hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [cospherical_iff_exists_sphere]\n  use {p\u2081, p\u2082, p\u2083, p\u2084}\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Set.insert_comm]\n  exact\n    cospherical_of_two_zsmul_oangle_eq_of_not_collinear\n      (by rw [Set.insert_comm]; exact h) hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Cospherical, Set.Pairwise.insert_insert_of_comm, Set.Pairwise.insert_insert_of_comm]\n  exact \u27e8p\u2081, rfl, fun p hp => by\n    simp_all only [Set.mem_insert_iff, collineation_iff_exists_line,\n      collineationMap_apply_line, lineMap_apply]\n    aesop\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Cospherical, Set.Pairwise.insert_insert]\n  refine'\n    \u27e8dist p\u2081 p\u2082, dist p\u2081 p\u2082, dist p\u2081 p\u2082, dist p\u2081 p\u2082,\n      dist_comm p\u2081 p\u2082, dist_comm p\u2081 p\u2082, dist_comm p\u2081 p\u2082, dist_comm p\u2081 p\u2082, _\u27e9\n  simp_all only [Set.Pairwise, Ne, forall_eq, forall_eq', imp_true_iff, and_self_iff,\n    and_imp, forall_and, forall_eq', forall_eq]\n  refine' \u27e8_, _, _, _\u27e9 <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  exact cospherical_of_two_zsmul_oangle_eq_of_not_collinear h hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  exact Cospherical.of_subset\n    (by rw [\u2190 affineIndependent_iff_not_collinear_of_finset_card_eq_three (by simp : _ = 3)]\n        exact hn)\n    (by rw [Set.insert_subset_iff, Set.insert_subset_iff, Set.insert_subset_iff]; simp [h])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [\u2190 Set.insert_eq_of_mem (Set.mem_insert p\u2081 _)] at hn\n  exact cospherical_of_dist_eq_of_not_collinear\n    (by simpa [two_zsmul, smul_eq_mul] using h) hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  exact cospherical_of_two_zsmul_oangle_eq_of_not_collinear h hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Set.pair_comm] at hn\n  exact cospherical_of_two_zsmul_oangle_eq_of_not_collinear h hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  exact cospherical_of_two_zsmul_oangle_eq_of_not_collinear h hn\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem cospherical_of_two_zsmul_oangle_eq_of_not_collinear {p\u2081 p\u2082 p\u2083 p\u2084 : P}\n    (h : (2 : \u2124) \u2022 \u2221 p\u2081 p\u2082 p\u2084 = (2 : \u2124) \u2022 \u2221 p\u2081 p\u2083 p\u2084) (hn : \u00acCollinear \u211d ({p\u2081, p\u2082, p\u2084} : Set P)) :\n    Cospherical ({p\u2081, p\u2082, p\u2083, p\u2084} : Set P) := by\n  rw [Cospherical]\n  refine' \u27e8_, _\u27e9\n  exact \u27e8_, _\u27e9\n  exact \u27e8_, _\u27e9\n  simp_all only [Set.mem_insert_iff, Set.mem_singleton_iff, exists_prop, exists_eq_left,\n    exists_eq_right, and_true, and_assoc, exists_and_right, exists_and_left, exists_eq_right']\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp only [totalDegree, support_zero, Finset.sup_empty]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp only [totalDegree, support_zero]\n  exact Finset.sup_empty\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp only [totalDegree, support_zero, Finset.sup_empty]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp only [totalDegree, Finsupp.zero_apply, sup_eq_max, max_eq_right]\n  exact Finset.sup_const bot_le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  rw [MvPolynomial.totalDegree, Finset.sup_eq_bot_iff]\n  intro d hd\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  rw [MvPolynomial.totalDegree]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  unfold totalDegree\n  exact rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp [MvPolynomial.totalDegree]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp only [totalDegree, top_eq_max, max_eq_sup, zero_eq_mul]\n  rw [sup_bot_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem totalDegree_zero : (0 : MvPolynomial \u03c3 R).totalDegree = 0 := by\n  simp only [totalDegree, finset_sup_eq_zero, Finsupp.total_zero, map_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp [orthogonal_eq_bot_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  refine Eq.symm ?_\n  rw [eq_bot_iff]\n  intro x\n  simp (config := { contextual := true }) [mem_bot, mem_top, mem_orthogonal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  apply le_antisymm\n  \u00b7 intro x hx\n    simp only [mem_orthogonal, mem_top, forall_const, mem_bot] at hx\n    simpa using hx 0\n  \u00b7 exact bot_le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  refine' eq_bot_iff.2 fun v hv => _\n  rw [mem_bot]\n  refine' Submodule.mem_orthogonal'.2 fun w _ => _\n  rw [mem_top] at hv\n  simpa using hv w\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  rw [eq_bot_iff]\n  intro v hv\n  simp only [mem_orthogonal, mem_top, forall_true_left] at hv\n  simpa using hv 0\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  refine' eq_bot_iff.mpr fun v hv => _\n  rw [mem_bot]\n  rw [mem_top] at hv\n  simpa using hv\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  ext x\n  simp [Submodule.mem_orthogonal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  exact top_orthogonal_eq_bot\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  apply eq_bot_iff.mpr\n  intro v hv\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  refine' eq_bot_iff.mpr fun x hx => _\n  simp only [mem_orthogonal, mem_top, forall_const, mem_bot] at hx\n  exact hx 0 (zero_mem _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  ext x\n  simp [Submodule.mem_orthogonal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp [Submodule.orthogonal_eq_bot_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  apply eq_bot_iff.2\n  intro v hv\n  simp only [mem_bot, mem_top, mem_orthogonal] at *\n  simpa using hv 0\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  refine' eq_bot_iff.2 fun x hx => _\n  simp only [mem_bot, mem_orthogonal, inner_self_eq_zero] at hx \u22a2\n  exact hx 0 (zero_mem \u22a4)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  apply le_antisymm\n  \u00b7 intro v hv\n    simp only [mem_bot]\n    exact (inner_right_of_mem_orthogonal hv) (0 : E)\n  \u00b7 intro v hv\n    simp only [mem_bot] at hv\n    rw [hv]\n    exact Submodule.zero_mem _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  rw [eq_comm]\n  simp [Submodule.eq_bot_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  refine' eq_bot_iff.mpr fun x hx => _\n  rw [mem_orthogonal] at hx\n  simpa using hx 0 (Submodule.mem_top)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  apply le_antisymm\n  \u00b7 rw [Submodule.le_orthogonal_iff]\n    intro x _ hx\n    simpa using hx 0 (Submodule.zero_mem \u22a4)\n  \u00b7 rw [Submodule.le_orthogonal_iff]\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  apply eq_bot_iff.mpr\n  intro v hv\n  simp only [mem_orthogonal, mem_top, forall_true_left, inner_self_eq_zero, eq_self_iff_true,\n    forall_const] at hv\n  exact hv v\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  apply le_antisymm <;> simp [Submodule.le_def, mem_bot, mem_top]\n  intro x\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  refine' eq_bot_iff.2 fun x hx => _\n  simp only [mem_bot, mem_orthogonal] at hx \u22a2\n  exact (inner_self_eq_zero x).mp (hx x mem_top)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  rw [\u2190 top_codisjoint, codisjoint_iff, Submodule.inf_top_eq, top_inf_eq,\n    Submodule.orthogonal_orthogonal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  refine' eq_bot_iff.2 fun z hz => _\n  rw [mem_orthogonal] at hz\n  simpa using hz 0 (mem_top R E)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  apply eq_bot_iff.2\n  intro v\n  simp [Submodule.mem_orthogonal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  rw [Submodule.eq_bot_iff]\n  intro x hx\n  simp only [Submodule.mem_orthogonal, Submodule.mem_top, forall_const] at hx\n  simpa [Submodule.mem_bot] using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  apply eq_bot_iff.2\n  intro x hx\n  simp only [mem_bot, mem_orthogonal] at hx \u22a2\n  simpa using hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  exact Submodule.orthogonal_top\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  simp [Submodule.eq_bot_iff, Submodule.mem_orthogonal]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  refine' eq_bot_iff.2 fun v hv => _\n  rw [mem_orthogonal'] at hv\n  simpa using hv 0 (Submodule.mem_top)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  refine' eq_bot_iff.mpr fun v _ => _\n  simp only [mem_orthogonal, mem_top, forall_const, zero_dotProduct]\n  exact zero_mem \u22a5\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  refine' eq_bot_iff.2 fun v hv => _\n  have hv' : \u2200 w : V, v \u2b1d\u1d65 w = 0 := mem_orthogonal' v hv\n  simpa using hv' 0\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem top_orthogonal_eq_bot : (\u22a4 : Submodule \ud835\udd5c E)\u15ee = \u22a5 := by\n  apply eq_bot_iff.2\n  intro v hv\n  simp only [mem_bot, mem_top, mem_orthogonal, top_coe, Submodule.mem_top] at hv\n  simpa using hv 0\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have h1 := hf y hy\n  have h2 := hg y hy\n  exact hcont.prod_mk h1.prod_mk h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  have := hf.add hg hcont\n  exact this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have h := hcont.prod_mk (hf.tendsto_nhds hy) (hg.tendsto_nhds hy)\n  simpa only [Function.comp, add_sub_cancel] using h.add\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x) := hcont\n  apply this.preimage_mem_nhds (hy.add' hf hg)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have h1 := hf y hy\n  have h2 := hg y hy\n  exact hcont.prod_mk h1 |>.prod_mk h2 |>.lowerSemicontinuousWithinAt\n  <;> assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  rcases hf y hy with \u27e8u, hu, hfu\u27e9\n  rcases hg y hy with \u27e8v, hv, hgu\u27e9\n  use u \u2229 v, Filter.inter_mem hu hv\n  rintro a \u27e8ha : f a \u2264 _ + _ \u2227 _ + _ < u, hb : g a \u2264 _ + _ \u2227 _ + _ < v\u27e9\n  apply hu.1\n  have := hcont (by isBoundedDefault)\n  nlinarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro a ha\n  have h := hcont.prod_mk (hf a ha) (hg a ha)\n  simpa only [ContinuousAt, nhds_prod_eq, tendsto_add'] using h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  obtain \u27e8u, v, hu, hv, huv\u27e9 := (lowerSemicontinuousWithinAt_iff_exists_sub_lt.mp hy)\n  obtain \u27e8u', v', hu', hv', huv'\u27e9 := (lowerSemicontinuousWithinAt_iff_exists_sub_lt.mp hy)\n  obtain \u27e8u'', v'', hu'', hv'', huv''\u27e9 := (lowerSemicontinuousWithinAt_iff_exists_sub_lt.mp hy)\n  refine' SemicontinuousWithinAt.lowerSemicontinuousWithinAt_add\n    (SemicontinuousWithinAt.lowerSemicontinuousWithinAt_add\n      (hf u hu) (hg u hu) _) (SemicontinuousWithinAt.lowerSemicontinuousWithinAt_add\n      (hf u' hu') (hg u' hu') _) _\n  all_goals\n    try simp_all\n  all_goals\n    first\n    | apply ContinuousAt.continuousWithinAt| apply ContinuousAt.continuousAt\n  all_goals\n    apply ContinuousAt.comp _ hcont\n    exacts [ContinuousAt.prod_mk (hf _ hu) (hg _ hu), ContinuousAt.prod_mk (hf _ hu') (hg _ hu'),\n      ContinuousAt.prod_mk (hf _ hu'') (hg _ hu'')]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have h1 := hf y hy\n  have h2 := hg y hy\n  exact hcont.lowerSemicontinuousWithinAt.add h1 h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  exact hf.add' hg (hcont.comp <| continuous_add.tendsto _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have h2 := hcont.prod_mk hf (hg.comp continuousWithinAt_snd)\n  simpa only [and_imp, Prod.forall, add_le_add_iff_left, imp_self, imp_true_iff] using\n    hy.add' h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y gy\n  refine' (hf y gy).add' (hg y gy) _\n  exact hcont.preimage_mem_nhds (by simpa only [mem_preimage] using gy)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro c hc\n  have H := hf c hc\n  have H' := hg c hc\n  simp only [mem_map, mem_preimage] at H H'\n  exact H.add H'\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  exact hf.add' hg (hcont.comp_tendsto tendsto_const_nhds)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have h1 := hf y hy\n  have h2 := hg y hy\n  exact hcont.lowerSemicontinuousWithinAt.add h1 h2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy; exact hf y hy hg y hy hcont\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  refine' Filter.Eventually.and _ _\n  \u00b7 have h := hf y hy\n    exact (Filter.tendsto_map.2 h).add (hcont.comp h)\n  \u00b7 have h := hg y hy\n    exact (Filter.tendsto_map.2 h).add (hcont.comp h)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have hadd := hf y hy\n  have hsub := hg y hy\n  have h := hcont.preimage_mem_nhds (by simpa only [Prod.mem_nhds_iff] using hy)\n  exact hsub.add hadd h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  let h := hcont.preimage_mem_nhds (show (f x, g x) \u2208 {p : \u03b3 \u00d7 \u03b3 | y < p.1 + p.2} from hy)\n  exact Filter.mem_of_superset h (fun \u27e8a, b\u27e9 \u27e8ha, hb\u27e9 => add_le_add ha.le hb.le)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have h1 : (fun z => f z + g z) = fun z => (f z, g z).1 + (f z, g z).2 := by ext z; rfl\n  rw [h1]\n  exact hf y hy |>.map\u2082 hg (hcont.tendsto)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  simp_rw [add_def]\n  exact hf.add' hg hcont\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have h := hcont.prod_mk hf\n  simpa only [add_assoc, add_left_comm] using h hg hy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro a ha\n  have := hf a ha\n  have := hg a ha\n  exact this.add (by continuity : ContinuousAt (fun x : \u03b3 => a) (f x))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  obtain \u27e8u, hu, v, hv, huv\u27e9 := (hcont.prod_mk (hf.prod hg)).exists_mem_nhds_mem_nhds_le hy\n  filter_upwards [hf u hu, hg v hv] with z hz\u2081 hz\u2082 using huv (add_le_add hz\u2081 hz\u2082)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  refine' hf.add' hg fun y hy => hcont.preimage_mem_nhds hy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  rcases hcont.prod_mk (hf y hy) (hg y hy) with \u27e8u, v, huv, hu, hv\u27e9\n  filter_upwards [hu, hv] with z hfu hgv\n  have := add_le_add (hu \u25b8 hfu : f x \u2264 f z) (hv \u25b8 hgv : g x \u2264 g z)\n  exact hy.trans_le this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have h2 := hcont.add (hf (y - (f x + g x))) (hg (y - (f x + g x)))\n  simp only [add_sub_add_left_eq_sub, sub_lt_self_iff] at *\n  exact hf (y - g x) hy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy;\n  have h1 := hf y hy;\n  have h2 := hg y hy;\n  exact hcont.preimage_mem_nhds (Filter.inter_mem h1 h2)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro c hc\n  have hfg := hf c hc\n  have hg' := hg c hc\n  exact hcont.preimage_mem_nhds (Filter.inter_mem hfg hg')\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  rcases hcont.prod_nhds hy with \u27e8u, v, hu, hv, h\u27e9\n  apply Filter.mem_of_superset (hf u hu) fun z hz => ?_\n  apply Filter.mem_of_superset (hg v hv) fun z' hz' => ?_\n  apply h.1\n  exact \u27e8hz, hz'\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have h1 := hf y hy\n  have h2 := hg y hy\n  exact h1.add h2 hcont\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem LowerSemicontinuousWithinAt.add' {f g : \u03b1 \u2192 \u03b3} (hf : LowerSemicontinuousWithinAt f s x)\n    (hg : LowerSemicontinuousWithinAt g s x)\n    (hcont : ContinuousAt (fun p : \u03b3 \u00d7 \u03b3 => p.1 + p.2) (f x, g x)) :\n    LowerSemicontinuousWithinAt (fun z => f z + g z) s x := by\n  intro y hy\n  have h_add := hcont.prod_self_nhds' (hf _ hy) (hg _ hy)\n  exact h_add.eventually (fun z hz => add_le_add hz.1 hz.2)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  refine' Fin.cases _ _ i <;> simp [vandermonde]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp only [vandermonde, Fin.cons_val_zero, Fin.cons_val_succ, Fin.val_zero, Fin.val_succ,\n    pow_zero, pow_succ, mul_one]\n  rcases i with \u27e8i, hi\u27e9\n  fin_cases i\n  all_goals simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  refine' Fin.cases _ _ i <;> simp [Vandermonde, Fin.sum_univ_succ]\n  <;> refine' Fin.cases _ _ j <;> simp [pow_succ']\n  <;> ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp [vandermonde, Fin.sum_univ_succ, mul_comm]\n  rcases i with \u27e8i, \u27e8hi, rfl\u27e9\u27e9\n  simp [Nat.mod_eq_of_lt hi]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  refine' Fin.cases _ _ i <;> simp [Vandermonde]\n  refine' Fin.cases _ _ j <;> simp [Fin.cons_succ, Fin.cons_zero, Fin.cases_zero, Fin.cases_succ]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp only [vandermonde, cons_val_zero, cons_val_succ, Fin.cases_zero, Fin.cases_succ,\n    pow_zero, _root_.pow_succ, mul_one]\n  cases i <;> simp [mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp only [vandermonde, Fin.cons_succ, Fin.cons_zero, Fin.cons_succ, Fin.cons_zero]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp only [vandermonde, Fin.cons_zero, Fin.cons_succ, Fin.cons_val_zero, Fin.cons_val_succ,\n    Fin.cases_zero, Fin.cases_succ, Fin.val_zero, pow_zero, pow_succ, mul_one, mul_zero,\n    zero_mul, Fin.val_succ]\n  rcases i with \u27e8i, hi\u27e9\n  rcases j with \u27e8j, hj\u27e9\n  fin_cases i <;> fin_cases j <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp [vandermonde, Fin.sum_univ_succ, Fin.cons_succ, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  fin_cases i <;> simp [vandermonde]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  fin_cases i <;> simp [vandermonde]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp [vandermonde, Fin.sum_cons, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext (i j)\n  simp only [vandermonde, Fin.mod_val, Fin.cons_val_zero, Fin.cons_val_succ,\n    Fin.castSucc_val, \u2190 Multiset.map_map, Multiset.map_id',\n    Function.comp_apply, id_eq]\n  rcases i with \u27e8bi, hi\u27e9\n  rcases j with \u27e8bj, hj\u27e9\n  simp_all [Fin.lt_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp_rw [vandermonde_apply]\n  fin_cases i\n  \u00b7 simp\n  \u00b7 simp_rw [Fin.sum_univ_succ]\n    simp [Fin.succ_castSucc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext \u27e8i, j\u27e9\n  simp only [vandermonde_apply, Fin.cons_val_zero, Fin.cons_val_succ, Fin.val_zero, pow_zero,\n    one_mul, Fin.val_succ, Fin.cons_succ]\n  rcases i with \u27e8i, hi\u27e9\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp [Vandermonde, Fin.sum_univ_succ, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  funext i j\n  refine Fin.cases ?_ (fun i => ?_) i\n  \u00b7 simp [vandermonde]\n  \u00b7 simp only [vandermonde, cons_val_succ, Fin.cases_succ, Fin.val_succ]\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp [vandermonde]\n  rcases i with \u27e8i, \u27e8bi, rfl\u27e9\u27e9\n  rcases j with \u27e8j, \u27e8bj, rfl\u27e9\u27e9\n  simp [Fin.cons_val_eq_if]\n  split_ifs with heq <;> simp [heq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  set_option tactic.skipAssignedInstances false in\n  fin_cases i <;> simp [Fin.sum_univ_succ, mul_add, mul_comm, mul_left_comm, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  fin_cases i <;> simp [vandermonde, Fin.sum_cons, mul_add]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp [vandermonde, Fin.sum_succ, mul_comm]\n  rcases i with \u27e8i, \u27e8\u27e9\u27e9\n  rcases j with \u27e8j, \u27e8\u27e9\u27e9\n  simp [Fin.sum_univ_succ, pow_succ']\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext (i j)\n  simp only [vandermonde, Fin.sum_cons, Fin.cons_zero, Fin.cons_succ, Fin.cons_cast,\n    Fin.cast_succ, Fin.succ_cast]\n  cases i\n  all_goals simp [pow_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp [vandermonde, Fin.cons, Fin.cases_succ_succ]\n  split_ifs with h\n  swap\n  simp_all [h]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp only [vandermonde, Fin.cons_val_zero, Fin.cons_val_succ, pow_zero, pow_succ]\n  cases i <;> simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp_rw [vandermonde, Fin.sum_cons, Fin.cons_zero, Fin.cons_succ, Fin.succ_mk]\n  cases i\n  case zero =>\n    cases j\n    case zero => simp\n    case succ => simp\n  case succ i' =>\n    cases j\n    case zero => simp\n    case succ j' =>\n      simp [vandermonde_cons i' j', Fin.pow_succ, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  fin_cases i <;> simp [Fintype.sum_eq_single, -pow_succ, -pow_zero]\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp_rw [vandermonde, Fin.cons_succ, Fin.sum_univ_succ, Fin.val_zero, pow_zero, mul_one]\n  cases i with\n  | zero =>\n    rfl\n  | succ i =>\n    simp [pow_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp [Vandermonde, Fin.sum_univ_succ, mul_comm, vandermonde]\n  rcases i with \u27e8i, hi\u27e9\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  rw [vandermonde, Fin.cons_zero, Fin.cons_succ]\n  by_cases h : LinearlyIndependent R fun i : Fin n => (v i)\n  swap\n  \u00b7 have : Fintype.card (Fin n) < Fintype.card (Fin n.succ) := by\n      simpa only [Fintype.card_fin, Nat.lt_succ_self] using Nat.lt_succ_self _\n    simp_all [rank_def_of_finrank_lt, Fin.linearlyIndependent_iff,\n      LinearIndependent.fin_cons, Function.comp]\n  have I : { n | \u2203 j : (Fin n.succ), (j : \u2115) = n } = Set.univ := by\n    ext n\n    simp [Nat.exists_eq_succ_of_ne_zero (Nat.pos_iff_ne_zero.mp (Nat.zero_lt_succ _))]\n  -- simp? doesn't fire since the simp_rw seems to only see the outside of the by_cases\n  simp_rw [I]\n  apply (Basis.mk h).ext\n  intro i\n  apply (Basis.mk _).ext\n  intro j\n  simp [mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  refine Fin.cases ?_ ?_ i <;> simp [Fin.modNat_succ]\n  <;> refine Fin.cases ?_ ?_ j <;> simp [Fin.modNat_succ, Fin.cons_succ]\n  <;> simp_all [mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  simp only [vandermonde, Fin.cons_succ, Fin.cons_zero, Fin.cons_succ, Fin.cons_zero]\n  cases i <;> cases j <;>\n    simp_all [Fin.pow_succ, mul_assoc, mul_comm, mul_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem vandermonde_cons {n : \u2115} (v0 : R) (v : Fin n \u2192 R) :\n    vandermonde (Fin.cons v0 v : Fin n.succ \u2192 R) =\n      Fin.cons (fun (j : Fin n.succ) => v0 ^ (j : \u2115)) fun i => Fin.cons 1\n      fun j => v i * vandermonde v i j := by\n  ext i j\n  cases i\n  simp [vandermonde]\n  cases j\n  simp [vandermonde]\n  simp [vandermonde]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [objD]\n  apply zero_of_target_iso_zero\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  induction n <;> simp [*, objD, Nat.succ_eq_add_one] at *\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  induction n with\n  | zero =>\n    simp [objD, Nat.zero_eq, zero_add]\n  | succ n ih =>\n    simp [objD, Nat.succ_eq_add_one]\n    rw [ih]\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  cases n\n  case zero =>\n    dsimp\n    simp\n  case succ n =>\n    dsimp\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  induction' n with n ih\n  simp [objD]\n  simp [objD, ih, c_d_squared]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [objD, d_squared]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simpa [objD] using d_squared_from_X\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  cases n <;> simp [objD, HomologicalComplex.d_iff, Nat.succ_eq_add_one, add_comm, add_left_comm]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [objD, id_comp, comp_id]\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  induction' n with n ih\n  simp [objD]\n  simp only [objD, HomologicalComplex.d_comp_d_of_not_rel_succ n (n + 1) (n + 1 + 1) rfl rfl]\n  rw [add_assoc]\n  simp only [add_right_comm, add_self]\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [objD, Nat.succ_eq_add_one, add_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [objD, HomologicalComplex.d, AddMonoidHom.mk'_apply,\n    Linear.comp_pow_eq_zero, Linear.quadratic_eq_zero_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [objD, Nat.succ_eq_add_one, add_comm, add_left_comm]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [objD, Nat.succ_eq_add_one, add_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  cases n <;>\n  dsimp only [objD, CategoryTheory.Limits.HasZeroMorphisms.zero_def] <;>\n  simp [objD, CategoryTheory.Limits.HasZeroMorphisms.zero_def]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [objD, d_squared]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  induction' n with n ih\n  case zero =>\n    simp [objD]\n  simp only [objD, HomologicalComplex.d_comp_d_self, add_zero, chainComplex_objD,\n    HomologicalComplex.d_comp_d_self', zero_add] at ih \u22a2\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [objD, add_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  dsimp only [S\u2081]\n  simp [objD, NatTrans.naturality, Category.id_comp, Category.comp_id, add_comm,\n    SuperShortComplex.shortComplex_g]\n  apply zero_of_target_iso_zero\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  induction' n with n hn\n  case zero =>\n    simp [objD]\n  case succ =>\n    simp [objD, hn]\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  rw [objD, objD]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [objD, NatTrans.naturality, Category.id_comp, Category.comp_id, add_comm 1]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  dsimp [objD]\n  simp only [add_right_neg, add_zero, sub_self, comp_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  induction' n with n hn\n  case zero =>\n    dsimp [objD]\n    simp\n  case succ =>\n    dsimp [objD]\n    simp [hn]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  induction' n with n hn\n  case zero =>\n    dsimp [objD]\n    simp\n  case succ =>\n    dsimp [objD]\n    simp [objD, hn]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  induction' n with n ih\n  aesop_cat\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  simp [objD, Nat.succ_eq_add_one, add_assoc, add_comm, add_left_comm]\n  simp [alternatingFaceMapComplex, CommRingCat.zero_def, CommRingCat.mul_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  unfold objD\n  simp [Nat.succ_eq_add_one, add_comm, add_left_comm, add_assoc]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  cases n <;> simp [objD, Nat.succ_eq_add_one, id_def, HomologicalComplex.d_add_eq_dFrom_dTo,\n    HomologicalComplex.d_add_eq_dFrom_dTo_assoc]\n  <;> simp_all\n  <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  induction' n with n ih\n  case zero =>\n    dsimp [objD]\n    simp\n  case succ =>\n    dsimp [objD]\n    simp [ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  revert n\n  intro n\n  induction n with\n  | zero =>\n    dsimp [objD]\n    simp\n  | succ n ih =>\n    dsimp [objD]\n    simp [ih]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem d_squared (n : \u2115) : objD X (n + 1) \u226b objD X n = 0 := by\n  match n with\n  | 0 =>\n    dsimp [objD, NatTrans.naturality, SimplicialObject.\u03b4]\n    simp only [add_zero, comp_add, comp_id, zero_comp, zero_add]\n    rw [\u2190 Preadditive.sum_comp, \u2190 Preadditive.comp_sum, Fintype.sum_eq_zero]\n    aesop\n  | n + 1 =>\n    dsimp [objD, NatTrans.naturality, SimplicialObject.\u03b4]\n    simp only [add_zero, comp_add, comp_id, zero_comp, zero_add]\n    rw [\u2190 Preadditive.sum_comp, \u2190 Preadditive.comp_sum, Fintype.sum_eq_zero]\n    aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [Finset.mem_filter, Finset.mem_Ico, Finset.mem_Ico, and_true, and_assoc]\n  constructor <;> intro h <;> simp_all [le_max_iff]\n  all_goals\n    rcases h with \u27e8h\u2081 | h\u2081, h\u2082\u27e9 <;> simp_all [le_max_iff]\n    <;>\n    omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [mem_filter, mem_Ico, max_le_iff, and_assoc]\n  constructor <;> simp_all [le_max_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  cases' le_total l n with h\u2080 h\u2080 <;>\n  cases' le_total l m with h\u2081 h\u2081 <;>\n  simp_all [Ico_filter_le, max_eq_right_of_lt, max_eq_left]\n  <;>\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [mem_filter, mem_Ico, max_le_iff, and_comm]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [mem_filter, mem_Ico, max_le_iff]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp_all only [mem_filter, mem_Ico]\n  by_cases h : n \u2264 x <;> by_cases h' : x < m <;> simp_all\n  <;> try omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp_rw [mem_filter, mem_Ico, max_le_iff]\n  by_cases h\u2081 : n \u2264 x <;> by_cases h\u2082 : x < m <;> simp [h\u2081, h\u2082]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [List.mem_filter, List.mem_Ico, max_le_iff]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [mem_filter, mem_Ico, max_le_iff]\n  by_cases h\u2080 : n \u2264 x <;> by_cases h\u2081 : x < m\n  <;> simp [h\u2080, h\u2081]\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [mem_filter, mem_Ico, max_le_iff, and_assoc]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [List.mem_filter, List.mem_Ico, Finset.mem_filter, Finset.mem_Ico, Finset.mem_Ico,\n    Finset.mem_filter, Finset.mem_Ico]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [Finset.mem_filter, Finset.mem_Ico, Finset.mem_Ico, and_true, and_assoc]\n  constructor <;> intro h\n  next =>\n    exact \u27e8max_le_of_left_le h.2.1, h.1, h.2.2\u27e9\n  next =>\n    exact \u27e8h.2.1, le_max_of_le_left h.1, h.2.2\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [mem_filter, mem_Ico, max_le_iff]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  cases' le_or_gt l n with hnl hnl\n  \u00b7 simp_all [Ico_filter_le, max_eq_left, hnl, hnl.le]\n  \u00b7 rw [\u2190 Ico_filter_lt]\n    simp_all [Ico_filter_lt, lt_max_iff, hnl, hnl.le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  simp_rw [\u2190 Nat.Ico_filter_le]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [List.mem_filter, List.mem_Ico, max_le_iff, and_assoc]\n  by_cases hnl : n \u2264 l <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [mem_filter, mem_Ico, max_le_iff]\n  intro h\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  apply List.ext_get\n  all_goals\n    simp\n    intro n hn hn'\n    simp only [List.get]\n    rw [max_comm]\n    simp [List.get]\n    omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp [le_of_lt, Nat.lt_succ_iff]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  rcases le_total n l with hnl | hnl <;> cases' le_total m l with hml hml <;> simp [*] <;>\n    apply filter_le_of_le <;>\n      intros <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [mem_filter, mem_Ico, max_le_iff]\n  constructor <;> intro h\n  exacts [\u27e8h.1.1, h.2, h.1.2\u27e9, \u27e8\u27e8h.1, h.2.1\u27e9, h.2.2\u27e9]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [Finset.mem_filter, Finset.mem_Ico, Nat.lt_succ_iff]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [mem_filter, mem_Ico, max_le_iff, and_assoc]\n  by_cases h\u2081 : n \u2264 l <;> by_cases h\u2082 : m \u2264 l <;> simp [h\u2081, h\u2082]\n  <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [List.mem_filter, List.mem_Ico, Finset.mem_Ico, Finset.mem_filter, Nat.lt_succ_iff,\n    Nat.le_of_lt_succ, and_assoc]\n  by_cases h\u2081 : n \u2264 x <;> by_cases h\u2082 : x < m\n  \u00b7 simp_all\n    omega\n  \u00b7 simp_all\n    omega\n  \u00b7 simp_all\n    omega\n  \u00b7 simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  injectivity\n  simp_all only [le_max_iff, mem_Ico, mem_filter]\n  constructor <;> intro h <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [Finset.mem_filter, Finset.mem_Ico, Finset.mem_Ico, and_imp, ge_iff_le]\n  constructor <;> intro h <;> simp [h]\n  exact fun h => \u27e8max_le_of_left_le h.2, h.2\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp_all [le_max_iff, Nat.lt_succ_iff]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [mem_filter, mem_Ico, max_le_iff]\n  constructor <;> intro h <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  have hm : \u2200 l, ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n    intro l\n    by_cases h : l \u2264 n\n    \u00b7 simp [Finset.filter_le_ge h, max_eq_right h]\n    \u00b7 simp [Finset.filter_le_ge (not_le.mp h), max_eq_left (not_le.mp h)]\n  exact hm l\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x; simp [le_of_lt, Nat.lt_succ_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [mem_filter, mem_Ico, max_le_iff, and_assoc]\n  <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem filter_le (n m l : \u2115) : ((Ico n m).filter fun x => l \u2264 x) = Ico (max n l) m := by\n  ext x\n  simp only [Finset.mem_filter, Finset.mem_Ico, max_le_iff]\n  constructor <;> intro h <;> simp_all\n  <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with c l IH <;> simp_all\n  cases b <;> simp_all [count_cons, Nat.add_comm, Nat.add_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with x l IH\n  \u00b7 simp\n  \u00b7 cases b <;> cases x <;> simp_all [Nat.succ_le_succ_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  cases' l with x l; \u00b7 simp\n  simp_all [Bool.add_comm]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with hd tl IH <;> simp_all [Bool.count_not]\n  cases' hd with h\u2080 h\u2080 <;> simp_all [Bool.count_not]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction l <;> simp_all [Bool.count_eq_countP]\n  <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with a as h\n  \u00b7 simp_all [count_eq_zero.2 Bool.false_ne_true]\n  \u00b7 simp_all [count_concat, Nat.add_comm, Nat.add_left_comm]\n  <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  revert l\n  intro l hl\n  induction' hl with x l\u2080 l\u2081 _ ih\u2080 ih\u2081\n  \u00b7 simp\n  \u00b7 cases' b with b\n    \u00b7 simp only [Bool.count_false, Bool.count_true]\n      omega\n    \u00b7 simp only [Bool.count_false, Bool.count_true]\n      omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction l <;> simp_all [Bool.count]\n  contradiction\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with hd tl IH generalizing b\n  case nil => simp\n  case cons =>\n    cases' b with b\n    simp only [Bool.count_cons, Bool.cond_eq_ite, ite_true, ite_false, Nat.zero_add]\n    rw [Bool.not_eq_true] at hl\n    rw [count_cons_self]\n    omega\n    rw [count_cons_of_ne]\n    \u00b7 omega\n    rw [Bool.not_eq_true]\n    simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  revert l\n  match b with\n  | true =>\n    intro l\n    simp only [Bool.count_true]\n    exact length_sublist_half_of_ne l hl\n  | false =>\n    intro l\n    simp only [Bool.count_false]\n    exact length_sublist_half_of_ne l hl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction l with\n  | nil =>\n    simp\n  | cons hd tl ih =>\n    simp only [Bool.count_cons, length, count, Nat.succ_eq_add_one]\n    split_ifs with h\n    \u00b7 simp_all\n    \u00b7 simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  rw [count_eq_card_filter_eq]\n  exact (Nat.div_le_div_right (card_filter_le l (\u00b7 = b)))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with h\u2080 h\u2081\n  \u00b7\n      norm_num\n  \u00b7\n      cases' b with b\n      \u00b7\n          simp_all [count_eq_length_filter]\n          omega\n      \u00b7\n          simp_all [count_eq_length_filter]\n          omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  rcases l with (_ | \u27e8x, _ | \u27e8x, y, h, h\u2081\u27e9\u27e9) <;> simp_all\n  all_goals\n    cases b <;>\n    simp [Bool.count_false, Bool.count_true, Nat.count_eq_of_lt, Nat.succ_le_succ_iff, Nat.zero_le]\n  all_goals nlinarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with x l IH <;> simp_all [hl.count_eq]\n  <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with x l IH\n  \u00b7 simp\n  \u00b7 cases b <;> cases x <;> simp_all [count_cons, Nat.add_comm, Nat.add_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  have h := hl.is_rotated.count_bool_eq_count_bool b\n  cases h <;> simp [*]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with x l IH generalizing hl <;> simp_all\n  cases b <;> simp_all [count_cons] <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with a l IH <;> simp_all [count_eq_zero_of_not_mem]\n  cases (not_not.mp (Chain'.cons a l hl)) <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with h t ih <;> simp_all [Bool.count_eq_countp]\n  cases' h with h <;> simp_all [Bool.count_eq_countp]\n  omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with b l IH\n  any_goals simp_all [Bool.count_bnot]\n  all_goals simp [Bool.count_bnot]\n  all_goals omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with x l IH\n  \u00b7 simp\n  \u00b7 cases b <;> simp [count_cons, IH]\n    exact (by omega : _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  revert l\n  intro l h\n  induction' h with a l h IH\n  \u00b7 simp\n  \u00b7 cases' b with b\n    \u00b7 simp [count_cons, IH]\n    \u00b7 simp [count_cons, IH]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with x l h\n  \u00b7 simp\n  \u00b7 cases b <;> simp_all [Nat.succ_le_succ_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  cases l <;> simp_all [Bool.count_eq_countp]\n  all_goals\n    apply Nat.div_le_of_le_mul\n    norm_num\n    omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with x l IH generalizing b <;> simp_all [Bool.not_eq_false]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  cases l <;> cases b <;> simp_all [count, Nat.div_eq_of_lt]\n  <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  cases l <;> simp_all [count_bool_eq_count_not]\n  apply Nat.div_le_of_le_mul (by norm_num : 0 < 2)\n  simpa [Bool.count_bool_eq_count_not] using hl.two_mul_count_bool_le b\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  cases l with\n  | nil => simp\n  | cons a l =>\n    cases l with\n    | nil => simp\n    | cons a' l' =>\n      simp only [Bool.count_cons, length, Nat.add_succ, Nat.succ_add, Nat.add_zero]\n      omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  cases l <;> simp_all [Bool.count_eq_card_filter]\n  apply Nat.div_le_of_le_mul\n  simp_all [mul_comm, Nat.le_add_left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  induction' l with h\u2080 h\u2081\n  \u00b7 simp\n  \u00b7 cases b <;> cases h\u2080 <;> simp_all [Bool.cmp]\n    all_goals\n      omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem length_div_two_le_count_bool (hl : Chain' (\u00b7 \u2260 \u00b7) l) (b : Bool) :\n    length l / 2 \u2264 count b l := by\n  cases l <;> [exact Nat.zero_le _; exact Nat.le_of_lt (Nat.div_lt_succ _ _)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  dsimp [imageToKernel,kernelSubobject_comp_mono, Subobject.isoOfEq]\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp only [imageToKernel_\u03b9, kernelSubobject_comp_mono, Subobject.isoOfEq_inv, eqToHom_refl,\n    Category.assoc, kernelSubobject_arrow, Category.id_comp,\n    cokernel.\u03c0_desc_assoc, cokernel.condition, comp_zero, zero_assoc,\n    Subobject.arrow_mono_eq_of_eq]\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp only [imageToKernel_\u03b9, Category.assoc, kernelSubobject_comp_mono,\n    kernelSubobject_comp_mono_hom_comp_\u03b9, Subobject.isoOfEq_inv_comp_assoc]\n  rw [kernelSubobject_comp_mono]\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  dsimp [imageToKernel, kernelSubobject_comp_mono, imageSubobject_comp_mono,\n    Subobject.isoOfEq, kernelSubobjectMap, imageSubobjectMap]\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  dsimp [imageToKernel, kernelSubobjectMap_comp, kernelSubobjectIso_comp]\n  simp only [zero_comp, comp_zero, kernelSubobject_comp_mono]\n  if hg : g = 0 then simp [hg, zero_comp]\n  if hf : f = 0 then simp [hf, comp_zero]\n  simp only [hg, hf, mkCone_pt, mkCone_\u03c0_app, Functor.const_obj_obj, Subobject.underlyingIso_hom,\n    under_inv, eqToHom_refl, Iso.refl_hom, comp_id, id_comp, dite_true, eqToHom_trans,\n    Category.assoc, kernelSubobject_comp_mono, kernelSubobject_comp_mono]\n  congr\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp [image_subobject_eq_kernel_subobject_of_le, w]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  have := imageSubobject_mono h\n  simp [imageSubobject_comp_mono, kernelSubobject_comp_mono]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  apply eq_of_hEq\n  rw [hEq_naturality]\n  dsimp\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  apply kernelSubobject_ext\n  apply imageSubobject_ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simpa using Subobject.ofEq_mk_le _ _ ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  apply Subobject.eq_of_comm\n  simp\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp [imageSubobject_mono]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp only [Category.assoc, kernelSubobject_comp_mono, Function.comp_apply, Subobject.coe_of,\n    kernelSubobject_arrow', Subobject.forwardMap_comp, Subobject.forward_mk,\n    Subobject.isoOfEq_inv_comp]\n  obtain rfl := (cancel_mono h).mp (by simpa using w)\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  simp only [imageToKernel_comp_\u03b9, Iso.inv_comp_eq, Category.assoc, eqToHom_refl,\n    Category.id_comp]\n  have hh := (cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)\n  have hh' := (cancel_mono h).mp\n    (by simp only [zero_comp] : (kernel.\u03c0 g \u226b cokernel.\u03c0 f) \u226b h = 0 \u226b h)\n  simp only [\u2190 cancel_mono h, Iso.inv_comp_eq, eqToHom_refl, eqToHom_trans,\n    Iso.eq_comp_inv, Category.assoc, Category.id_comp] at hh hh'\n  revert hh hh'\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp only [imageToKernel_\u03b9, kernelSubobject_comp_mono, isoOfEq_inv, comp_inv,\n    kernelSubobject_arrow, eqToHom_inv, asIso_inv, Iso.trans_inv, Iso.symm_inv,\n    Subobject.eq_of_comp_arrow_eq_zero_right,\n    Subobject.eq_of_comp_arrow_eq_zero_left]\n  dsimp\n  simp only [Category.assoc, Category.comp_id]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  dsimp [imageToKernel, kernelSubobjectMap_comp', kernelSubobjectIsoOfEq]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  apply Subobject.eq_of_comm\n  simp only [d_f, imageToKernel_\u03b9, Category.assoc]\n  have : (f \u226b g) \u226b h = f \u226b (g \u226b h) := by simp\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  apply kernelSubobject_comp_mono\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp only [Subobject.mk_eq_mk_of_comm, kernelSubobject_comp_mono]\n  aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  apply (cancel_mono h).mp\n  simp [reassoc_of%]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  dsimp [imageToKernel,kernelSubobject_comp_mono,Subobject.isoOfEq]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  apply Subsingleton.elim\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  apply (cancel_mono h).mp\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp only [imageToKernel_arrow, kernelSubobject_comp_mono, eqToHom_refl, Iso.inv_hom_id_assoc,\n    Category.assoc, kernelSubobject_arrow, comp_zero, comp_id]\n  have h\u2081 := Subobject.eq_of_comm (imageToKernel_arrow f g _) (by simp)\n  have h\u2082 := Subobject.eq_of_comm (imageToKernel_arrow f g _) (by simp [h\u2081])\n  simp [h\u2081, h\u2082]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  aesop_cat\n  <;> aesop_cat\n  <;> aesop_cat\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem imageToKernel_comp_mono {D : V} (h : C \u27f6 D) [Mono h] (w) :\n    imageToKernel f (g \u226b h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f \u226b g) \u226b h = 0 \u226b h)) \u226b\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  simp only [imageToKernel, kernelSubobject_comp_mono, \u2190 Subobject.factorThru_right]\n  congr 1\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        simp_rw [symmDiff_def, sup_comm (c \u2293 a \u2293 b)]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff, sdiff_symmDiff]; ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by rw [sdiff_symmDiff, sdiff_symmDiff]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff, sdiff_symmDiff]; ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff, sdiff_symmDiff]; ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n        { rw [sup_assoc]; ac_rfl }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff, sdiff_symmDiff]; ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        rw [sdiff_symmDiff, sdiff_symmDiff, symmDiff_sdiff]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [symmDiff_def, symmDiff_def]; ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_sup, sdiff_sup, sup_sdiff_distrib, sup_sdiff_distrib]; ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n        { rw [sup_assoc]; ac_rfl }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [symmDiff_comm, symmDiff_def, symmDiff_def]\n          ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n        { rw [sup_assoc, sup_sup_sup_comm, inf_comm, inf_assoc] }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff, sdiff_symmDiff]; ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        rw [sdiff_symmDiff, sdiff_symmDiff, symmDiff_eq_sup_sdiff_inf]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        rw [sdiff_symmDiff', sdiff_symmDiff']\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff'', sdiff_symmDiff''] }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [symmDiff_def, symmDiff_def]; ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      rw [sdiff_symmDiff, sdiff_symmDiff]\n      ac_rfl\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n      congr 2\n      apply inf_of_le_right\n      apply inf_le_inf_left\n      apply inf_le_right\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        rw [symmDiff_def, symmDiff_def]\n        simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { simp only [symmDiff_def, sup_inf_right, sup_sup_sup_comm, sdiff_sdiff_right,\n            inf_sup_left, sup_inf_sdiff, inf_sdiff_right, sup_assoc] }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff, sdiff_symmDiff]; ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n        { rw [sup_assoc]; ac_rfl }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        rw [sdiff_symmDiff, sdiff_symmDiff, symmDiff_sdiff]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_sup, sdiff_sup, symmDiff_def]; ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff, sdiff_symmDiff]; abel }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n        { rw [sup_assoc]; simp [sup_assoc, sup_comm, sup_left_comm] }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      simp only [symmDiff_def, sup_inf_right]\n      ac_rfl\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n      rw [sup_assoc]\n      ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff, sdiff_symmDiff]; abel }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n        { rw [sup_assoc]; abel }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff', sdiff_symmDiff'] }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff, sdiff_symmDiff, symmDiff_sdiff] }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n        { rw [sup_assoc, sup_assoc, sup_assoc] }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n          rw [sdiff_symmDiff, sdiff_symmDiff, symmDiff_eq_sup_sdiff_inf]\n          simp only [sup_left_inj, sup_right_inj, sdiff_eq, sup_comm]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff, sdiff_symmDiff]; ac_rfl }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      { rw [sdiff_symmDiff, sdiff_symmDiff]; abel }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by\n        { rw [sup_assoc]; simp [sup_assoc] }\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff', sdiff_symmDiff', symmDiff_sdiff, sup_assoc] }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n      rw [sdiff_sup, sdiff_sup, sdiff_sdiff_right, symmDiff_def, symmDiff_def]\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem symmDiff_symmDiff_left :\n    a \u2206 b \u2206 c = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c :=\n  calc\n    a \u2206 b \u2206 c = a \u2206 b \\ c \u2294 c \\ a \u2206 b := symmDiff_def _ _\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 (c \\ (a \u2294 b) \u2294 c \u2293 a \u2293 b) := by\n        { rw [sdiff_symmDiff, sdiff_symmDiff, symmDiff_sdiff] }\n    _ = a \\ (b \u2294 c) \u2294 b \\ (a \u2294 c) \u2294 c \\ (a \u2294 b) \u2294 a \u2293 b \u2293 c := by ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  simp [get_cons_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  cases i\n  simp [get_cons_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rw [\u2190 v.cons_get]\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  cases i\n  simp [get]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  cases i\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v; cases i; simp [get_eq_get]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  cases i\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v; simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rw [\u2190 Vector.cons_head_tail v]\n  simp [get_cons_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rcases i with \u27e8i, h\u2081\u27e9\n  cases i\n  case zero => simp [get]\n  case succ => simp [get]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v; simp [get_cons_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rw [\u2190 get_tail_succ, tail_cons]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rw [\u2190 get_tail_succ, tail_cons]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rw [\u2190 get_tail_succ, tail_cons]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  cases i\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  cases i\n  simp [get_cons_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases i with | mk i hi =>\n  cases i <;> simp_all [get_eq_get]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases i\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rw [\u2190 v.get_tail_succ i]\n  simp [Vector.get_eq_get]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  simp [get_cons_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rw [\u2190 Vector.cons_head_tail v]\n  simp [get_cons_head, get_cons_tail]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  cases i\n  simp [get_cons_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  cases i\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases' v with l hl\n  cases' i with i h\n  simp_all [get, hl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rw [Vector.get_cons_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rw [\u2190 Vector.cons_head_tail (a ::\u1d65 v)]\n  simp [get_tail]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v\n  cases i\n  simp [get_cons_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  cases v; simp [get_cons_succ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem get_cons_succ (a : \u03b1) (v : Vector \u03b1 n) (i : Fin n) : get (a ::\u1d65 v) i.succ = get v i := by\n  rcases i with \u27e8i, hi\u27e9\n  cases v\n  simp\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C :=\n            mul_le_mul_of_nonneg_left (hf _ <| circleMap_mem_sphere' \u03b8 _) (abs_nonneg _)\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, _root_.abs_mul, _root_.abs_two_pi]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            rw [norm_smul, is_R_or_C.norm_deriv_eq_abs, norm_circleMap, mul_comm]\n          _ \u2264 |R| * C := by gcongr; exact hf _ (circleMap_mem_sphere' _ _ _)\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, abs_mul, abs_of_pos Real.two_pi_pos, mul_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by\n            gcongr\n            simpa [norm_le_of_mem_sphere hf] using circleMap_mem_sphere' _ _ _\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, zero_mul, mul_zero, abs_of_pos (mul_pos two_pos pi_pos)]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [circleMap, \u2190 div_eq_inv_mul,\n            abs_div, abs_mul, div_self_le_one, abs_nonneg, Real.dist_eq]\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, _root_.abs_mul, _root_.abs_of_pos Real.two_pi_pos, one_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [circleMap]\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, Real.norm_of_nonneg]; positivity\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by simp\n          _ \u2264 |R| * C :=\n            mul_le_mul_of_nonneg_left (hf _ <| circleMap_mem_sphere' _ _ _) <|\n              _root_.abs_nonneg _\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, _root_.abs_mul, _root_.abs_of_pos Real.two_pi_pos]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, Real.dist_eq, abs_mul, abs_of_pos Real.two_pi_pos]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C :=\n            mul_le_mul_of_nonneg_left (hf _ <| circleMap_mem_sphere' _ _ _) <| by simp\n    _ = |R| * C * (2 * \u03c0) := by simp\n    _ = 2 * \u03c0 * |R| * C := by ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by simp\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [circleMap]\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, Real.dist_eq, abs_of_pos Real.two_pi_pos.le]; ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by\n            gcongr\n            simpa using hf _ (circleMap_mem_sphere' \u03b8 _)\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, _root_.abs_mul, _root_.abs_two_pi]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            rw [norm_smul, RCLike.norm_deriv_circleMap, mul_left_comm, abs_eq_self.mpr\n              (le_of_lt <| RCLike.arg_lt_pi _)]\n          _ \u2264 |R| * C :=\n            mul_le_mul_of_nonneg_left (hf _ <| circleMap_mem_sphere' _ _ _) (abs_nonneg _)\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, Real.dist_eq, abs_mul, mul_assoc]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; exact hf _ (mem_sphere_circleMap _ _ _)\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, Real.norm_of_nonneg pi_pos.le]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            rw [norm_smul, norm_eq_abs, abs_of_pos (gt_of_le_of_lt (abs_nonneg \u03b8) (mem_Ioc.mp H).1),\n              Complex.norm_eq_abs, abs_ofReal, abs_of_pos (gt_of_le_of_lt (abs_nonneg \u03b8) (mem_Ioc.mp H).1)]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [circleMap, norm_eq_abs, abs_of_pos (gt_of_le_of_lt (abs_nonneg \u03b8) (mem_Ioc.mp H).1)]\n    _ \u2264 2 * \u03c0 * |R| * C := by simp; linarith [Real.two_pi_pos.le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by simp [abs_of_pos]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [abs_of_nonneg]\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, Real.norm_of_nonneg, mul_comm]; positivity\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul, norm_deriv_circleMap, mul_comm]\n          _ \u2264 |R| * C := by gcongr; exact hf _ (by simp)\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, abs_of_pos Real.two_pi_pos]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by\n            gcongr; apply hf; simp [dist_eq_norm]\n    _ = 2 * \u03c0 * |R| * C := by\n      simp [sub_zero, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [circleMap, dist_eq_norm]\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, _root_.abs_mul, _root_.abs_of_pos Real.two_pi_pos]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul, abs_of_pos (lt_of_le_of_lt (norm_nonneg _) (hf _ (mem_sphere_zero_iff_norm.2 rfl)))]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, _root_.abs_mul, _root_.abs_of_pos Real.two_pi_pos]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by\n            gcongr\n            apply hf\n            simp [circleMap_mem_sphere]\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, _root_.abs_mul, _root_.abs_of_pos Real.two_pi_pos]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp only [norm_smul, norm_deriv_circleMap, mul_comm]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [dist_eq_norm]\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, _root_.abs_of_pos Real.two_pi_pos]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C :=\n            mul_le_mul_of_nonneg_left (hf _ <| circleMap_mem_sphere' _ _ _) (abs_nonneg _)\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, Real.norm_of_nonneg (mul_nonneg two_pos.le pi_pos.le), abs_mul, abs_of_pos (mul_pos two_pos pi_pos)]\n    _ \u2264 2 * \u03c0 * |R| * C := by rw [Real.norm_of_nonneg (mul_nonneg two_pos.le pi_pos.le)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, abs_of_pos Real.two_pi_pos]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, Real.norm_of_nonneg (by linarith : (0 : \u211d) \u2264 2 * \u03c0)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [circleMap, dist_eq_norm]\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, Real.norm_of_nonneg (by linarith : 0 \u2264 2 * \u03c0)]; ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [Real.norm_eq_abs]\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, abs_of_pos Real.two_pi_pos]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            rw [norm_smul, norm_deriv_circleMap, _root_.abs_of_nonneg (norm_nonneg _)]\n          _ \u2264 |R| * C :=\n            mul_le_mul_of_nonneg_left (hf (circleMap c R \u03b8) <| circleMap_mem_sphere' _ <|\n              mem_uIcc_of_le \u03b8.2) (abs_nonneg _)\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, Real.norm_of_nonneg pi_pos.le]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [dist_eq_norm]\n    _ = 2 * \u03c0 * |R| * C := by\n      simp [mul_comm, sub_eq_add_neg, abs_of_pos Real.two_pi_pos]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [dist_eq_norm]\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, abs_of_pos]; pi_pos\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp\n    _ = 2 * \u03c0 * |R| * C := by\n      simp [mul_comm, sub_eq_add_neg, abs_of_pos Real.two_pi_pos]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C :=\n            mul_le_mul_of_nonneg_left (hf _ <| circleMap_mem_sphere' _ _ _) (abs_nonneg _)\n    _ = 2 * \u03c0 * |R| * C := by\n        rw [sub_zero, Real.norm_of_nonneg pi_pos.le, mul_comm |R| C]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by\n            gcongr\n            apply hf\n            simp [circleMap, Complex.mem_sphere, norm_real]\n    _ = 2 * \u03c0 * |R| * C := by rw [sub_zero, _root_.abs_mul, abs_of_pos Real.two_pi_pos]; ac_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_integral_le_of_norm_le_const' {f : \u2102 \u2192 E} {c : \u2102} {R C : \u211d}\n    (hf : \u2200 z \u2208 sphere c |R|, \u2016f z\u2016 \u2264 C) : \u2016\u222e z in C(c, R), f z\u2016 \u2264 2 * \u03c0 * |R| * C :=\n  calc\n    \u2016\u222e z in C(c, R), f z\u2016 \u2264 |R| * C * |2 * \u03c0 - 0| :=\n      intervalIntegral.norm_integral_le_of_norm_le_const fun \u03b8 _ =>\n        calc\n          \u2016deriv (circleMap c R) \u03b8 \u2022 f (circleMap c R \u03b8)\u2016 = |R| * \u2016f (circleMap c R \u03b8)\u2016 := by\n            simp [norm_smul]\n          _ \u2264 |R| * C := by gcongr; apply hf; simp [dist_eq_norm]\n    _ = 2 * \u03c0 * |R| * C := by\n      simp [mul_comm, sub_eq_add_neg, add_mul]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  apply Set.Subset.antisymm\n  \u00b7 intro x hx\n    rw [mem_interior_iff_mem_nhds]\n    exact mem_of_mem_nhds (isOpen_lt continuous_const (continuous_gauge hc hs\u2080)\n        hx)\n  \u00b7 intro x hx\n    rw [mem_interior_iff_mem_nhds] at hx\n    exact mem_of_mem_nhds (isOpen_lt (continuous_gauge hc hs\u2080) continuous_const\n        hx)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  apply Subset.antisymm\n  \u00b7 intro x hx\n    rw [mem_interior_iff_mem_nhds]\n    exact mem_of_mem_nhds (IsOpen.mem_nhds (gauge_isOpen_lt \u211d s hc 0) hx)\n  \u00b7 intro x hx\n    exact (mem_interior_iff_mem_nhds.1 hx).2 _ (gauge_lt_one_subset_self hc hs\u2080) Subset.rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  rcases (mem_uniformity_of_nhds hs\u2080).exists_pos with \u27e8\u03b5, \u03b5_pos, h\u03b5\u27e9\n  ext\n  simp (config := { contextual := true }) only [mem_setOf, mem_interior, exists_prop]\n  constructor\n  \u00b7 intro hx\n    obtain \u27e8\u03b4, \u03b4_pos, h\u03b4\u27e9 := hc.exists_pos_lt_subset_ball (pos_of_mem_nhds hs\u2080) hx \u03b5_pos h\u03b5\n    exact \u27e8ball 0 \u03b4, isOpen_ball, mem_ball_self \u03b4_pos, fun y hy => h\u03b4 hy\u27e9\n  \u00b7 intro hx\n    rcases hx with \u27e8t, to_t, \u27e8\u03b4, \u03b4_pos, h\u03b4\u27e9, ht\u27e9\n    exact (gauge_ball hc \u03b4_pos).subset h\u03b4 ht\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  refine' (subset_interior_iff_isOpen.mpr (gauge_isOpen_lt \u211d s 1 hc hs\u2080)).antisymm fun x hx => _\n  rcases mem_interior.mp hs\u2080 with \u27e8t, ht\u2080, ht\u2081, ht\u2082\u27e9\n  rw [mem_setOf_eq] at hx\n  rw [mem_interior_iff_mem_nhds]\n  exact mem_of_superset (Ioo_mem_nhds ht\u2080 hx) ht\u2081\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  have h\u2081 : 0 \u2208 s := mem_of_mem_nhds hs\u2080\n  have h\u2082 : s \u2286 { x | gauge s x \u2264 1 } := by\n    intro x hx\n    exact gauge_le_one_of_mem hx\n  have h\u2083 : interior s \u2286 { x | gauge s x < 1 } := by\n    rw [\u2190 mem_interior_iff_mem_nhds] at hs\u2080\n    intro x hx\n    exact gauge_lt_one_of_mem_of_mem hc hs\u2080 hx h\u2081\n  have h\u2084 : { x | gauge s x < 1 } \u2286 interior s := by\n    rw [interior_eq_maximal_frontier_singleton]\n    exact maximal_frontier_singleton_le_gauge hc h\u2081\n  exact Subset.antisymm h\u2083 h\u2084\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  have h\u2080 : 0 \u2208 s := mem_of_mem_nhds hs\u2080\n  have h\u2081 : \u2200 x, gauge s x \u2264 \u2016x\u2016 := fun x => gauge_le_norm hc h\u2080 x\n  have h\u2082 : \u2200 x, \u2016x\u2016 < 1 \u2192 gauge s x < 1 := fun x hx =>\n    lt_of_le_of_lt (h\u2081 x) hx\n  have h\u2083 : \u2200 x, gauge s x \u2264 1 \u2192 x \u2208 interior s := fun x hx =>\n    interior_mono (subset_setOf_gauge_le s h\u2080) hx\n  have h\u2084 : \u2200 x, x \u2208 interior s \u2192 gauge s x < 1 := fun x hx => h\u2082 x (mem_interior_iff_mem_nhds.1 hx\n    (ball_mem_nhds _ zero_lt_one) |>.1)\n  ext x\n  exact \u27e8h\u2084 x, h\u2083 x \u2218 h\u2081\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  refine' (interior_maximal_of_open (isOpen_lt (continuous_gauge hc) continuous_const) _)\n  rw [gauge_lt_one_set_of_mem]\n  exact mem_interior_iff_mem_nhds.mpr hs\u2080\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  refine' Subset.antisymm (fun x hx => _) (interior_subset_gauge_lt_one s)\n  obtain \u27e8\u03b5, \u03b5_pos, h\u03b5\u27e9 := hs\u2080.exists_ball_subset_of_finiteDimensional_of_mem_nhds (mem_ball_self zero_lt_one)\n  obtain \u27e8y, hy\u27e9 := mem_ball.mp (h\u03b5 hx)\n  calc\n    dist x 0 = dist (x - y) y := by rw [dist_sub_comm, sub_add_cancel]\n    _ \u2264 gauge s (x - y) + gauge s y := (dist_triangle _ _ _).trans (add_le_add (gauge_le_dist <| sub_mem_ball.mpr hy)\n      (gauge_le_dist hy))\n    _ \u2264 gauge s (x - y) + 1 := add_le_add_left (by rwa [gauge_ball (zero_le _), Real.norm_of_nonneg \u03b5_pos.le]) _\n    _ \u2264 1 + 1 := add_le_add_right (gauge_le_dist <| sub_mem_ball.mpr hy) _\n    _ = 1 := by norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  refine' Subset.antisymm (fun x hx => _) (subset_interior_iff_nhds.2 <| fun x hx => _)\n  \u00b7 rw [mem_interior_iff_mem_nhds]\n    exact mem_of_mem_nhds hs\u2080\n  rw [mem_interior_iff_mem_nhds'] at hx\n  rcases hx with \u27e8t, hts, ht, hxt\u27e9\n  have := gauge_le_of_mem hc ht hts hxt\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  refine' Subset.antisymm (fun x hx => _) (interior_subset_gauge_lt_one s)\n  rcases mem_openSegment_of_gauge_lt_one hc (mem_of_mem_nhds hs\u2080)\n    hx with \u27e8y, hy, a, ha, rfl\u27e9\n  exact hc.openSegment_interior_self_subset_interior hy ha\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  rw [Set.ext_iff]\n  intro x\n  simp only [Set.mem_setOf_eq, Set.mem_interior]\n  refine' \u27e8fun h => _, fun h => _\u27e9\n  \u00b7 obtain \u27e8\u03b5, h\u03b5, h\u03b5s\u27e9 := hs\u2080\n    obtain \u27e8r, hr, hr\u03b5\u27e9 := exists_pos_lt_mul (lt_of_le_of_lt (abs_gauge_le_one s x) h)\n    refine' \u27e8Metric.ball 0 r, Metric.isOpen_ball, _, _\u27e9\n    \u00b7 exact Metric.mem_ball_self hr\n    \u00b7 rw [\u2190 hr\u03b5]\n      exact hr\u03b5.le.trans (by gcongr)\n  \u00b7 obtain \u27e8t, ht, hts\u27e9 := h\n    have hto : t \u2208 \ud835\udcdd 0 := mem_nhds_iff.2 \u27e8_, Metric.ball_subset_ball ht.2, Metric.isOpen_ball, ht.1\u27e9\n    have hst : gauge t x \u2264 gauge s x :=\n      gauge_mono (absorbent_nhds_zero hto) (subset_interior_iff_subset.1 hts) x\n    exact lt_of_le_of_lt hst h.2\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  rw [Set.ext_iff]\n  intro x\n  simp only [Set.mem_setOf_eq, Set.mem_interior, exists_prop]\n  refine' \u27e8fun h => \u27e8s, _, h, subset_rfl\u27e9, fun h => _\u27e9\n  \u00b7 exact hs\u2080\n  obtain \u27e8t, hts, ht, hxt\u27e9 := h\n  have := hc.openSegment_interior_self_subset_interior hxt (by simpa)\n  exact this \u27e81, ht, by simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  rw [Set.ext_iff]\n  intro x\n  simp only [Set.mem_setOf_eq, Set.mem_interior]\n  refine' \u27e8fun h => _, fun h => _\u27e9\n  \u00b7 obtain \u27e8t, ht\u2081, ht\u2082, ht\u2083\u27e9 := mem_nhds_iff.mp hs\u2080\n    obtain \u27e8r, hr\u2081, hr\u2082\u27e9 := exists_norm_lt_of_mem_nhds ht\u2081\n    obtain \u27e8y, hy\u2081, hy\u2082\u27e9 := exists_dist_lt_le_of_gauge_lt_one hc h\n    refine' \u27e8y + r \u2022 x, _, _\u27e9\n    \u00b7 exact ht\u2082 (hy\u2082.trans <| by positivity)\n    simp only [dist_eq_norm, mem_setOf_eq] at hy\u2081 \u22a2\n    have hy\u2083 : \u2016(1 - r\u207b\u00b9) \u2022 x + r\u207b\u00b9 \u2022 y\u2016 < 1 := by\n      refine' (gauge_le_one_iff hc).mp (hy\u2082.trans' <| by norm_num) _\n      rw [Convex.combo_self, sub_add_cancel]\n      positivity\n    rw [add_comm]\n    have hy\u2084 : (1 - r\u207b\u00b9) \u2022 x + r\u207b\u00b9 \u2022 y \u2208 interior s := by\n      refine' hc.add_smul_mem (interior_subset ht\u2081) _ (by norm_num)\n      exact hr\u2082.le\n    refine' (lt_of_le_of_lt (norm_add_le _ _) (hy\u2081 _ hy\u2084)).trans_le _\n    simp only [norm_smul, Real.norm_eq_abs]\n    gcongr\n    exact hr\u2081.le\n  \u00b7 obtain \u27e8t, ht\u2081, ht\u2082, ht\u2083\u27e9 := mem_nhds_iff.mp hs\u2080\n    obtain \u27e8r, hr\u2081, hr\u2082\u27e9 := exists_norm_lt_of_mem_nhds ht\u2081\n    refine' \u27e8r, hr\u2081, fun x hx => _\u27e9\n    simp only [dist_eq_norm, mem_setOf_eq] at hx \u22a2\n    exact (gauge_le_one_iff hc).mpr (ht\u2082 <| hx _ ht\u2083)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  rw [Set.eq_comm]\n  refine' Subset.antisymm _ (interior_maximal (fun x hx => _) hs\u2080)\n  exact mem_interior_iff_mem_nhds.2 (mem_nhds_iff.2 \u27e8{ x | gauge s x < 1 },\n    fun x h => h, isOpen_lt continuous_gauge continuous_const, hx\u27e9)\n  exact hc.smul_mem_of_mem_gauge_lt one_pos hs\u2080 hx\n  <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  ext\n  simp only [mem_setOf, mem_interior]\n  refine' \u27e8fun h => _, fun h => _\u27e9\n  \u00b7 obtain \u27e8t, ht, hts, ht\u27e9 := mem_nhds_iff.1 hs\u2080\n    obtain \u27e8\u03b4, \u03b4_pos, h\u03b4\u27e9 := exists_pos_forall_lt_add hc ht h\n    refine'\n      \u27e8{ x | \u2016x\u2016 < \u03b4 }, _, _, by\n        simp only [mem_setOf_eq, norm_neg]\n        exact h\u03b4\u27e9\n    exact\n      (NormedAddCommGroup.ball_mem_nhds _ \u03b4_pos).isOpen.mem_nhds (by simpa using hts)\n  \u00b7 obtain \u27e8_, \u03b4_pos, h\u03b4\u27e9 := mem_nhds_iff.1 hs\u2080\n    exact\n      \u27e8_,\n        (NormedAddCommGroup.ball_mem_nhds _\n            \u03b4_pos).isOpen.mem_nhds (by simpa using h),\n        fun _ =>\n        h\u03b4 _\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  refine' Subset.antisymm (fun x hx => _) (interior_subset_gauge_lt_one s)\n  have h := mem_interior_iff_mem_nhds.1 (interior_mem_nhds.2 hs\u2080)\n  rcases mem_nhds_iff.1 h with \u27e8t, ht, hts, hto\u27e9\n  have hx' : gauge s x \u2264 0 := by\n    rw [gauge_le_zero]\n    exact hto (mem_of_mem_nhds h)\n  rcases le_or_lt (gauge s x) 0 with hx'' | hx''\n  \u00b7 rw [gauge_le_zero] at hx''\n    rw [hx''] at hx\n    exact absurd hx (lt_irrefl _)\n  \u00b7 rw [\u2190 gauge_smul_mem_iff (zero_lt_one.trans hx'').ne'] at hx\n    have hx''' :=\n      smul_mem_of_mem_interior (one_smul _ _ \u25b8 hx) (zero_lt_one.trans hx'').ne'\n        (one_pos.trans hx'').ne' (mem_of_mem_nhds h)\n    rwa [\u2190 hts] at hx'''\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  ext\n  simp only [Set.mem_setOf_eq, Set.mem_interior, exists_prop]\n  exact \u27e8fun h =>\n           let \u27e8\u03b4, h\u03b4, h\u03b4_ball\u27e9 := Metric.isOpen_iff.1 (isOpen_lt continuous_const\n             (continuous_gauge_right hc)) 0 h\n           let \u27e8y, hy\u2081, hy\u2082\u27e9 := Metric.mem_nhds_iff.1 hs\u2080\n          \u27e8y + \u03b4 / 2, h\u03b4_ball (by positivity),\n            hc.add_smul_mem hy\u2081 (by linarith) (by linarith)\u27e9,\n    fun \u27e8y, hy\u2081, hy\u2082\u27e9 => by\n      refine' (Metric.isOpen_iff.1 (isOpen_lt continuous_const (continuous_gauge_left hc))\n        _).2 _\n      \u00b7 refine' \u27e8y, gauge_le_one_of_mem hy\u2082, rfl\u27e9\n      \u00b7 exact\n          \u27e8y, by simp, by simp [hy\u2082]\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  have h\u2081 : 0 \u2208 s := mem_of_mem_nhds hs\u2080\n  ext x\n  simp only [mem_setOf, mem_interior]\n  refine' \u27e8fun h => \u27e82 * x, hc.smul_mem h\u2081 h, (by norm_num : (2 : \u211d) * x < 2 * 1), by simp\u27e9,\n    fun \u27e8y, hy\u2081, hy\u2082, hy\u2083\u27e9 => by\n      simp_rw [mem_setOf] at hy\u2081\n      refine' hy\u2081.trans_le' _\n      rw [\u2190 hy\u2083]\n      exact gauge_le_one_of_mem (by linarith : (0 : E) \u2208 s) hy\u2082 hy\u2081\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  rw [\u2190 hc.gauge_eq_one_iff_mem_closure hs\u2080, interior_eq_compl_closure_compl]\n  ext x\n  simp [\u2190 not_iff_not]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  refine' Set.Subset.antisymm _ fun x hx => _\n  \u00b7 exact Subset.trans interior_subset_gauge_lt_one\n    (by simpa only [mem_setOf_eq] using mem_interior_iff_mem_nhds.2 hs\u2080)\n  obtain \u27e8\u03b5, \u03b5_pos, h\u03b5\u27e9 := mem_nhds_iff.1 hs\u2080\n  simp only [mem_setOf_eq, gauge_lt_one_iff hc \u03b5_pos.le] at hx \u22a2\n  exact mem_interior_iff_mem_nhds.2 (h\u03b5.trans <| interior_subset_gauge_lt_one hx)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  refine' Subset.antisymm _ (interior_subset.trans _)\n  case refine'_1 =>\n    rintro x hx\n    rw [mem_interior_iff_mem_nhds]\n    exact hs\u2080.mem_nhds (smul_mem_smul_set hx)\n  case refine'_2 =>\n    rintro x hx\n    simp_rw [Set.mem_setOf_eq, gauge_lt_one_iff_mem_self]\n    exact hc.mem_self_of_nhds (mem_interior_iff_mem_nhds.mp hx)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  rw [Set.ext_iff]\n  intro x\n  constructor <;> intro h <;> rw [mem_interior_iff_mem_nhds] <;>\n    linarith [mem_nhds_iff.1 (mem_nhds_gauge_lt_one \u27e8hc, hs\u2080\u27e9 x)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  refine' Subset.antisymm _ interior_subset_gauge_lt_one\n  rintro x \u27e8y, hy, hxy\u27e9\n  simp_rw [mem_interior_iff_mem_nhds] at hs\u2080\n  exact hc.gauge_lt_one_mem_open (hs\u2080 _ mem_of_mem_nhds) hxy Real.ball_mem_nhds\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  ext x\n  simp_rw [Set.mem_setOf_eq, Set.mem_interior_iff_mem_nhds]\n  exact \u27e8fun h => mem_of_mem_nhds (by simpa [mem_gauge_set_iff] using h.le.trans_lt' (by norm_num)),\n    fun h => mem_gauge_set_iff.2 <|\n      calc\n        1 = \u2016(1 : \u211d) \u2022 x + (0 : E)\u2016 := by simp\n        _ \u2264 \u2016x\u2016 + \u2016(0 : E)\u2016 := (norm_add_le _ _).trans (add_le_add_right (norm_smul_le _ _) _)\n        _ = \u2016x\u2016 := by simp\n        \u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  have : \u2200 x, gauge s x < 1 \u2194 \u2203 r > 0, ball x r \u2286 s := by\n    intro x\n    exact \u27e8fun h \u21a6 \u27e81 - gauge s x, sub_pos.mpr h, fun y hy \u21a6\n      (gauge_le_of_mem <| ball_subset_ball hy).trans (sub_le_self _ (gauge_nonneg _))\u27e9,\n      fun \u27e8r, hr, h\u27e9 \u21a6 by simpa using mem_interior.mpr \u27e8ball x r, ball_mem_nhds _ hr, h\u27e9\u27e9\n  ext x\n  simp [this]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  rw [Set.ext_iff]\n  intro x\n  simp_rw [mem_interior_iff_mem_nhds, mem_setOf_eq]\n  refine \u27e8fun h => ?_, fun h => ?_\u27e9\n  \u00b7 exact (mem_gauge_lt_one_iff_exists_mem_add_smul_mem hc).mp h hs\u2080\n  \u00b7 obtain \u27e8r, hr\u2080, hr\u27e9 := mem_nhds_iff.mp hs\u2080\n    obtain \u27e8\u03b5, h\u03b5\u2080, h\u03b5\u27e9 := exists_pos_lt_subset_interior h\n    exact\n      (mem_gauge_lt_one_iff_exists_mem_add_smul_mem hc).mpr\n        \u27e8\u03b5, h\u03b5\u2080, hr (by linarith : \u03b5 \u2264 r), h\u03b5\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  refine' Subset.antisymm (fun x hx => _) (interior_subset_gauge_lt_one s)\n  by_contra! hx'\n  exact (convex_iff_gauge_le_one \u211d s hc).mp hc 0 x (mem_of_mem_nhds hs\u2080) hx' hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  ext x\n  rw [mem_interior_iff_mem_nhds]\n  refine \u27e8fun h => mem_of_superset (mem_nhds_iff.2 \u27e8{ y | y \u2208 s \u2227 \u2225y\u2225 < 1 }, ?_, ?_\u27e9) h,\n    fun h => ?_\u27e9 <;> simp_all\n  \u00b7 exact hc.mem_interior_of_nhds hs\u2080 (by simp)\n  \u00b7 exact fun y hy => hy.1\n  \u00b7 obtain \u27e8\u03b5, h\u03b5, h\u03b5\u2081\u27e9 := mem_nhds_iff.1 hs\u2080\n    exact\n      (gauge_lt_one_subset_self hc h\u03b5\u2081).mem_of_mem (h\u03b5 h)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  rw [Set.ext_iff]\n  intro x\n  simp only [Set.mem_setOf_eq, Set.mem_interior, mem_ball_zero_iff, exists_prop]\n  refine' \u27e8fun h => _, fun h => _\u27e9\n  \u00b7 obtain \u27e8y, hy, hxy\u27e9 := mem_ball_zero_iff.mp h\n    obtain \u27e8t, ht, hts\u27e9 := mem_nhds_iff.mp hs\u2080\n    have hxy' : y - x \u2208 interior s := by\n      refine' mem_interior.mpr \u27e8{ y | y + x \u2208 t }, _, _, isOpen_setOf_mem_nhds ht\u27e9\n      \u00b7 rintro z \u27e8hz, _\u27e9\n        exact hts hz\n      \u00b7 rw [sub_eq_add_neg, add_comm]\n        exact hts hy\n    obtain \u27e8\u03b4, h\u03b4, hxy''\u27e9 := mem_interior.mp hxy'\n    refine' \u27e8x + \u03b4 / 2, hc.add_smul_mem hxy' h\u03b4.le (by linarith), _\u27e9\n    rw [gauge_lt_one_iff]\n    exact mem_ball_zero_iff.mpr (lt_of_le_of_lt (abs_add_le _ _)\n      (add_lt_add_of_le_of_lt (abs_add_le_add_abs _ _) hxy))\n  \u00b7 obtain \u27e8y, hy, hxy\u27e9 := mem_ball_zero_iff.mp h\n    exact mem_ball_zero_iff.mpr (lt_of_le_of_lt (gauge_le_of_mem hc.smul_mem_iff (abs_nonneg _) hy) hxy)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  ext x\n  rw [Set.mem_setOf_eq, gauge_lt_one_iff hc]\n  exact\n    \u27e8fun \u27e8y, hy\u2081, hy\u2082\u27e9 =>\n      mem_interior_iff_mem_nhds.mpr (hs\u2080.trans (mem_nhds_iff.mpr \u27e8{x + y}, fun _ hz => hz.1,\n        IsOpen.mem_nhds isOpen_lt continuous_const continuous_id, hy\u2082\u27e9)),\n      fun hx => \u27e80, hx, by simp\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  refine' Subset.antisymm (fun x hx \u21a6 by simpa using hx) fun x hx \u21a6 _\n  have : 0 \u2208 s := mem_of_mem_nhds hs\u2080\n  have : x \u2208 {y | \u2203 r : \u211d, 0 < r \u2227 y \u2208 r \u2022 s} :=\n    \u27e8gauge s x, by simpa using hx.le, by simpa using smul_mem_smul_set hx\u27e9\n  simpa using this\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem gauge_lt_one_eq_interior (hc : Convex \u211d s) (hs\u2080 : s \u2208 \ud835\udcdd 0) :\n    { x | gauge s x < 1 } = interior s := by\n  rw [Set.eq_comm]\n  refine' Subset.antisymm _ (interior_subset_gauge_lt_one s)\n  intro x hx\n  rw [mem_interior_iff_mem_nhds] at *\n  haveI := hs\u2080\n  rw [mem_gauge_lt_one_iff hc] at hx\n  obtain \u27e8r, hr\u2080, hr\u27e9 := mem_nhds_iff.mp hx\n  obtain \u27e8\u03b4, \u03b4_pos, h\u03b4\u27e9 := mem_nhds_iff.mp hs\u2080\n  have h_\u03b4_pos : 0 < r + \u03b4 := by positivity\n  have h_mem : Ioo (-(r + \u03b4)) (r + \u03b4) \u2208 \ud835\udcdd x := by\n    apply Ioo_mem_nhds\n    linarith\n  have h_Ioo : Ioo (-(r + \u03b4)) (r + \u03b4) \u2286 s := by\n    intro y hy\n    rw [abs_lt] at hy\n    apply hr (lt_of_le_of_lt _ hy.1) (lt_of_le_of_lt _ hy.2) <;> linarith\n  apply mem_of_superset h_mem h_Ioo\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  simp [range, map_top]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext n\n  simp [\u2190 f.mem_range, f.map_top]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  rw [range, comap_top]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  simp only [range, map_top, Submodule.map_coe]\n  congr\n  ext x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  rw [range_eq_iff]\n  simp [MonoidHom.range_eq_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  exact Substructure.ext fun x => by simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp only [range, map_top, Set.mem_range, mem_map, Substructure.mem_top, exists_true_left,\n    exists_exists_and_eq_and]\n  constructor\n  rintro \u27e8y, rfl\u27e9\n  exact \u27e8y, rfl\u27e9\n  rintro \u27e8y, rfl\u27e9\n  exact \u27e8y, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  apply le_antisymm\n  <;> simp [range, map_le_iff_le_comap, top_le_iff]\n  <;> exact fun x => \u27e8x, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext n\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp [f.mem_range]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp [f.mem_range]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  simp [range_eq_map]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext n\n  simp\n  constructor\n  intro hn\n  obtain \u27e8m, rfl\u27e9 := hn\n  exact \u27e8m, rfl\u27e9\n  rintro \u27e8m, rfl\u27e9\n  exact \u27e8m, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  letI : Fin 3 \u2192 \u211d := ![1, 2 / 3, 4 / 5]\n  letI : Fin 3 \u2192 \u211d := ![1 / 2, 3 / 4, 4 / 5]\n  letI : Fin 3 \u2192 \u211d := ![1 / 2, 3 / 4, 4 / 5]\n  letI : Fin 3 \u2192 \u211d := ![1 / 2, 3 / 4, 4 / 5]\n  trivial\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext n\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  rw [range, f.comp_id, \u2190 map_top]\n  congr\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  apply Substructure.ext\n  intro x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp\n  constructor <;> rintro \u27e8x, rfl\u27e9\n  <;> exact \u27e8x, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp [Substructure.mem_map]\n  constructor\n  rintro \u27e8x, rfl\u27e9\n  exact \u27e8x, rfl\u27e9\n  rintro \u27e8x, rfl\u27e9\n  exact \u27e8x, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  exact Substructure.range_eq_map _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext n; constructor\n  all_goals rintro \u27e8m, rfl\u27e9; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  rw [f.range_eq_map, f.map_top]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  apply le_antisymm\n  apply range_le_map\n  intro m _\n  exact \u27e8m, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  simp only [range, coe_comp, map_map, MonoidHom.range_eq_map]\n  congr\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp [\u2190 f.mem_range_self x]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  rw [range_eq_map]\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  ext x\n  simp [f.mem_range]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem range_eq_map (f : M \u2192[L] N) : f.range = map f \u22a4 := by\n  apply le_antisymm <;> simp [f.range_eq_map, Order.le_refl]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  simp [projIic, Set.mem_Iic.mp x.2]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  rcases x with \u27e8x, _\u27e9\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases' x with x hx\n  simp [hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  simp [projIic, Set.mem_Iic.mp x.2]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases' x with x hx\n  simp [hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases' x with x hx\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  rcases x with \u27e8x, hx\u27e9\n  simp [hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  have : (x : \u03b1) \u2264 b := x.2\n  rw [projIic, csInf_eq_of_forall_ge_of_forall_gt_exists_lt (Set.nonempty_Iic.2 this)]\n  exact fun _ hy => hy\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases' x with x hx\n  simp [projIic, hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  ext\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  simp [projIic, Set.mem_Iic]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases' x with x hx\n  simp [projIic, hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  have : (x : \u03b1) \u2264 b := x.2\n  simp [projIic, this]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  rcases x with \u27e8x, hx\u27e9\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  rcases x with \u27e8\u27e8\u27e9, hx\u27e9\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  cases x\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  apply Eq.symm\n  letI : LE Iic := instLEReal\n  exact projIic_apply_self (b := b) x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem projIic_coe (x : Iic b) : projIic b x = x := by\n  rcases x with \u27e8x, hx\u27e9\n  simp [hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  apply Eq.symm\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  apply Finset.mem_image.mp\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  apply Eq.symm\n  simp only [reindexFinsetRange, apply_dite b, dite_eq_ite, ite_true, Finset.mem_range,\n    Finset.mem_image, exists_prop]\n  f_congr with h\n  subst h\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  apply Eq.symm\n  simp [Finset.mem_image, exists_prop]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  simp [Finset.mem_image, Finset.mem_univ, true_and]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8\u27e8_, _\u27e9, rfl\u27e9\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  apply Eq.symm\n  rw [reindexFinsetRange]\n  apply Finset.image_val_injective\n  simp [Finset.ext_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  revert x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8\u27e8i\u27e9, rfl\u27e9; simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  apply Eq.symm\n  simp [reindexFinsetRange, Function.Embedding.apply_eq_iff_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8\u27e8a\u27e9, h\u27e9\n  simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  apply Eq.symm\n  simp [reindexFinsetRange, Function.Embedding.apply_eq_iff_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8a, \u27e8i, rfl\u27e9\u27e9\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8\u27e8i\u27e9, h\u27e9\n  simp [reindexFinsetRange, h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases Finset.mem_image.mp x.prop with \u27e8i, _, rfl\u27e9\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases Finset.mem_image.1 x.2 with \u27e8a, _, rfl\u27e9\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8a, ha\u27e9\n  simp [reindexFinsetRange, ha]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8\u27e8i\u27e9, hx\u27e9\n  simp [hx]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8a, \u27e8_, \u27e8i, rfl\u27e9\u27e9\u27e9\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  cases x\n  simp [reindexFinsetRange]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  simp [reindexFinsetRange, Finset.orderEmbOfFin_apply]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8\u27e8a, ha\u27e9, rfl\u27e9\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  simp [Finset.mem_image, Finset.mem_univ, exists_true_left, Finset.mem_range,\n    Function.Embedding.coeFn_mk, Finset.mem_map, Finset.mem_univ]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8x, hx\u27e9\n  rcases Finset.mem_image.mp hx with \u27e8a, ha, rfl\u27e9\n  simp [ha]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases Finset.mem_image.1 x.2 with \u27e8a, _, rfl\u27e9\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8a, \u27e8_, rfl\u27e9\u27e9; simp [reindexFinsetRange]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  apply Finset.mem_image.2\n  exact \u27e8x, by simp, by simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  rcases x with \u27e8a, ha\u27e9\n  simp [reindexFinsetRange, ha]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  cases' x with x hx\n  simp only [mem_image, exists_prop, reindexFinsetRange, Function.Embedding.coeFn_mk,\n    Finset.mem_univ, true_and] at hx \u22a2\n  rcases hx with \u27e8a, rfl\u27e9\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  apply Finset.mem_image.mp\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem reindexFinsetRange_apply (x : Finset.univ.image b) : b.reindexFinsetRange x = x := by\n  apply Finset.mem_image.mp (Finset.mem_coe.mp x.2)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  unfold angle\n  rw [inner_smul_right, norm_smul, Real.norm_eq_abs, abs_of_nonneg (le_of_lt hr)]\n  field_simp [hr.ne']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  unfold angle\n  rw [inner_smul_right, norm_smul, Real.norm_eq_abs, abs_of_pos hr]\n  field_simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle_eq_arccos_of_nonzero _ (smul_ne_zero hr.ne'), angle_eq_arccos_of_nonzero _ hr.ne']\n  rw [Real.arccos_inj_of_le_one]\n  all_goals positivity\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle_eq_arccos_of_nonzero _ _ hr.ne']\n  rw [angle_eq_arccos_of_nonzero _ _ hr.ne']\n  rw [Real.arccos_inj_of_le_one]\n  all_goals nlinarith [norm_smul_le x (r \u2022 y), norm_smul_le x y]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  unfold angle\n  rw [inner_smul_right, norm_smul, Real.norm_eq_abs, abs_of_nonneg (le_of_lt hr)]\n  ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, Real.arccos_eq_of_eq_cos]\n  <;> rw [inner_smul_right, norm_smul, Real.norm_eq_abs] <;> field_simp [hr.le]\n  <;> ring\n  <;> rw [pow_two] <;> ring\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, Real.arccos_eq_of_eq_cos]\n  rw [\u2190 smul_dot_product]\n  rw [\u2190 smul_assoc]\n  rw [smul_comm]\n  rw [smul_smul]\n  rw [mul_comm]\n  rw [\u2190 mul_div_assoc]\n  rw [mul_div_cancel_left]\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  by_cases hx : x = 0\n  \u00b7 simp [hx]\n  \u00b7 by_cases hy : y = 0\n    \u00b7 simp [hy]\n    \u00b7 rw [angle, angle, Real.arccos_eq_of_cos_eq (cos_eq_cos_of_angle_eq_zero (angle_smul_right_of_pos _ _ hr))]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  simp [angle, Real.arccos_smul_of_nonneg (abs_nonneg r) (abs_pos.mpr hr.ne', hr.le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, real_inner_smul_right, norm_smul, Real.norm_eq_abs, abs_of_nonneg (le_of_lt hr),\n    mul_left_comm, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, inner_smul_right, Real.norm_of_nonneg (mul_nonneg (sq_nonneg _) (norm_nonneg _))]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, Real.arccos_eq_of_eq_cos]\n  rw [Real.cos_arccos_div_norm]\n  rw [Real.cos_arccos_div_norm]\n  rw [norm_smul]\n  rw [Real.norm_eq_abs]\n  rw [abs_of_nonneg (le_of_lt hr)]\n  ring\n  <;>\n  apply le_trans\n  <;>\n  apply norm_nonneg\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, real_inner_smul_right, real_inner_eq_norm_mul_self_iff.mpr hr.ne',\n    norm_smul, Real.norm_eq_abs, abs_of_nonneg hr.le, mul_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  unfold angle\n  rw [inner_smul_right, norm_smul, Real.norm_eq_abs, Real.norm_eq_abs, abs_of_nonneg (le_of_lt hr)]\n  field_simp [hr.ne']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle_eq_arccos_of_nonzero (ne_zero_of_mem_nonzero_singleton x)\n    (ne_zero_of_mem_nonzero_singleton (r \u2022 y)),\n    angle_eq_arccos_of_nonzero (ne_zero_of_mem_nonzero_singleton x)\n    (ne_zero_of_mem_nonzero_singleton y),\n    Real.arccos_inj_of_nonneg_of_le_one\n    (abs_real_inner_div_norm_mul_norm_le_one x (r \u2022 y))\n    (abs_real_inner_div_norm_mul_norm_le_one x y)\n    (by positivity)]\n  rw [real_inner_smul_right, norm_smul, Real.norm_eq_abs, \u2190 mul_assoc]\n  have h\u2081 : 0 < r ^ 2 := by positivity\n  rw [mul_comm, mul_div_assoc, mul_comm, mul_div_assoc]\n  rw [\u2190 mul_div_assoc]\n  rw [abs_of_pos h\u2081]\n  ring\n  <;> simp [h\u2081]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, real_inner_smul_right, norm_smul, Real.norm_eq_abs, abs_of_nonneg (le_of_lt hr),\n    mul_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  unfold angle\n  rw [inner_smul_right, norm_smul, Real.norm_eq_abs, abs_of_nonneg (le_of_lt hr)]\n  field_simp [Real.sqrt_ne_zero'.mpr (lt_of_le_of_lt (norm_nonneg y) hr)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, Real.arccos_eq_of_mem_Icc]\n  exacts [by simp [dot_smul_distrib, norm_smul, hr.le], by simp [smul_nonneg hr.le, norm_nonneg]]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle_eq_arccos_of_nonzero (ne_zero_of_mem_nonzero_singleton x) (ne_zero_of_mem_nonzero_singleton _),\n    angle_eq_arccos_of_nonzero (ne_zero_of_mem_nonzero_singleton x) (ne_zero_of_mem_nonzero_singleton _),\n    Real.arccos_eq_of_cos_eq (cos_angle_smul_right_of_pos x y hr)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  unfold angle\n  rw [inner_smul_right, mul_comm, real_inner_self_eq_norm_mul_norm]\n  field_simp [norm_smul, Real.norm_eq_abs, abs_mul, abs_of_pos hr]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  unfold angle\n  rw [\u2190 mul_one x, \u2190 mul_one y, norm_smul, Real.norm_eq_abs, abs_of_pos hr]\n  field_simp [hr.ne']\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, smul_eq_mul, Real.norm_of_nonneg (le_of_lt hr)]\n  congr 1\n  simp [hr]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  unfold angle\n  rw [inner_smul_right, smul_eq_mul, Real.norm_of_nonneg (le_of_lt hr)]\n  congr 1\n  exact mul_one r\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  unfold angle\n  erw [\u2190 mul_right_inj' (show \u2016x\u2016 \u2260 0 from norm_ne_zero_iff.mpr (ne_zero x))]\n  rw [norm_smul, Real.norm_of_nonneg (le_of_lt hr), \u2190 mul_assoc]\n  simp [hr, mul_left_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, smul_comm]\n  simp [hr]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, Real.arccos_eq_of_cos_eq (by rw [cos_smul_right x hr]; exact cos_angle_smul_right_of_pos _ _ hr)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, Real.arccos_eq_of_eq_cos]\n  rw [InnerProductSpace.cos_angle, InnerProductSpace.cos_angle]\n  field_simp [norm_smul, Real.norm_eq_abs, abs_mul, hr.ne', Real.sqrt_mul, Real.sqrt_pos.2 hr]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle_comm, angle_smul_right_of_pos _ hr, angle_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle_eq_arccos_of_nonzero x (r \u2022 y) (by simp [hr.ne'])]\n  rw [angle_eq_arccos_of_nonzero x y (by simp)]\n  rw [Real.arccos_cos]\n  rw [Real.arccos_cos]\n  linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  rw [angle, angle, norm_smul, Real.norm_eq_abs, abs_of_pos hr, div_smul_eq_div_smul_iff\u2080 hr.ne']\n  rw [\u2190 smul_assoc, smul_eq_mul, Real.norm_eq_abs, abs_mul, abs_of_pos hr, \u2190 mul_div_assoc,\n    mul_comm, mul_div_assoc, div_self hr.ne', mul_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  by_cases hx : x = 0\n  \u00b7 rw [hx, angle_zero_left, angle_zero_left]\n  \u00b7 by_cases hy : y = 0\n    \u00b7 rw [hy, angle_zero_right, angle_zero_right]\n    \u00b7 rw [angle_smul_right _ _ hr]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem angle_smul_right_of_pos (x y : V) {r : \u211d} (hr : 0 < r) : angle x (r \u2022 y) = angle x y := by\n  unfold angle\n  rw [inner_smul_right, norm_smul, Real.norm_eq_abs, Real.norm_eq_abs]\n  rw [Real.arccos_abs]\n  rw [Real.arccos_abs]\n  rw [Real.arccos_eq_iff_eq_arccos]\n  rw [Real.arccos_eq_iff_eq_arccos]\n  ring\n  all_goals positivity\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  refine' \u27e8fun h => _, fun h => _\u27e9\n  \u00b7 have := h.mono (le_perfectClosure F E)\n    exact IsPurelyInseparable.tower_top (F := F)\n  \u00b7 have := le_perfectClosure F E\n    exact (perfectClosure.isPurelyInseparable F E).mono (le_of_lt this)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact \u27e8fun h \u21a6 L.isPurelyInseparable_of_le_perfectClosure h, fun h \u21a6\n    L.le_perfectClosure_of_isPurelyInseparable h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact \u27e8fun h => (perfectClosure.isPurelyInseparable F E).mono h,\n    fun h => (perfectClosure.isPurelyInseparable F E).le_of_le h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact \u27e8fun h \u21a6 \u27e8h\u27e9, fun h \u21a6 h.out\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  refine' \u27e8fun h => _, fun h => le_perfectClosure_of_isPurelyInseparable h\u27e9\n  rw [IsPurelyInseparable, \u2190 IntermediateField.isSeparable_comap_iff]\n  intro x hx\n  apply IntermediateField.mem_perfectClosure_of_separable\n  exact h hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact \u27e8fun h => (perfectClosure.isPurelyInseparable F E).mono h, fun h =>\n    h.perfectClosure_le\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  rw [perfectClosure.isPurelyInseparable_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  rw [perfectClosure.isPurelyInseparable_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  rw [\u2190 LE.le.le_perfectClosure_iff]\n  tauto\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  constructor\n  \u00b7 intro h; exact (isPurelyInseparable_iff_pow_mem E).2 fun n \u21a6 h.trans (minpoly_mem_perfectClosure F E)\n  \u00b7 intro h; exact (le_iff_le _ _).2 (minpoly_perfectClosure_eq E).ge\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  rw [perfectClosure.isPurelyInseparable_iff]\n  constructor <;> intro h <;> exact h.antisymm (le_perfectClosure F E L)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact \u27e8fun h => (perfectClosure.isPurelyInseparable F E).mono h, fun h =>\n    h.perfectClosure\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact \u27e8fun h \u21a6 perfectClosure.isPurelyInseparable_of_le F E h, fun h \u21a6 le_perfectClosure_of_isPurelyInseparable F E h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  refine' \u27e8fun h => _, fun h => _\u27e9\n  exact L.isPurelyInseparable_iff.2 fun x => h (isIntegral_iff.1 x.2).1\n  exact (perfectClosure F E).fieldRange_comp_val.symm.trans_le (fieldRange_val_le L)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  refine' \u27e8fun h => _, fun h => le_perfectClosure\u27e9\n  rintro \u27e8a, rfl\u27e9\n  exact perfectClosure.isPurelyInseparable F E a\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  constructor\n  intro h; exact L.isPurelyInseparable_of_le_perfectClosure h\n  intro h; exact le_perfectClosure_of_isPurelyInseparable h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  refine' \u27e8fun h => _, fun h => _\u27e9\n  case refine'_1 =>\n    rw [\u2190 IntermediateField.isPurelyInseparable_iff]\n    exact (perfectClosure.isPurelyInseparable F E).mono h\n  case refine'_2 =>\n    rw [IntermediateField.isPurelyInseparable_iff] at h\n    exact h.mono le_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  rw [perfectClosure.isPurelyInseparable_iff]\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  constructor <;> intro h\n  case mp =>\n    rw [IsPurelyInseparable]\n    exact fun x hx \u21a6 h hx\n  case mpr =>\n    exact h.le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  apply and_iff_right\n  exact perfectClosure.isPurelyInseparable F E\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  constructor <;> intro h\n  case mp => exact L.isPurelyInseparable_of_le_perfectClosure h\n  case mpr => exact L.le_perfectClosure_of_isPurelyInseparable h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  letI : Algebra F L := IntermediateField.algebra F L\n  exact \u27e8fun h \u21a6 (IntermediateField.isPurelyInseparable_iff F E L).mpr (h.mono le_perfectClosure),\n    fun h \u21a6 le_perfectClosure h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact \u27e8fun h \u21a6 L.isPurelyInseparable_of_le_perfectClosure h, fun h \u21a6\n    L.le_perfectClosure_of_isPurelyInseparable h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  simp [perfectClosure, isPurelyInseparable_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  refine' \u27e8fun h => _, fun h => le_trans h (perfectClosure.isPurelyInseparable F E).le\u27e9\n  obtain \u27e8s, hs\u27e9 := h\n  refine' \u27e8s, fun i => _\u27e9\n  exact (perfectClosure.isPurelyInseparable F E).isPurelyInseparable (hs i)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact \u27e8fun h => h.isPurelyInseparable, fun h => h.perfectClosure_le\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact \u27e8fun h \u21a6 perfectly_inseparable_of_mem_perfectClosure F E h,\n    fun h \u21a6 mem_perfectClosure_of_isPurelyInseparable F E h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact \u27e8fun h \u21a6 (IsPurelyInseparable.lift_equiv F (integralClosure F L) L\n    (fun x \u21a6 \u27e8\u27e8x, subset_perfectClosure F E _\u27e9, x.2, rfl\u27e9) h).1,\n    fun h x hx \u21a6 h _ (IsPurelyInseparable.minpoly_irreducible\n    (norm_num; exact hx) (Algebra.IsIntegral.isIntegral x))\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact \u27e8fun h \u21a6 isPurelyInseparable_of_le_perfectClosure _ h, fun h \u21a6 le_perfectClosure_of_isPurelyInseparable _ h\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  exact (isPurelyInseparable_iff_perfectClosure L).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem le_perfectClosure_iff (L : IntermediateField F E) :\n    L \u2264 perfectClosure F E \u2194 IsPurelyInseparable F L := by\n  constructor <;> intro h\n  swap\n  apply le_perfectClosure_of_isPurelyInseparable\n  assumption\n  rintro \u27e8x, hx\u27e9\n  exact h hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp [PrimeSpectrum.le_iff_specializes, IsLocalization.ateq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp_rw [\u2190 localRing_isField_iff_primeSpectrum_eq_singleton,\n    Localization.subalgebra.ofField_eq_bot_iff]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  ext x\n  simp\n  constructor\n  exact fun \u27e8x, hx\u27e9 =>\n    SetLike.mem_coe.2 <| Subalgebra.zero_mem _\n  rintro rfl\n  exact \u27e80, by simp\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp_rw [Subalgebra.eq_bot_iff]\n  intro x\n  simp_rw [Subalgebra.mem_iInf]\n  intro v\n  apply Classical.not_not.mp\n  intro h\n  rw [Localization.subalgebra_ofField_apply] at h\n  exact\n    (LocalRing.maximalIdeal.isMaximal _).ne_top\n      (Ideal.eq_top_of_isUnit_mem v.asIdeal x (Classical.not_not.mp h))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp [eq_iff_true_of_subsingleton]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  apply le_antisymm\n  \u00b7 exact le_iInf fun v =>\n      show\n        _ \u2264 (Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) :\n          Subalgebra K K)\n        from bot_le\n  \u00b7 exact iInf_le_of_le (\u22a4 : PrimeSpectrum R)\n      (show _ \u2264 (Localization.subalgebra.ofField K _ (\u22a4.asIdeal.primeCompl_le_nonZeroDivisors) :\n        Subalgebra K K) from bot_le)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  ext x\n  rw [Localization.subalgebra.mem_ofField_iff]\n  simp only [Submodule.mem_iInf, Subalgebra.mem_bot]\n  refine \u27e8fun h v => ?_, fun h => ?_\u27e9\n  \u00b7 obtain \u27e8v, hv\u27e9 := h\n    exact \u27e8v, hv\u27e9\n  \u00b7 exact \u27e8fun v => \u27e8v, h\u27e9\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  apply le_antisymm _ bot_le\n  fun c hc => ?_\n  rw [Algebra.mem_iInf] at hc\n  specialize hc \u27e8c.asIdeal, c.IsPrime\u27e9\n  rw [Localization.subalgebra.mem_ofField_iff] at hc\n  simpa using hc\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp [PrimeSpectrum.vanishingIdeal_eq_bot]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp [SetLike.ext_iff]\n  intro x\n  contrapose!\n  intro hx\n  obtain \u27e8v, hv\u27e9 := hx\n  simp [hv] at hv\n  exact hv\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  ext x\n  simp\n  refine' \u27e8fun h => _, fun h => Subalgebra.mem_bot.mpr <| Subtype.ext <| Subtype.ext <| by simp; rfl\u27e9\n  obtain \u27e8v, hv\u27e9 := h\n  by_contra hx\n  exact hv.ne_zero <| Subalgebra.mem_bot.mp hx\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  apply le_bot_iff.mp\n  have h : \u2200 v : PrimeSpectrum R, Localization.subalgebra.ofField K _\n    (v.asIdeal.primeCompl_le_nonZeroDivisors) \u2264 \u22a5 := by\n    intro v\n    exact bot_unique (Localization.subalgebra.ofField_le_ofField_of_le K _ _\n      (v.asIdeal.primeCompl_le_nonZeroDivisors))\n  apply iInf_le_of_le (PrimeSpectrum.zero R)\n  exact h (PrimeSpectrum.zero R)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp only [Subalgebra.iInf_toSubmodule, Submodule.iInf_span,\n    Subalgebra.iInf_algebraMap_eq_iInf_comap_algebraMap,\n    PrimeSpectrum.comap_algebraMap, inf_iInf_eq_iInf_inf_iInf]\n  apply le_antisymm\n  \u00b7 exact iInf_le_of_le \u22a5 (le_refl _)\n  \u00b7 exact iInf_mono fun v =>\n      Subalgebra.algebraMap_le_algebraMap _ _ (v.asIdeal.primeCompl_le_nonZeroDivisors)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  apply eq_bot_of_forall_coes_le\n  intro \u27e8v, hv\u27e9\n  ext x\n  rw [SetLike.mem_coe, Subalgebra.mem_iInf]\n  simp only [Localization.subalgebra.mem_ofField, Set.mem_compl_iff, Submodule.mem_iInf]\n  exact fun h \u27e8y, hy\u27e9 \u27e8z, hz\u27e9 \u21a6 mul_mem h (mul_mem hv (h y))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp_rw [Subalgebra.eq_bot_iff, Set.subset_singleton_iff]\n  intro x\n  refine' \u27e8\u27e8_, _\u27e9, _\u27e9\n  \u00b7 exact \u27e8x, 1, by rw [mul_one]\u27e9\n  \u00b7 rfl\n  rintro \u27e8y, hy\u27e9\n  obtain \u27e8v, hv\u27e9 := PrimeSpectrum.exists_mem_of_mem_iInf x\n  exact hy.trans (Localization.subalgebra.ofField_to_subring K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) hv)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  apply bot_unique\n  simp only [iInf, bot_le, Subalgebra.mem_iInf, Subalgebra.mem_bot]\n  intro x\n  left\n  use 0\n  intro x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp only [\u2190 SetLike.mem_coe, \u2190 bot_eq_zero, \u2190 coe_bot, \u2190 Set.image_univ, \u2190\n    LinearMap.mem_range, \u2190 Cardinal.lift_le, Cardinal.lift_inj, LinearMap.mem_range]\n  aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp_rw [Ideal.iInf_map_eq_bot_iff_mem_prime]\n  intro x hx\n  exact (hx x).mp le_rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simpa using iInf_localization_eq_bot' K R\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  apply le_bot_iff.mp\n  intro x hx\n  induction x using Localization.induction_on with\n  | h_mk f s hf =>\n    rw [Subalgebra.mem_iInf] at hx\n    have : f = 0 := by\n      apply PrimeSpectrum.vanishingIdeal_zero_locus_eq_bot.mp\n      intro v hv\n      exact hx v \u27e8v, rfl\u27e9\n    simp [this]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp_rw [Subalgebra.iInf_localization_eq_iInf_prime]\n  refine iInf_eq_bot.mpr fun v \u21a6 ?_\n  have hv' := Ideal.R_eq_zero_of_dim_one (R := R) v.asIdeal\n  simp_rw [hv']\n  exact (\u22a5 : subalgebra R K).eq_bot\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  refine le_antisymm (le_of_eq ?_) bot_le\n  rw [\u2190 Ideal.prod_quotient_equiv_quotient_ideal_iInf (fun v : PrimeSpectrum R => v.asIdeal)]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  ext x\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  apply le_bot_iff.mp\n  intro x hx\n  rw [Subalgebra.mem_iInf] at hx\n  have hx_zero : x = 0 := by\n    apply Subalgebra.mem_bot.mp\n    exact hx \u22a5 \u27e8le_refl _, by infer_instance\u27e9\n  simp [hx_zero]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp [PrimeSpectrum.iInf_localization_eq_bot]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp_rw [Localization.subalgebra.ofField]\n  apply le_antisymm\n  \u00b7 exact iInf_le_of_le \u22a5 bot_le\n  \u00b7 exact iInf_le_of_le (\u22a5 : PrimeSpectrum R) bot_le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp_rw [iInf, bot_eq_infi, \u2190 Subalgebra.mem_iInf]\n  intro x\n  simp [mem_localization_subalgebra_iff, IsLocalization.map_comp]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp_rw [PrimeSpectrum.localization_map]\n  refine iInf_bot_eq_mk_clm (localization_map R K) ?_\n  simp_rw [mk_eq_mk_iff]\n  exact fun \u27e8x, hx\u27e9 \u27e8y, hy\u27e9 \u21a6 \u27e8x * y, by simpa using mul_mem_mul hx hy\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp_rw [eq_iff_le_and_le, Ideal.le_bot_iff, bot_le]\n  refine \u27e8fun x \u21a6 ?_, fun x \u21a6 ?_\u27e9\n  \u00b7 simp only [le_iInf_iff, bot_le, forall_true_left]\n    exact fun v \u21a6 Ideal.le_of_le_radical (le_of_eq (Localization.subalgebra.ofField_eq_bot K v.asIdeal))\n  \u00b7 exact iInf_le _ \u27e8_, _\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  apply le_antisymm\n  \u00b7 exact le_bot_iff.mpr (by exact iInf_le_of_le \u22a4 (by simp))\n  \u00b7 exact bot_le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  simp_rw [iInf, \u2190 Set.image, PrimeSpectrum.setOf_mem_eq, Set.infs_setOf]\n  simp [Subalgebra.iInf_eq_bot_iff, Localization.subalgebra.ofField, inf_eq_left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem iInf_localization_eq_bot : \u2a05 v : PrimeSpectrum R,\n    Localization.subalgebra.ofField K _ (v.asIdeal.primeCompl_le_nonZeroDivisors) = \u22a5 := by\n  apply le_antisymm\n  \u00b7 rw [eq_bot_iff]\n    rintro x (hx : x = 0)\n    simp only [hx, Submodule.zero_mem]\n  \u00b7 rw [\u2190 bot_eq_zero, le_iInf_iff]\n    intro v\n    exact bot_le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [ContinuousLinearMap.norm_def]\n  apply Real.le_of_le_of_eq\n  \u00b7 exact\n      (mul_le_mul le_rfl (norm_extendTo\ud835\udd5c'_le fr x) (norm_nonneg _)\n        (norm_nonneg _)).trans (le_csup\u209b_of_le ContinuousLinearMap.bounds_bddAbove \u27e8x, rfl\u27e9)\n  \u00b7 rw [mul_comm]\n    exact norm_extendTo\ud835\udd5c'_eq_reApplyOfRealInner fr x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [fr.toLinearMap.extendTo\ud835\udd5c'_apply]\n  convert @norm_smul \ud835\udd5c F _ _ _ _ (fr x) x\n  rw [isROrC_norm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  simpa using fr.toLinearMap.extendTo\ud835\udd5c'_bound x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [fr.toLinearMap.extendTo\ud835\udd5c'_apply]\n  exact ((fr.toLinearMap.extendTo\ud835\udd5c'_is_linear x).le_opNorm x).trans (by norm_cast)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [LinearMap.extendTo\ud835\udd5c'_apply_coe]\n  exact fr.toLinearMap.extendTo\ud835\udd5c'_norm_le x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  norm_cast\n  rw [fr.toLinearMap.extendTo\ud835\udd5c'_apply]\n  apply Complex.abs_le_norm_mul_norm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  by_cases h : x = 0\n  \u00b7 simp [h, mul_zero, norm_zero]\n  \u00b7 rw [\u2190 mul_le_mul_right \u2016x\u2016]\n    simpa [h] using fr.le_opNorm \u27e8x, rfl\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [LinearMap.extendTo\ud835\udd5c'_apply_coe]\n  exact fr.toLinearMap.extendTo\ud835\udd5c'_norm_le x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [fr.toLinearMap.extendTo\ud835\udd5c'_apply]\n  apply Complex.abs_le_norm_mul_norm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [ContinuousLinearMap.norm_def]\n  exact\n    (Real.norm_eq_abs (\u2016fr\u2016 * \u2016x\u2016)).symm \u25b8\n      (abs_le.2\n        \u27e8by\n          nlinarith [fr.le_opNorm x],\n        by\n          nlinarith [fr.le_opNorm x]\u27e9)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  have : \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 = \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \u211d)\u2016 := by\n    simp only [norm_real_part_eq_norm]\n  rw [this]\n  exact\n    ContinuousLinearMap.le_of_opNorm_le _ (fr.toLinearMap.extendTo\ud835\udd5c' x) (mul_nonneg (norm_nonneg _)\n      (norm_nonneg _)) <|\n      calc\n        \u2016\u2191(fr.toLinearMap.extendTo\ud835\udd5c' x)\u2016 \u2264 \u2016fr.toLinearMap\u2016 * \u2016x\u2016 :=\n          LinearMap.extendTo\ud835\udd5c'_norm_le fr.toLinearMap x\n        _ \u2264 \u2016fr\u2016 * \u2016x\u2016 := by gcongr; apply LinearMap.norm_toLinearMap_le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  by_cases hx : x = 0\n  \u00b7 simp_all\n  \u00b7 rw [fr.toLinearMap.extendTo\ud835\udd5c'_apply]\n    exact\n      le_trans (norm_coe_le_norm _ _) (mul_le_mul_of_nonneg_right (norm_extendTo\ud835\udd5c'_le _) (norm_nonneg _))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [fr.toLinearMap.extendTo\ud835\udd5c'_apply]\n  exact nnnorm_real_le_nnnorm_extension_of_real_of_nonneg fr x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  apply le_of_eq\n  simp [fr.le_opNorm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [NormedAddCommGroup.le_norm_iff_of_mul_le (norm_nonneg _)]\n  rw [LinearMap.extendTo\ud835\udd5c'_apply]\n  exact fr.norm_extendTo\ud835\udd5c'_apply_le x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [LinearMap.extendTo\ud835\udd5c'_apply]; apply Complex.abs_re_le_norm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [ContinuousLinearMap.norm_def, Real.norm_eq_abs, \u2190 mul_le_mul_right (norm_nonneg x)]\n  refine' le_trans (mul_le_mul_of_nonneg_right (norm_extendTo\ud835\udd5c'_le fr) (norm_nonneg x)) _\n  simp [abs_mul, Real.norm_eq_abs, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [fr.toLinearMap.extendTo\ud835\udd5c'_apply]\n  apply is_R_or_C.abs_le_norm_mul_norm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [norm_eq_supr_norm]\n  refine' le_csup\u209b (by positivity) _\n  simpa using ((fr.toLinearMap.extendTo\ud835\udd5c' x).is_R_or_C_re).le_norm_self\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [LinearMap.extendTo\ud835\udd5c'_apply_coe]\n  have h := le_of_eq (norm_real_part_eq_norm (\u211d \u2219 fr x) x)\n  have h' := le_opNorm (\ud835\udd5c \u2219 fr x) x\n  have h'' := le_of_eq (by simp [mul_comm, norm_real_part_eq_norm])\n  gcongr\n  exact le_trans h (le_trans h' h'')\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  simp only [ContinuousLinearMap.norm_def]\n  exact Real.norm_le_of_mem_uIcc \u27e8rfl.le, rfl.le\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  simp only [LinearMap.extendTo\ud835\udd5c'_apply, LinearMap.coe_comp, NormedAddGroupHom.coe_toLinearMap,\n    AddHom.coe_toAddMonoidHom]\n  exact fr.toLinearMap.extendTo\ud835\udd5c'_norm_le x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [add_monoid_hom_class.bound_toAddMonoidHom_field]\n  apply le_trans (le_of_eq _)\n  simp [norm_mul, mul_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [LinearMap.extendTo\ud835\udd5c'_apply_coe]\n  exact fr.toLinearMap.extendTo\ud835\udd5c'_bound x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [LinearMap.extendTo\ud835\udd5c'_apply, norm_real_smul]\n  exact mul_le_mul_of_nonneg_right (le_opNorm _ _) (norm_nonneg _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [fr.toLinearMap.extendTo\ud835\udd5c'_apply]\n  apply Complex.abs_le_norm_mul_norm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [\u2190 mul_le_mul_left (by norm_num : (0 : \u211d) < 2)]\n  push_cast\n  convert\n    (fr.toLinearMap.extendTo\ud835\udd5c'_norm_le x (2 * \u2016x\u2016) (by positivity)).trans\n      (mul_le_mul_of_nonneg_right (le_of_eq (fr.norm_toLinearMap_le x).symm) (by positivity))\n  ring_nf\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [LinearMap.extendTo\ud835\udd5c'_apply]\n  norm_cast\n  exact (fr : F \u2192L[\u211d] \u211d).le_opNorm x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [\u2190 mul_le_mul_left (norm_pos_iff.mpr (by infer_instance : (0 : \u211d) < 2))]\n  simpa [two_mul] using (fr.toLinearMap.extendTo\ud835\udd5c'_norm_le x).trans (le_of_eq (by ring))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  apply le_of_abs_le\n  rw [abs_re_le_norm]\n  exact fr.toLinearMap.extendTo\ud835\udd5c'_bound x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [\u2190 mul_one \u2016fr\u2016]\n  exact (fr.toLinearMap.extendTo\ud835\udd5c'_norm_le x).trans (le_of_eq (by ring))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem norm_extendTo\ud835\udd5c'_bound (fr : F \u2192L[\u211d] \u211d) (x : F) :\n    \u2016(fr.toLinearMap.extendTo\ud835\udd5c' x : \ud835\udd5c)\u2016 \u2264 \u2016fr\u2016 * \u2016x\u2016 := by\n  rw [LinearMap.extendTo\ud835\udd5c'_apply, LinearIsometry.norm_map]\n  exact fr.le_opNorm x\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro H <;> simp_all [Nat.minFac_eq_one_iff] <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  cases n <;> simp [minFac]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  intro h\n  have := minFac_le_of_dvd (one_le n) (by simp [h])\n  simpa [h] using this\n  rintro rfl\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h\n  <;> simp_all [minFac]\n  <;> rcases n with (_ | _ | _) <;> simp_all\n  <;> aesop\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  refine \u27e8fun h \u21a6 ?_, fun h \u21a6 ?_\u27e9 <;> simp_all\n  cases n <;> simp_all\n  contradiction\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  case mp =>\n    intro h\n    match n with\n    | 0 => contradiction\n    | 1 => rfl\n    | n + 2 =>\n      have h\u2081 : n.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  case mp =>\n    intro h\n    have := minFac_pos n\n    rw [h] at this\n    norm_num at this\n  case mpr =>\n    intro h\n    rw [h]\n    norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro H\n  next =>\n    rw [\u2190 Nat.one_mul 1] at H\n    cases' n with n\n    \u00b7 simp_all\n    have := minFac_le_of_dvd (n + 1) Nat.succ_pos' (Nat.dvd_refl (Nat.succ n))\n    simp_all\n  next =>\n    rw [H]\n    simp [Nat.minFac_one]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro H\n  <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h <;> simp_all\n  <;> contrapose! h\n  <;> simp_all [minFac_le_of_dvd]\n  <;> omega\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h\n  case mp =>\n    rw [\u2190 Nat.dvd_one]\n    exact minFac_dvd n\n  case mpr =>\n    rw [h]\n    exact minFac_one\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  by_cases n = 1 <;> simp [minFac, *, Nat.minFac_eq_one_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  cases n <;> simp [Nat.minFac_succ, Nat.minFac, Nat.coprime_one_left]\n  <;> norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  intro h\n  have := minFac_pos n\n  rw [h] at this\n  norm_num at this\n  exact this\n  rintro rfl\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h\n  case mp =>\n    have h' := minFac_has_prop <| Nat.one_pos.trans_eq h\n    simp_all\n  case mpr =>\n    rw [h]\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  intro h\n  rw [\u2190 h]\n  exact (minFac_has_prop n).1\n  rintro rfl\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  intro h\n  by_contra!\n  have := minFac_pos n\n  rw [h] at this\n  norm_num at this\n  have := minFac_prime n\n  rw [h] at this\n  exact not_prime_one this\n  rintro rfl\n  norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  haveI := Classical.dec n\n  match n with\n  | 0 =>\n    have : Nat.minFac 0 = 2 := rfl\n    simp [this, Nat.minFac, Nat.find]\n  | 1 =>\n    simp [Nat.minFac, Nat.find]\n  | n + 2 =>\n    simp [Nat.minFac, Nat.find]\n    apply Nat.find_eq_iff\n    simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h <;> simp_all [Nat.minFac_eq] <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  next =>\n    intro h\n    have := minFac_pos n\n    rw [h] at this\n    norm_num at this\n  next =>\n    rintro rfl\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  cases n <;> simp [minFac, Nat.not_succ_le_self]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  intro h\n  by_contra h'\n  have h\u2081 : n.minFac > 1 := (minFac_prime h').one_lt\n  linarith\n  rintro rfl\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h <;> simp_all\n  <;> by_contra! h'\n  <;> have h'' := minFac_has_prop <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h <;> rw [\u2190 Nat.mul_one n] at h <;>\n    exact (Nat.eq_one_of_mul_eq_one_right h).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h <;> simp_all\n  all_goals\n    rcases n with (_ | _ | n)\n    ite_true\n    ite_false\n    apply minFac_pos\n    apply succ_pos\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  intro h\n  have := minFac_le_of_dvd (n := n) (Nat.one_le_iff_ne_zero.2 n.pos_of_ne_zero)\n    (Nat.dvd_of_mod_eq_zero (Nat.mod_one n))\n  linarith\n  rintro rfl\n  rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h <;> simp_all\n  <;> cases n <;> simp_all\n  <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  case mp =>\n    intro h\n    rw [\u2190 Nat.dvd_one]\n    exact minFac_dvd n\n    <;> simp_all [Nat.dvd_one]\n  case mpr =>\n    intro h\n    rw [h]\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor\n  case mp =>\n    intro h\n    have := minFac_pos n\n    rw [h] at this\n    norm_num at this\n  case mpr =>\n    intro h\n    rw [h]\n    norm_num\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h\n  case mp =>\n    rw [\u2190 Nat.dvd_one]\n    exact minFac_dvd n\n  case mpr =>\n    rw [h]\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h\n  \u00b7 by_contra h'\n    have := minFac_pos n\n    rw [h] at this\n    contradiction\n  \u00b7 rw [h]\n    rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem minFac_eq_one_iff {n : \u2115} : minFac n = 1 \u2194 n = 1 := by\n  constructor <;> intro h <;> simp_all\n  <;> norm_num at h <;>\n  exact (Nat.dvd_one.1 (Nat.minFac_dvd n)).symm\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  by_cases h : y \u2264 x\n  next =>\n    rw [sup_of_le_left, inf_of_le_right] <;> assumption\n  next =>\n    rw [sup_of_le_right, inf_of_le_left] <;> exact le_of_not_le h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_comm]\n  rw [sdiff_sup_self]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_eq_right]\n  apply sdiff_le.trans\n  exact inf_le_left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_eq_right]\n  apply sdiff_le_iff.2\n  exact inf_le_left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  by_cases h : y \u2264 x\n  \u00b7 rw [sup_of_le_right h, sdiff_eq_of_le h, inf_of_le_left h]\n  \u00b7 rw [sup_of_le_left (le_sdiff_sup _ _), sdiff_eq_of_not_le h, inf_of_le_right (le_inf_iff.2 \u27e8le_refl x, le_sdiff_sup _ _\u27e9)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [\u2190 sup_sdiff_left_self, sup_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_comm, sup_sdiff_left_self, inf_sup_right, inf_idem]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_eq_right, sdiff_le_iff]\n  exact le_inf le_sup_right le_sup_left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  apply Eq.symm\n  rw [sup_eq_right]\n  apply sdiff_le.trans\n  apply inf_le_left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  apply Eq.symm\n  rw [sup_eq_right]\n  apply le_inf_sdiff\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [\u2190 sup_sdiff_left, sdiff_self, sup_bot_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  simp only [le_antisymm_iff, sup_le_iff, sdiff_le_iff, true_and_iff, le_inf_iff, and_true_iff]\n  refine' \u27e8fun h => h.1.trans <| inf_le_left, fun h => \u27e8h, _\u27e9\u27e9\n  rintro y rfl\n  exact h\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [\u2190 sup_sdiff_right_self, sdiff_sup_self, sup_inf_cancel_right]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [\u2190 sup_sdiff_left, sup_sdiff_self_left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_comm, \u2190 sup_sdiff_left_self, sup_comm]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_comm, sup_eq_left]\n  exact le_sdiff_sup\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_comm, sup_sdiff_left]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [\u2190 sup_sdiff_right_self, sdiff_sup_self, inf_sup_right, sup_inf_self, inf_idem]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_comm, sup_eq_left]\n  exact sdiff_le.trans le_sup_left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_comm, sup_eq_right]\n  apply le_inf_sdiff\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [\u2190 sdiff_bot]\n  apply sdiff_sup_sdiff_cancel\n  apply inf_sdiff_left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_eq_left]\n  exact sdiff_le.trans inf_le_left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  apply Eq.symm\n  rw [sup_eq_right]\n  exact inf_le_left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [\u2190 sup_sdiff_left_self, sdiff_eq, sup_assoc]\n  exact Eq.symm (sup_eq_left.2 inf_le_left)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_eq_right]\n  simp only [le_inf_iff, le_sdiff_iff, and_true]\n  exact \u27e8le_inf (le_refl x) (le_refl x), fun h => h.1\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_comm]\n  rw [sup_eq_right]\n  exact inf_le_left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [eq_comm]\n  apply le_antisymm\n  <;> simp [le_refl]\n  <;> apply le_sdiff_sup\n  <;> apply inf_le_left\n  <;> apply inf_le_right\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  apply le_antisymm\n  apply sup_le\n  apply sdiff_le\n  apply inf_le_left\n  apply le_sup_sdiff\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [\u2190 sup_sdiff_right_self]\n  simp [sup_assoc]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sdiff_eq, sup_comm]\n  apply le_antisymm\n  apply sup_le_sup_right\n  apply inf_le_inf_right\n  apply le_sdiff_sup\n  apply sup_le_sup_right\n  apply inf_le_inf_right\n  apply le_sup_sdiff\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [\u2190 sup_sdiff_left, sdiff_self, sup_bot_eq]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem sup_sdiff_inf (x y : \u03b1) : x \\ y \u2294 x \u2293 y = x := by\n  rw [sup_eq_left]\n  exact sdiff_le.trans inf_le_left\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply Nat.le_antisymm\n  <;> apply le_of_not_lt\n  <;> intro h'\n  <;> specialize h _\n  <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm <;> rw [Nat.le_floor_iff'] <;> try apply h <;> simp [h]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply congr_arg (fun x => \u2191x)\n  exact (Nat.floor_eq_iff (ha := (Nat.cast_nonneg a))).mpr (h 0).mp (Nat.floor_zero \u03b1)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm <;> by_contra h\u2081 <;>\n    obtain \u27e8n, hn\u27e9 := exists_nat_lt (max (\u230aa\u230b\u208a + 1) (\u230ab\u230b\u208a + 1))\n    <;> simp_all [Nat.lt_succ_iff, Nat.le_floor_iff]\n    <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm\n  <;> simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm\n  \u00b7 apply Nat.floor_le_of_le\n    simpa using (h 0).1 (Nat.cast_nonneg _)\n  \u00b7 apply Nat.floor_le_of_le\n    simpa using (h 0).2 (Nat.cast_nonneg _)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  by_contra hf\n  push_neg at hf\n  rcases lt_trichotomy \u230aa\u230b\u208a \u230ab\u230b\u208a with (hlt | hdb | hgt)\n  next hlt =>\n    have h1 : (\u230aa\u230b\u208a : \u03b1) \u2264 a := Nat.floor_le (by positivity)\n    have h2 : (\u230ab\u230b\u208a : \u03b2) < b := Nat.lt_floor_add_one _\n    have h3 : (\u230aa\u230b\u208a : \u03b1) < (\u230ab\u230b\u208a : \u03b2) := by linarith\n    have h4 : (\u230aa\u230b\u208a : \u03b1) < (\u230aa\u230b\u208a : \u03b2) := by linarith [h \u230aa\u230b\u208a]\n    exact lt_irrefl _ (by linarith)\n  next htb =>\n    have h1 : (\u230ab\u230b\u208a : \u03b2) \u2264 b := Nat.floor_le (by positivity)\n    have h2 : (\u230aa\u230b\u208a : \u03b1) < (\u230ab\u230b\u208a : \u03b2) := by linarith [lt_of_le_of_ne htb]\n    exact lt_irrefl _ (by linarith [h \u230aa\u230b\u208a])\n  next hgt =>\n    have h1 : (\u230ab\u230b\u208a : \u03b2) \u2264 b := Nat.floor_le (by positivity)\n    have h2 : (\u230aa\u230b\u208a : \u03b2) < (\u230ab\u230b\u208a : \u03b2) := by linarith [lt_of_le_of_ne hgt.ne]\n    have h3 : (\u230aa\u230b\u208a : \u03b2) < (\u230ab\u230b\u208a : \u03b2) := by linarith\n    exact lt_irrefl _ (by linarith [h \u230ab\u230b\u208a])\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm\n  \u00b7 apply floor_le_of_le\n    specialize h \u230ab\u230b\u208a\n    simp_all\n  \u00b7 apply floor_le_of_le\n    specialize h \u230aa\u230b\u208a\n    simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm <;> rw [le_floor_iff] <;> simpa using h \u230aa\u230b\u208a\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  simp_rw [le_floor_iff] at h\n  rw [Nat.cast_inj]\n  exact_mod_cast h \u230aa\u230b\u208a\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h\u2081 : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b := h\n  apply Nat.cast_injective\n  simp_rw [Nat.cast_floor_eq_cast_floor_iff]\n  exact mod_cast h\u2081 (\u230aa\u230b\u208a)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  simp only [floor_eq_iff, Nat.cast_le] at h \u22a2\n  exact \u27e8fun h\u2081 => (h _).1 h\u2081, fun h\u2082 => (h _).2 h\u2082\u27e9\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply Nat.le_antisymm\n  \u00b7 apply Nat.le_of_not_lt\n    intro hn\n    have h1 := h \u230aa\u230b\u208a\n    have h2 := h \u230ab\u230b\u208a\n    simp at h1 h2\n    linarith\n  \u00b7 apply Nat.le_of_not_lt\n    intro hn\n    have h1 := h \u230ab\u230b\u208a\n    have h2 := h \u230aa\u230b\u208a\n    simp at h1 h2\n    linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply Nat.cast_injective\n  rw [Nat.cast_inj]\n  exact Nat.floor_eq_iff.mpr (h \u230aa\u230b\u208a)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply Nat.cast_injective\n  simp_rw [Nat.cast_max, h, \u2190 Nat.cast_le]\n  exact Nat.floor_le_floor_iff.mpr (le_of_forall_le_of_dense fun n hn => ((h n).mp hn).le)\n  <;> rfl\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm <;> simpa only [le_floor_iff] using h _\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm\n  <;> rw [\u2190 Nat.cast_le (\u03b1 := \u03b1), \u2190 Nat.cast_le (\u03b1 := \u03b2), h]\n  <;> norm_cast\n  <;> linarith\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm\n  \u00b7 have h\u2081 : (\u230aa\u230b\u208a : \u03b1) \u2264 a := Nat.floor_le (show 0 \u2264 a from (by linarith [h 0]))\n    have h\u2082 : (\u230ab\u230b\u208a : \u03b2) \u2264 b := Nat.floor_le (show 0 \u2264 b from (by linarith [h 0]))\n    exact_mod_cast le_of_le_of_eq (h\u2081.trans ((h \u230aa\u230b\u208a).mpr (by exact_mod_cast h\u2082))) (by simp)\n  \u00b7 have h\u2081 : (\u230ab\u230b\u208a : \u03b2) \u2264 b := Nat.floor_le (show 0 \u2264 b from (by linarith [h 0]))\n    have h\u2082 : (\u230aa\u230b\u208a : \u03b1) \u2264 a := Nat.floor_le (show 0 \u2264 a from (by linarith [h 0]))\n    exact_mod_cast le_of_le_of_eq (h\u2081.trans ((h \u230ab\u230b\u208a).mpr (by exact_mod_cast h\u2082))) (by simp)\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h\u2080 : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b := h\n  apply le_antisymm\n  \u00b7 apply Nat.le_floor.2\n    apply Int.toNat_le.2\n    apply (h\u2080 <| \u230aa\u230b\u208a).1\n    apply Nat.floor_le\n  \u00b7 apply Nat.le_floor.2\n    apply Int.toNat_le.2\n    apply (h\u2080 <| \u230ab\u230b\u208a).2\n    apply Nat.floor_le\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h\u2080 := h 0\n  have h\u2081 := h 1\n  simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm <;>\n  apply le_floor_iff.2 <;>\n  simpa [h, Nat.cast_le] using le_floor_iff.1\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h\u2081 : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2192 (n : \u03b2) \u2264 b := fun n hn => (h n).1 hn\n  have h\u2082 : \u2200 n : \u2115, (n : \u03b2) \u2264 b \u2192 (n : \u03b1) \u2264 a := fun n hn => (h n).2 hn\n  apply le_antisymm\n  exacts [Nat.floor_le_of_le' (h\u2081 _), Nat.floor_le_of_le' (h\u2082 _)]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm\n  \u00b7 apply Nat.floor_le_of_le\n    specialize h \u230aa\u230b\u208a\n    simp_all\n  \u00b7 apply Nat.le_floor_of_le\n    specialize h \u230ab\u230b\u208a\n    simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h\u2080 : (\u230aa\u230b\u208a : \u03b1) \u2264 a := by exact_mod_cast Nat.floor_le (zero_le a)\n  have h\u2081 : (\u230ab\u230b\u208a : \u03b2) \u2264 b := by exact_mod_cast Nat.floor_le (zero_le b)\n  have h\u2082 : (\u230aa\u230b\u208a : \u03b1) \u2264 b := by\n    exact_mod_cast (h \u230aa\u230b\u208a).1 (Nat.floor_le (zero_le a))\n  have h\u2083 : (\u230ab\u230b\u208a : \u03b2) \u2264 a := by\n    exact_mod_cast (h \u230ab\u230b\u208a).2 (Nat.floor_le (zero_le b))\n  exact_mod_cast le_antisymm (Nat.floor_le (zero_le a)) (Nat.floor_le (zero_le b))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  rw [le_antisymm_iff]\n  refine' \u27e8_, _\u27e9\n  <;> apply floor_le\n  <;> simpa using h \u230aa\u230b\u208a\n  <;> simpa using h \u230ab\u230b\u208a\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm\n  \u00b7 specialize h \u230aa\u230b\u208a\n    simp_all\n  \u00b7 specialize h \u230ab\u230b\u208a\n    simp_all\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm <;>\n    simp_all [le_floor_iff]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply le_antisymm\n  <;> rw [Floor.floor_le]\n  <;> have h\u2080 : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b := fun n => h n\n  <;> have h\u2081 : (\u230aa\u230b\u208a : \u03b1) \u2264 a := Floor.le_floor\n  <;> have h\u2082 : (\u230ab\u230b\u208a : \u03b2) \u2264 b := Floor.le_floor\n  <;> have h\u2083 : (\u230aa\u230b\u208a : \u03b1) \u2264 (\u230ab\u230b\u208a : \u03b2) := by\n    simp_all only [h\u2080, h\u2081, h\u2082, Nat.cast_le]\n    exact h\u2081.trans (h \u230aa\u230b\u208a).mp (h \u230ab\u230b\u208a).mpr h\u2082\n  <;> simp_all only [Nat.cast_le]\n  <;> assumption\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply Nat.cast_injective\n  simp_rw [\u2190 h]\n  simp\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  simp only [le_antisymm_iff, le_floor_iff] at h \u22a2\n  apply And.intro <;> simp_all [Nat.cast_le]\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  have h\u2080 : 0 \u2264 a \u2194 0 \u2264 b := by simpa using h 0\n  have h\u2081 : \u230aa\u230b\u208a \u2264 \u230ab\u230b\u208a \u2194 a \u2264 b := by\n    simp [Nat.floor_le, h\u2080]\n  have h\u2082 : \u230ab\u230b\u208a \u2264 \u230aa\u230b\u208a \u2194 b \u2264 a := by\n    simp [Nat.le_floor, h\u2080]\n  exact le_antisymm (h\u2081.1 (le_of_not_lt (mt h\u2082.2 (not_lt_of_le (Nat.floor_le (h\u2080.1 (Nat.cast_nonneg _)))))))\n    (h\u2081.1 (le_of_not_lt (mt h\u2082.2 (not_lt_of_le (Nat.floor_le (h\u2080.2 (Nat.cast_nonneg _)))))))\n", "\nimport Mathlib\nimport Aesop\nset_option maxHeartbeats 0\n open BigOperators Real Nat Topology Rat\ntheorem floor_congr (h : \u2200 n : \u2115, (n : \u03b1) \u2264 a \u2194 (n : \u03b2) \u2264 b) : \u230aa\u230b\u208a = \u230ab\u230b\u208a := by\n  apply Nat.le_antisymm\n  \u00b7 apply Nat.le_of_not_lt\n    intro h\u2081\n    have h\u2082 := h _\n    simp at h\u2082\n    have h\u2083 := h _\n    simp at h\u2083\n    exact h\u2082.not_lt (Nat.lt_of_lt_of_le h\u2081 (Nat.floor_le h\u2083))\n  \u00b7 apply Nat.le_of_not_lt\n    intro h\u2081\n    have h\u2082 := h _\n    simp at h\u2082\n    have h\u2083 := h _\n    simp at h\u2083\n    exact h\u2083.not_lt (Nat.lt_of_lt_of_le h\u2081 (Nat.floor_le h\u2082))\n"]